{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"cert-manager","text":"<p>cert-manager \u6587\u6863\u4e3b\u9875</p> <p>cert-manager \u5728 Kubernetes \u96c6\u7fa4\u4e2d\u589e\u52a0\u4e86\u8bc1\u4e66\u548c\u8bc1\u4e66\u9881\u53d1\u8005\u4f5c\u4e3a\u6e90\u7c7b\u578b\uff0c\u7b80\u5316\u4e86\u8bc1\u4e66\u7684\u83b7\u53d6\u3001\u66f4\u65b0\u548c\u4f7f\u7528\u8fc7\u7a0b\u3002</p> <p>\u5b83\u53ef\u4ee5\u4ece\u5404\u79cd\u53d7\u652f\u6301\u7684\u6765\u6e90\u9881\u53d1\u8bc1\u4e66\uff0c\u5305\u62ecLet's Encrypt\uff0c HashiCorp Vault\u548cVenafi\u4ee5\u53ca\u79c1\u6709 PKI\u3002</p> <p>\u5b83\u5c06\u786e\u4fdd\u8bc1\u4e66\u662f\u6709\u6548\u7684\u548c\u6700\u65b0\u7684\uff0c\u5e76\u5c1d\u8bd5\u5728\u8fc7\u671f\u524d\u7684\u914d\u7f6e\u65f6\u95f4\u66f4\u65b0\u8bc1\u4e66\u3002</p> <p>\u5b83\u677e\u6563\u5730\u57fa\u4e8ekube-lego\u7684\u5de5\u4f5c\uff0c\u5e76\u501f\u9274\u4e86\u5176\u4ed6\u7c7b\u4f3c\u9879\u76ee\u7684\u4e00\u4e9b\u667a\u6167\uff0c\u5982kube-cert-manager\u3002</p> <p></p> <p>\u672c\u7f51\u7ad9\u63d0\u4f9b\u4e86\u9879\u76ee\u7684\u5168\u90e8\u6280\u672f\u6587\u4ef6\uff0c\u53ef\u4f5c\u4e3a\u53c2\u8003;\u5982\u679c\u60a8\u89c9\u5f97\u6709\u4ec0\u4e48\u9057\u6f0f\u7684\uff0c\u8bf7\u544a\u8bc9\u6211\u4eec\uff0c\u6216\u8005\u901a\u8fc7 PR\u8865\u5145\u3002</p>"},{"location":"cli/","title":"CLI \u53c2\u8003","text":"<p>\u67e5\u770b\u6211\u4eec\u7684\u5404\u79cd CLI \u5de5\u5177\u7684<code>--help</code>\u8f93\u51fa\uff0c\u5305\u62ec\u90a3\u4e9b\u5728\u96c6\u7fa4\u4e2d\u7684\u5bb9\u5668\u4e2d\u8fd0\u884c\u7684\u5de5\u5177\u3002 \u5982\u679c\u60a8\u9700\u8981\u8c03\u6574\u4e00\u4e2a\u9009\u9879\u6216\u9700\u8981\u68c0\u67e5\u54ea\u4e9b\u503c\u662f\u6709\u6548\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9!</p>"},{"location":"cli/acmesolver/","title":"acmesolver CLI reference","text":"<pre><code>HTTP server used to solve ACME challenges.\n\nUsage:\n  acmesolver [flags]\n\nFlags:\n      --domain string     the domain name to verify\n  -h, --help              help for acmesolver\n      --key string        the challenge key to respond with\n      --listen-port int   the port number to listen on for connections (default 8089)\n      --token string      the challenge token to verify against\n</code></pre>"},{"location":"cli/cainjector/","title":"cainjector CLI reference","text":"<pre><code>cert-manager CA injector is a Kubernetes addon to automate the injection of CA data into\nwebhooks and APIServices from cert-manager certificates.\n\nIt will ensure that annotated webhooks and API services always have the correct\nCA data from the referenced certificates, which can then be used to serve API\nservers and webhook servers.\n\nUsage:\n  ca-injector [flags]\n\nFlags:\n      --add_dir_header                            If true, adds the file directory to the header of the log messages\n      --alsologtostderr                           log to standard error as well as files (no effect when -logtostderr=true)\n      --enable-profiling                          Enable profiling for cainjector\n      --feature-gates mapStringBool               A set of key=value pairs that describe feature gates for alpha/experimental features. Options are:\n                                                  AllAlpha=true|false (ALPHA - default=false)\n                                                  AllBeta=true|false (BETA - default=false)\n  -h, --help                                      help for ca-injector\n      --kubeconfig string                         Paths to a kubeconfig. Only required if out-of-cluster.\n      --leader-elect                              If true, cainjector will perform leader election between instances to ensure no more than one instance of cainjector operates at a time (default true)\n      --leader-election-lease-duration duration   The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled. (default 1m0s)\n      --leader-election-namespace string          Namespace used to perform leader election. Only used if leader election is enabled (default \"kube-system\")\n      --leader-election-renew-deadline duration   The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled. (default 40s)\n      --leader-election-retry-period duration     The duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled. (default 15s)\n      --log-flush-frequency duration              Maximum number of seconds between log flushes (default 5s)\n      --log_backtrace_at traceLocation            when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                            If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                           If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint                    Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                               log to standard error instead of files (default true)\n      --namespace string                          If set, this limits the scope of cainjector to a single namespace. If set, cainjector will not update resources with certificates outside of the configured namespace.\n      --one_output                                If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --profiler-address string                   Address of the Go profiler (pprof) if enabled. This should never be exposed on a public interface. (default \"localhost:6060\")\n      --skip_headers                              If true, avoid header prefixes in the log messages\n      --skip_log_headers                          If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity                  logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=false) (default 2)\n  -v, --v Level                                   number for the log level verbosity\n      --vmodule moduleSpec                        comma-separated list of pattern=N settings for file-filtered logging\n</code></pre>"},{"location":"cli/cmctl/","title":"cmctl CLI \u53c2\u8003","text":"<pre><code>cmctl is a CLI tool manage and configure cert-manager resources for Kubernetes\n\nUsage: cmctl [command]\nAvailable Commands:\n  approve      Approve a CertificateRequest\n  check        Check cert-manager components\n  convert      Convert cert-manager config files between different API versions\n  create       Create cert-manager resources\n  deny         Deny a CertificateRequest\n  experimental Interact with experimental features\n  help         Help about any command\ninspect      Get details on certificate related resources\n  renew        Mark a Certificate for manual renewal\n  status       Get details on current status of cert-manager resources\n  upgrade      Tools that assist in upgrading cert-manager\n  version      Print the cert-manager CLI version and the deployed cert-manager version\n\nFlags:\n  -h, --help                           help for cmctl\n      --log-flush-frequency duration   Maximum number of seconds between log flushes (default 5s)\nUse \"cmctl [command] --help\" for more information about a command.\n</code></pre>"},{"location":"cli/controller/","title":"controller CLI reference","text":"<pre><code>cert-manager is a Kubernetes addon to automate the management and issuance of\nTLS certificates from various issuing sources.\n\nIt will ensure certificates are valid and up to date periodically, and attempt\nto renew certificates at an appropriate time before expiry.\n\nUsage:\n  cert-manager-controller [flags]\n\nFlags:\n      --acme-http01-solver-image string                     The docker image to use to solve ACME HTTP01 challenges. You most likely will not need to change this parameter unless you are testing a new feature or developing cert-manager. (default \"quay.io/jetstack/cert-manager-acmesolver:canary\")\n      --acme-http01-solver-nameservers strings              A list of comma separated dns server endpoints used for ACME HTTP01 check requests. This should be a list containing host and port, for example 8.8.8.8:53,8.8.4.4:53\n      --acme-http01-solver-resource-limits-cpu string       Defines the resource limits CPU size when spawning new ACME HTTP01 challenge solver pods. (default \"100m\")\n      --acme-http01-solver-resource-limits-memory string    Defines the resource limits Memory size when spawning new ACME HTTP01 challenge solver pods. (default \"64Mi\")\n      --acme-http01-solver-resource-request-cpu string      Defines the resource request CPU size when spawning new ACME HTTP01 challenge solver pods. (default \"10m\")\n      --acme-http01-solver-resource-request-memory string   Defines the resource request Memory size when spawning new ACME HTTP01 challenge solver pods. (default \"64Mi\")\n      --add_dir_header                                      If true, adds the file directory to the header of the log messages\n      --alsologtostderr                                     log to standard error as well as files (no effect when -logtostderr=true)\n      --auto-certificate-annotations strings                The annotation consumed by the ingress-shim controller to indicate a ingress is requesting a certificate (default [kubernetes.io/tls-acme])\n      --cluster-issuer-ambient-credentials                  Whether a cluster-issuer may make use of ambient credentials for issuers. 'Ambient Credentials' are credentials drawn from the environment, metadata services, or local files which are not explicitly configured in the ClusterIssuer API object. When this flag is enabled, the following sources for credentials are also used: AWS - All sources the Go SDK defaults to, notably including any EC2 IAM roles available via instance metadata. (default true)\n      --cluster-resource-namespace string                   Namespace to store resources owned by cluster scoped resources such as ClusterIssuer in. This must be specified if ClusterIssuers are enabled. (default \"kube-system\")\n      --controllers strings                                 A list of controllers to enable. '--controllers=*' enables all on-by-default controllers, '--controllers=foo' enables just the controller named 'foo', '--controllers=*,-foo' disables the controller named 'foo'.\n                                                            All controllers: issuers, clusterissuers, certificates-metrics, ingress-shim, gateway-shim, orders, challenges, certificaterequests-issuer-acme, certificaterequests-approver, certificaterequests-issuer-ca, certificaterequests-issuer-selfsigned, certificaterequests-issuer-vault, certificaterequests-issuer-venafi, certificates-trigger, certificates-issuing, certificates-key-manager, certificates-request-manager, certificates-readiness, certificates-revision-manager (default [*])\n      --copied-annotation-prefixes strings                  Specify which annotations should/shouldn't be copiedfrom Certificate to CertificateRequest and Order, as well as from CertificateSigningRequest to Order, by passing a list of annotation key prefixes.A prefix starting with a dash(-) specifies an annotation that shouldn't be copied. Example: '*,-kubectl.kuberenetes.io/'- all annotationswill be copied apart from the ones where the key is prefixed with 'kubectl.kubernetes.io/'. (default [*,-kubectl.kubernetes.io/,-fluxcd.io/,-argocd.argoproj.io/])\n      --default-issuer-group string                         Group of the Issuer to use when the tls is requested but issuer group is not specified on the ingress resource. (default \"cert-manager.io\")\n      --default-issuer-kind string                          Kind of the Issuer to use when the tls is requested but issuer kind is not specified on the ingress resource. (default \"Issuer\")\n      --default-issuer-name string                          Name of the Issuer to use when the tls is requested but issuer name is not specified on the ingress resource.\n      --dns01-check-retry-period duration                   The duration the controller should wait between a propagation check. Despite the name, this flag is used to configure the wait period for both DNS01 and HTTP01 challenge propagation checks. For DNS01 challenges the propagation check verifies that a TXT record with the challenge token has been created. For HTTP01 challenges the propagation check verifies that the challenge token is served at the challenge URL.This should be a valid duration string, for example 180s or 1h (default 10s)\n      --dns01-recursive-nameservers strings                 A list of comma separated dns server endpoints used for DNS01 check requests. This should be a list containing host and port, for example 8.8.8.8:53,8.8.4.4:53\n      --dns01-recursive-nameservers-only                    When true, cert-manager will only ever query the configured DNS resolvers to perform the ACME DNS01 self check. This is useful in DNS constrained environments, where access to authoritative nameservers is restricted. Enabling this option could cause the DNS01 self check to take longer due to caching performed by the recursive nameservers.\n      --enable-certificate-owner-ref                        Whether to set the certificate resource as an owner of secret where the tls certificate is stored. When this flag is enabled, the secret will be automatically removed when the certificate resource is deleted.\n      --enable-profiling                                    Enable profiling for controller.\n      --feature-gates mapStringBool                         A set of key=value pairs that describe feature gates for alpha/experimental features. Options are:\n                                                            AdditionalCertificateOutputFormats=true|false (ALPHA - default=false)\n                                                            AllAlpha=true|false (ALPHA - default=false)\n                                                            AllBeta=true|false (BETA - default=false)\n                                                            ExperimentalCertificateSigningRequestControllers=true|false (ALPHA - default=false)\n                                                            ExperimentalGatewayAPISupport=true|false (ALPHA - default=false)\n                                                            LiteralCertificateSubject=true|false (ALPHA - default=false)\n                                                            ServerSideApply=true|false (ALPHA - default=false)\n                                                            StableCertificateRequestName=true|false (ALPHA - default=false)\n                                                            ValidateCAA=true|false (ALPHA - default=false)\n  -h, --help                                                help for cert-manager-controller\n      --issuer-ambient-credentials                          Whether an issuer may make use of ambient credentials. 'Ambient Credentials' are credentials drawn from the environment, metadata services, or local files which are not explicitly configured in the Issuer API object. When this flag is enabled, the following sources for credentials are also used: AWS - All sources the Go SDK defaults to, notably including any EC2 IAM roles available via instance metadata.\n      --kube-api-burst int                                  the maximum burst queries-per-second of requests sent to the Kubernetes apiserver (default 50)\n      --kube-api-qps float32                                indicates the maximum queries-per-second requests to the Kubernetes apiserver (default 20)\n      --kubeconfig string                                   Paths to a kubeconfig. Only required if out-of-cluster.\n      --leader-elect                                        If true, cert-manager will perform leader election between instances to ensure no more than one instance of cert-manager operates at a time (default true)\n      --leader-election-lease-duration duration             The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled. (default 1m0s)\n      --leader-election-namespace string                    Namespace used to perform leader election. Only used if leader election is enabled (default \"kube-system\")\n      --leader-election-renew-deadline duration             The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled. (default 40s)\n      --leader-election-retry-period duration               The duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled. (default 15s)\n      --log-flush-frequency duration                        Maximum number of seconds between log flushes (default 5s)\n      --log_backtrace_at traceLocation                      when logging hits line file:N, emit a stack trace (default :0)\n      --log_dir string                                      If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log_file string                                     If non-empty, use this log file (no effect when -logtostderr=true)\n      --log_file_max_size uint                              Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                                         log to standard error instead of files (default true)\n      --master string                                       Optional apiserver host address to connect to. If not specified, autoconfiguration will be attempted.\n      --max-concurrent-challenges int                       The maximum number of challenges that can be scheduled as 'processing' at once. (default 60)\n      --metrics-listen-address string                       The host and port that the metrics endpoint should listen on. (default \"0.0.0.0:9402\")\n      --namespace string                                    If set, this limits the scope of cert-manager to a single namespace and ClusterIssuers are disabled. If not specified, all namespaces will be watched\n      --one_output                                          If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --profiler-address string                             The host and port that Go profiler should listen on, i.e localhost:6060. Ensure that profiler is not exposed on a public address. Profiler will be served at /debug/pprof. (default \"localhost:6060\")\n      --skip_headers                                        If true, avoid header prefixes in the log messages\n      --skip_log_headers                                    If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity                            logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=false) (default 2)\n  -v, --v Level                                             number for the log level verbosity\n      --vmodule moduleSpec                                  comma-separated list of pattern=N settings for file-filtered logging\n</code></pre>"},{"location":"cli/webhook/","title":"webhook CLI reference","text":"<pre><code>Webhook component providing API validation, mutation and conversion functionality for cert-manager (canary) ()\n\nUsage:\n  webhook [flags]\n\nFlags:\n      --add-dir-header                               If true, adds the file directory to the header of the log messages\n      --alsologtostderr                              log to standard error as well as files (no effect when -logtostderr=true)\n      --api-server-host string                       Optional apiserver host address to connect to. If not specified, autoconfiguration will be attempted.\n      --config string                                Path to a file containing a WebhookConfiguration object used to configure the webhook\n      --dynamic-serving-ca-secret-name string        name of the secret used to store the CA that signs serving certificates certificates\n      --dynamic-serving-ca-secret-namespace string   namespace of the secret used to store the CA that signs serving certificates\n      --dynamic-serving-dns-names strings            DNS names that should be present on certificates generated by the dynamic serving CA\n      --enable-profiling                             Enable profiling for webhook.\n      --feature-gates mapStringBool                  A set of key=value pairs that describe feature gates for alpha/experimental features. Options are:\n                AdditionalCertificateOutputFormats=true|false (ALPHA - default=false)\n                AllAlpha=true|false (ALPHA - default=false)\n                AllBeta=true|false (BETA - default=false)\n                ExperimentalCertificateSigningRequestControllers=true|false (ALPHA - default=false)\n                ExperimentalGatewayAPISupport=true|false (ALPHA - default=false)\n                LiteralCertificateSubject=true|false (ALPHA - default=false)\n                ServerSideApply=true|false (ALPHA - default=false)\n                StableCertificateRequestName=true|false (ALPHA - default=false)\n                ValidateCAA=true|false (ALPHA - default=false)\n      --healthz-port int                             port number to listen on for insecure healthz connections (default 6080)\n  -h, --help                                         help for webhook\n      --kubeconfig string                            optional path to the kubeconfig used to connect to the apiserver. If not specified, in-cluster-config will be used\n      --log-backtrace-at traceLocation               when logging hits line file:N, emit a stack trace (default :0)\n      --log-dir string                               If non-empty, write log files in this directory (no effect when -logtostderr=true)\n      --log-file string                              If non-empty, use this log file (no effect when -logtostderr=true)\n      --log-file-max-size uint                       Defines the maximum size a log file can grow to (no effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum file size is unlimited. (default 1800)\n      --logtostderr                                  log to standard error instead of files (default true)\n      --one-output                                   If true, only write logs to their native severity level (vs also writing to each lower severity level; no effect when -logtostderr=true)\n      --profiler-address string                      Address of the Go profiler (pprof). This should never be exposed on a public interface. If this flag is not set, the profiler is not run. (default \"localhost:6060\")\n      --secure-port int                              port number to listen on for secure TLS connections (default 6443)\n      --skip-headers                                 If true, avoid header prefixes in the log messages\n      --skip-log-headers                             If true, avoid headers when opening log files (no effect when -logtostderr=true)\n      --stderrthreshold severity                     logs at or above this threshold go to stderr when writing to files and stderr (no effect when -logtostderr=true or -alsologtostderr=false) (default 2)\n      --tls-cert-file string                         path to the file containing the TLS certificate to serve with\n      --tls-cipher-suites strings                    Comma-separated list of cipher suites for the server. If omitted, the default Go cipher suites will be use.  Possible values: TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_RC4_128_SHA,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_RC4_128_SHA\n      --tls-min-version string                       Minimum TLS version supported. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13\n      --tls-private-key-file string                  path to the file containing the TLS private key to serve with\n  -v, --v Level                                      number for the log level verbosity\n      --vmodule moduleSpec                           comma-separated list of pattern=N settings for file-filtered logging\n</code></pre>"},{"location":"concepts/","title":"\u6982\u5ff5","text":"<p>cert-manager \u7531\u51e0\u4e2a\u7ec4\u4ef6\u548c\u601d\u60f3\u7ec4\u6210\u3002 \u672c\u8282\u5728\u6982\u5ff5\u5c42\u9762\u4e0a\u63cf\u8ff0\u5b83\u4eec\uff0c\u4ee5\u5e2e\u52a9\u7406\u89e3 cert-manager \u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002</p> <p>\u5982\u679c\u4f60\u521a\u521a\u5f00\u59cb\uff0c\u4f60\u53ef\u80fd\u4e0d\u9700\u8981\u8fd9\u4e2a\u90e8\u5206;\u53ef\u4ee5\u67e5\u770b\u624b\u518c\u3002</p>"},{"location":"concepts/acme-orders-challenges/","title":"ACME \u8ba2\u5355\u548c\u6311\u6218","text":"<p>cert-manager \u652f\u6301\u4f7f\u7528ACME \u9881\u53d1\u8005\u4ece ACME \u670d\u52a1\u5668(\u5305\u62ecLet's Encrypt)\u8bf7\u6c42\u8bc1\u4e66\u3002 \u8fd9\u4e9b\u8bc1\u4e66\u901a\u5e38\u5728\u516c\u5171 Internet \u4e0a\u53d7\u5230\u5927\u591a\u6570\u8ba1\u7b97\u673a\u7684\u4fe1\u4efb\u3002 \u4e3a\u4e86\u6210\u529f\u8bf7\u6c42\u8bc1\u4e66\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u5fc5\u987b\u89e3\u51b3 ACME \u6311\u6218\uff0c\u4ee5\u8bc1\u660e\u5ba2\u6237\u7aef\u62e5\u6709\u88ab\u8bf7\u6c42\u7684 DNS \u5730\u5740\u3002</p> <p>\u4e3a\u4e86\u5b8c\u6210\u8fd9\u4e9b\u6311\u6218\uff0ccert-manager \u5f15\u5165\u4e86\u4e24\u79cd<code>CustomResource</code> \u7c7b\u578b;<code>Orders</code> \u548c <code>Challenges</code>\u3002</p>"},{"location":"concepts/acme-orders-challenges/#orders","title":"Orders(\u8ba2\u5355)","text":"<p>ACME \u9881\u53d1\u8005\u4f7f\u7528<code>Order</code>\u6e90\u7ba1\u7406\u5df2\u7b7e\u540d TLS \u8bc1\u4e66\u7684 ACME 'order'\u7684\u751f\u547d\u5468\u671f\u3002 \u66f4\u591a\u5173\u4e8e ACME \u8ba2\u5355\u548c\u57df\u9a8c\u8bc1\u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728Let\u2019s Encrypt \u7f51\u7ad9\u4e0a\u627e\u5230\u3002 \u8ba2\u5355\u8868\u793a\u4e00\u4e2a\u8bc1\u4e66\u8bf7\u6c42\uff0c\u8be5\u8bc1\u4e66\u8bf7\u6c42\u5c06\u5728\u5f15\u7528 ACME \u9881\u53d1\u8005\u7684\u65b0<code>CertificateRequest</code>\u6e90\u521b\u5efa\u4e4b\u540e\u81ea\u52a8\u521b\u5efa\u3002 \u4e00\u65e6<code>Certificate</code>\u6e90\u88ab\u521b\u5efa\uff0c\u5176\u89c4\u683c\u88ab\u66f4\u6539\u6216\u9700\u8981\u66f4\u65b0\uff0c<code>CertificateRequest</code>\u6e90\u5c31\u4f1a\u7531 cert-manager \u81ea\u52a8\u521b\u5efa\u3002</p> <p>\u4f5c\u4e3a\u6700\u7ec8\u7528\u6237\uff0c\u60a8\u6c38\u8fdc\u4e0d\u9700\u8981\u624b\u52a8\u521b\u5efa<code>Order</code> \u6e90\u3002 \u4e00\u65e6\u521b\u5efa\uff0c<code>Order</code> \u5c31\u4e0d\u80fd\u66f4\u6539\u3002 \u76f8\u53cd\uff0c\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684<code>Order</code> \u6e90\u3002</p> <p><code>Order</code>\u6e90\u4e3a\u8be5'order'\u5c01\u88c5\u4e86\u591a\u4e2a ACME'challenges'\uff0c\u56e0\u6b64\uff0c\u5c06\u7ba1\u7406\u4e00\u4e2a\u6216\u591a\u4e2a<code>Challenge</code>\u6e90\u3002</p>"},{"location":"concepts/acme-orders-challenges/#challenge","title":"Challenge(\u6311\u6218)","text":"<p>ACME \u9881\u53d1\u8005\u4f7f\u7528<code>Challenge</code>\u6e90\u6765\u7ba1\u7406\u5fc5\u987b\u5b8c\u6210\u7684 ACME'challenge'\u7684\u751f\u547d\u5468\u671f\uff0c\u4ee5\u5b8c\u6210\u5355\u4e2a DNS \u540d\u79f0/\u6807\u8bc6\u7b26\u7684'authorization'\u3002</p> <p>\u521b\u5efa<code>Order</code>\u6e90\u65f6\uff0c\u8ba2\u5355\u63a7\u5236\u5668\u5c06\u4e3a ACME \u670d\u52a1\u5668\u6b63\u5728\u6388\u6743\u7684\u6bcf\u4e2a DNS \u540d\u79f0\u521b\u5efa<code>Challenge</code>\u6e90\u3002</p> <p>\u4f5c\u4e3a\u6700\u7ec8\u7528\u6237\uff0c\u60a8\u6c38\u8fdc\u4e0d\u9700\u8981\u624b\u52a8\u521b\u5efa<code>Challenge</code>\u6e90\u3002 \u4e00\u65e6\u521b\u5efa\uff0c<code>Challenge</code>\u5c31\u4e0d\u80fd\u66f4\u6539\u3002 \u76f8\u53cd\uff0c\u5fc5\u987b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684<code>Challenge</code>\u6e90\u3002</p>"},{"location":"concepts/acme-orders-challenges/#_1","title":"\u6311\u6218\u751f\u547d\u5468\u671f","text":"<p>\u5728\u4e00\u4e2a<code>Challenge</code>\u6e90\u88ab\u521b\u5efa\u4e4b\u540e\uff0c\u5b83\u6700\u521d\u4f1a\u88ab\u6392\u961f\u7b49\u5f85\u5904\u7406\u3002 \u76f4\u5230\u6311\u6218\u88ab'scheduled'\u5f00\u59cb\uff0c\u5904\u7406\u624d\u4f1a\u5f00\u59cb\u3002 \u8fd9\u4e2a\u8c03\u5ea6\u8fc7\u7a0b\u53ef\u4ee5\u9632\u6b62\u4e00\u6b21\u5c1d\u8bd5\u8fc7\u591a\u7684\u6311\u6218\uff0c\u6216\u8005\u4e00\u6b21\u5c1d\u8bd5\u540c\u4e00\u4e2a DNS \u540d\u79f0\u7684\u591a\u4e2a\u6311\u6218\u3002 \u6709\u5173\u5982\u4f55\u8c03\u5ea6\u6311\u6218\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb\u6311\u6218\u8c03\u5ea6\u3002</p> <p>\u4e00\u65e6\u5b89\u6392\u4e86\u6311\u6218\uff0c\u5b83\u5c06\u9996\u5148\u4e0e ACME \u670d\u52a1\u5668'synced'\uff0c\u4ee5\u786e\u5b9a\u5176\u5f53\u524d\u72b6\u6001\u3002 \u5982\u679c\u6311\u6218\u5df2\u7ecf\u6709\u6548\uff0c\u5b83\u7684'state'\u5c06\u88ab\u66f4\u65b0\u4e3a 'valid',\uff0c\u5e76\u5c06<code>status.processing = false</code>\u8bbe\u7f6e\u4e3a'unschedule'\u3002</p> <p>\u5982\u679c\u6311\u6218\u4ecd\u7136'pending'\uff0c\u6311\u6218\u63a7\u5236\u5668\u5c06\u4f7f\u7528\u5df2\u914d\u7f6e\u7684\u89e3\u51b3\u7a0b\u5e8f(HTTP01 \u6216 DNS01 \u4e4b\u4e00)'present'\u6311\u6218\u3002 \u4e00\u65e6\u6311\u6218\u88ab'presented'\uff0c\u5b83\u5c06\u8bbe\u7f6e<code>status.presented = true</code>\u3002</p> <p>\u4e00\u65e6'presented'\uff0c\u6311\u6218\u63a7\u5236\u5668\u5c06\u6267\u884c'self check'\uff0c\u4ee5\u786e\u4fdd\u6311\u6218\u5df2'propagated'(\u5373\uff0c\u6743\u5a01 DNS \u670d\u52a1\u5668\u5df2\u66f4\u65b0\u4ee5\u6b63\u786e\u54cd\u5e94\uff0c\u6216\u5165\u53e3\u63a7\u5236\u5668\u5df2\u89c2\u5bdf\u5230\u5165\u53e3\u6e90\u7684\u66f4\u6539\u5e76\u6b63\u5728\u4f7f\u7528)\u3002</p> <p>\u5982\u679c\u81ea\u68c0\u5931\u8d25\uff0ccert-manager \u5c06\u4ee5\u56fa\u5b9a\u7684 10 \u79d2\u95f4\u9694\u91cd\u8bd5\u81ea\u68c0\u3002 \u6ca1\u6709\u5b8c\u6210\u81ea\u68c0\u7684\u6311\u6218\u5c06\u7ee7\u7eed\u91cd\u8bd5\uff0c\u76f4\u5230\u7528\u6237\u901a\u8fc7\u91cd\u8bd5<code>Order</code> (\u5220\u9664<code>Order</code>\u6e90)\u6216\u4fee\u6539\u76f8\u5173\u7684<code>Certificate</code>\u6e90\u6765\u89e3\u51b3\u4efb\u4f55\u914d\u7f6e\u9519\u8bef\u3002</p> <p>\u4e00\u65e6\u81ea\u68c0\u901a\u8fc7\uff0c\u4e0e\u6b64\u6311\u6218\u76f8\u5173\u8054\u7684 ACME 'authorization'\u5c06\u88ab'accepted'.\u3002</p> <p>\u63a5\u53d7\u6388\u6743\u540e\u7684\u6700\u7ec8\u72b6\u6001\u5c06\u88ab\u590d\u5236\u5230\u6311\u6218\u7684<code>status.state</code>\u5b57\u6bb5\uff0c\u4ee5\u53ca'error reason' (\u5982\u679c\u5728 ACME \u670d\u52a1\u5668\u8bd5\u56fe\u9a8c\u8bc1\u6311\u6218\u65f6\u53d1\u751f\u9519\u8bef)\u3002</p> <p>\u4e00\u65e6\u6311\u6218\u8fdb\u5165<code>valid</code>, <code>invalid</code>, <code>expired</code> \u6216 <code>revoked</code>\u72b6\u6001\uff0c\u5b83\u5c06\u8bbe\u7f6e<code>status.processing = false</code>\u4ee5\u9632\u6b62\u5bf9 ACME \u6311\u6218\u8fdb\u884c\u4efb\u4f55\u8fdb\u4e00\u6b65\u7684\u5904\u7406\uff0c\u5e76\u5141\u8bb8\u5728\u6709\u79ef\u538b\u7684\u6311\u6218\u9700\u8981\u5b8c\u6210\u65f6\u5b89\u6392\u53e6\u4e00\u4e2a\u6311\u6218\u3002</p>"},{"location":"concepts/acme-orders-challenges/#_2","title":"\u6311\u6218\u8c03\u5ea6","text":"<p>\u6311\u6218\u4e0d\u662f\u8bd5\u56fe\u4e00\u6b21\u5904\u7406\u6240\u6709\u6311\u6218\uff0c\u800c\u662f\u7531 cert-manager '\u8c03\u5ea6'\u3002</p> <p>\u8fd9\u4e2a\u8c03\u5ea6\u5668\u5bf9\u540c\u65f6\u6311\u6218\u7684\u6700\u5927\u6570\u91cf\u5e94\u7528\u4e00\u4e2a\u4e0a\u9650\uff0c\u5e76\u4e14\u4e0d\u5141\u8bb8\u540c\u4e00 DNS \u540d\u79f0\u548c\u6c42\u89e3\u5668\u7c7b\u578b(<code>HTTP01</code> or <code>DNS01</code>)\u7684\u4e24\u4e2a\u6311\u6218\u540c\u65f6\u5b8c\u6210\u3002</p> <p>\u5230 <code>ddff78</code>\u4e3a\u6b62\uff0c\u4e00\u6b21\u53ef\u4ee5\u5904\u7406\u7684\u6700\u5927\u6311\u6218\u6570\u662f 60 \u4e2a\u3002.</p>"},{"location":"concepts/ca-injector/","title":"CA Injector","text":"<p><code>cainjector</code> \u5e2e\u52a9\u914d\u7f6e CA \u8bc1\u4e66: Mutating Webhooks,Validating Webhooks,conversion webhooks \u548c API Services</p> <p>\u7279\u522b\u662f\uff0c<code>cainjector</code>\u586b\u5145\u4e86\u56db\u79cd API \u7c7b\u578b\u7684<code>caBundle</code>\u5b57\u6bb5:<code>ValidatingWebhookConfiguration</code>,<code>MutatingWebhookConfiguration</code>,<code>CustomResourceDefinition</code> \u548c <code>APIService</code>.</p> <p>\u524d\u4e09\u79cd\u6e90\u7c7b\u578b\u7528\u4e8e\u914d\u7f6e Kubernetes API \u670d\u52a1\u5668\u5982\u4f55\u8fde\u63a5\u5230 webhook\u3002 \u8fd9\u4e2a<code>caBundle</code>\u6570\u636e\u7531 Kubernetes API \u670d\u52a1\u5668\u52a0\u8f7d\uff0c\u7528\u4e8e\u9a8c\u8bc1 webhook API \u670d\u52a1\u5668\u7684\u670d\u52a1\u8bc1\u4e66\u3002 <code>APIService</code>\u7528\u4e8e\u8868\u793a[\u6269\u5c55 API \u670d\u52a1\u5668]\u3002 <code>APIService</code>\u7684<code>caBundle</code>\u53ef\u4ee5\u586b\u5145 CA \u8bc1\u4e66\uff0c\u53ef\u7528\u4e8e\u9a8c\u8bc1 API \u670d\u52a1\u5668\u7684\u670d\u52a1\u8bc1\u4e66\u3002</p> <p>\u6211\u4eec\u5c06\u8fd9\u56db\u79cd API \u7c7b\u578b\u79f0\u4e3a injectable \u6e90\u3002</p> <p>injectable \u6e90\u5fc5\u987b\u6709\u4ee5\u4e0b\u6ce8\u89e3\u4e4b\u4e00:<code>cert-manager.io/inject-ca-from</code>,<code>cert-manager.io/inject-ca-from-secret</code>, \u6216 <code>cert-manager.io/inject-apiserver-ca</code>, \u53d6\u51b3\u4e8e\u6ce8\u5165 \u6e90\u3002\u4e0b\u9762\u5c06\u66f4\u8be6\u7ec6\u5730\u89e3\u91ca\u8fd9\u4e00\u70b9\u3002</p> <p><code>cainjector</code> copies CA data from one of three sources: a Kubernetes <code>Secret</code>, a cert-manager <code>Certificate</code>, or from the Kubernetes API server CA certificate (which <code>cainjector</code> itself uses to verify its TLS connection to the Kubernetes API server).</p> <p>If the source is a Kubernetes <code>Secret</code>, that resource MUST also have an <code>cert-manager.io/allow-direct-injection: \"true\"</code> annotation. The three source types are explained in more detail below.</p>"},{"location":"concepts/ca-injector/#_1","title":"\u4e3e\u4f8b","text":"<p>Here are examples demonstrating how to use the three <code>cainjector</code> sources. In each case we use <code>ValidatingWebhookConfiguration</code> as the injectable, but you can substitute <code>MutatingWebhookConfiguration</code> or <code>CustomResourceDefinition</code> definition instead.</p>"},{"location":"concepts/ca-injector/#ca","title":"\u4ece\u8bc1\u4e66\u6e90\u4e2d\u6ce8\u5165 CA \u6570\u636e","text":"<p>Here is an example of a <code>ValidatingWebhookConfiguration</code> configured with the annotation <code>cert-manager.io/inject-ca-from</code>, which will make <code>cainjector</code> populate the <code>caBundle</code> field using CA data from a cert-manager <code>Certificate</code>.</p> <p>NOTE: This example does not deploy a webhook server, it only deploys a partial webhook configuration, but it should be sufficient to help you understand what <code>cainjector</code> does:</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\nname: example1\n---\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingWebhookConfiguration\nmetadata:\nname: webhook1\nannotations:\ncert-manager.io/inject-ca-from: example1/webhook1-certificate\nwebhooks:\n- name: webhook1.example.com\nadmissionReviewVersions:\n- v1\nclientConfig:\nservice:\nname: webhook1\nnamespace: example1\npath: /validate\nport: 443\nsideEffects: None\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: webhook1-certificate\nnamespace: example1\nspec:\nsecretName: webhook1-certificate\ndnsNames:\n- webhook1.example1\nissuerRef:\nname: selfsigned\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: selfsigned\nnamespace: example1\nspec:\nselfSigned: {}\n</code></pre> <p>You should find that the <code>caBundle</code> value is now identical to the CA value in the <code>Secret</code> for the <code>Certificate</code>:</p> <pre><code>kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io webhook1 -o yaml | grep caBundle\nkubectl -n example1 get secret webhook1-certificate -o yaml | grep ca.crt\n</code></pre> <p>And after a short time, the Kubernetes API server will read that new <code>caBundle</code> value and use it to verify a TLS connection to the webhook server.</p>"},{"location":"concepts/ca-injector/#secret-ca","title":"\u4ece Secret \u6e90\u6ce8\u5165 CA \u6570\u636e","text":"<p>Here is another example of a <code>ValidatingWebhookConfiguration</code> this time configured with the annotation <code>cert-manager.io/inject-ca-from-secret</code>, which will make <code>cainjector</code> populate the <code>caBundle</code> field using CA data from a Kubernetes <code>Secret</code>.</p> <p>NOTE: This example does not deploy a webhook server, it only deploys a partial webhook configuration, but it should be sufficient to help you understand what <code>cainjector</code> does:</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\nname: example2\n---\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingWebhookConfiguration\nmetadata:\nname: webhook2\nannotations:\ncert-manager.io/inject-ca-from-secret: example2/example-ca\nwebhooks:\n- name: webhook2.example.com\nadmissionReviewVersions:\n- v1\nclientConfig:\nservice:\nname: webhook2\nnamespace: example2\npath: /validate\nport: 443\nsideEffects: None\n---\napiVersion: v1\nkind: Secret\nmetadata:\nname: example-ca\nnamespace: example2\nannotations:\ncert-manager.io/allow-direct-injection: \"true\"\ntype: kubernetes.io/tls\ndata:\nca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5akNDQWQ2Z0F3SUJBZ0lRTkdJZ24yM3BQYVpNbk9MUjJnVmZHakFOQmdrcWhraUc5dzBCQVFzRkFEQVYKTVJNd0VRWURWUVFERXdwRmVHRnRjR3hsSUVOQk1CNFhEVEl3TURreU5ERTFOREEwTVZvWERUSXdNVEl5TXpFMQpOREEwTVZvd0ZURVRNQkVHQTFVRUF4TUtSWGhoYlhCc1pTQkRRVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFECmdnRVBBRENDQVFvQ2dnRUJBS2F3RzVoMzlreHdyNEl0WCtHaDNYVWQrdTVJc2ZlSFdoTTc4TTRQTmZFeXhQMXoKRmNLN1d0MHJFMkwwNUppYmQ4ZjNpb3k5OXNnQ3I4OEw2SWxYZTB0RnkzNysxenJ4TFluR2hDQnZzZjltd0hLbgpIVTEvNERwQjROZkhPbFllNE9tbHVoNE9HdmZINU1EbDh5OWZGMjhXRXVBQ2dwdmpCUWxvRDNlVjJ5UmJvQ2kyCmtSTDJWYTFZL0FQZEpWK21VYkFvZmg0bllmUmNLRTJsSUg0RG5ZdXFPU3JaaituZUQ2M2RTSktxcHQ5K2luN2YKNHljZ2pQYU93MmdyKzhLK291QTlSQTV1VDI3SVNJcUJDcEV6elRqbVBUUWNvUTYxZGF0aDZkc1lsTEU4aWZWUwp4RWZuVEdQKy94M0FXQXR4eU5lanVuZGFXbVNFL3h5OHh0K0FxblVDQXdFQUFhTkNNRUF3RGdZRFZSMFBBUUgvCkJBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkowNkc5eEc2V1VBTHB6T3JYaHAKV2dsTm5qMkFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUI3ZG9CZnBLR3o4VlRQSnc0YXhpdisybzJpMHE1SQpSRzU2UE81WnhKQktZQlRROElHQmFOSm1yeGtmNTJCV0ttUGp4cXlNSGRwWjVBU00zOUJkZVUzRGtEWHp4RkgwCjM5RU12UnhIUERyMGQ4cTFFbndQT0xZY1hzNjJhYjdidE11cTJUMFNNZzRYMkY5VmNKTW5YdjlrNnA0VGZNR3MKVThCQnJhVGhUZm53ejBsWXMyblFjdzNmZjZ1bG1wWlk4K3BTak1aVDNJZHZOMFA4Y2hOdUlmUFRHWDJmSlo2NQpxcUUrelRoU3hIeXFTOTVoczhsd1lRRUhGQlVsalRnMCtQZThXL0hOSXZBOU9TYWw1U3UvdlhydmcxN04xdHVyCk5XcWRyZU5OVm1ubXMvTFJodmthWTBGblRvbFNBRkNXWS9GSDY5ZzRPcThiMHVyK3JVMHZOZFFXCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\ntls.key: \"\"\ntls.crt: \"\"\n</code></pre> <p>You should find that the <code>caBundle</code> value is now identical to the <code>ca.crt</code> value in the <code>Secret</code>:</p> <pre><code>kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io webhook2  -o yaml | grep caBundle\n</code></pre> <p>And after a short time, the Kubernetes API server will read that new <code>caBundle</code> value and use it to verify a TLS connection to the webhook server.</p> <p>This <code>Secret</code> based injection mechanism can operate independently of the <code>Certificate</code> based mechanism described earlier. It will work without the cert-manager CRDs installed and it will work if the cert-manager CRDs and associated webhook servers are not yet configured.</p> <p>NOTE: For this reason, cert-manager uses the <code>Secret</code> based injection mechanism to bootstrap its own webhook server. The cert-manager webhook server generates its own private key and self-signed certificate and places them in a <code>Secret</code> when it starts up.</p>"},{"location":"concepts/ca-injector/#kubernetes-api-ca","title":"\u6ce8\u5165 Kubernetes API \u670d\u52a1 CA","text":"<p>Here is another example of a <code>ValidatingWebhookConfiguration</code> this time configured with the annotation <code>cert-manager.io/inject-apiserver-ca: \"true\"</code>, which will make <code>cainjector</code> populate the <code>caBundle</code> field using the same CA certificate used by the Kubernetes API server.</p> <p>NOTE: This example does not deploy a webhook server, it only deploys a partial webhook configuration, but it should be sufficient to help you understand what <code>cainjector</code> does:</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\nname: example3\n---\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingWebhookConfiguration\nmetadata:\nname: webhook3\nannotations:\ncert-manager.io/inject-apiserver-ca: \"true\"\nwebhooks:\n- name: webhook3.example.com\nadmissionReviewVersions:\n- v1\nclientConfig:\nservice:\nname: webhook3\nnamespace: example3\npath: /validate\nport: 443\nsideEffects: None\n</code></pre> <p>You should find that the <code>caBundle</code> value is now identical to the CA used in your <code>KubeConfig</code> file:</p> <pre><code>kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io webhook3 -o yaml | grep caBundle\nkubectl config  view --minify --raw | grep certificate-authority-data\n</code></pre> <p>And after a short time, the Kubernetes API server will read that new <code>caBundle</code> value and use it to verify a TLS connection to the webhook server.</p> <p>NOTE: In this case you will have to ensure that your webhook is configured to serve a TLS certificate that has been signed by the Kubernetes cluster CA. The disadvantages of this mechanism are that: you will require access to the private key of the Kubernetes cluster CA and you will need to manually rotate the webhook certificate.</p>"},{"location":"concepts/certificate/","title":"Certificate","text":"<p>cert-manager \u6709<code>Certificates</code>\u7684\u6982\u5ff5\uff0c\u5b83\u5b9a\u4e49\u4e86\u6240\u9700\u7684 X.509 \u8bc1\u4e66\uff0c\u8be5\u8bc1\u4e66\u5c06\u88ab\u66f4\u65b0\u5e76\u4fdd\u6301\u6700\u65b0\u3002 \u4e00\u4e2a<code>Certificates</code>\u662f\u4e00\u4e2a\u5f15\u7528<code>Issuer</code> \u6216 <code>ClusterIssuer</code>\u7684\u547d\u540d\u7a7a\u95f4\u6e90\uff0c\u5b83\u4eec\u51b3\u5b9a\u4e86\u4ec0\u4e48\u5c06\u5c65\u884c\u8bc1\u4e66\u8bf7\u6c42\u3002</p> <p>\u5f53\u521b\u5efa<code>Certificates</code>\u65f6\uff0c\u76f8\u5e94\u7684<code>CertificateRequest</code>\u6e90\u7531 cert-manager \u521b\u5efa\uff0c\u5176\u4e2d\u5305\u542b\u7f16\u7801\u7684 X.509 \u8bc1\u4e66\u8bf7\u6c42\u3001<code>Issuer</code>\u5f15\u7528\u4ee5\u53ca\u57fa\u4e8e<code>Certificates</code>\u6e90\u89c4\u8303\u7684\u5176\u4ed6\u9009\u9879\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a<code>Certificate</code>\u6e90\u7684\u4f8b\u5b50\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: acme-crt\nspec:\nsecretName: acme-crt-secret\ndnsNames:\n- example.com\n- foo.example.com\nissuerRef:\nname: letsencrypt-prod\n# We can reference ClusterIssuers by changing the kind here.\n# The default value is Issuer (i.e. a locally namespaced Issuer)\nkind: Issuer\ngroup: cert-manager.io\n</code></pre> <p>\u8be5<code>Certificate</code>\u5c06\u544a\u8bc9 cert-manager \u5c1d\u8bd5\u4f7f\u7528\u540d\u4e3a<code>letsencrypt-prod</code>\u7684<code>Issuer</code>\u6765\u83b7\u53d6<code>example.com</code> \u548c <code>foo.example.com</code>\u57df\u7684\u8bc1\u4e66\u5bc6\u94a5\u5bf9\u3002 \u5982\u679c\u6210\u529f\uff0c\u751f\u6210\u7684 TLS \u5bc6\u94a5\u548c\u8bc1\u4e66\u5c06\u5b58\u50a8\u5728\u540d\u4e3a<code>acme-crt-secret</code>\u7684\u5bc6\u94a5\u4e2d\uff0c\u5bc6\u94a5\u5206\u522b\u4e3a<code>tls.key</code>\u548c<code>tls.crt</code>\u3002 \u8fd9\u4e2a\u79d8\u5bc6\u5c06\u4f4d\u4e8e\u4e0e<code>Certificate</code>\u6e90\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u3002</p> <p>\u5f53\u4e00\u4e2a\u8bc1\u4e66\u662f\u7531\u4e2d\u95f4 CA \u9881\u53d1\u7684\uff0c\u5e76\u4e14<code>Issuer</code>\u53ef\u4ee5\u63d0\u4f9b\u9881\u53d1\u7684\u8bc1\u4e66\u94fe\u65f6\uff0c<code>tls.crt</code>\u7684\u5185\u5bb9\u5c06\u662f\u6240\u8bf7\u6c42\u7684\u8bc1\u4e66\uff0c\u540e\u9762\u662f\u8bc1\u4e66\u94fe\u3002</p> <p>\u6b64\u5916\uff0c\u5982\u679c\u77e5\u9053\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff0c\u76f8\u5e94\u7684 CA \u8bc1\u4e66\u5c06\u5b58\u50a8\u5728\u5bc6\u94a5\u4e3a<code>ca.crt</code>\u7684\u79d8\u5bc6\u4e2d\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e ACME \u9881\u53d1\u8005\uff0cCA \u662f\u672a\u77e5\u7684\uff0c<code>ca.crt</code>\u5c06\u4e0d\u5b58\u5728\u4e8e<code>acme-crt-secret</code>\u4e2d\u3002</p> <p>cert-manager \u6709\u610f\u907f\u514d\u5411<code>tls.crt</code>\u6dfb\u52a0\u6839\u8bc1\u4e66\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u5b89\u5168\u6267\u884c TLS \u7684\u60c5\u51b5\u4e0b\u662f\u65e0\u7528\u7684\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1RFC 5246 \u7ae0\u8282 7.4.2\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u89e3\u91ca:</p> <p>\u56e0\u4e3a\u8bc1\u4e66\u9a8c\u8bc1\u8981\u6c42\u72ec\u7acb\u5730\u5206\u53d1\u6839\u5bc6\u94a5\uff0c\u5728\u5047\u8bbe\u8fdc\u7aef\u5fc5\u987b\u5df2\u7ecf\u62e5\u6709\u5b83\u624d\u80fd\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u9a8c\u8bc1\u5b83\u7684\u524d\u63d0\u4e0b\uff0c\u6307\u5b9a\u6839\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u7684\u81ea\u7b7e\u540d\u8bc1\u4e66\u53ef\u4ee5\u4ece\u94fe\u4e2d\u7701\u7565\u3002</p> <p>Warning</p> <p>\u5f53\u914d\u7f6e\u5ba2\u6237\u7aef\u4ee5\u4f7f\u7528\u7531\u79c1\u6709CA\u7b7e\u540d\u7684\u670d\u52a1\u8bc1\u4e66\u8fde\u63a5\u5230TLS\u670d\u52a1\u5668\u65f6\uff0c\u60a8\u5c06\u9700\u8981\u5411\u5ba2\u6237\u7aef\u63d0\u4f9bCA\u8bc1\u4e66\uff0c\u4ee5\u4fbf\u5176\u9a8c\u8bc1\u670d\u52a1\u5668\u3002 <code>ca.crt</code>\u53ef\u80fd\u5305\u542b\u60a8\u9700\u8981\u4fe1\u4efb\u7684\u8bc1\u4e66\uff0c\u4f46 \u4e0d\u8981\u6302\u8f7d\u4e0e\u670d\u52a1\u5668\u76f8\u540c\u7684<code>Secret</code> \u6765\u8bbf\u95ee<code>ca.crt</code>\u3002</p> <p>\u8fd9\u662f\u56e0\u4e3a:</p> <ol> <li>\u8fd9\u4e2a<code>Secret</code>\u8fd8\u5305\u542b\u670d\u52a1\u5668\u7684\u79c1\u94a5\uff0c\u5e94\u8be5\u53ea\u6709\u670d\u52a1\u5668\u53ef\u4ee5\u8bbf\u95ee\u3002    \u60a8\u5e94\u8be5\u4f7f\u7528RBAC\u6765\u786e\u4fdd\u5305\u542b\u670d\u52a1\u8bc1\u4e66\u548c\u79c1\u94a5\u7684<code>Secret</code>\u53ea\u6709\u9700\u8981\u5b83\u7684Pods\u624d\u80fd\u8bbf\u95ee\u3002</li> <li>\u5b89\u5168\u8f6e\u6362CA\u8bc1\u4e66\u4f9d\u8d56\u4e8e\u80fd\u591f\u540c\u65f6\u4fe1\u4efb\u65e7CA\u8bc1\u4e66\u548c\u65b0CA\u8bc1\u4e66\u3002    \u901a\u8fc7\u76f4\u63a5\u4ece\u6e90\u4ee3\u7801\u4f7f\u7528CA\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684;\u4e3a\u4e86\u8f6e\u6362\u8bc1\u4e66\uff0c\u60a8\u5c06 \u88ab\u8feb \u6709\u4e00\u4e9b\u505c\u673a\u65f6\u95f4\u3002</li> </ol> <p>\u5728\u914d\u7f6e\u5ba2\u6237\u7aef\u65f6\uff0c\u60a8\u5e94\u8be5\u72ec\u7acb\u5730\u9009\u62e9\u5e76\u83b7\u53d6\u60a8\u60f3\u8981\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u3002 \u4ece\u5e26\u5916\u4e0b\u8f7dCA\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u4e0e\u5305\u542b\u670d\u52a1\u5668\u79c1\u94a5\u548c\u8bc1\u4e66\u7684<code>Secret</code>\u5206\u5f00\u7684<code>Secret</code>\u6216<code>ConfigMap</code>\u4e2d\u3002</p> <p>\u8fd9\u786e\u4fdd\u4e86\u5982\u679c<code>Secret</code>\u4e2d\u5305\u542b\u670d\u52a1\u5668\u5bc6\u94a5\u548c\u8bc1\u4e66\u7684\u6750\u6599\u88ab\u7be1\u6539\uff0c \u5ba2\u6237\u7aef\u5c06\u65e0\u6cd5\u8fde\u63a5\u5230\u53d7\u5a01\u80c1\u7684\u670d\u52a1\u5668\u3002</p> <p>\u540c\u6837\u7684\u6982\u5ff5\u4e5f\u9002\u7528\u4e8e\u4e3a\u76f8\u4e92\u9a8c\u8bc1\u7684TLS\u914d\u7f6e\u670d\u52a1\u5668; \u4e0d\u8981\u8ba9\u670d\u52a1\u5668\u8bbf\u95ee\u5305\u542b\u5ba2\u6237\u7aef\u8bc1\u4e66\u548c\u79c1\u94a5\u7684<code>Secret</code>\u3002</p> <p><code>dnsNames</code> \u5b57\u6bb5\u6307\u5b9a\u4e86\u4e00\u4e2a\u4e0e\u8bc1\u4e66\u76f8\u5173\u8054\u7684<code>\u4e3b\u9898\u66ff\u4ee3\u540d\u79f0</code>\u5217\u8868\u3002</p> <p>\u5f15\u7528\u7684<code>Issuer</code>\u5fc5\u987b\u4e0e<code>Certificate</code>\u5b58\u5728\u4e8e\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u3002 <code>Certificate</code>\u4e5f\u53ef\u4ee5\u5f15\u7528\u975e\u547d\u540d\u7a7a\u95f4\u7684<code>ClusterIssuer</code>\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece\u4efb\u4f55\u547d\u540d\u7a7a\u95f4\u5f15\u7528\u3002</p> <p>\u4f60\u53ef\u4ee5\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u914d\u7f6e\u4f60\u7684<code>Certificate</code>\u6e90\u8fd9\u91cc\u3002</p>"},{"location":"concepts/certificate/#_1","title":"\u8bc1\u4e66\u751f\u547d\u5468\u671f","text":"<p>\u8be5\u56fe\u663e\u793a\u4e86\u4f7f\u7528 ACME / Let's Encrypt \u9881\u53d1\u8005\u7684\u540d\u4e3a<code>cert-1</code>\u7684\u8bc1\u4e66\u7684\u751f\u547d\u5468\u671f\u3002 \u4f7f\u7528 cert-manager \u4e0d\u9700\u8981\u7406\u89e3\u6240\u6709\u8fd9\u4e9b\u6b65\u9aa4;\u5bf9\u4e8e\u90a3\u4e9b\u5bf9\u8fd9\u4e2a\u8fc7\u7a0b\u597d\u5947\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u66f4\u591a\u7684\u662f\u5bf9\u53d1\u751f\u5728\u5f15\u64ce\u76d6\u4e0b\u7684\u903b\u8f91\u7684\u89e3\u91ca\u3002</p> <p></p>"},{"location":"concepts/certificaterequest/","title":"CertificateRequest","text":"<p><code>CertificateRequest</code>\u662f\u8bc1\u4e66\u7ba1\u7406\u5668\u4e2d\u7684\u547d\u540d\u7a7a\u95f4\u6e90\uff0c\u7528\u4e8e\u5411 <code>Issuer</code>\u8bf7\u6c42 X.509 \u8bc1\u4e66\u3002 \u8be5\u6e90\u5305\u542b\u4e00\u4e2a base64 \u7f16\u7801\u7684 PEM \u7f16\u7801\u7684\u8bc1\u4e66\u8bf7\u6c42\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u88ab\u53d1\u9001\u5230\u5f15\u7528\u7684\u9881\u53d1\u8005\u3002 \u6210\u529f\u7684\u9881\u53d1\u5c06\u6839\u636e\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u8fd4\u56de\u5df2\u7b7e\u540d\u7684\u8bc1\u4e66\u3002 <code>CertificateRequests</code>\u901a\u5e38\u7531\u63a7\u5236\u5668\u6216\u5176\u4ed6\u7cfb\u7edf\u4f7f\u7528\u548c\u7ba1\u7406\uff0c\u9664\u975e\u7279\u522b\u9700\u8981\uff0c\u5426\u5219\u4e0d\u5e94\u7531\u4eba\u7c7b\u4f7f\u7528\u3002</p> <p>\u4e00\u4e2a\u7b80\u5355\u7684 <code>CertificateRequest</code> \u5982\u4e0b\u6240\u793a:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: CertificateRequest\nmetadata:\nname: my-ca-cr\nspec:\nrequest: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQzNqQ0NBY1lDQVFBd2daZ3hDekFKQmdOVkJBWVRBbHBhTVE4d0RRWURWUVFJREFaQmNHOXNiRzh4RFRBTApCZ05WQkFjTUJFMXZiMjR4RVRBUEJnTlZCQW9NQ0VwbGRITjBZV05yTVJVd0V3WURWUVFMREF4alpYSjBMVzFoCmJtRm5aWEl4RVRBUEJnTlZCQU1NQ0dwdmMyaDJZVzVzTVN3d0tnWUpLb1pJaHZjTkFRa0JGaDFxYjNOb2RXRXUKZG1GdWJHVmxkWGRsYmtCcVpYUnpkR0ZqYXk1cGJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQwpBUW9DZ2dFQkFLd01tTFhuQkNiRStZdTIvMlFtRGsxalRWQ3BvbHU3TlZmQlVFUWl1bDhFMHI2NFBLcDRZQ0c5Cmx2N2kwOHdFMEdJQUgydnJRQmxVd3p6ZW1SUWZ4YmQvYVNybzRHNUFBYTJsY2NMaFpqUlh2NEVMaER0aVg4N3IKaTQ0MWJ2Y01OM0ZPTlRuczJhRkJYcllLWGxpNG4rc0RzTEVuZmpWdXRiV01Zeis3M3ptaGZzclRJUjRzTXo3cQpmSzM2WFM4UkRjNW5oVVcyYU9BZ3lnbFZSOVVXRkxXNjNXYXVhcHg2QUpBR1RoZnJYdVVHZXlZUUVBSENxZmZmCjhyOEt3YTFYK1NwYm9YK1ppSVE0Nk5jQ043OFZnL2dQVHNLZmphZURoNWcyNlk1dEVidHd3MWdRbWlhK0MyRHIKWHpYNU13RzJGNHN0cG5kUnRQckZrU1VnMW1zd0xuc0NBd0VBQWFBQU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQgpBUUFXR0JuRnhaZ0gzd0N3TG5IQ0xjb0l5RHJrMUVvYkRjN3BJK1VVWEJIS2JBWk9IWEFhaGJ5RFFLL2RuTHN3CjJkZ0J3bmlJR3kxNElwQlNxaDBJUE03eHk5WjI4VW9oR3piN0FVakRJWHlNdmkvYTJyTVhjWjI1d1NVQmxGc28Kd005dE1QU2JwcEVvRERsa3NsOUIwT1BPdkFyQ0NKNnZGaU1UbS9wMUJIUWJSOExNQW53U0lUYVVNSFByRzJVMgpjTjEvRGNMWjZ2enEyeENjYVoxemh2bzBpY1VIUm9UWmV1ZEp6MkxmR0VHM1VOb2ppbXpBNUZHd0RhS3BySWp3ClVkd1JmZWZ1T29MT1dNVnFNbGRBcTlyT24wNHJaT3Jnak1HSE9tTWxleVdPS1AySllhaDNrVDdKU01zTHhYcFYKV0ExQjRsLzFFQkhWeGlKQi9Zby9JQWVsCi0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=\nisCA: false\nusages:\n- signing\n- digital signature\n- server auth\n# 90 days\nduration: 2160h\nissuerRef:\nname: ca-issuer\n# We can reference ClusterIssuers by changing the kind here.\n# The default value is Issuer (i.e. a locally namespaced Issuer)\nkind: Issuer\ngroup: cert-manager.io\n</code></pre> <p>\u8fd9\u4e2a<code>CertificateRequest</code>\u5c06\u4f7f\u8bc1\u4e66\u7ba1\u7406\u5668\u5c1d\u8bd5\u8bf7\u6c42\u9ed8\u8ba4\u9881\u53d1\u8005\u7ec4<code>cert-manager.io</code>\u4e2d\u7684<code>Issuer</code> <code>ca-issuer</code>\uff0c\u5e76\u6839\u636e\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u8fd4\u56de\u4e00\u4e2a\u8bc1\u4e66\u3002 \u5176\u4ed6\u7ec4\u53ef\u4ee5\u5728<code>issuerRef</code>\u4e2d\u6307\u5b9a\uff0c\u5b83\u5c06\u76ee\u6807\u53d1\u884c\u8005\u66f4\u6539\u4e3a\u60a8\u53ef\u80fd\u5df2\u5b89\u88c5\u7684\u5176\u4ed6\u5916\u90e8\u7b2c\u4e09\u65b9\u53d1\u884c\u8005\u3002</p> <p>\u8be5\u6e90\u8fd8\u516c\u5f00\u4e86\u5c06\u8bc1\u4e66\u58f0\u660e\u4e3a CA \u7684\u9009\u9879\u3001\u5bc6\u94a5\u7528\u6cd5\u548c\u8bf7\u6c42\u7684\u6709\u6548\u671f\u9650\u3002</p> <p><code>CertificateRequest</code>\u7684<code>spec</code>\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u4ee5\u53ca\u4efb\u4f55\u6258\u7ba1\u7684\u8bc1\u4e66\u7ba1\u7406\u5668\u6ce8\u91ca\uff0c\u90fd\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5728\u521b\u5efa\u540e\u4e0d\u80fd\u4fee\u6539\u3002</p> <p>\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u7684\u6210\u529f\u9881\u53d1\u5c06\u5bfc\u81f4\u5bf9\u6e90\u7684\u66f4\u65b0\uff0c\u4f7f\u7528\u5df2\u7b7e\u540d\u7684\u8bc1\u4e66\u3001\u8bc1\u4e66\u7684 CA(\u5982\u679c\u53ef\u7528)\u8bbe\u7f6e\u72b6\u6001\uff0c\u5e76\u5c06<code>Ready</code>\u6761\u4ef6\u8bbe\u7f6e\u4e3a<code>True</code>\u3002</p> <p>\u65e0\u8bba\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u7684\u9881\u53d1\u662f\u5426\u6210\u529f\uff0c\u90fd\u4e0d\u4f1a\u91cd\u8bd5\u9881\u53d1\u3002\u5176\u4ed6\u63a7\u5236\u5668\u8d1f\u8d23\u7ba1\u7406<code>CertificateRequests</code>\u7684\u903b\u8f91\u548c\u751f\u547d\u5468\u671f\u3002</p>"},{"location":"concepts/certificaterequest/#_1","title":"\u6761\u4ef6","text":"<p><code>CertificateRequests</code>\u6709\u4e00\u7ec4\u5f3a\u5b9a\u4e49\u7684\u6761\u4ef6\uff0c\u63a7\u5236\u5668\u6216\u670d\u52a1\u5e94\u8be5\u4f7f\u7528\u548c\u4f9d\u8d56\u8fd9\u4e9b\u6761\u4ef6\u6765\u51b3\u5b9a\u4e0b\u4e00\u6b65\u5bf9\u6e90\u91c7\u53d6\u4ec0\u4e48\u884c\u52a8\u3002</p>"},{"location":"concepts/certificaterequest/#ready","title":"Ready","text":"<p>\u6bcf\u4e2a\u5c31\u7eea\u6761\u4ef6\u7531<code>Ready</code>-\u4e00\u4e2a\u5e03\u5c14\u503c\u548c<code>Reason</code>-\u4e00\u4e2a\u5b57\u7b26\u4e32\u7ec4\u6210\u3002 \u503c\u548c\u542b\u4e49\u7684\u96c6\u5408\u5982\u4e0b:</p> Ready Reason \u6761\u4ef6\u7684\u610f\u4e49 False Pending <code>CertificateRequest</code>\u76ee\u524d\u6b63\u5728\u7b49\u5f85\uff0c\u7b49\u5f85\u4e00\u4e9b\u5176\u4ed6\u64cd\u4f5c\u53d1\u751f\u3002\u8fd9\u53ef\u80fd\u662f\u201c\u9881\u53d1\u8005\u201d\u8fd8\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u201c\u9881\u53d1\u8005\u201d\u6b63\u5728\u9881\u53d1\u8bc1\u4e66\u3002 False Failed \u9881\u53d1\u8bc1\u4e66\u5931\u8d25 - \u8981\u4e48\u662f\u8fd4\u56de\u7684\u8bc1\u4e66\u672a\u80fd\u89e3\u7801\uff0c\u8981\u4e48\u662f\u7528\u4e8e\u7b7e\u540d\u7684\u5f15\u7528\u9881\u53d1\u8005\u7684\u5b9e\u4f8b\u5931\u8d25\u3002\u5b83\u7684\u63a7\u5236\u5668\u4e0d\u4f1a\u5bf9<code>CertificateRequest</code>\u91c7\u53d6\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u3002 True Issued \u5df2\u7531\u5f15\u7528\u7684\u201c\u9881\u53d1\u8005\u201d\u6210\u529f\u9881\u53d1\u7b7e\u540d\u8bc1\u4e66\u3002"},{"location":"concepts/certificaterequest/#userinfo","title":"UserInfo","text":"<p><code>CertificateRequests</code>\u5305\u542b\u4e00\u7ec4<code>UserInfo</code>\u5b57\u6bb5\u4f5c\u4e3a\u89c4\u8303\u7684\u4e00\u90e8\u5206\uff0c\u5373:<code>username</code>, <code>groups</code>, <code>uid</code>, \u548c <code>extra</code>\u3002 \u8fd9\u4e9b\u503c\u5305\u542b\u4e86\u521b\u5efa<code>CertificateRequests</code>\u7684\u7528\u6237\u3002 \u5982\u679c<code>CertificateRequests</code>\u662f\u7531<code>Certificate</code> \u6e90\u521b\u5efa\u7684\uff0c\u5219\u8be5\u7528\u6237\u5c06\u662f\u8bc1\u4e66\u7ba1\u7406\u5668\u672c\u8eab\uff0c\u6216\u8005\u76f4\u63a5\u521b\u5efa<code>CertificateRequests</code>\u7684\u7528\u6237\u3002</p> <p>Warning</p> <p>\u8fd9\u4e9b\u5b57\u6bb5\u7531cert-manager\u7ba1\u7406\uff0c\u4e0d\u5e94\u8be5\u88ab\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u8bbe\u7f6e\u6216\u4fee\u6539\u3002 \u5f53<code>CertificateRequests</code>\u88ab\u521b\u5efa\u65f6\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u5c06\u88ab\u8986\u76d6\uff0c\u4efb\u4f55\u8bd5\u56fe\u4fee\u6539\u5b83\u4eec\u7684\u8bf7\u6c42\u5c06\u88ab\u62d2\u7edd\u3002</p>"},{"location":"concepts/certificaterequest/#approval","title":"Approval \u6279\u51c6","text":"<p>\u8bc1\u4e66\u8bf7\u6c42\u53ef\u4ee5\u88ab<code>Approved</code> or <code>Denied</code>.\u3002 \u8fd9\u4e9b\u4e92\u65a5\u6761\u4ef6\u963b\u6b62 CertificateRequest \u88ab\u5176\u6258\u7ba1\u7b7e\u7f72\u4eba\u7b7e\u7f72\u3002</p> <ul> <li>\u7b7e\u7f72\u4eba \u4e0d \u5e94\u5728\u6ca1\u6709\u5df2\u6279\u51c6\u6761\u4ef6\u7684\u6258\u7ba1\u8bc1\u4e66\u8bf7\u6c42\u4e0a\u7b7e\u5b57</li> <li>\u7b7e\u540d\u8005 \u5c06 \u4f7f\u7528\u5df2\u6279\u51c6\u7684\u6761\u4ef6\u7b7e\u7f72\u6258\u7ba1\u7684 CertificateRequest</li> <li>\u7b7e\u540d\u8005 \u6c38\u8fdc \u4e0d\u4f1a\u7b7e\u7f72\u5177\u6709 Denied \u6761\u4ef6\u7684\u6258\u7ba1 CertificateRequest</li> </ul> <p>\u8fd9\u4e9b\u6761\u4ef6\u662f \u6c38\u4e45\u6027\u7684\uff0c\u4e00\u65e6\u8bbe\u7f6e\u5c31\u4e0d\u80fd\u4fee\u6539\u6216\u66f4\u6539\u3002</p> <pre><code>NAMESPACE      NAME                    APPROVED   DENIED   READY   ISSUER       REQUESTOR                                         AGE\nistio-system   service-mesh-ca-whh5b   True                True    mesh-ca      system:serviceaccount:istio-system:istiod         16s\nistio-system   my-app-fj9sa                       True             mesh-ca      system:serviceaccount:my-app:my-app               4s\n</code></pre>"},{"location":"concepts/certificaterequest/#behavior","title":"Behavior","text":"<p>Approved \u6761\u4ef6\u548c Denied \u6761\u4ef6\u662f CertificateRequest \u4e0a\u7684\u4e24\u79cd\u4e0d\u540c\u7684\u6761\u4ef6\u7c7b\u578b\u3002 \u8fd9\u4e9b\u6761\u4ef6\u5fc5\u987b\u53ea\u5177\u6709 True \u72b6\u6001\uff0c\u5e76\u4e14\u662f\u4e92\u65a5\u7684(\u5373 CertificateRequest \u4e0d\u80fd\u540c\u65f6\u5177\u6709 Approved \u548c Denied \u6761\u4ef6)\u3002 \u6b64\u884c\u4e3a\u5728\u8bc1\u4e66\u7ba1\u7406\u5668\u9a8c\u8bc1\u8bb8\u53ef webhook \u4e2d\u5f3a\u5236\u6267\u884c\u3002</p> <p>\"approver\"\u662f\u8d1f\u8d23\u8bbe\u7f6e\u6279\u51c6/\u62d2\u7edd\u6761\u4ef6\u7684\u5b9e\u4f53\u3002 \u7531\u5ba1\u6279\u8005\u7ba1\u7406\u54ea\u4e9b CertificateRequests\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5ba1\u6279\u8005\u7684\u5b9e\u73b0\u3002</p> <p>\u201c\u6279\u51c6/\u62d2\u7edd\u201d\u6761\u4ef6\u7684\u201c\u539f\u56e0\u201d\u5b57\u6bb5\u5e94\u8bbe\u7f6e\u4e3a\u201c \u8c01 \u8bbe\u7f6e\u6761\u4ef6\u201d\u3002 \u4f46\u662f\uff0c\u8c01\u53ef\u4ee5\u88ab\u89e3\u91ca\uff0c\u5bf9\u4e8e\u5ba1\u6279\u8005\u5b9e\u73b0\u662f\u6709\u610f\u4e49\u7684\u3002 \u4f8b\u5982\uff0c\u5b83\u53ef\u80fd\u5305\u62ec\u5ba1\u6279\u7b56\u7565\u63a7\u5236\u5668\u7684 API \u7ec4\uff0c\u6216\u8005\u624b\u52a8\u8bf7\u6c42\u7684\u5ba2\u6237\u7aef\u4ee3\u7406\u3002</p> <p>\u201c\u6279\u51c6/\u62d2\u7edd\u201d\u6761\u4ef6\u7684 Message \u5b57\u6bb5\u5e94\u8be5\u8bbe\u7f6e\u4e3a\u8bbe\u7f6e\u6761\u4ef6\u7684\u539f\u56e0\u3002 \u540c\u6837\uff0c\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u89e3\u91ca\uff0c\u4f46\u5bf9\u5ba1\u6279\u8005\u7684\u5b9e\u73b0\u662f\u6709\u610f\u4e49\u7684\u3002 \u4f8b\u5982\uff0c\u6279\u51c6\u6b64\u8bf7\u6c42\u7684\u6e90\u7684\u540d\u79f0\uff0c\u5bfc\u81f4\u8bf7\u6c42\u88ab\u62d2\u7edd\u7684\u8fdd\u89c4\u884c\u4e3a\uff0c\u6216\u8005\u624b\u52a8\u6279\u51c6\u8be5\u8bf7\u6c42\u7684\u56e2\u961f\u3002</p>"},{"location":"concepts/certificaterequest/#approver-controller","title":"Approver Controller","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ccert-manager \u5c06\u8fd0\u884c\u4e00\u4e2a\u5185\u90e8\u5ba1\u6279\u63a7\u5236\u5668\uff0c\u5b83\u5c06\u81ea\u52a8\u6279\u51c6\u6240\u6709\u5f15\u7528\u4efb\u4f55\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u4efb\u4f55\u5185\u90e8\u9881\u53d1\u8005\u7c7b\u578b\u7684 CertificateRequests: <code>cert-manager.io/Issuer</code>, <code>cert-manager.io/ClusterIssuer</code>\u3002</p> <p>\u8981\u7981\u7528\u6b64\u63a7\u5236\u5668\uff0c\u8bf7\u5728 cert-manager-controller \u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u53c2\u6570:<code>--controllers=*,-certificaterequests-approver</code>\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0 <code>helm</code> \u6765\u5b9e\u73b0:</p> <pre><code>--set extraArgs={--controllers='*\\,-certificaterequests-approver'}\n</code></pre> <p>\u6216\u8005\uff0c\u4e3a\u4e86\u8ba9\u5185\u90e8\u5ba1\u6838\u8005\u63a7\u5236\u5668\u6279\u51c6\u5f15\u7528\u5916\u90e8\u9881\u53d1\u8005\u7684<code>CertificateRequests</code>\uff0c\u5c06\u4ee5\u4e0b RBAC \u6dfb\u52a0\u5230 cert-manager-controller \u670d\u52a1\u5e10\u6237\u3002 \u8bf7\u5c06\u7ed9\u5b9a\u7684\u6e90\u540d\u79f0\u66ff\u6362\u4e3a\u76f8\u5173\u540d\u79f0:</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: cert-manager-controller-approve:my-issuer-example-com # edit\nrules:\n- apiGroups:\n- cert-manager.io\nresources:\n- signers\nverbs:\n- approve\nresourceNames:\n- issuers.my-issuer.example.com/* # edit\n- clusterissuers.my-issuer.example.com/* # edit\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: cert-manager-controller-approve:my-issuer-example-com # edit\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: cert-manager-controller-approve:my-issuer-example-com # edit\nsubjects:\n- kind: ServiceAccount\nname: cert-manager\nnamespace: cert-manager\n</code></pre>"},{"location":"concepts/certificaterequest/#rbac","title":"RBAC \u8bed\u6cd5","text":"<p>\u5f53\u7528\u6237\u6216\u63a7\u5236\u5668\u8bd5\u56fe\u6279\u51c6\u6216\u62d2\u7edd\u4e00\u4e2a CertificateRequest \u65f6\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668 webhook \u5c06\u8bc4\u4f30\u5b83\u662f\u5426\u6709\u8db3\u591f\u7684\u6743\u9650\u8fd9\u6837\u505a\u3002 \u8fd9\u4e9b\u6743\u9650\u662f\u57fa\u4e8e\u8bf7\u6c42\u672c\u8eab\u7684-\u7279\u522b\u662f\u8bf7\u6c42\u7684 IssuerRef:</p> <pre><code>apiGroups: [\"cert-manager.io\"]\nresources: [\"signers\"]\nverbs: [\"approve\"]\nresourceNames:\n# namesapced signers\n- \"&lt;signer-resource-name&gt;.&lt;signer-group&gt;/&lt;signer-namespace&gt;.&lt;signer-name&gt;\"\n# cluster scoped signers\n- \"&lt;signer-resource-name&gt;.&lt;signer-group&gt;/&lt;signer-name&gt;\"\n# all signers of this resource name\n- \"&lt;signer-resource-name&gt;.&lt;signer-group&gt;/*\"\n</code></pre> <p>\u4e00\u4e2a\u793a\u4f8b ClusterRole \u5c06\u6388\u4e88\u6743\u9650\u6765\u8bbe\u7f6e<code>CertificateRequests</code>\u7684\u6279\u51c6\u548c\u62d2\u7edd\u6761\u4ef6\uff0c\u5f15\u7528\u96c6\u7fa4\u4f5c\u7528\u57df\u7684<code>myissuers</code>\u5916\u90e8\u9881\u53d1\u8005\uff0c\u5728\u7ec4<code>my-exampleio</code>\u4e2d\uff0c\u540d\u79f0\u4e3a<code>myapp</code>:</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: my-example-io-my-issuer-myapp-approver\nrules:\n- apiGroups: [\"cert-manager.io\"]\nresources: [\"signers\"]\nverbs: [\"approve\"]\nresourceNames: [\"myissuers.my-example.io/myapp\"]\n</code></pre> <p>\u5982\u679c\u5ba1\u6279\u8005\u6ca1\u6709\u4e0a\u9762\u5b9a\u4e49\u7684\u8db3\u591f\u7684\u6743\u9650\u6765\u8bbe\u7f6e\u6279\u51c6\u6216\u62d2\u7edd\u6761\u4ef6\uff0c\u8bf7\u6c42\u5c06\u88ab\u9a8c\u8bc1\u8bb8\u53ef\u7684\u8bc1\u4e66\u7ba1\u7406\u5668\u62d2\u7edd\u3002</p> <ul> <li>RBAC \u6743\u9650\u5fc5\u987b\u5728\u96c6\u7fa4\u8303\u56f4\u5185\u6388\u4e88</li> <li>\u5177\u6709\u540d\u79f0\u7a7a\u95f4\u7684\u7b7e\u540d\u8005\u7531\u5177\u6709\u540d\u79f0\u7a7a\u95f4\u7684\u6e90\u4f7f\u7528 <code>&lt;signer-resource-name&gt;.&lt;signer-group&gt;/&lt;signer-namespace&gt;.&lt;signer-name&gt;</code> \u8bed\u6cd5\u8868\u793a</li> <li>\u96c6\u7fa4\u4f5c\u7528\u57df\u7684\u7b7e\u540d\u8005\u4f7f\u7528 <code>&lt;signer-resource-name&gt;.&lt;signer-group&gt;/&lt;signer-name&gt;</code> \u7684\u8bed\u6cd5\u8868\u793a</li> <li>\u53ef\u4ee5\u901a\u8fc7 <code>&lt;signer-resource-name&gt;.&lt;signer-group&gt;/*</code> \u5411\u5ba1\u6279\u8005\u6388\u4e88\u6240\u6709\u540d\u79f0\u7a7a\u95f4\u7684\u5ba1\u6279\u6743</li> <li>apiGroup \u5fc5\u987b \u603b \u662f <code>cert-manager.io</code></li> <li>\u6e90\u5fc5\u987b \u603b \u662f<code>signers</code></li> <li>\u52a8\u8bcd\u5fc5\u987b \u603b \u662f<code>approve</code>\uff0c\u5b83\u6388\u4e88\u5ba1\u6279\u8005\u8bbe\u7f6e\u201cApproved\u201d\u548c\u201cDenied\u201d\u6761\u4ef6\u7684\u6743\u9650</li> </ul> <p>\u5728<code>my-example.io</code>\u7ec4\u4e2d\u4e3a\u6240\u6709\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6240\u6709<code>myissuer</code>\u7b7e\u540d\u8005\u7b7e\u540d\uff0c\u4ee5\u53ca\u4e3a<code>clustermyissuers</code>\u7b7e\u540d\u7684\u540d\u79f0\u4e3a <code>myapp</code> \u7684\u793a\u4f8b:</p> <pre><code>resourceNames: [\"myissuers.my-example.io/*\", \"clustermyissuers.my-example.io/myapp\"]\n</code></pre> <p>\u5728\u547d\u540d\u7a7a\u95f4<code>foo</code> \u548c <code>bar</code>\u4e2d\u4f7f\u7528<code>myapp</code>\u4e3a<code>myissuer</code>\u7b7e\u540d:</p> <pre><code>resourceNames: [\"myissuers.my-example.io/foo.myapp\", \"myissuers.my-example.io/bar.myapp\"]\n</code></pre>"},{"location":"concepts/issuer/","title":"Issuer(\u9881\u53d1\u8005)","text":"<p><code>Issuers</code>, \u548c <code>ClusterIssuers</code>,\u662f Kubernetes \u6e90\uff0c\u4ee3\u8868\u8bc1\u4e66\u9881\u53d1\u673a\u6784(CAs)\uff0c\u80fd\u591f\u901a\u8fc7\u6267\u884c\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u6765\u751f\u6210\u5df2\u7b7e\u540d\u7684\u8bc1\u4e66\u3002 \u6240\u6709\u8bc1\u4e66\u7ba1\u7406\u5668\u8bc1\u4e66\u90fd\u9700\u8981\u4e00\u4e2a\u5904\u4e8e\u51c6\u5907\u72b6\u6001\u7684\u88ab\u5f15\u7528\u9881\u53d1\u8005\u6765\u5c1d\u8bd5\u5c65\u884c\u8bf7\u6c42\u3002</p> <p><code>Issuer</code>\u7c7b\u578b\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f<code>CA</code>\u3002\u7b80\u5355\u7684<code>CA</code> <code>Issuer</code>\u5982\u4e0b:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: ca-issuer\nnamespace: mesh-system\nspec:\nca:\nsecretName: ca-key-pair\n</code></pre> <p>\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684<code>Issuer</code>\uff0c\u5c06\u6839\u636e\u79c1\u94a5\u7b7e\u7f72\u8bc1\u4e66\u3002 \u7136\u540e\uff0c\u5b58\u50a8\u5728\u79d8\u5bc6<code>ca-key-pair</code>\u4e2d\u7684\u8bc1\u4e66\u53ef\u7528\u4e8e\u4fe1\u4efb\u516c\u5171\u5bc6\u94a5\u57fa\u7840\u8bbe\u65bd(PKI)\u7cfb\u7edf\u4e2d\u8be5<code>Issuer</code>\u65b0\u7b7e\u7f72\u7684\u8bc1\u4e66\u3002</p>"},{"location":"concepts/issuer/#_1","title":"\u547d\u540d\u7a7a\u95f4","text":"<p><code>Issuer</code>\u662f\u4e00\u4e2a\u540d\u79f0\u7a7a\u95f4\u6e90\uff0c\u4e0d\u53ef\u80fd\u4ece\u4e0d\u540c\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684<code>Issuer</code>\u9881\u53d1\u8bc1\u4e66\u3002 \u8fd9\u610f\u5473\u7740\u60a8\u9700\u8981\u5728\u6bcf\u4e2a\u5e0c\u671b\u83b7\u53d6\u201c\u8bc1\u4e66\u201d\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u521b\u5efa\u4e00\u4e2a<code>Issuer</code>\u3002</p> <p>\u5982\u679c\u60a8\u5e0c\u671b\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u5728\u591a\u4e2a\u540d\u79f0\u7a7a\u95f4\u4e2d\u4f7f\u7528\u7684<code>Issuer</code>\uff0c\u5219\u5e94\u8be5\u8003\u8651\u521b\u5efa\u4e00\u4e2a<code>ClusterIssuer</code>\u6e90\u3002 \u8fd9\u4e0e<code>Issuer</code>\u6e90\u51e0\u4e4e\u76f8\u540c\uff0c\u4f46\u662f\u5b83\u662f\u975e\u547d\u540d\u7a7a\u95f4\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e8e\u8de8\u6240\u6709\u547d\u540d\u7a7a\u95f4\u9881\u53d1<code>Certificates</code>\u3002</p>"},{"location":"concepts/issuer/#_2","title":"\u652f\u6301\u9881\u53d1\u8005","text":"<p>cert-manager \u652f\u6301\u8bb8\u591a<code>in-tree</code>\u548c<code>out-of-tree</code>\u7684<code>Issuer</code>\u7c7b\u578b\u3002 \u8fd9\u4e9b<code>Issuer</code>\u7c7b\u578b\u7684\u8be6\u5c3d\u5217\u8868\u53ef\u4ee5\u5728 cert-manager\u914d\u7f6e\u6587\u6863\u4e2d\u627e\u5230\u3002</p>"},{"location":"concepts/webhook/","title":"\u5173\u4e8e\u8bc1\u4e66\u7ba1\u7406\u5668 Webhook","text":"<p>cert-manager \u4f7f\u7528\u81ea\u5b9a\u4e49\u6e90\u5b9a\u4e49\u6269\u5c55 Kubernetes API\u3002 \u5b83\u5b89\u88c5\u4e00\u4e2a webhook\uff0c\u6709\u4e09\u4e2a\u4e3b\u8981\u529f\u80fd:</p> <ul> <li>Validation:   \u786e\u4fdd\u5728\u521b\u5efa\u6216\u66f4\u65b0\u8bc1\u4e66\u7ba1\u7406\u5668\u6e90\u65f6\uff0c\u5b83\u4eec\u7b26\u5408 API \u7684\u89c4\u5219\u3002   \u8fd9\u79cd\u9a8c\u8bc1\u6bd4\u786e\u4fdd\u6e90\u7b26\u5408 OpenAPI \u6a21\u5f0f\u66f4\u6df1\u5165\uff0c\u800c\u662f\u5305\u542b\u4e86\u4e00\u4e9b\u903b\u8f91\uff0c\u4f8b\u5982\u4e0d\u5141\u8bb8\u4e3a\u6bcf\u4e2a\u201c\u53d1\u884c\u8005\u201d\u6e90\u6307\u5b9a\u591a\u4e2a\u201c\u53d1\u884c\u8005\u201d\u7c7b\u578b\u3002   \u9a8c\u8bc1\u8bb8\u53ef\u603b\u662f\u88ab\u8c03\u7528\uff0c\u5e76\u5c06\u4ee5\u6210\u529f\u6216\u5931\u8d25\u7684\u54cd\u5e94\u8fdb\u884c\u54cd\u5e94\u3002</li> <li>Mutation / Defaulting:   \u5728\u521b\u5efa\u548c\u66f4\u65b0\u64cd\u4f5c\u671f\u95f4\u66f4\u6539\u6e90\u7684\u5185\u5bb9\uff0c\u4f8b\u5982\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u3002</li> <li>Conversion:   webhook \u8fd8\u8d1f\u8d23\u5728 cert-manager <code>CustomResources</code> (<code>cert-manager.io</code>)\u4e2d\u5b9e\u73b0\u7248\u672c\u8f6c\u6362\u3002   \u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u540c\u65f6\u652f\u6301\u591a\u4e2a API \u7248\u672c;\u4ece<code>v1alpha2</code>\u5230<code>v1</code>\u3002   \u8fd9\u4f7f\u5f97\u4f9d\u8d56\u4e8e\u914d\u7f6e\u6a21\u5f0f\u7684\u7279\u5b9a\u7248\u672c\u6210\u4e3a\u53ef\u80fd\u3002</li> </ul> <p>\u2139\ufe0f \u8fd9\u5c31\u662f\u6240\u8c13\u7684\u52a8\u6001\u51c6\u5165\u63a7\u5236\u3002</p> <p>\u5728 Kubernetes \u6587\u6863\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u52a8\u6001\u51c6\u5165\u63a7\u5236\u7684\u4fe1\u606f\u3002</p>"},{"location":"concepts/webhook/#_1","title":"\u6982\u8ff0","text":"<p>webhook \u7ec4\u4ef6\u4f5c\u4e3a\u53e6\u4e00\u4e2a pod \u90e8\u7f72\uff0c\u4e0e\u4e3b\u8981\u7684 cert-manager \u63a7\u5236\u5668\u548c CA \u6ce8\u5165\u5668\u7ec4\u4ef6\u4e00\u8d77\u8fd0\u884c\u3002</p> <p>\u4e3a\u4e86\u8ba9 API \u670d\u52a1\u5668\u4e0e webhook \u7ec4\u4ef6\u901a\u4fe1\uff0cwebhook \u9700\u8981 apisserver \u914d\u7f6e\u4e3a\u4fe1\u4efb\u7684 TLS \u8bc1\u4e66\u3002</p> <p>The <code>cainjector</code> creates <code>secret/cert-manager-webhook-ca</code>, a self-signed root CA certificate which is used to sign certificates for the webhook pod.</p> <p>Then the webhook can be configured with either</p> <ol> <li>paths to a TLS certificate and key signed by the webhook CA, or</li> <li>a reference to the CA Secret for dynamic generation of the certificate and key on webhook startup</li> </ol>"},{"location":"concepts/webhook/#_2","title":"\u5df2\u77e5\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6cd5","text":""},{"location":"concepts/webhook/#gke-webhook","title":"GKE \u79c1\u6709\u96c6\u7fa4\u7684 Webhook \u8fde\u63a5\u95ee\u9898","text":"<p>If errors occur around the webhook but the webhook is running then the webhook is most likely not reachable from the API server. In this case, ensure that the API server can communicate with the webhook by following the GKE private cluster explanation.</p>"},{"location":"concepts/webhook/#aws-eks-webhook","title":"AWS EKS \u4e0a\u7684 Webhook \u8fde\u63a5\u95ee\u9898","text":"<p>When using a custom CNI (such as Weave or Calico) on EKS, the webhook cannot be reached by cert-manager. This happens because the control plane cannot be configured to run on a custom CNI on EKS, so the CNIs differ between control plane and worker nodes. The solution is to run the webhook in the host network so it can be reached by cert-manager.</p>"},{"location":"concepts/webhook/#cert-manager-webhook","title":"\u5b89\u88c5 cert-manager \u540e\u4e0d\u4e45\u51fa\u73b0 Webhook \u8fde\u63a5\u95ee\u9898","text":"<p>When you first install cert-manager, it will take a few seconds before the cert-manager API is usable. This is because the cert-manager API requires the cert-manager webhook server, which takes some time to start up. Here's why:</p> <ul> <li>The webhook server performs a leader election at startup which may take a few seconds.</li> <li>The webhook server may take a few seconds to start up and to generate its self-signed CA and serving certificate and to publish those to a Secret.</li> <li><code>cainjector</code> performs a leader election at start up which can take a few seconds.</li> <li><code>cainjector</code>, once started, will take a few seconds to update the <code>caBundle</code> in all the webhook configurations.</li> </ul> <p>For these reasons, after installing cert-manager and when performing post-installation cert-manager API operations, you will need to check for temporary API configuration errors and retry.</p> <p>You could also add a post-installation check which performs <code>kubectl --dry-run</code> operations on the cert-manager API. Or you could add a post-installation check which automatically retries the Installation Verification steps until they succeed.</p>"},{"location":"concepts/webhook/#webhook_1","title":"\u5176\u4ed6 Webhook \u95ee\u9898","text":"<p>If you encounter any other problems with the webhook, please refer to the webhook troubleshooting guide.</p>"},{"location":"configuration/","title":"Issuer \u914d\u7f6e","text":"<p>\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 Issuer \u548c ClusterIssuer \u6e90\u914d\u7f6e cert-manager\u3002</p> <p>\u5b89\u88c5 cert-manager \u540e\u9700\u8981\u914d\u7f6e\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f<code>Issuer</code> \u6216 <code>ClusterIssuer</code>\u3002 \u8fd9\u4e9b\u6e90\u8868\u793a\u8bc1\u4e66\u9881\u53d1\u673a\u6784(CAs)\u80fd\u591f\u54cd\u5e94\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u5bf9\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d\u3002\u3002</p> <p>\u672c\u8282\u8bb0\u5f55\u5982\u4f55\u914d\u7f6e\u4e0d\u540c\u7684\u9881\u53d1\u8005\u7c7b\u578b\u3002 \u60a8\u53ef\u80fd\u9700\u8981\u9605\u8bfb\u6709\u5173<code>Issuer</code> \u548c <code>ClusterIssuer</code>\u6e90\u7684\u66f4\u591a\u4fe1\u606f.</p> <p>\u8bc1\u4e66\u7ba1\u7406\u5668\u5e26\u6709\u8bb8\u591a\u5185\u7f6e\u7684\u8bc1\u4e66\u9881\u53d1\u8005\uff0c\u8fd9\u4e9b\u8bc1\u4e66\u9881\u53d1\u8005\u5728<code>cert-manager.io</code>\u7ec4\u4e2d\u8868\u793a\u3002 \u9664\u4e86\u5185\u7f6e\u7c7b\u578b\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u5b89\u88c5\u5916\u90e8\u9881\u53d1\u8005\u3002 \u5185\u7f6e\u548c\u5916\u90e8\u9881\u53d1\u8005\u7684\u5f85\u9047\u76f8\u540c\uff0c\u914d\u7f6e\u4e5f\u76f8\u4f3c\u3002</p>"},{"location":"configuration/#_1","title":"\u96c6\u7fa4\u6e90\u547d\u540d\u7a7a\u95f4","text":"<p>\u5f53\u4f7f\u7528<code>ClusterIssuer</code>\u6e90\u7c7b\u578b\u65f6\uff0c\u786e\u4fdd\u4f60\u7406\u89e3\u96c6\u7fa4\u6e90\u547d\u540d\u7a7a\u95f4\u7684\u7528\u9014; \u5bf9\u4e8e\u521a\u5f00\u59cb\u4f7f\u7528 cert-manager \u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9881\u53d1\u6e90\u3002</p> <p><code>ClusterIssuer</code>\u6e90\u662f\u96c6\u7fa4\u8303\u56f4\u7684\u3002 \u8fd9\u610f\u5473\u7740\u5f53\u901a\u8fc7<code>secretName</code>\u5b57\u6bb5\u5f15\u7528\u4e00\u4e2a\u79d8\u5bc6\u65f6\uff0c\u79d8\u5bc6\u5c06\u5728<code>Cluster Resource Namespace</code>\u4e2d\u67e5\u627e\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u662f<code>cert-manager</code>\uff0c\u4f46\u662f\u5b83\u53ef\u4ee5\u901a\u8fc7 cert-manager-controller \u7ec4\u4ef6\u4e0a\u7684\u4e00\u4e2a\u6807\u5fd7\u6765\u6539\u53d8:</p> <pre><code>--cluster-resource-namespace=my-namespace\n</code></pre>"},{"location":"configuration/ca/","title":"CA","text":"<p>\u26a0\ufe0f CA \u9881\u53d1\u8005\u901a\u5e38\u8981\u4e48\u7528\u4e8e\u5c1d\u8bd5\u8bc1\u4e66\u7ba1\u7406\u5668\uff0c\u8981\u4e48\u7528\u4e8e\u4e86\u89e3\u5982\u4f55\u8fd0\u884c PKI \u7684\u9ad8\u7ea7\u7528\u6237\u3002 \u4e3a\u4e86\u5728\u751f\u4ea7\u4e2d\u5b89\u5168\u4f7f\u7528\uff0cCA \u9881\u53d1\u8005\u56f4\u7ed5\u8f6e\u6362\u3001\u4fe1\u4efb\u5b58\u50a8\u5206\u53d1\u548c\u707e\u96be\u6062\u590d\u5f15\u5165\u4e86\u590d\u6742\u7684\u89c4\u5212\u9700\u6c42\u3002</p> <p>\u5982\u679c\u60a8\u4e0d\u6253\u7b97\u8fd0\u884c\u81ea\u5df1\u7684 PKI\uff0c\u8bf7\u4f7f\u7528\u4e0d\u540c\u7684\u9881\u53d1\u8005\u7c7b\u578b\u3002</p> <p>CA \u9881\u53d1\u8005\u4ee3\u8868\u4e00\u4e2a\u8bc1\u4e66\u9881\u53d1\u673a\u6784\uff0c\u5176\u8bc1\u4e66\u548c\u79c1\u94a5\u4f5c\u4e3a Kubernetes <code>Secret</code>\u5b58\u50a8\u5728\u96c6\u7fa4\u4e2d\u3002</p> <p>CA \u9881\u53d1\u8005\u9881\u53d1\u7684\u8bc1\u4e66\u4e0d\u53d7\u516c\u4f17\u4fe1\u4efb\uff0c\u56e0\u6b64\u5982\u679c\u6ca1\u6709\u8fdb\u4e00\u6b65\u7684\u914d\u7f6e\u5de5\u4f5c\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e0d\u592a\u53ef\u80fd\u4fe1\u4efb\u5b83\u3002 \u8003\u8651\u7528\u4e8e\u5206\u53d1\u4fe1\u4efb\u5b58\u50a8\u7684\u4fe1\u4efb\u7ba1\u7406\u5668\u9879\u76ee\u3002</p>"},{"location":"configuration/ca/#_1","title":"\u90e8\u7f72","text":"<p>CA \u9881\u53d1\u8005\u5fc5\u987b\u914d\u7f6e\u8bc1\u4e66\u548c\u5b58\u50a8\u5728 Kubernetes \u79d8\u5bc6\u4e2d\u7684\u79c1\u94a5\u3002 \u5982\u679c\u60a8\u613f\u610f\uff0c\u60a8\u53ef\u4ee5\u5728\u5916\u90e8\u521b\u5efa\u8fd9\u4e2a\u8bc1\u4e66\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u4f7f\u7528<code>SelfSigned</code> \u9881\u53d1\u8005\u5f15\u5bfc\u6839\u8bc1\u4e66\u3002</p> <p>\u8bc1\u4e66\u7684\u79d8\u5bc6\u5e94\u8be5\u4f4d\u4e8e\u4e0e<code>Issuer</code>\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\uff0c\u6216\u8005\u5728<code>ClusterIssuer</code>\u7684\u60c5\u51b5\u4e0b\u4f4d\u4e8e\u201c\u96c6\u7fa4\u6e90\u540d\u79f0\u7a7a\u95f4\u201d\u4e2d\u3002</p> <p>\u201c\u96c6\u7fa4\u6e90\u547d\u540d\u7a7a\u95f4\u201d\u9ed8\u8ba4\u4e3a<code>cert-manager</code>\u547d\u540d\u7a7a\u95f4\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 cert-manager \u63a7\u5236\u5668\u4e0a\u7684<code>--cluster-resource-namespace</code> \u6807\u5fd7\u8fdb\u884c\u914d\u7f6e\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u7528\u4e8e\u7b7e\u540d\u7684\u79d8\u5bc6\u6e90\u793a\u4f8b\u3002 \u6ce8\u610f\u6bcf\u4e2a\u5b57\u6bb5\u4f7f\u7528\u7684\u7d22\u5f15\u952e\uff0c\u56e0\u4e3a\u8bc1\u4e66\u7ba1\u7406\u5668\u9700\u8981\u8fd9\u4e9b\u952e\u624d\u80fd\u627e\u5230\u8bc1\u4e66\u548c\u5bc6\u94a5\u3002 \u8fd8\u8981\u6ce8\u610f\uff0c\u50cf\u6240\u6709\u79d8\u5bc6\u4e00\u6837\uff0c\u6570\u636e\u5fc5\u987b\u91c7\u7528 base64 \u7f16\u7801\u3002 \u547d\u4ee4<code>$ cat crt.pem | base64 -w0</code>\u5e94\u8be5\u5728\u57fa\u4e8e GNU \u7684\u7cfb\u7edf(Debian, Ubuntu \u7b49)\u4e0a\u5e2e\u52a9\u4f60\uff0c<code>$ cat crt.pem | base64 -b0</code>\u5728\u57fa\u4e8e BSD \u7684\u7cfb\u7edf(\u6700\u663e\u8457\u7684\u662f macOS)\u4e0a\u5e2e\u52a9\u4f60\u3002</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: ca-key-pair\nnamespace: sandbox\ndata:\ntls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMrVENDQWVHZ0F3SUJBZ0lKQUtQR3dLRGwvNUhuTUEwR0NTcUdTSWIzRFFFQkN3VUFNQk14RVRBUEJnTlYKQkFNTUNHcHZjMmgyWVc1c01CNFhEVEU1TURneU1qRTJNRFUxT0ZvWERUSTVNRGd4T1RFMk1EVTFPRm93RXpFUgpNQThHQTFVRUF3d0lhbTl6YUhaaGJtd3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCCkFRQ3doU0IvcVc2L2tMYjJ6cHUrRUp2RDl3SEZhcStRQS8wSkgvTGxseW83ekFGeCtISHErQ09BYmsrQzhCNHQKL0hVRXNuczVSTDA5Q1orWDRqNnBiSkZkS2R1UHhYdTVaVllua3hZcFVEVTd5ZzdPU0tTWnpUbklaNzIzc01zMApSNmpZbi9Ecmo0eFhNSkVmSFVEcVllU1dsWnIzcWkxRUZhMGM3ZlZEeEgrNHh0WnROTkZPakg3YzZEL3ZXa0lnCldRVXhpd3Vzc2U2S01PV2pEbnYvNFZyamVsMlFnVVlVYkhDeWVaSG1jdGkrSzBMV0Nmby9SZzZQdWx3cmJEa2gKam1PZ1l0MzBwZGhYME9aa0F1a2xmVURIZnA4YmpiQ29JMnRhWUFCQTZBS2pLc08zNUxBRVU3OUNMMW1MVkh1WgpBQ0k1VWppamEzVlBXVkhTd21KUEp5dXhBZ01CQUFHalVEQk9NQjBHQTFVZERnUVdCQlFtbDVkVEFaaXhGS2hqCjkzd3VjUldoYW8vdFFqQWZCZ05WSFNNRUdEQVdnQlFtbDVkVEFaaXhGS2hqOTN3dWNSV2hhby90UWpBTUJnTlYKSFJNRUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCK2tsa1JOSlVLQkxYOHlZa3l1VTJSSGNCdgpHaG1tRGpKSXNPSkhac29ZWGRMbEcxcFpORmpqUGFPTDh2aDQ0Vmw5OFJoRVpCSHNMVDFLTWJwMXN1NkNxajByClVHMWtwUkJlZitJT01UNE1VN3ZSSUNpN1VPbFJMcDFXcDBGOGxhM2hQT2NSYjJ5T2ZGcVhYeVpXWGY0dDBCNDUKdEhpK1pDTkhCOUZ4alNSeWNiR1lWaytUS3B2aEphU1lOTUdKM2R4REthUDcrRHgzWGNLNnNBbklBa2h5SThhagpOVSttdzgvdG1Sa1A0SW4va1hBUitSaTBxVW1Iai92d3ZuazRLbTdaVXkxRllIOERNZVM1TmtzbisvdUhsUnhSClY3RG5uMDM5VFJtZ0tiQXFONzJnS05MbzVjWit5L1lxREFZSFlybjk4U1FUOUpEZ3RJL0svQVRwVzhkWAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\ntls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc0lVZ2Y2bHV2NUMyOXM2YnZoQ2J3L2NCeFdxdmtBUDlDUi95NVpjcU84d0JjZmh4CjZ2Z2pnRzVQZ3ZBZUxmeDFCTEo3T1VTOVBRbWZsK0krcVd5UlhTbmJqOFY3dVdWV0o1TVdLVkExTzhvT3praWsKbWMwNXlHZTl0N0RMTkVlbzJKL3c2NCtNVnpDUkh4MUE2bUhrbHBXYTk2b3RSQld0SE8zMVE4Ui91TWJXYlRUUgpUb3grM09nLzcxcENJRmtGTVlzTHJMSHVpakRsb3c1Ny8rRmE0M3Bka0lGR0ZHeHdzbm1SNW5MWXZpdEMxZ242ClAwWU9qN3BjSzJ3NUlZNWpvR0xkOUtYWVY5RG1aQUxwSlgxQXgzNmZHNDJ3cUNOcldtQUFRT2dDb3lyRHQrU3cKQkZPL1FpOVppMVI3bVFBaU9WSTRvMnQxVDFsUjBzSmlUeWNyc1FJREFRQUJBb0lCQUNFTkhET3JGdGg1a1RpUApJT3dxa2UvVVhSbUl5MHlNNHFFRndXWXBzcmUxa0FPMkFDWjl4YS96ZDZITnNlanNYMEM4NW9PbmtrTk9mUHBrClcxVS94Y3dLM1ZpRElwSnBIZ09VNzg1V2ZWRXZtU3dZdi9Fb1V3eHFHRVMvcnB5Z1drWU5WSC9XeGZGQlg3clMKc0dmeVltbXJvM09DQXEyLzNVVVFiUjcrT09md3kzSHdUdTBRdW5FSnBFbWU2RXdzdWIwZzhTTGp2cEpjSHZTbQpPQlNKSXJyL1RjcFRITjVPc1h1Vm5FTlVqV3BBUmRQT1NrRFZHbWtCbnkyaVZURElST3NGbmV1RUZ1NitXOWpqCmhlb1hNN2czbkE0NmlLenUzR0YwRWhLOFkzWjRmeE42NERkbWNBWnphaU1vMFJVaktWTFVqbVlQSEUxWWZVK3AKMkNYb3dNRUNnWUVBMTgyaU52UEkwVVlWaUh5blhKclNzd1YrcTlTRStvVi90U2ZSUUNGU2xsV0d3KzYyblRiVwpvNXpoL1RDQW9VTVNSbUFPZ0xKWU1LZUZ1SWdvTEoxN1pvWjN0U1czTlVtMmRpT0lPSHorcTQxQzM5MDRrUzM5CjkrYkFtVmtaSFA5VktLOEMraS9tek5mSkdHZEJadGIweWtTM2t3OUIxTHdnT3o3MDhFeXFSQ2tDZ1lFQTBXWlAKbzF2MThnV2tMK2FnUDFvOE13eDRPZlpTN3dKY3E0Z0xnUWhjYS9pSkttY0x0RFN4cUJHckJ4UVo0WTIyazlzdQpzTFVrNEJobGlVM29iUUJNaUdtMGtITHVBSEFRNmJvdWZBMUJwZjN2VFdHSkhSRjRMeFJsNzc2akw4UXI4VnpxClpURVBtY0R0T0hpYjdwb2I1Z2IzSDhiVGhYeUhmdGZxRW55alhFa0NnWUVBdk9DdDZZclZhTlQrWThjMmRFYk4Kd3dJOExBaUZtdjdkRjZFUjlCODJPWDRCeGR0WTJhRDFtNTNqN2NaVnpzNzFYOE1TN25FcDN1dkFqaElkbDI3KwpZbTJ1dUUyYVhIbDN5VTZ3RzBETFpUcnVIU0Z5TVI4ZithbHRTTXBDd0s1NXluSGpHVFp6dXpYaVBBbWpwRzdmCk1XbVRncE1IK3puc3UrNE9VNFBHUW9FQ2dZQWNqdUdKbS84YzlOd0JsR2lDZTJIK2JGTHhSTURteStHcm16QkcKZHNkMENqOWF3eGI3aXJ3MytjRGpoRUJMWExKcjA5YTRUdHdxbStrdElxenlRTG92V0l0QnNBcjVrRThlTVVBcAp0djBmRUZUVXJ0cXVWaldYNWlaSTNpMFBWS2ZSa1NSK2pJUmVLY3V3aWZKcVJpWkw1dU5KT0NxYzUvRHF3Yk93CnRjTHAwUUtCZ0VwdEw1SU10Sk5EQnBXbllmN0F5QVBhc0RWRE9aTEhNUGRpL2dvNitjSmdpUmtMYWt3eUpjV3IKU25QSG1TbFE0aEluNGMrNW1lbHBDWFdJaklLRCtjcTlxT2xmQmRtaWtYb2RVQ2pqWUJjNnVGQ1QrNWRkMWM4RwpiUkJQOUNtWk9GL0hOcHN0MEgxenhNd1crUHk5Q2VnR3hhZ0ZCekxzVW84N0xWR2h0VFFZCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\n</code></pre> <p>Note</p> <p>\u5982\u679c\u60a8\u7684\u53d1\u884c\u8005\u4ee3\u8868\u4e00\u4e2a\u4e2d\u95f4\u4f53\uff0c\u8bf7\u786e\u4fdd<code>tls.crt</code>\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u5305\u542b\u53d1\u884c\u8005\u7684\u5b8c\u6574\u94fe:<code>issuer -&gt; intermediate(s) -&gt; root</code>\u3002 \u6839(\u81ea\u7b7e\u540d)CA\u8bc1\u4e66\u662f\u53ef\u9009\u7684\uff0c\u4f46\u662f\u6dfb\u52a0\u5b83\u5c06\u786e\u4fdd\u6b63\u786e\u7684CA\u8bc1\u4e66\u5b58\u50a8\u5728<code>ca.crt</code> \u5bc6\u94a5\u4e0b\u9881\u53d1\u7684<code>Certificate</code>\u7684\u79d8\u5bc6\u4e2d\u3002 \u5982\u679c\u60a8\u672a\u80fd\u63d0\u4f9b\u5b8c\u6574\u7684\u94fe\uff0c\u5219\u5df2\u9881\u53d1\u8bc1\u4e66\u7684\u6d88\u8d39\u8005\u53ef\u80fd\u65e0\u6cd5\u9a8c\u8bc1\u4ed6\u4eec\u662f\u5426\u53d7\u4fe1\u4efb\u3002</p> <p>\u63a5\u4e0b\u6765\u662f\u90e8\u7f72\u5f15\u7528\u8fd9\u4e2a<code>Secret</code>\u7684 CA \u9881\u53d1\u8005\u3002 \u8fd9\u662f\u901a\u8fc7\u5f15\u7528<code>Issuer</code>\u89c4\u8303\u4e2d<code>ca</code>\u8282\u4e0b\u7684\u79d8\u5bc6\u540d\u79f0\u6765\u5b9e\u73b0\u7684\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: ca-issuer\nnamespace: sandbox\nspec:\nca:\nsecretName: ca-key-pair\n</code></pre> <p>\u6307\u5b9aCRL\u5206\u53d1\u70b9(Distribution Points);\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u6807\u8bc6 CRL \u7684\u4f4d\u7f6e\uff0c\u4ece\u4e2d\u53ef\u4ee5\u68c0\u67e5\u8be5\u8bc1\u4e66\u7684\u64a4\u9500\u3002</p> <pre><code>---\nspec:\nca:\nsecretName: ca-key-pair\ncrlDistributionPoints:\n- \"http://example.com\"\n</code></pre> <p>\u90e8\u7f72\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u8bc1\u4e66\u7684\u5c31\u7eea\u72b6\u6001\u6765\u68c0\u67e5\u9881\u53d1\u8005\u662f\u5426\u5df2\u6210\u529f\u914d\u7f6e\u3002 \u5982\u679c\u90e8\u7f72\u7684\u662f<code>clusterissuers</code>\uff0c\u5219\u5c06<code>issuers</code>\u66ff\u6362\u4e3a<code>clusterissuers</code>\u3002</p> <pre><code>$ kubectl get issuers ca-issuer -n sandbox -o wide\nNAME          READY   STATUS                AGE\nca-issuer     True    Signing CA verified   2m\n</code></pre> <p>\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u5728<code>sandbox</code>\u547d\u540d\u7a7a\u95f4\u4e2d\u4f7f\u7528\u540d\u4e3a<code>ca-issuer</code>\u7684 CA<code>Issuer</code>\u6765\u8bf7\u6c42\u8bc1\u4e66\u4e86\u3002</p>"},{"location":"configuration/external/","title":"\u5916\u90e8","text":"<p>cert-manager \u652f\u6301\u5916\u90e8<code>Issuer</code>\u7c7b\u578b\u3002 \u867d\u7136\u5916\u90e8\u9881\u53d1\u8005\u6ca1\u6709\u5728\u4e3b\u8bc1\u4e66\u7ba1\u7406\u5668\u5b58\u50a8\u5e93\u4e2d\u5b9e\u73b0\uff0c\u4f46\u5b83\u4eec\u5728\u5176\u4ed6\u65b9\u9762\u4e0e\u4efb\u4f55\u5176\u4ed6\u9881\u53d1\u8005\u76f8\u540c\u3002</p> <p>\u5916\u90e8\u53d1\u884c\u8005\u901a\u5e38\u90e8\u7f72\u4e3a\u4e00\u4e2a pod\uff0c\u5b83\u88ab\u914d\u7f6e\u4e3a\u76d1\u89c6\u96c6\u7fa4\u4e2d<code>CertificateRequest</code>\u6e90\uff0c\u8fd9\u4e9b\u6e90\u7684<code>issuerRef</code>\u4e0e\u53d1\u884c\u8005\u7684\u540d\u79f0\u5339\u914d\u3002 \u5916\u90e8\u53d1\u884c\u8005\u5b58\u5728\u4e8e<code>cert-manager.io</code>\u7ec4\u4e4b\u5916\u3002</p> <p>\u6bcf\u4e2a\u53d1\u884c\u8005\u7684\u5b89\u88c5\u53ef\u80fd\u4e0d\u540c;\u8bf7\u67e5\u770b\u6bcf\u4e2a\u5916\u90e8\u53d1\u884c\u8005\u7684\u6587\u6863\uff0c\u4ee5\u83b7\u5f97\u6709\u5173\u5b89\u88c5\u3001\u914d\u7f6e\u548c\u4f7f\u7528\u5b83\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002</p>"},{"location":"configuration/external/#_2","title":"\u5df2\u77e5\u7684\u5916\u90e8\u53d1\u884c\u4eba","text":"<p>\u5982\u679c\u60a8\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u60f3\u8981\u5171\u4eab\u7684\u5916\u90e8\u53d1\u884c\u8005\uff0c\u63d0\u51fa\u4e00\u4e2a Pull Request\u5c06\u5b83\u6dfb\u52a0\u5230\u8fd9\u91cc!</p> <p>\u4f17\u6240\u5468\u77e5\uff0c\u8fd9\u4e9b\u5916\u90e8\u53d1\u884c\u4eba\u652f\u6301\u5e76\u5c0a\u91cd\u6279\u51c6.</p> <ul> <li>kms-issuer: \u8bf7\u6c42\u4f7f\u7528AWS KMS\u975e\u5bf9\u79f0\u5bc6\u94a5\u7b7e\u540d\u7684\u8bc1\u4e66\u3002</li> <li>aws-privateca-issuer: Requests   certificates from AWS Private Certificate Authority   for cloud native/hybrid environments.</li> <li>google-cas-issuer: Used   to request certificates signed by private CAs managed by the   Google Cloud Certificate Authority Service.</li> <li>origin-ca-issuer: Used   to request certificates signed by   Cloudflare Origin CA   to enable TLS between Cloudflare edge and your Kubernetes workloads.</li> <li>step-issuer: Requests   certificates from the Smallstep Certificate Authority server.</li> <li>freeipa-issuer: Requests   certificates signed by FreeIPA.</li> <li>ADCS Issuer: Requests   certificates signed by Microsoft Active Directory Certificate Service.   [NOT MAINTAINED]</li> <li>CFSSL Issuer: Request certificates signed by a CFSSL <code>multirootca</code> instance.</li> <li>ncm-issuer: Requests certificates from the Nokia Netguard Certificate Manager</li> <li>tcs-issuer Requests certificates signed securely using Intel's SGX technology.</li> </ul>"},{"location":"configuration/external/#_3","title":"\u5efa\u7acb\u65b0\u7684\u5916\u90e8\u53d1\u884c\u4eba","text":"<p>\u5982\u679c\u60a8\u5bf9\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u5916\u90e8\u53d1\u884c\u65b9\u611f\u5174\u8da3\uff0c\u8bf7\u67e5\u770b\u5f00\u53d1\u6587\u6863.</p>"},{"location":"configuration/selfsigned/","title":"SelfSigned","text":"<p>\u26a0\ufe0f <code>SelfSigned</code>\u9881\u53d1\u8005\u901a\u5e38\u7528\u4e8e\u5728\u672c\u5730\u5f15\u5bfc PKI\uff0c\u8fd9\u5bf9\u4e8e\u9ad8\u7ea7\u7528\u6237\u6765\u8bf4\u662f\u4e00\u4e2a\u590d\u6742\u7684\u4e3b\u9898\u3002 \u4e3a\u4e86\u5728\u751f\u4ea7\u4e2d\u5b89\u5168\u4f7f\u7528\uff0c\u8fd0\u884c PKI \u4f1a\u5f15\u5165\u56f4\u7ed5\u8f6e\u6362\u3001\u4fe1\u4efb\u5b58\u50a8\u5e93\u5206\u53d1\u548c\u707e\u96be\u6062\u590d\u7684\u590d\u6742\u89c4\u5212\u9700\u6c42\u3002</p> <p>\u5982\u679c\u60a8\u4e0d\u6253\u7b97\u8fd0\u884c\u81ea\u5df1\u7684 PKI\uff0c\u8bf7\u4f7f\u7528\u4e0d\u540c\u7684\u9881\u53d1\u8005\u7c7b\u578b\u3002</p> <p><code>SelfSigned</code>\u9881\u53d1\u8005\u5e76\u4e0d\u4ee3\u8868\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u672c\u8eab\uff0c\u800c\u662f\u8868\u793a\u8bc1\u4e66\u5c06\u4f7f\u7528\u7ed9\u5b9a\u7684\u79c1\u94a5\u201c\u5bf9\u81ea\u5df1\u8fdb\u884c\u7b7e\u540d\u201d\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8bc1\u4e66\u7684\u79c1\u94a5\u5c06\u7528\u4e8e\u5bf9\u8bc1\u4e66\u672c\u8eab\u8fdb\u884c\u7b7e\u540d\u3002</p> <p>\u8fd9\u79cd<code>Issuer</code>\u7c7b\u578b\u5bf9\u4e8e\u4e3a\u81ea\u5b9a\u4e49 PKI(\u516c\u5171\u5bc6\u94a5\u57fa\u7840\u8bbe\u65bd)\u5f15\u5bfc\u6839\u8bc1\u4e66\u6216\u521b\u5efa\u7b80\u5355\u7684\u4e34\u65f6\u8bc1\u4e66\u4ee5\u8fdb\u884c\u5feb\u901f\u6d4b\u8bd5\u975e\u5e38\u6709\u7528\u3002</p> <p>\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u6ce8\u610f\u4e8b\u9879 - \u5305\u62ec\u5b89\u5168\u95ee\u9898 - \u9700\u8981\u8003\u8651<code>SelfSigned</code>\u53d1\u884c\u65b9; \u4e00\u822c\u6765\u8bf4\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528<code>CA</code>\u9881\u53d1\u8005\u800c\u4e0d\u662f<code>SelfSigned</code>\u9881\u53d1\u8005\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c<code>SelfSigned</code>\u9881\u53d1\u8005\u5bf9\u4e8e\u6700\u521d\u5f15\u5bfc\u4e00\u4e2a<code>CA</code>\u9881\u53d1\u8005\u975e\u5e38\u6709\u7528\u3002</p> <p>Note</p> <p>\u5f15\u7528\u81ea\u7b7e\u540d\u8bc1\u4e66\u7684<code>CertificateRequest</code>\u4e5f\u5fc5\u987b\u5305\u542b<code>cert-manager.io/private-key-secret-name</code>\u6ce8\u91ca\uff0c\u56e0\u4e3a\u9700\u8981<code>CertificateRequest</code>\u5bf9\u5e94\u7684\u79c1\u94a5\u6765\u7b7e\u7f72\u8bc1\u4e66\u3002 \u8fd9\u4e2a\u6ce8\u91ca\u662f\u7531<code>Certificate</code>\u63a7\u5236\u5668\u81ea\u52a8\u6dfb\u52a0\u7684\u3002</p>"},{"location":"configuration/selfsigned/#_1","title":"\u90e8\u7f72","text":"<p>\u7531\u4e8e<code>SelfSigned</code>\u9881\u53d1\u8005\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u5176\u4ed6\u6e90\uff0c\u56e0\u6b64\u5b83\u662f\u6700\u7b80\u5355\u7684\u914d\u7f6e\u3002 \u53ea\u6709<code>SelfSigned</code>\u8282\u9700\u8981\u51fa\u73b0\u5728 Issuer spec \u4e2d\uff0c\u4e0d\u9700\u8981\u5176\u4ed6\u914d\u7f6e:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: selfsigned-issuer\nnamespace: sandbox\nspec:\nselfSigned: {}\n</code></pre> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: selfsigned-cluster-issuer\nspec:\nselfSigned: {}\n</code></pre> <p>\u90e8\u7f72\u540e\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u7acb\u5373\u770b\u5230\u9881\u53d1\u8005\u5df2\u51c6\u5907\u597d\u8fdb\u884c\u7b7e\u540d:</p> <pre><code>$ kubectl get issuers  -n sandbox -o wide selfsigned-issuer\nNAME                READY   STATUS                AGE\nselfsigned-issuer   True                          2m\n\n$ kubectl get clusterissuers -o wide selfsigned-cluster-issuer\nNAME                        READY   STATUS   AGE\nselfsigned-cluster-issuer   True             3m\n</code></pre>"},{"location":"configuration/selfsigned/#ca","title":"\u5f15\u5bfc<code>CA</code>\u9881\u53d1\u8005","text":"<p><code>SelfSigned</code> \u9881\u53d1\u8005\u7684\u7406\u60f3\u7528\u4f8b\u4e4b\u4e00\u662f\u4e3a\u79c1\u6709 PKI \u5f15\u5bfc\u81ea\u5b9a\u4e49\u6839\u8bc1\u4e66\uff0c\u5305\u62ec\u4f7f\u7528\u8bc1\u4e66\u7ba1\u7406\u5668<code>CA</code>\u9881\u53d1\u8005\u3002</p> <p>\u4e0b\u9762\u7684 YAML \u5c06\u521b\u5efa\u4e00\u4e2a<code>SelfSigned</code>\u9881\u53d1\u8005\uff0c\u9881\u53d1\u4e00\u4e2a\u6839\u8bc1\u4e66\uff0c\u5e76\u4f7f\u7528\u8be5\u6839\u4f5c\u4e3a<code>CA</code>\u9881\u53d1\u8005:</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\nname: sandbox\n---\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: selfsigned-issuer\nspec:\nselfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: my-selfsigned-ca\nnamespace: sandbox\nspec:\nisCA: true\ncommonName: my-selfsigned-ca\nsecretName: root-secret\nprivateKey:\nalgorithm: ECDSA\nsize: 256\nissuerRef:\nname: selfsigned-issuer\nkind: ClusterIssuer\ngroup: cert-manager.io\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: my-ca-issuer\nnamespace: sandbox\nspec:\nca:\nsecretName: root-secret\n</code></pre>"},{"location":"configuration/selfsigned/#crl","title":"CRL \u5206\u53d1\u70b9","text":"<p>\u60a8\u8fd8\u53ef\u4ee5\u9009\u62e9\u5c06CRL\u5206\u53d1\u70b9\u6307\u5b9a\u4e3a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u6807\u8bc6 CRL \u7684\u4f4d\u7f6e\uff0c\u5176\u4e2d\u53ef\u4ee5\u68c0\u67e5\u5df2\u9881\u53d1\u8bc1\u4e66\u7684\u64a4\u9500\u72b6\u6001:</p> <pre><code>---\nspec:\nselfSigned:\ncrlDistributionPoints:\n- \"http://example.com\"\n</code></pre>"},{"location":"configuration/selfsigned/#_2","title":"\u8b66\u544a","text":""},{"location":"configuration/selfsigned/#_3","title":"\u4fe1\u4efb","text":"<p>\u5ba2\u6237\u7aef\u4f7f\u7528<code>SelfSigned</code>\u8bc1\u4e66\u65f6\uff0c\u5982\u679c\u4e8b\u5148\u6ca1\u6709\u8bc1\u4e66\uff0c\u5c31\u65e0\u6cd5\u4fe1\u4efb\u5b83\u4eec\u3002 \u5f53\u4f7f\u7528\u8bc1\u4e66\u7684\u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef\u5b58\u5728\u4e8e\u4e0d\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u65f6\uff0c\u8fd9\u5c31\u5f88\u96be\u7ba1\u7406\u3002 \u8fd9\u4e2a\u9650\u5236\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528trust-manager\u5c06<code>ca.crt</code>\u5206\u53d1\u5230\u5176\u4ed6\u547d\u540d\u7a7a\u95f4\u6765\u89e3\u51b3\u3002 \u53e6\u4e00\u79cd\u9009\u62e9\u662f\u4f7f\u7528\"TOFU\"(\u9996\u6b21\u4f7f\u7528\u65f6\u4fe1\u4efb)\uff0c\u8fd9\u5728\u53d1\u751f\u4e2d\u95f4\u4eba\u653b\u51fb\u65f6\u5177\u6709\u5b89\u5168\u9690\u60a3\u3002</p>"},{"location":"configuration/selfsigned/#_4","title":"\u8bc1\u4e66\u7684\u6709\u6548\u6027","text":"<p>\u81ea\u7b7e\u540d\u8bc1\u4e66\u7684\u4e00\u4e2a\u526f\u4f5c\u7528\u662f\u5b83\u7684 Subject DN \u548c Issuer DN \u662f\u76f8\u540c\u7684\u3002 X.509 RFC 5280\uff0c\u7ae0\u8282 4.1.2.4\u8981\u6c42:</p> <p>\u9881\u53d1\u8005\u5b57\u6bb5\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u975e\u7a7a\u7684\u533a\u522b\u540d\u79f0(DN)\u3002</p> <p>\u4f46\u662f\uff0c\u81ea\u7b7e\u540d\u8bc1\u4e66\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6ca1\u6709\u8bbe\u7f6e\u4e3b\u9898 DN\u3002 \u9664\u975e\u624b\u52a8\u8bbe\u7f6e\u8bc1\u4e66\u7684\u4e3b\u9898 DN\uff0c\u5426\u5219\u9881\u53d1\u8005 DN \u5c06\u4e3a\u7a7a\uff0c\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u8bc1\u4e66\u5c06\u662f\u65e0\u6548\u7684\u3002</p> <p>\u89c4\u8303\u4e2d\u8fd9\u4e00\u7279\u5b9a\u9886\u57df\u7684\u9a8c\u8bc1\u662f\u4e0d\u5b8c\u6574\u7684\uff0c\u5e76\u4e14\u5728 TLS \u5e93\u4e4b\u95f4\u662f\u4e0d\u540c\u7684\uff0c\u4f46\u662f\u5982\u679c\u60a8\u4f7f\u7528\u7684\u8bc1\u4e66\u5e26\u6709\u7a7a\u9881\u53d1\u8005 DN\uff0c\u90a3\u4e48\u5c06\u6765\u5e93\u5c06\u5b8c\u5168\u5728\u89c4\u8303\u4e2d\u6539\u8fdb\u5176\u9a8c\u8bc1\u5e76\u7834\u574f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u8fd9\u59cb\u7ec8\u5b58\u5728\u98ce\u9669\u3002</p> <p>\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u786e\u4fdd\u4e3a<code>SelfSigned</code> certs \u8bbe\u7f6e\u4e00\u4e2a\u4e3b\u9898\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728\u8bc1\u4e66\u7ba1\u7406\u5668<code>Certificate</code>\u5bf9\u8c61\u4e0a\u8bbe\u7f6e<code>spec.subject</code>\u6765\u5b9e\u73b0\uff0c\u8be5\u5bf9\u8c61\u5c06\u7531<code>SelfSigned</code>\u9881\u53d1\u8005\u9881\u53d1\u3002</p> <p>\u4ece 1.3 \u7248\u5f00\u59cb\uff0c\u5982\u679c cert-manager \u68c0\u6d4b\u5230\u4e00\u4e2a\u8bc1\u4e66\u662f\u7531\u4e00\u4e2a<code>SelfSigned</code>\u9881\u53d1\u8005\u521b\u5efa\u7684\uff0c\u8be5\u9881\u53d1\u8005 DN \u4e3a\u7a7a\uff0c\u5b83\u5c06\u53d1\u51fa\u4e00\u4e2a\u7c7b\u578b\u4e3a<code>BadConfig</code>\u7684 Kubernetes\u8b66\u544a\u4e8b\u4ef6\u3002</p>"},{"location":"configuration/vault/","title":"Vault","text":"<p><code>Vault</code> <code>Issuer</code>\u8868\u793a\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u4fdd\u9669\u5e93-\u53ef\u4ee5\u662f\u4e00\u4e2a\u591a\u7528\u9014\u79d8\u5bc6\u5b58\u50a8 \u7528\u4e8e\u4e3a\u60a8\u7684\u516c\u5f00\u5bc6\u7801\u5319\u57fa\u7840\u8bbe\u65bd(PKI)\u7b7e\u7f72\u8bc1\u4e66\u3002 Vault \u662f cert-manager \u7684\u5916\u90e8\u9879\u76ee\uff0c\u56e0\u6b64\uff0c\u672c\u6307\u5357\u5047\u5b9a\u5b83\u5df2\u6b63\u786e\u914d\u7f6e\u548c\u90e8\u7f72\uff0c\u53ef\u4ee5\u8fdb\u884c\u7b7e\u540d\u3002 \u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u5c06 Vault \u914d\u7f6e\u4e3a\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u7684\u4fe1\u606f.</p> <p>\u8fd9\u79cd<code>Issuer</code>\u7c7b\u578b\u901a\u5e38\u7528\u4e8e\u4ee5\u4e0b\u60c5\u51b5:\u60a8\u7684\u57fa\u7840\u8bbe\u65bd\u4e2d\u5df2\u7ecf\u4f7f\u7528\u4e86 Vault\uff0c\u6216\u8005\u60a8\u5e0c\u671b\u5229\u7528\u5176\u7279\u6027\u96c6\uff0c\u800c CA \u53d1\u884c\u8005\u672c\u8eab\u65e0\u6cd5\u63d0\u4f9b\u8fd9\u4e9b\u7279\u6027\u96c6\u3002</p>"},{"location":"configuration/vault/#_1","title":"\u90e8\u7f72","text":"<p>\u6240\u6709 Vault \u9881\u53d1\u8005\u5171\u4eab\u8bf7\u6c42\u8bc1\u4e66\u7684\u516c\u5171\u914d\u7f6e\uff0c\u5373\u670d\u52a1\u5668\u3001\u8def\u5f84\u548c CA \u5305:</p> <ul> <li>Server is the URL whereby Vault is reachable.</li> <li>Path is the Vault path that will be used for signing. Note that the path   must use the <code>sign</code> endpoint.</li> <li>CA bundle denotes an optional field containing a base64 encoded string of the   Certificate Authority to trust the Vault connection. This is typically   always required when using an <code>https</code> URL.</li> </ul> <p>Below is an example of a configuration to connect a Vault server.</p> <p>Warning: This configuration is incomplete as no authentication methods have been added.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: vault-issuer\nnamespace: sandbox\nspec:\nvault:\npath: pki_int/sign/example-dot-com\nserver: https://vault.local\ncaBundle: &lt;base64 encoded CA Bundle PEM file&gt;\nauth: ...\n</code></pre>"},{"location":"configuration/vault/#authenticating","title":"Authenticating","text":"<p>In order to request signing of certificates by Vault, the issuer must be able to properly authenticate against it. cert-manager provides multiple approaches to authenticating to Vault which are detailed below.</p>"},{"location":"configuration/vault/#authenticating-via-an-approle","title":"Authenticating via an AppRole","text":"<p>An AppRole is a method of authenticating to Vault through use of its internal role policy system. This authentication method requires that the issuer has possession of the <code>SecretID</code> secret key, the <code>RoleID</code> of the role to assume, and the app role path. Firstly, the secret ID key must be stored within a Kubernetes <code>Secret</code> that resides in the same namespace as the <code>Issuer</code>, or otherwise inside the <code>Cluster Resource Namespace</code> in the case of a <code>ClusterIssuer</code>.</p> <pre><code>apiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\nname: cert-manager-vault-approle\nnamespace: sandbox\ndata:\nsecretId: \"MDI...\"\n</code></pre> <p>Once the <code>Secret</code> has been created, the <code>Issuer</code> is ready to be deployed which references this <code>Secret</code>, as well as the data key of the field that stores the secret ID.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: vault-issuer\nnamespace: sandbox\nspec:\nvault:\npath: pki_int/sign/example-dot-com\nserver: https://vault.local\ncaBundle: &lt;base64 encoded caBundle PEM file&gt;\nauth:\nappRole:\npath: approle\nroleId: \"291b9d21-8ff5-...\"\nsecretRef:\nname: cert-manager-vault-approle\nkey: secretId\n</code></pre>"},{"location":"configuration/vault/#authenticating-with-a-token","title":"Authenticating with a Token","text":"<p>This method of authentication uses a token string that has been generated from one of the many authentication backends that Vault supports. These tokens have an expiry and so need to be periodically refreshed. You can read more on Vault tokens here.</p> <p>Note: cert-manager does not refresh these token automatically and so another process must be put in place to do this.</p> <p>Firstly, the token is be stored inside a Kubernetes <code>Secret</code> inside the same namespace as the <code>Issuer</code> or otherwise in the <code>Cluster Resource Namespace</code> in the case of using a <code>ClusterIssuer</code>.</p> <pre><code>apiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\nname: cert-manager-vault-token\nnamespace: sandbox\ndata:\ntoken: \"MjI...\"\n</code></pre> <p>Once submitted, the Vault issuer is able to be created using token authentication by referencing this <code>Secret</code> along with the key of the field the token data is stored at.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: vault-issuer\nnamespace: sandbox\nspec:\nvault:\npath: pki_int/sign/example-dot-com\nserver: https://vault.local\ncaBundle: &lt;base64 encoded caBundle PEM file&gt;\nauth:\ntokenSecretRef:\nname: cert-manager-vault-token\nkey: token\n</code></pre>"},{"location":"configuration/vault/#authenticating-with-kubernetes-service-accounts","title":"Authenticating with Kubernetes Service Accounts","text":"<p>Vault can be configured so that applications can authenticate using Kubernetes <code>Service Account Tokens</code>. You find documentation on how to configure Vault to authenticate using Service Account Tokens here.</p> <p>For the Vault issuer to use this authentication, cert-manager must get access to the token that is stored in a Kubernetes <code>Secret</code>. Kubernetes Service Account Tokens are already stored in <code>Secret</code> resources however, you must ensure that it is present in the same namespace as the <code>Issuer</code>, or otherwise in the <code>Cluster Resource Namespace</code> in the case of using a <code>ClusterIssuer</code>.</p> <p>Note: In Kubernetes 1.24 onwards, the token secret is no longer created by default for the Service Account. In this case you need to manually create the secret resource. See this guide for more details.</p> <p>This authentication method also expects a <code>role</code> field which is the Vault role that the Service Account is to assume, as well as an optional <code>mountPath</code> field which is the authentication mount path, defaulting to <code>kubernetes</code>.</p>"},{"location":"configuration/vault/#kubernetes-version-less-than-124","title":"Kubernetes version less than 1.24","text":"<p>The following example will be making use of the Service Account <code>my-service-account</code>. The secret data field key will be <code>token</code> if the <code>Secret</code> has been created by Kubernetes. The Vault role used is <code>my-app-1</code>, using the default mount path of <code>/v1/auth/kubernetes</code></p> <ol> <li>Create the Service Account:</li> </ol> <pre><code>kubectl create serviceaccount -n sandbox vault-issuer\n</code></pre> <ol> <li>Get the auto-generated Secret name:</li> </ol> <pre><code>kubectl get secret -o json | jq -r '.items[] | select(.metadata.annotations[\"kubernetes.io/service-account.name\"] == \"vault-issuer\") | .metadata.name'\n</code></pre> <ol> <li>Create the Issuer using that Secret name retrieved from the previous step:</li> </ol> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: vault-issuer\nnamespace: sandbox\nspec:\nvault:\npath: pki_int/sign/example-dot-com\nserver: https://vault.local\ncaBundle: &lt;base64 encoded caBundle PEM file&gt;\nauth:\nkubernetes:\nrole: my-app-1\nmountPath: /v1/auth/kubernetes\nsecretRef:\nname: &lt;auto-generated secret name&gt;\nkey: token\n</code></pre>"},{"location":"configuration/vault/#kubernetes-version-124-and-greater","title":"Kubernetes version 1.24 and greater","text":"<p>This example is almost the same as above but adjusted for the change in Kubernetes 1.24 and above.</p> <ol> <li>Create the Service Account:</li> </ol> <pre><code>kubectl create serviceaccount -n sandbox vault-issuer\n</code></pre> <ol> <li>Create the Secret resource for Kubernetes to populate the <code>token</code> value:</li> </ol> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: vault-issuer-token\nannotations:\nkubernetes.io/service-account.name: \"vault-issuer\"\ntype: kubernetes.io/service-account-token\ndata: {}\n</code></pre> <ol> <li>Create the Issuer resource referencing the Secret resource:</li> </ol> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: vault-issuer\nnamespace: sandbox\nspec:\nvault:\npath: pki_int/sign/example-dot-com\nserver: https://vault.local\ncaBundle: &lt;base64 encoded caBundle PEM file&gt;\nauth:\nkubernetes:\nrole: my-app-1\nmountPath: /v1/auth/kubernetes\nsecretRef:\nname: vault-issuer-token\nkey: token\n</code></pre>"},{"location":"configuration/vault/#verifying-the-issuer-deployment","title":"Verifying the issuer Deployment","text":"<p>Once the Vault issuer has been deployed, it will be marked as ready if the configuration is valid. Replace <code>issuers</code> here with <code>clusterissuers</code> if that is what has been deployed.</p> <pre><code>$ kubectl get issuers vault-issuer -n sandbox -o wide\nNAME          READY   STATUS          AGE\nvault-issuer  True    Vault verified  2m\n</code></pre> <p>Certificates are now ready to be requested by using the Vault issuer named <code>vault-issuer</code> within the <code>sandbox</code> namespace.</p>"},{"location":"configuration/venafi/","title":"Venafi","text":""},{"location":"configuration/venafi/#_1","title":"\u7b80\u4ecb","text":"<p>Venafi <code>Issuer</code>\u7c7b\u578b\u5141\u8bb8\u60a8\u4eceVenafi as a Service (VaaS)\u548cVenafi Trust Protection Platform (TPP)\u5b9e\u4f8b\u4e2d\u83b7\u53d6\u8bc1\u4e66\u3002</p> <p>\u4f60\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u96c6\u7fa4\u4e2d\u5b89\u88c5\u591a\u4e2a\u4e0d\u540c\u7684 Venafi <code>Issuer</code> \u7c7b\u578b\uff0c\u5305\u62ec Venafi \u5373\u670d\u52a1\u548c TPP \u53d1\u884c\u8005\u7c7b\u578b\u7684\u6df7\u5408\u3002 \u8fd9\u4f7f\u60a8\u53ef\u4ee5\u7075\u6d3b\u5730\u4f7f\u7528 Venafi \u5e10\u6237\u7684\u7c7b\u578b\u3002</p> <p>\u4f7f\u7528 Venafi <code>Issuer</code>\u4e3a\u201c\u8bc1\u4e66\u201d\u63d0\u4f9b\u81ea\u52a8\u8bc1\u4e66\u66f4\u65b0\u548c\u7ba1\u7406\u3002</p> <p>A single Venafi <code>Issuer</code> represents a single Venafi 'zone' so you must create one <code>Issuer</code> resource for each zone you want to use. A zone is a single entity that combines the policy that governs certificate issuance with information about how certificates are organized in Venafi to identify the business application and establish ownership.</p> <p>You can configure your <code>Issuer</code> resource to either issue certificates only within a single namespace, or cluster-wide (using a <code>ClusterIssuer</code> resource). For more information on the distinction between <code>Issuer</code> and <code>ClusterIssuer</code> resources, read the Namespaces section.</p>"},{"location":"configuration/venafi/#venafi_1","title":"\u521b\u5efa Venafi \u4f5c\u4e3a\u670d\u52a1\u9881\u53d1\u8005","text":"<p>If you haven't already done so, create your Venafi as a Service account on this page and copy the API key from your user preferences. Then you may want to create a custom CA Account and Issuing Template or choose instead to use defaults that are automatically created for testing (\"Built-in CA\" and \"Default\", respectively). Lastly you'll need to create an Application for establishing ownership of all the certificates requested by your cert-manager Issuer, and assign to it the Issuing Template.</p> <p>Make a note of the Application name and API alias of the Issuing Template because together they comprise the 'zone' you will need for your <code>Issuer</code> configuration.</p> <p>In order to set up a Venafi as a Service <code>Issuer</code>, you must first create a Kubernetes <code>Secret</code> resource containing your Venafi as a Service API credentials:</p> <pre><code>$ kubectl create secret generic \\\nvaas-secret \\\n--namespace='NAMESPACE OF YOUR ISSUER RESOURCE' \\\n--from-literal=apikey='YOUR_VAAS_API_KEY_HERE'\n</code></pre> <p>Note: If you are configuring your issuer as a <code>ClusterIssuer</code> resource in order to serve <code>Certificates</code> across your whole cluster, you must set the <code>--namespace</code> parameter to <code>cert-manager</code>, which is the default <code>Cluster Resource Namespace</code>. The <code>Cluster Resource Namespace</code> can be configured through the <code>--cluster-resource-namespace</code> flag on the cert-manager controller component.</p> <p>This API key will be used by cert-manager to interact with Venafi as a Service on your behalf.</p> <p>Once the API key <code>Secret</code> has been created, you can create your <code>Issuer</code> or <code>ClusterIssuer</code> resource. If you are creating a <code>ClusterIssuer</code> resource, you must change the <code>kind</code> field to <code>ClusterIssuer</code> and remove the <code>metadata.namespace</code> field.</p> <p>Save the below content after making your amendments to a file named <code>vaas-issuer.yaml</code>.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: vaas-issuer\nnamespace: &lt;NAMESPACE YOU WANT TO ISSUE CERTIFICATES IN&gt;\nspec:\nvenafi:\nzone: \"My Application\\My CIT\" # Set this to &lt;Application Name&gt;\\&lt;Issuing Template Alias&gt;\ncloud:\napiTokenSecretRef:\nname: vaas-secret\nkey: apikey\n</code></pre> <p>You can then create the Issuer using <code>kubectl create</code>.</p> <pre><code>$ kubectl create -f vaas-issuer.yaml\n</code></pre> <p>Verify the <code>Issuer</code> has been initialized correctly using <code>kubectl describe</code>.</p> <pre><code>$ kubectl get issuer vaas-issuer --namespace='NAMESPACE OF YOUR ISSUER RESOURCE' -o wide\nNAME           READY   STATUS                 AGE\nvaas-issuer    True    Venafi issuer started  2m\n</code></pre> <p>You are now ready to issue certificates using the newly provisioned Venafi <code>Issuer</code> and Venafi as a Service.</p> <p>Read the Issuing Certificates document for more information on how to create Certificate resources.</p>"},{"location":"configuration/venafi/#venafi_2","title":"\u521b\u5efa Venafi \u4fe1\u4efb\u4fdd\u62a4\u5e73\u53f0\u53d1\u884c\u4eba","text":"<p>The Venafi Trust Protection Platform integration allows you to obtain certificates from a properly configured Venafi TPP instance.</p> <p>The setup is similar to the Venafi as a Service configuration above, however some of the connection parameters are slightly different.</p> <p>Note: You must allow \"User Provided CSRs\" as part of your TPP policy, as this is the only type supported by cert-manager at this time.</p> <p>More specifically, the valid configurations of the \"CSR handling\" are:</p> <ul> <li>\"User Provided CSRs\" selected and unlocked,</li> <li>\"User Provided CSRs\" selected and locked,</li> <li>\"Service Generated CSRs\" selected and unlocked.</li> </ul> <p>When using \"Service Generated CSRs\" selected and unlocked, the default CSR configuration present in your policy folder will override the configuration of your Certificate resource. The subject DN, key algorithm, and key size will be overridden by the values set in the policy folder.</p> <p>With \"Service Generated CSRs\" selected and locked, the certificate issuance will systematically fail with the following message:</p> <pre><code>400 PKCS#10 data will not be processed. Policy \"\\VED\\Policy\\foo\" is locked to a Server Generated CSR.\n</code></pre> <p>In order to set up a Venafi Trust Protection Platform <code>Issuer</code>, you must first create a Kubernetes <code>Secret</code> resource containing your Venafi TPP API credentials.</p>"},{"location":"configuration/venafi/#_2","title":"\u63a5\u5165\u4ee4\u724c\u8ba4\u8bc1","text":"<ol> <li>Set up token authentication.</li> </ol> <p>NOTE: Do not select \"Refresh Token Enabled\" and set a long \"Token Validity (days)\".</p> <ol> <li>Create a new user with sufficient privileges to manage and revoke certificates in a particular policy folder (zone).</li> </ol> <p>E.g. <code>k8s-xyz-automation</code></p> <ol> <li>Create a new application integration</li> </ol> <p>Create an application integration with name and ID <code>cert-manager</code>.    Set the \"API Access Settings\" to <code>Certificates: Read,Manage,Revoke</code>.</p> <p>\"Edit Access\" to the new application integration, and allow it to be used by the user you created earlier.</p> <ol> <li>Generate an access token</li> </ol> <pre><code>vcert getcred \\\n  --username k8s-xyz-automation \\\n  --password somepassword \\\n  -u https://tpp.example.com/vedsdk \\\n  --client-id cert-manager \\\n  --scope \"certificate:manage,revoke\"\n</code></pre> <p>This will print an access-token to <code>stdout</code>. E.g.</p> <pre><code>vCert: 2020/10/07 16:34:27 Getting credentials\naccess_token:  I69n.............y1VjNJT3o9U0Wko19g==\naccess_token_expires:  2021-01-05T15:34:30Z\n</code></pre> <ol> <li>Save the access-token to a Secret in the Kubernetes cluster</li> </ol> <pre><code>$ kubectl create secret generic \\\ntpp-secret \\\n--namespace=&lt;NAMESPACE OF YOUR ISSUER RESOURCE&gt; \\\n--from-literal=access-token='YOUR_TPP_ACCESS_TOKEN'\n</code></pre>"},{"location":"configuration/venafi/#_3","title":"\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1","text":"<p>\u26a0\ufe0f When you supply a Venafi TPP username and password, cert-manager uses an older authentication method which is called \"API Keys\", which has been deprecated since Venafi TPP <code>19.2</code>.</p> <p>Beginning in Venafi TPP <code>22.2</code>, \"API Keys\" are disabled by default. You will need to contact Venafi customer support for a special license key which will allow you to re-enable the \"API Keys\" feature, so that you can continue to use username and password authentication with cert-manager.</p> <p>In Venafi TPP <code>22.3</code>, the \"API Keys\" feature will be permanently removed, and you will need to use access-token authentication instead.</p> <p>\ud83d\udcd6 Read Deprecated functionality from Venafi Platform and Functionality Scheduled for Deprecation for more information.</p> <pre><code>$ kubectl create secret generic \\\ntpp-secret \\\n--namespace=&lt;NAMESPACE OF YOUR ISSUER RESOURCE&gt; \\\n--from-literal=username='YOUR_TPP_USERNAME_HERE' \\\n--from-literal=password='YOUR_TPP_PASSWORD_HERE'\n</code></pre> <p>Note: If you are configuring your issuer as a <code>ClusterIssuer</code> resource in order to issue <code>Certificates</code> across your whole cluster, you must set the <code>--namespace</code> parameter to <code>cert-manager</code>, which is the default <code>Cluster Resource Namespace</code>. The <code>Cluster Resource Namespace</code> can be configured through the <code>--cluster-resource-namespace</code> flag on the cert-manager controller component.</p> <p>These credentials will be used by cert-manager to interact with your Venafi TPP instance. Username attribute must be adhere to the <code>&lt;identity provider&gt;:&lt;username&gt;</code> format. For example: <code>local:admin</code>.</p> <p>Once the Secret containing credentials has been created, you can create your <code>Issuer</code> or <code>ClusterIssuer</code> resource. If you are creating a <code>ClusterIssuer</code> resource, you must change the <code>kind</code> field to <code>ClusterIssuer</code> and remove the <code>metadata.namespace</code> field.</p> <p>Save the below content after making your amendments to a file named <code>tpp-issuer.yaml</code>.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: tpp-issuer\nnamespace: &lt;NAMESPACE YOU WANT TO ISSUE CERTIFICATES IN&gt;\nspec:\nvenafi:\nzone: \\VED\\Policy\\devops\\cert-manager # Set this to the Venafi policy folder you want to use\ntpp:\nurl: https://tpp.venafi.example/vedsdk # Change this to the URL of your TPP instance\ncaBundle: &lt;base64 encoded string of caBundle PEM file, or empty to use system root CAs&gt;\ncredentialsRef:\nname: tpp-secret\n</code></pre> <p>You can then create the <code>Issuer</code> using <code>kubectl create -f</code>.</p> <pre><code>$ kubectl create -f tpp-issuer.yaml\n</code></pre> <p>Verify the <code>Issuer</code> has been initialized correctly using <code>kubectl describe</code>.</p> <pre><code>$ kubectl describe issuer tpp-issuer --namespace='NAMESPACE OF YOUR ISSUER RESOURCE'\n</code></pre> <p>You are now ready to issue certificates using the newly provisioned Venafi <code>Issuer</code> and Trust Protection Platform.</p> <p>Read the Issuing Certificates document for more information on how to create Certificate resources.</p>"},{"location":"configuration/venafi/#_4","title":"\u7279\u5b9a\u4e8e\u53d1\u884c\u8005\u7684\u6ce8\u91ca","text":""},{"location":"configuration/venafi/#_5","title":"\u81ea\u5b9a\u4e49\u5b57\u6bb5","text":"<p>Starting <code>v0.14</code> you can pass custom fields to Venafi (TPP version <code>v19.2</code> and higher) using the <code>venafi.cert-manager.io/custom-fields</code> annotation on Certificate resources. The value is a JSON encoded array of custom field objects having a <code>name</code> and <code>value</code> key. For example:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-com-certificate\nannotations:\nvenafi.cert-manager.io/custom-fields: |-\n[\n{\"name\": \"field-name\", \"value\": \"vield value\"},\n{\"name\": \"field-name-2\", \"value\": \"vield value 2\"}\n]\n</code></pre>"},{"location":"configuration/acme/","title":"ACME","text":"<p>ACME \u9881\u53d1\u8005\u7c7b\u578b\u8868\u793a\u5728\u81ea\u52a8\u8bc1\u4e66\u7ba1\u7406\u73af\u5883(ACME)\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u670d\u52a1\u5668\u4e0a\u6ce8\u518c\u7684\u5355\u4e2a\u5e10\u6237\u3002 \u5f53\u60a8\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 ACME <code>Issuer</code>\u65f6\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u751f\u6210\u4e00\u4e2a\u7528\u4e8e\u5728 ACME \u670d\u52a1\u5668\u4e0a\u8bc6\u522b\u60a8\u7684\u79c1\u94a5\u3002</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5ba2\u6237\u7aef\u8ba1\u7b97\u673a\u901a\u5e38\u4fe1\u4efb\u516c\u5171 ACME \u670d\u52a1\u5668\u9881\u53d1\u7684\u8bc1\u4e66\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u4f8b\u5982\uff0c\u8bbf\u95ee\u4e00\u4e2a\u7531\u4e3a\u8be5 URL \u9881\u53d1\u7684 ACME \u8bc1\u4e66\u652f\u6301\u7684\u7f51\u7ad9\uff0c\u5c06\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u88ab\u5927\u591a\u6570\u5ba2\u6237\u7aef\u7684 web \u6d4f\u89c8\u5668\u4fe1\u4efb\u3002 ACME \u8bc1\u4e66\u901a\u5e38\u662f\u514d\u8d39\u7684\u3002</p>"},{"location":"configuration/acme/#_1","title":"\u89e3\u51b3\u6311\u6218","text":"<p>\u4e3a\u4e86\u8ba9 ACME CA \u670d\u52a1\u5668\u9a8c\u8bc1\u5ba2\u6237\u673a\u662f\u5426\u62e5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u57df\uff0c\u6b63\u5728\u8bf7\u6c42\u8bc1\u4e66\uff0c\u5ba2\u6237\u673a\u5fc5\u987b\u5b8c\u6210\u201c\u8d28\u8be2\u201d\u3002 \u8fd9\u662f\u4e3a\u4e86\u786e\u4fdd\u5ba2\u6237\u7aef\u65e0\u6cd5\u4e3a\u4ed6\u4eec\u4e0d\u62e5\u6709\u7684\u57df\u540d\u8bf7\u6c42\u8bc1\u4e66\uff0c\u4ece\u800c\u6b3a\u8bc8\u6027\u5730\u6a21\u4eff\u5176\u4ed6\u4eba\u7684\u7f51\u7ad9\u3002 \u8be6\u89c1RFC8555\uff0ccert-manager \u63d0\u4f9b\u4e86\u4e24\u4e2a\u6311\u6218\u9a8c\u8bc1- HTTP01 \u548c DNS01 \u6311\u6218\u3002</p> <p>HTTP01\u6311\u6218\u662f\u901a\u8fc7\u7ed9\u51fa\u4e00\u4e2a\u8ba1\u7b97\u5bc6\u94a5\u6765\u5b8c\u6210\u7684\uff0c\u8be5\u5bc6\u94a5\u5e94\u8be5\u51fa\u73b0\u5728 HTTP URL \u7aef\u70b9\u4e0a\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4e92\u8054\u7f51\u4e0a\u8def\u7531\u3002 \u8be5 URL \u5c06\u4f7f\u7528\u8bc1\u4e66\u8bf7\u6c42\u7684\u57df\u540d\u3002 \u4e00\u65e6 ACME \u670d\u52a1\u5668\u80fd\u591f\u901a\u8fc7 internet \u4ece\u8fd9\u4e2a URL \u83b7\u5f97\u8fd9\u4e2a\u5bc6\u94a5\uff0cACME \u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u9a8c\u8bc1\u60a8\u662f\u8fd9\u4e2a\u57df\u7684\u6240\u6709\u8005\u3002 \u5f53\u521b\u5efa HTTP01 \u6311\u6218\u65f6\uff0ccert-manager \u5c06\u81ea\u52a8\u914d\u7f6e\u60a8\u7684\u96c6\u7fa4\u5165\u53e3\uff0c\u5c06\u6b64 URL \u7684\u6d41\u91cf\u8def\u7531\u5230\u63d0\u4f9b\u6b64\u5bc6\u94a5\u7684\u5c0f\u578b web \u670d\u52a1\u5668\u3002</p> <p>DNS01\u6311\u6218\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2a\u5b58\u5728\u4e8e DNS TXT \u8bb0\u5f55\u4e2d\u7684\u8ba1\u7b97\u5bc6\u94a5\u6765\u5b8c\u6210\u3002 \u4e00\u65e6\u8fd9\u4e2a TXT \u8bb0\u5f55\u5728\u4e92\u8054\u7f51\u4e0a\u4f20\u64ad\uff0cACME \u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u901a\u8fc7 DNS \u67e5\u627e\u6210\u529f\u5730\u68c0\u7d22\u8fd9\u4e2a\u5bc6\u94a5\uff0c\u5e76\u9a8c\u8bc1\u5ba2\u6237\u7aef\u62e5\u6709\u6240\u8bf7\u6c42\u8bc1\u4e66\u7684\u57df\u3002 \u6709\u4e86\u6b63\u786e\u7684\u6743\u9650\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u81ea\u52a8\u4e3a\u7ed9\u5b9a\u7684 DNS \u63d0\u4f9b\u7a0b\u5e8f\u663e\u793a\u6b64 TXT \u8bb0\u5f55\u3002</p>"},{"location":"configuration/acme/#_2","title":"\u914d\u7f6e","text":""},{"location":"configuration/acme/#acme_1","title":"\u521b\u5efa\u57fa\u672c ACME \u9881\u53d1\u8005","text":"<p>\u6240\u6709 ACME <code>Issuers</code>\u90fd\u9075\u5faa\u7c7b\u4f3c\u7684\u914d\u7f6e\u7ed3\u6784 - \u4e00\u4e2a\u5ba2\u6237<code>email</code>\uff0c\u4e00\u4e2a<code>server</code>URL\uff0c\u4e00\u4e2a<code>privateKeySecretRef</code>\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6216\u591a\u4e2a<code>solvers</code>\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684 ACME \u9881\u53d1\u8005\u793a\u4f8b:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\n# You must replace this email address with your own.\n# Let's Encrypt will use this to contact you about expiring\n# certificates, and issues related to your account.\nemail: user@example.com\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\n# Secret resource that will be used to store the account's private key.\nname: example-issuer-account-key\n# Add a single challenge solver, HTTP01 using nginx\nsolvers:\n- http01:\ningress:\nclass: nginx\n</code></pre> <p>\u6c42\u89e3\u5668\u4ee5<code>dns01</code> \u548c <code>http01</code>\u8282\u7684\u5f62\u5f0f\u51fa\u73b0\u3002 \u6709\u5173\u5982\u4f55\u914d\u7f6e\u8fd9\u4e9b\u6c42\u89e3\u5668\u7c7b\u578b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u5b83\u4eec\u5404\u81ea\u7684\u6587\u6863- DNS01, HTTP01\u3002</p>"},{"location":"configuration/acme/#_3","title":"\u5916\u90e8\u5e10\u6237\u7ed1\u5b9a","text":"<p>cert-manager \u652f\u6301\u5bf9\u60a8\u7684 ACME \u5e10\u6237\u4f7f\u7528\u5916\u90e8\u5e10\u6237\u7ed1\u5b9a\u3002 \u5916\u90e8\u5e10\u6237\u7ed1\u5b9a\u7528\u4e8e\u5c06\u60a8\u7684 ACME \u5e10\u6237\u4e0e\u5916\u90e8\u5e10\u6237(\u5982 CA \u81ea\u5b9a\u4e49\u6570\u636e\u5e93)\u76f8\u5173\u8054\u3002 \u5927\u591a\u6570 cert-manager \u7528\u6237\u901a\u5e38\u4e0d\u9700\u8981\u8fd9\u6837\u505a\uff0c\u9664\u975e\u60a8\u77e5\u9053\u660e\u786e\u9700\u8981\u8fd9\u6837\u505a\u3002</p> <p>\u5916\u90e8\u5e10\u6237\u7ed1\u5b9a\u9700\u8981\u5728\u4ee3\u8868\u60a8\u7684 ACME \u5e10\u6237\u7684 ACME\u201c\u53d1\u884c\u8005\u201d\u4e0a\u8bbe\u7f6e\u4e24\u4e2a\u5b57\u6bb5\u3002\u8fd9\u4e9b\u5b57\u6bb5\u662f:</p> <ul> <li><code>keyID</code> - \u5916\u90e8\u5e10\u6237\u7ba1\u7406\u5458\u7d22\u5f15\u60a8\u7684\u5916\u90e8\u5e10\u6237\u7ed1\u5b9a\u7684\u5bc6\u94a5 ID \u6216\u5e10\u6237 ID</li> <li><code>keySecretRef</code> - \u4e00\u4e2a\u79d8\u5bc6\u7684\u540d\u79f0\u548c\u5bc6\u94a5\uff0c\u5305\u542b\u4e00\u4e2a base 64 \u7f16\u7801\u7684 URL \u5b57\u7b26\u4e32\u7684\u5916\u90e8\u5e10\u6237\u5bf9\u79f0 MAC \u5bc6\u94a5</li> </ul> <p>Note</p> <p>\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cMAC\u5bc6\u94a5\u5fc5\u987b\u7f16\u7801\u4e3a<code>base64URL</code>\u3002 \u4e0b\u9762\u7684\u547d\u4ee4\u5c06\u5bf9\u4e00\u4e2a\u952e\u8fdb\u884cbase64-encode\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a<code>base64URL</code>:</p> <pre><code>$ echo 'my-secret-key' | base64 -w0 | sed -e 's/+/-/g' -e 's/\\//_/g' -e 's/=//g'\n</code></pre> <p>\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u521b\u5efaSecret\u6e90:</p> <pre><code>$ kubectl create secret generic eab-secret --from-literal \\\nsecret={base64 encoded secret key}\n</code></pre> <p>\u5177\u6709\u5916\u90e8\u5e10\u6237\u7ed1\u5b9a\u7684 ACME \u9881\u53d1\u8005\u793a\u4f8b\u5982\u4e0b\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: my-acme-server-with-eab\nspec:\nacme:\nemail: user@example.com\nserver: https://my-acme-server-with-eab.com/directory\nexternalAccountBinding:\nkeyID: my-keyID-1\nkeySecretRef:\nname: eab-secret\nkey: secret\nprivateKeySecretRef:\nname: example-issuer-account-key\nsolvers:\n- http01:\ningress:\nclass: nginx\n</code></pre> <p>Note</p> <p><code>v1.3.0</code>\u4e4b\u524d\u7684cert-manager\u7248\u672c\u4e5f\u8981\u6c42\u7528\u6237\u901a\u8fc7\u8bbe\u7f6e<code>Issuer.spec.acme.externalAccountBinding.keyAlgorithm</code>\u5b57\u6bb5\u6307\u5b9aEAB\u7684MAC\u7b97\u6cd5\u3002 \u8be5\u5b57\u6bb5\u73b0\u5728\u5df2\u5f03\u7528\uff0c\u56e0\u4e3a\u4e0a\u6e38Go <code>x/crypto</code>\u5e93\u5c06\u7b97\u6cd5\u786c\u7f16\u7801\u4e3a<code>HS256</code>\u3002 (\u53c2\u89c1\u4e0a\u6e38\u76f8\u5173\u8ba8\u8bba<code>CL#41430</code>)\u3002</p>"},{"location":"configuration/acme/#acme_2","title":"\u91cd\u7528 ACME \u5e10\u6237","text":"<p>\u60a8\u53ef\u80fd\u5e0c\u671b\u8de8\u591a\u4e2a\u96c6\u7fa4\u91cd\u7528\u5355\u4e2a ACME \u5e10\u6237\u3002 \u8fd9\u5728\u4f7f\u7528 EAB \u65f6\u5c24\u5176\u6709\u7528\u3002 \u5982\u679c\u8bbe\u7f6e\u4e86<code>disableAccountKeyGeneration</code>\u5b57\u6bb5\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u4e0d\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 ACME \u5e10\u6237\uff0c\u5e76\u4f7f\u7528<code>privateKeySecretRef</code>\u4e2d\u6307\u5b9a\u7684\u73b0\u6709\u5bc6\u94a5\u3002 \u8bf7\u6ce8\u610f\uff0c<code>Issuer</code>/<code>ClusterIssuer</code>\u5c06\u4e0d\u4f1a\u51c6\u5907\u597d\uff0c\u5e76\u5c06\u7ee7\u7eed\u91cd\u8bd5\uff0c\u76f4\u5230<code>Secret</code>\u88ab\u63d0\u4f9b\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: my-acme-server-with-existing-acme-account\nspec:\nacme:\nemail: user@example.com\ndisableAccountKeyGeneration: true\nprivateKeySecretRef:\nname: example-issuer-account-key\n</code></pre>"},{"location":"configuration/acme/#_4","title":"\u6dfb\u52a0\u591a\u4e2a\u6c42\u89e3\u5668\u7c7b\u578b","text":"<p>\u60a8\u53ef\u80fd\u5e0c\u671b\u4e3a\u4e0d\u540c\u7684\u5165\u53e3\u63a7\u5236\u5668\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u6311\u6218\u6c42\u89e3\u5668\u914d\u7f6e\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u60f3\u4f7f\u7528<code>DNS01</code>\u9881\u53d1\u901a\u914d\u7b26\u8bc1\u4e66\uff0c\u540c\u65f6\u4f7f\u7528<code>HTTP01</code>\u9a8c\u8bc1\u5176\u4ed6\u8bc1\u4e66\u3002</p> <p><code>solvers</code>\u8282\u6709\u4e00\u4e2a\u53ef\u9009\u7684<code>selector</code>\u5b57\u6bb5\uff0c\u53ef\u4ee5\u7528\u6765\u6307\u5b9a\u54ea\u4e9b<code>Certificates</code>\uff0c\u4ee5\u53ca\u8fd9\u4e9b<code>Certificates</code>\u4e0a\u7684\u54ea\u4e9b DNS \u540d\u79f0\u5e94\u8be5\u7528\u4e8e\u89e3\u51b3\u6311\u6218\u3002</p> <p>\u6709\u4e09\u79cd\u9009\u62e9\u5668\u7c7b\u578b\u53ef\u4ee5\u7528\u6765\u5f62\u6210<code>Certificates</code>\u5fc5\u987b\u6ee1\u8db3\u7684\u8981\u6c42\uff0c\u4ee5\u4fbf\u88ab\u9009\u62e9\u4e3a\u6c42\u89e3\u5668-<code>matchLabels</code>,<code>dnsNames</code> \u548c <code>dnsZones</code>\u3002 \u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u6c42\u89e3\u5668\u4e2d\u4f7f\u7528\u4efb\u610f\u6570\u91cf\u7684\u8fd9\u4e09\u4e2a\u9009\u62e9\u5668\u3002</p>"},{"location":"configuration/acme/#matchlabel","title":"matchLabel(\u5339\u914d\u6807\u7b7e)","text":"<p><code>matchLabel</code>\u9009\u62e9\u5668\u8981\u6c42\u6240\u6709<code>Certificates</code>\u5339\u914d\u8be5\u8282\u5b57\u7b26\u4e32\u6620\u5c04\u5217\u8868\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u6807\u7b7e\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684<code>Issuer</code>\u53ea\u4f1a\u5339\u914d\u6807\u7b7e\u4e3a<code>\"user-cloudflare-solver\": \"true\"</code> \u548c <code>\"email\": \"user@example.com\"</code>\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\n...\nsolvers:\n- dns01:\ncloudflare:\nemail: user@example.com\napiKeySecretRef:\nname: cloudflare-apikey-secret\nkey: apikey\nselector:\nmatchLabels:\n\"use-cloudflare-solver\": \"true\"\n\"email\": \"user@example.com\"\n</code></pre>"},{"location":"configuration/acme/#dnsnamesdns","title":"dnsNames(DNS \u540d\u5b57)","text":"<p><code>dnsNames</code>\u9009\u62e9\u5668\u662f\u4e00\u4e2a\u7cbe\u786e\u7684 DNS \u540d\u79f0\u5217\u8868\uff0c\u5e94\u8be5\u6620\u5c04\u5230\u4e00\u4e2a\u6c42\u89e3\u5668\u3002 \u8fd9\u610f\u5473\u7740\u5305\u542b\u4efb\u4f55\u8fd9\u4e9b DNS \u540d\u79f0\u7684\u201c\u8bc1\u4e66\u201d\u5c06\u88ab\u9009\u4e2d\u3002 \u5982\u679c\u627e\u5230\u5339\u914d\uff0c<code>dnsNames</code>\u9009\u62e9\u5668\u5c06\u4f18\u5148\u4e8e <code>dnsZones</code> \u9009\u62e9\u5668\u3002 \u5982\u679c\u591a\u4e2a\u89e3\u7b97\u5668\u5339\u914d\u76f8\u540c\u7684<code>dnsNames</code>\u503c\uff0c\u5219\u5728 <code>matchLabels</code>\u4e2d\u5339\u914d\u6807\u7b7e\u6700\u591a\u7684\u89e3\u7b97\u5668\u5c06\u88ab\u9009\u4e2d\u3002 \u5982\u679c\u4e24\u8005\u90fd\u6ca1\u6709\u66f4\u591a\u5339\u914d\u9879\uff0c\u5219\u5c06\u9009\u62e9\u5217\u8868\u4e2d\u524d\u9762\u5b9a\u4e49\u7684\u6c42\u89e3\u5668\u3002</p> <p>\u4e0b\u9762\u7684\u793a\u4f8b\u5c06\u89e3\u51b3\u8fd9\u4e9b\u57df\u7684 DNS \u540d\u79f0\u4e3a <code>example.com</code> \u548c <code>*.example.com</code> \u7684 <code>Certificates</code> \u6311\u6218\u3002</p> <p>Note</p> <p><code>dnsNames</code>\u91c7\u7528\u7cbe\u786e\u5339\u914d\uff0c\u4e0d\u89e3\u6790\u901a\u914d\u7b26\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u9762\u7684<code>Issuer</code>\u5c06\u65e0\u6cd5\u89e3\u51b3\u8bf8\u5982<code>foo.example.com</code>\u4e4b\u7c7b\u7684DNS\u540d\u79f0\u3002 \u4f7f\u7528<code>dnsZones</code> \u9009\u62e9\u5668\u7c7b\u578b\u6765\u5339\u914d\u533a\u57df\u5185\u7684\u6240\u6709\u5b50\u57df\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\n...\nsolvers:\n- dns01:\ncloudflare:\nemail: user@example.com\napiKeySecretRef:\nname: cloudflare-apikey-secret\nkey: apikey\nselector:\ndnsNames:\n- 'example.com'\n- '*.example.com'\n</code></pre>"},{"location":"configuration/acme/#dnszonesdns","title":"dnsZones(DNS \u533a)","text":"<p><code>dnsZones</code>\u8282\u5b9a\u4e49\u4e86\u6b64\u6c42\u89e3\u5668\u53ef\u4ee5\u89e3\u51b3\u7684 DNS \u533a\u57df\u5217\u8868\u3002 \u5982\u679c\u4e00\u4e2a DNS \u540d\u79f0\u662f\u7cbe\u786e\u5339\u914d\u7684\uff0c\u6216\u8005\u662f\u4efb\u4f55\u6307\u5b9a\u7684<code>dnsZones</code>\u7684\u5b50\u57df\uff0c\u8fd9\u4e2a\u6c42\u89e3\u5668\u5c06\u88ab\u4f7f\u7528\uff0c\u9664\u975e\u914d\u7f6e\u4e86\u66f4\u5177\u4f53\u7684 <code>dnsNames</code> \u5339\u914d\u3002 \u8fd9\u610f\u5473\u7740<code>sys.example.com</code>\u5c06\u88ab\u9009\u4e2d\uff0c\u800c\u4e0d\u662f\u4e3a\u57df\u540d<code>www.sys.example.com</code>\u6307\u5b9a<code>example.com</code>\u3002 \u5982\u679c\u591a\u4e2a\u89e3\u7b97\u5668\u5339\u914d\u76f8\u540c\u7684<code>dnsZones</code>\u503c\uff0c\u5c06\u9009\u62e9<code>matchLabels</code>\u4e2d\u5339\u914d\u6807\u7b7e\u6700\u591a\u7684\u89e3\u7b97\u5668\u3002 \u5982\u679c\u4e24\u8005\u90fd\u6ca1\u6709\u66f4\u591a\u5339\u914d\u9879\uff0c\u5219\u5c06\u9009\u62e9\u5217\u8868\u4e2d\u524d\u9762\u5b9a\u4e49\u7684\u6c42\u89e3\u5668\u3002</p> <p>\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e2a\u6c42\u89e3\u5668\u5c06\u89e3\u51b3\u57df<code>example.com</code>\u53ca\u5176\u6240\u6709\u5b50\u57df<code>*.example.com</code>\u7684\u6311\u6218\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\n...\nsolvers:\n- dns01:\ncloudflare:\nemail: user@example.com\napiKeySecretRef:\nname: cloudflare-apikey-secret\nkey: apikey\nselector:\ndnsZones:\n- 'example.com'\n</code></pre>"},{"location":"configuration/acme/#_5","title":"\u5728\u4e00\u8d77","text":"<p>\u6bcf\u4e2a\u6c42\u89e3\u5668\u90fd\u53ef\u4ee5\u5b9a\u4e49\u8fd9\u4e09\u79cd\u9009\u62e9\u5668\u7c7b\u578b\u4e2d\u7684\u4efb\u610f\u6570\u91cf\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0cCloudFlare \u7684<code>DNS01</code>\u6c42\u89e3\u5668\u5c06\u7528\u4e8e\u89e3\u51b3\u5305\u542b DNS \u540d\u79f0<code>a.example.com</code> \u548c <code>b.example.com</code>\u7684<code>Certificates</code> \u57df\u7684\u6311\u6218\u3002 \u8c37\u6b4c CloudDNS \u7684<code>DNS01</code>\u6c42\u89e3\u5668\u5c06\u7528\u4e8e\u89e3\u51b3<code>Certificates</code> \u7684\u6311\u6218\uff0c\u5176 DNS \u540d\u79f0\u5339\u914d\u533a\u57df<code>test.example.com</code> \u53ca\u5176\u6240\u6709\u5b50\u57df(\u4f8b\u5982<code>foo.test.example.com</code>)\u3002</p> <p>\u5bf9\u4e8e\u6240\u6709\u5176\u4ed6\u6311\u6218\uff0c\u53ea\u6709\u5f53<code>Certificate</code>\u8fd8\u5305\u542b<code>\"use-http01-solver\": \"true\"</code>\u6807\u7b7e\u65f6\uff0c\u624d\u4f1a\u4f7f\u7528<code>HTTP01</code>\u6c42\u89e3\u5668\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\n...\nsolvers:\n- http01:\ningress:\nclass: nginx\nselector:\nmatchLabels:\n\"use-http01-solver\": \"true\"\n- dns01:\ncloudflare:\nemail: user@example.com\napiKeySecretRef:\nname: cloudflare-apikey-secret\nkey: apikey\nselector:\ndnsNames:\n- 'a.example.com'\n- 'b.example.com'\n- dns01:\ncloudDNS:\nproject: my-project-id\nhostedZoneName: 'test-example.com'\nserviceAccountSecretRef:\nkey: sa\nname: gcp-sa-secret\nselector:\ndnsZones:\n- 'test.example.com' # This should be the DNS name of the zone\n</code></pre> <p>\u6bcf\u4e2a\u5355\u72ec\u7684\u9009\u62e9\u5668\u5757\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u9009\u62e9\u5668\u7c7b\u578b\uff0c\u4f8b\u5982:</p> <pre><code>solvers:\n- dns01:\ncloudflare:\nemail: user@example.com\napiKeySecretRef:\nname: cloudflare-apikey-secret\nkey: apikey\nselector:\nmatchLabels:\n\"email\": \"user@example.com\"\n\"solver\": \"cloudflare\"\ndnsZones:\n- \"test.example.com\"\n- \"example.dev\"\n</code></pre> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cCloudflare \u7684<code>DNS01</code>\u6c42\u89e3\u5668\u4ec5\u7528\u4e8e\u89e3\u51b3<code>Certificate</code>\u5177\u6709\u6765\u81ea<code>matchLabels</code>\u7684\u6807\u7b7e\u4e14 DNS \u540d\u79f0\u4e0e\u6765\u81ea<code>dnsZones</code>\u7684\u533a\u57df\u5339\u914d\u7684 DNS \u540d\u79f0\u7684\u6311\u6218\u3002</p>"},{"location":"configuration/acme/#_6","title":"\u66ff\u4ee3\u8bc1\u4e66\u94fe","text":"<p>\u4ece ACME \u670d\u52a1\u5668\u83b7\u53d6\u8bc1\u4e66\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u66ff\u4ee3\u8bc1\u4e66\u94fe\u3002 \u8fd9\u5141\u8bb8\u53d1\u884c\u8005\u5728\u8fc7\u6e21\u671f\u95f4\u4f18\u96c5\u5730\u5c06\u7528\u6237\u8f6c\u5230\u65b0\u7684\u6839\u8bc1\u4e66\u4e0a;\u6700\u8457\u540d\u7684\u4f8b\u5b50\u662f Let's Encrypt\u201cISRG \u6839\u201d\u8f6c\u6362.</p> <p>\u8fd9\u4e2a\u529f\u80fd\u4e0d\u662f Let\u2019s Encrypt \u72ec\u6709\u7684;\u5982\u679c\u60a8\u7684 ACME \u670d\u52a1\u5668\u652f\u6301\u591a\u4e2a ca \u7684\u7b7e\u540d\uff0c\u60a8\u53ef\u4ee5\u5728\u8bc1\u4e66\u7684\u9881\u53d1\u8005\u90e8\u5206\u4e2d\u4f7f\u7528<code>preferredChain</code>\u548c\u60a8\u60f3\u8981\u7684\u94fe\u7684 Common Name \u7684\u503c\u3002\u5982\u679c\u901a\u7528\u540d\u4e0e\u5dee\u503c\u94fe\u5339\u914d\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5e76\u8fd4\u56de\u8be5\u65b0\u94fe\u3002</p> <p>\u5982\u679c<code>preferredChain</code>\u4e0e\u8bc1\u4e66\u4e0d\u5339\u914d\uff0c\u670d\u52a1\u5668\u5c06\u8fd4\u56de\u5b83\u8ba4\u4e3a\u662f\u9ed8\u8ba4\u8bc1\u4e66\u7684\u4efb\u4f55\u8bc1\u4e66\u3002</p> <p>\u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u7528\u6237\u5982\u4f55\u5728(\u73b0\u5728\u5df2\u7ecf\u5b8c\u6210)\u4e4b\u524d\u8bf7\u6c42\u4e00\u4e2a\u66ff\u4ee3\u94fe\u3002 \"ISRG Root\"\u7684\u8f6c\u6362\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6539\u53d8\u5df2\u7ecf\u53d1\u751f\u4e86\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u518d\u8ba9\u6211\u4eec\u52a0\u5bc6\u4e86:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt\nspec:\nacme:\nserver: https://acme-v02.api.letsencrypt.org/directory\npreferredChain: \"ISRG Root X1\"\n</code></pre>"},{"location":"configuration/acme/dns01/","title":"DNS01","text":""},{"location":"configuration/acme/dns01/#dns01_1","title":"\u914d\u7f6e DNS01 \u6311\u6218\u63d0\u4f9b\u7a0b\u5e8f","text":"<p>\u672c\u9875\u5305\u542b\u6709\u5173<code>Issuer</code>\u6e90\u7684 DNS01 \u6311\u6218\u89e3\u51b3\u7a0b\u5e8f\u914d\u7f6e\u4e0a\u53ef\u7528\u7684\u4e0d\u540c\u9009\u9879\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</p> <p>\u6709\u5173\u914d\u7f6e ACME<code>Issuers</code> \u53ca\u5176 API \u683c\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfbACME \u53d1\u884c\u8005\u6587\u6863\u3002</p> <p>DNS01 \u63d0\u4f9b\u7a0b\u5e8f\u914d\u7f6e\u5fc5\u987b\u5728<code>Issuer</code>\u6e90\u4e0a\u6307\u5b9a\uff0c\u7c7b\u4f3c\u4e8e\u8bbe\u7f6e\u6587\u6863\u4e2d\u7684\u793a\u4f8b\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728Let's Encrypt \u6311\u6218\u7c7b\u578b\u9875\u9762\u4e0a\u9605\u8bfb\u6709\u5173 DNS01 \u6311\u6218\u7c7b\u578b\u7684\u5de5\u4f5c\u539f\u7406.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\nemail: user@example.com\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\nname: example-issuer-account-key\nsolvers:\n- dns01:\ncloudDNS:\nproject: my-project\nserviceAccountSecretRef:\nname: prod-clouddns-svc-acct-secret\nkey: service-account.json\n</code></pre> <p>\u6bcf\u4e2a\u53d1\u884c\u8005\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a\u4e0d\u540c\u7684 DNS01 \u8d28\u8be2\u63d0\u4f9b\u8005\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e00\u4e2a<code>Issuer</code>\u4e0a\u62e5\u6709\u540c\u4e00\u4e2a DNS \u63d0\u4f9b\u8005\u7684\u591a\u4e2a\u5b9e\u4f8b(\u4f8b\u5982\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e24\u4e2a CloudDNS \u5e10\u6237\uff0c\u6bcf\u4e2a\u5e10\u6237\u90fd\u6709\u81ea\u5df1\u7684\u540d\u79f0)\u3002</p> <p>\u6709\u5173\u5728\u5355\u4e2a<code>Issuer</code>\u4e0a\u4f7f\u7528\u591a\u4e2a\u6c42\u89e3\u5668\u7c7b\u578b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb\u591a\u6c42\u89e3\u5668\u7c7b\u578b\u4e00\u8282\u3002</p>"},{"location":"configuration/acme/dns01/#dns01_2","title":"\u8bbe\u7f6e DNS01 \u81ea\u68c0\u7684\u540d\u79f0\u670d\u52a1\u5668","text":"<p>\u5728\u5c1d\u8bd5 DNS01 \u6311\u6218\u4e4b\u524d\uff0ccert-manager \u5c06\u68c0\u67e5\u662f\u5426\u5b58\u5728\u6b63\u786e\u7684 DNS \u8bb0\u5f55\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ccert-manager \u5c06\u4f7f\u7528\u4ece<code>/etc/resolv.conf</code>\u4e2d\u83b7\u5f97\u7684\u9012\u5f52\u540d\u79f0\u670d\u52a1\u5668\u6765\u67e5\u8be2\u6743\u5a01\u540d\u79f0\u670d\u52a1\u5668\uff0c\u7136\u540e\u5b83\u5c06\u76f4\u63a5\u67e5\u8be2\u4ee5\u9a8c\u8bc1 DNS \u8bb0\u5f55\u7684\u5b58\u5728\u3002</p> <p>\u5982\u679c\u8fd9\u4e0d\u662f\u6240\u5e0c\u671b\u7684(\u4f8b\u5982\u4f7f\u7528\u591a\u4e2a\u6743\u5a01\u540d\u79f0\u670d\u52a1\u5668\u6216\u5206\u5272\u5730\u5e73\u7ebf\u7684 DNS)\uff0c cert-manager \u63a7\u5236\u5668\u4f1a\u66b4\u9732\u4e24\u4e2a\u6807\u5fd7\uff0c\u5141\u8bb8\u60a8\u66f4\u6539\u6b64\u884c\u4e3a:</p> <p><code>--dns01-recursive-nameservers</code> cert-manager \u5e94\u8be5\u67e5\u8be2\u7684\u9012\u5f52\u540d\u79f0\u670d\u52a1\u5668\u7684\u4e3b\u673a\u548c\u7aef\u53e3\u7684\u9017\u53f7\u5206\u9694\u5b57\u7b26\u4e32\u3002</p> <p><code>--dns01-recursive-nameservers-only</code> \u5f3a\u5236 cert-manager \u4ec5\u4f7f\u7528\u9012\u5f52\u540d\u79f0\u670d\u52a1\u5668\u8fdb\u884c\u9a8c\u8bc1\u3002 \u542f\u7528\u6b64\u9009\u9879\u53ef\u80fd\u4f1a\u5bfc\u81f4 DNS01 \u81ea\u6211\u68c0\u67e5\u82b1\u8d39\u66f4\u957f\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u9012\u5f52\u540d\u79f0\u670d\u52a1\u5668\u6267\u884c\u7f13\u5b58\u3002</p> <p>!!! Example usage:</p> <pre><code>```bash\n--dns01-recursive-nameservers-only --dns01-recursive-nameservers=8.8.8.8:53,1.1.1.1:53\n```\n</code></pre> <p>\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528<code>cert-manager</code> helm chart\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7<code>.Values.extraArgs</code>\u6216\u5728 helm \u5b89\u88c5/\u5347\u7ea7\u65f6\u4f7f\u7528<code>--set</code>\u547d\u4ee4\u8bbe\u7f6e\u9012\u5f52\u540d\u79f0\u670d\u52a1\u5668:</p> <pre><code>--set 'extraArgs={--dns01-recursive-nameservers-only,--dns01-recursive-nameservers=8.8.8.8:53\\,1.1.1.1:53}'\n</code></pre>"},{"location":"configuration/acme/dns01/#dns01_3","title":"DNS01 \u7684\u59d4\u6258\u57df","text":"<p>\u7f3a\u7701\u60c5\u51b5\u4e0b\uff0ccert-manager \u4e0d\u4f1a\u8ddf\u8e2a\u6307\u5411\u5b50\u57df\u7684 CNAME \u8bb0\u5f55\u3002</p> <p>\u5982\u679c\u4e0d\u5e0c\u671b\u6388\u4e88 cert-manager \u5bf9\u6839 DNS \u533a\u57df\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06<code>_acme-challenge.example.com</code>\u5b50\u57df\u59d4\u6258\u7ed9\u5176\u4ed6\u4e00\u4e9b\u7279\u6743\u8f83\u4f4e\u7684\u57df(<code>less-privileged.example.org</code>)\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0\u3002 \u6bd4\u5982\u8bf4\uff0c\u4e00\u4e2a\u6709\u4e24\u4e2a\u533a\u57df:</p> <ul> <li><code>example.com</code></li> <li> <p><code>less-privileged.example.org</code></p> </li> <li> <p>\u521b\u5efa\u4e00\u6761 CNAME \u8bb0\u5f55\uff0c\u6307\u5411\u8fd9\u4e2a\u7279\u6743\u8f83\u4f4e\u7684\u57df:</p> </li> </ul> <pre><code>_acme-challenge.example.com IN  CNAME   _acme-challenge.less-privileged.example.org.\n</code></pre> <ol> <li> <p>\u6388\u4e88\u8bc1\u4e66\u7ba1\u7406\u5668\u66f4\u65b0\u7279\u6743\u8f83\u4f4e\u7684<code>less-privileged.example.org</code>\u533a\u57df\u7684\u6743\u9650</p> </li> <li> <p>\u4e3a\u66f4\u65b0\u8fd9\u4e2a\u7279\u6743\u8f83\u4f4e\u7684\u533a\u57df\u63d0\u4f9b\u914d\u7f6e/\u51ed\u636e\uff0c\u5e76\u5728\u76f8\u5173\u7684<code>dns01</code>\u6c42\u89e3\u5668\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u6bb5\u3002    \u6ce8\u610f\uff0c<code>selector</code>\u5b57\u6bb5\u4ecd\u7136\u9002\u7528\u4e8e\u539f\u6765\u7684<code>example.com</code>\uff0c\u800c<code>less-privileged.example.org</code>\u5219\u63d0\u4f9b\u4e86\u51ed\u636e\u3002</p> </li> </ol> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n...\nspec:\nacme:\n...\nsolvers:\n- selector:\ndnsZones:\n- 'example.com'\ndns01:\n# Valid values are None and Follow\ncnameStrategy: Follow\nroute53:\nregion: eu-central-1\naccessKeyID: &lt;Access ID for less-privileged.example.org here&gt;\nhostedZoneID: &lt;Zone ID for less-privileged.example.org here&gt;\nsecretAccessKeySecretRef:\n...\n</code></pre> <p>\u5982\u679c\u60a8\u6709\u8bb8\u591a(\u5b50)\u57df\u9700\u8981\u5355\u72ec\u7684\u8bc1\u4e66\uff0c\u5219\u53ef\u4ee5\u5171\u4eab\u4e00\u4e2a\u522b\u540d\u8f83\u4f4e\u7279\u6743\u7684\u57df\u3002 \u8981\u5b9e\u73b0\u5b83\uff0c\u5e94\u8be5\u4e3a\u6bcf\u4e2a(\u5b50)\u57df\u521b\u5efa\u4e00\u4e2a CNAME \u8bb0\u5f55\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>_acme-challenge.example.com     IN  CNAME   _acme-challenge.less-privileged.example.org.\n_acme-challenge.www.example.com IN  CNAME   _acme-challenge.less-privileged.example.org.\n_acme-challenge.foo.example.com IN  CNAME   _acme-challenge.less-privileged.example.org.\n_acme-challenge.bar.example.com IN  CNAME   _acme-challenge.less-privileged.example.org.\n</code></pre> <p>\u6709\u4e86\u8fd9\u4e2a\u914d\u7f6e\uff0ccert-manager \u5c06\u9012\u5f52\u5730\u8ddf\u8e2a CNAME \u8bb0\u5f55\uff0c\u4ee5\u786e\u5b9a\u5728 DNS01 \u6311\u6218\u671f\u95f4\u8981\u66f4\u65b0\u54ea\u4e2a DNS \u533a\u57df\u3002</p>"},{"location":"configuration/acme/dns01/#dns01_4","title":"\u652f\u6301\u7684 DNS01 \u63d0\u4f9b\u5546","text":"<p>ACME<code>Issuer</code>\u652f\u6301\u8bb8\u591a\u4e0d\u540c\u7684 DNS \u63d0\u4f9b\u7a0b\u5e8f\u3002 \u4e0b\u9762\u662f\u53ef\u7528\u7684\u4f9b\u5e94\u5546\u5217\u8868\uff0c\u5b83\u4eec\u7684<code>.yaml</code>\u914d\u7f6e\uff0c\u4ee5\u53ca\u5173\u4e8e\u5b83\u4eec\u4f7f\u7528\u7684\u5176\u4ed6 Kubernetes \u548c\u4f9b\u5e94\u5546\u7279\u5b9a\u6ce8\u610f\u4e8b\u9879\u3002</p> <ul> <li>ACMEDNS</li> <li>Akamai</li> <li>AzureDNS</li> <li>CloudFlare</li> <li>Google</li> <li>Route53</li> <li>DigitalOcean</li> <li>RFC2136</li> </ul>"},{"location":"configuration/acme/dns01/#webhook","title":"Webhook","text":"<p>cert-manager \u8fd8\u652f\u6301\u4f7f\u7528\u5916\u90e8 webhook \u7684\u6811\u5916 DNS \u63d0\u4f9b\u5546\u3002 \u94fe\u63a5\u5230\u8fd9\u4e9b\u53d7\u652f\u6301\u7684\u63d0\u4f9b\u5546\u53ca\u5176\u6587\u6863\u5982\u4e0b:</p> <ul> <li><code>AliDNS-Webhook</code></li> <li><code>cert-manager-alidns-webhook</code></li> <li><code>cert-manager-webhook-civo</code></li> <li><code>cert-manager-webhook-dnspod</code></li> <li><code>cert-manager-webhook-dnsimple</code></li> <li><code>cert-manager-webhook-gandi</code></li> <li><code>cert-manager-webhook-infomaniak</code></li> <li><code>cert-manager-webhook-inwx</code></li> <li><code>cert-manager-webhook-linode</code></li> <li><code>cert-manager-webhook-oci</code> (Oracle Cloud Infrastructure)</li> <li><code>cert-manager-webhook-scaleway</code></li> <li><code>cert-manager-webhook-selectel</code></li> <li><code>cert-manager-webhook-softlayer</code></li> <li><code>cert-manager-webhook-ibmcis</code></li> <li><code>cert-manager-webhook-loopia</code></li> <li><code>cert-manager-webhook-arvan</code></li> <li><code>bizflycloud-certmanager-dns-webhook</code></li> <li><code>cert-manager-webhook-hetzner</code></li> <li><code>cert-manager-webhook-yandex-cloud</code></li> <li><code>cert-manager-webhook-netcup</code></li> </ul> <p>\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u914d\u7f6e webhook \u63d0\u4f9b\u8005\u7684\u4fe1\u606f\u3002</p> <p>\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e0d\u53d7\u652f\u6301\u7684 DNS \u63d0\u4f9b\u7a0b\u5e8f\uff0c\u8bf7\u53c2\u8003\u5f00\u53d1\u6587\u6863\u6b64\u5904.</p>"},{"location":"configuration/acme/dns01/acme-dns/","title":"ACMEDNS","text":"<p>'cert-manager configuration: ACME DNS-01 challenges using ACMEDNS'</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\nsolvers:\n- dns01:\nacmeDNS:\nhost: https://acme.example.com\naccountSecretRef:\nname: acme-dns\nkey: acmedns.json\n</code></pre> <p>In general, clients to ACMEDNS perform registration on the users behalf and inform them of the CNAME entries they must create. This is not possible in cert-manager, it is a non-interactive system. Registration must be carried out beforehand and the resulting credentials JSON uploaded to the cluster as a <code>Secret</code>. In this example, we use <code>curl</code> and the API endpoints directly. Information about setting up and configuring ACMEDNS is available on the ACMEDNS project page.</p> <ol> <li>First, register with the ACMEDNS server, in this example, there is one    running at <code>auth.example.com</code>. The command:</li> </ol> <pre><code>curl -X POST http://auth.example.com/register\n</code></pre> <p>will return a JSON with credentials for your registration:</p> <pre><code>{\n\"username\": \"eabcdb41-d89f-4580-826f-3e62e9755ef2\",\n\"password\": \"pbAXVjlIOE01xbut7YnAbkhMQIkcwoHO0ek2j4Q0\",\n\"fulldomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf.auth.example.com\",\n\"subdomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf\",\n\"allowfrom\": []\n}\n</code></pre> <p>It is strongly recommended to restrict the update endpoint to the IP    range of your pods. This is done at registration time as follows:</p> <pre><code>curl -X POST http://auth.example.com/register \\\n-H \"Content-Type: application/json\" \\\n--data '{\"allowfrom\": [\"10.244.0.0/16\"]}'\n</code></pre> <p>Make sure to update the <code>allowfrom</code> field to match your cluster    configuration. The JSON will now look like:</p> <pre><code>{\n\"username\": \"eabcdb41-d89f-4580-826f-3e62e9755ef2\",\n\"password\": \"pbAXVjlIOE01xbut7YnAbkhMQIkcwoHO0ek2j4Q0\",\n\"fulldomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf.auth.example.com\",\n\"subdomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf\",\n\"allowfrom\": [\"10.244.0.0/16\"]\n}\n</code></pre> <ol> <li>Save this JSON to a file with the key as your domain. You can specify    multiple domains with the same credentials if you like. In our example,    the returned credentials can be used to verify ownership of    <code>example.com</code> and and <code>example.org</code>.</li> </ol> <pre><code>{\n\"example.com\": {\n\"username\": \"eabcdb41-d89f-4580-826f-3e62e9755ef2\",\n\"password\": \"pbAXVjlIOE01xbut7YnAbkhMQIkcwoHO0ek2j4Q0\",\n\"fulldomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf.auth.example.com\",\n\"subdomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf\",\n\"allowfrom\": [\"10.244.0.0/16\"]\n},\n\"example.org\": {\n\"username\": \"eabcdb41-d89f-4580-826f-3e62e9755ef2\",\n\"password\": \"pbAXVjlIOE01xbut7YnAbkhMQIkcwoHO0ek2j4Q0\",\n\"fulldomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf.auth.example.com\",\n\"subdomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf\",\n\"allowfrom\": [\"10.244.0.0/16\"]\n}\n}\n</code></pre> <ol> <li>Next, update your primary DNS server with the CNAME record that will tell the    verifier how to locate the challenge TXT record. This is obtained from the    <code>fulldomain</code> field in the registration:</li> </ol> <pre><code>_acme-challenge.example.com CNAME d420c923-bbd7-4056-ab64-c3ca54c9b3cf.auth.example.com\n_acme-challenge.example.org CNAME d420c923-bbd7-4056-ab64-c3ca54c9b3cf.auth.example.com\n</code></pre> <p>The \"name\" of the record always has the _acme-challenge subdomain, and    the \"value\" of the record matches exactly the fulldomain field from    registration.</p> <p>At verification time, the domain name <code>d420c923-bbd7-4056-ab64-c3ca54c9b3cf.auth.example.com</code> will be a TXT    record that is set to your validation token. When the verifier queries <code>_acme-challenge.example.com</code>, it will    be directed to the correct location by this CNAME record. This proves that you control <code>example.com</code></p> <ol> <li>Create a secret from the credentials JSON that was saved in step 2, this    secret is referenced in the <code>accountSecretRef</code> field of your DNS01    issuer settings. When creating an <code>Issuer</code> both this <code>Issuer</code> and    <code>Secret</code> must be in the same namespace. However for a <code>ClusterIssuer</code>    (which does not have a namespace) the <code>Secret</code> must be placed in the    same namespace as where the cert-manager pod is running in (in the    default setup <code>cert-manager</code>).</li> </ol> <pre><code>kubectl create secret generic acme-dns --from-file acmedns.json\n</code></pre>"},{"location":"configuration/acme/dns01/acme-dns/#limitation-of-the-acme-dns-server","title":"Limitation of the <code>acme-dns</code> server","text":"<p>The <code>acme-dns</code> server has a known limitation: when a set of credentials is used with more than 2 domains, cert-manager will fail solving the DNS01 challenges.</p> <p>Imagining that you have configured the ACMEDNS issuer with a single set of credentials, and that the \"subdomain\" of this set of credentials is <code>d420c923-bbd7-4056-ab64-c3ca54c9b3cf</code>:</p> <pre><code>kind: Secret\nmetadata:\nname: auth-example-com\nstringData:\nacmedns.json: |\n{\n\"example.com\": {\n\"username\": \"eabcdb41-d89f-4580-826f-3e62e9755ef2\",\n\"password\": \"pbAXVjlIOE01xbut7YnAbkhMQIkcwoHO0ek2j4Q0\",\n\"fulldomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf.auth.example.com\",\n\"subdomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf\",\n\"allowfrom\": [\"10.244.0.0/16\"]\n},\n}\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: my-acme-dns\nspec:\nacme:\nsolvers:\n- dns01:\nacmeDNS:\naccountSecretRef:\nname: auth-example-com\nkey: acmedns.json\nhost: auth.example.com\n</code></pre> <p>and imagine that you want to create a Certificate with three subdomains:</p> <pre><code>kind: Certificate\nspec:\nissuerRef:\nname: issuer-1\ndnsNames:\n- \"example.com\"\n- \"*.example.com\"\n- \"foo.example.com\"\n</code></pre> <p>cert-manager will only be able to solve 2 challenges out of 3 in a non deterministic way. This limitation comes from a \"feature\" mentioned this acme-dns issue.</p> <p>One workaround is to issue one set of acme-dns credentials for each domain that we want to be challenged, keeping in mind that each acme-dns \"subdomain\" can only accept at most 2 challenged domains. For example, the above secret would become:</p> <pre><code>kind: Secret\nmetadata:\nname: auth-example-com\nstringData:\nacmedns.json: |\n{\n\"example.com\": {\n\"username\": \"eabcdb41-d89f-4580-826f-3e62e9755ef2\",\n\"password\": \"pbAXVjlIOE01xbut7YnAbkhMQIkcwoHO0ek2j4Q0\",\n\"fulldomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf.auth.example.com\",\n\"subdomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf\",\n\"allowfrom\": [\"10.244.0.0/16\"]\n},\n\"foo.example.com\": {\n\"username\": \"eabcdb41-d89f-4580-826f-3e62e9755ef2\",\n\"password\": \"pbAXVjlIOE01xbut7YnAbkhMQIkcwoHO0ek2j4Q0\",\n\"fulldomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf.auth.example.com\",\n\"subdomain\": \"d420c923-bbd7-4056-ab64-c3ca54c9b3cf\",\n\"allowfrom\": [\"10.244.0.0/16\"]\n}\n</code></pre> <p>With this setup, we have:</p> <ul> <li><code>example.com</code> and <code>*.example.com</code> are registered in the acme-dns   \"subdomain\" <code>d420c923-bbd7-4056-ab64-c3ca54c9b3cf</code>.</li> <li><code>foo.example.com</code> is registered in the acme-dns \"subdomain\"   <code>d420c923-bbd7-4056-ab64-c3ca54c9b3cf</code>.</li> </ul> <p>Another workaround is to use <code>--max-concurrent-challenges 2</code> when running the <code>cert-manager-controller</code>. With this setting, acme-dns will only have 2 TXT records in its database at any time, which mitigates the issue.</p>"},{"location":"configuration/acme/dns01/akamai/","title":"Akamai","text":"<p>'cert-manager configuration: ACME DNS-01 challenges using Akamai DNS'</p>"},{"location":"configuration/acme/dns01/akamai/#edge-dns","title":"Edge DNS","text":"<p>Use Edge DNS to solve DNS01 ACME challenges by creating a <code>Secret</code> using Akamai API credentials and an <code>Issuer</code> that references the <code>Secret</code> and sets the solver type.</p>"},{"location":"configuration/acme/dns01/akamai/#create-a-secret","title":"Create a Secret","text":"<p>The <code>Secret</code> should look like the following for the <code>Issuer</code> to reference. Replace <code>use_akamai_client_secret</code>, <code>use_akamai_access_token</code> and <code>use_akamai_client_token</code> with the respective Akamai API credential values.</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: akamai-secret\ntype: Opaque\nstringData:\nclientSecret: use_akamai_client_secret\naccessToken: use_akamai_access_token\nclientToken: use_akamai_client_token\n</code></pre>"},{"location":"configuration/acme/dns01/akamai/#create-an-issuer","title":"Create an Issuer","text":"<p>To set Edge DNS for challenge tokens, <code>cert-manager</code> uses an <code>Issuer</code> that references the above <code>Secret</code> and other attributes such as the solver type. The <code>Issuer</code> should look like the following. Replace <code>use_akamai_host</code> with the Akamai API credential <code>host</code> value.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt-akamai-dns\nspec:\nacme:\nserver: https://acme-v02.api.letsencrypt.org/directory\nemail: contact@me.com\nprivateKeySecretRef:\nname: letsencrypt-akamai-issuer-account-key\nsolvers:\n- dns01:\nakamai:\nserviceConsumerDomain: use_akamai_host\nclientTokenSecretRef:\nname: akamai-secret\nkey: clientToken\nclientSecretSecretRef:\nname: akamai-secret\nkey: clientSecret\naccessTokenSecretRef:\nname: akamai-secret\nkey: accessToken\n</code></pre>"},{"location":"configuration/acme/dns01/akamai/#create-a-certificate","title":"Create a Certificate","text":"<p>The <code>Certificate</code> should look like the following and reference the Akamai Edge DNS <code>Issuer</code> above.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-zone\nspec:\nsecretName: akamai-crt-secret\ndnsNames:\n- \"*.example.zone\"\nissuerRef:\nname: letsencrypt-akamai-dns\nkind: Issuer\n</code></pre> <p>Note: <code>cert-manager</code> will wait for challenge tokens to propagate across the Edge DNS network. Follow the <code>certificate</code> status with a command such as the following.</p> <pre><code>kubectl describe certificate example-zone\n</code></pre>"},{"location":"configuration/acme/dns01/akamai/#troubleshooting","title":"Troubleshooting","text":"<p>Follow the <code>cert-manager</code> events to identify any issues with a command such as the following.</p> <pre><code>cmctl status certificate example-zone\n</code></pre>"},{"location":"configuration/acme/dns01/alidns-webhook/","title":"alidns-webhook","text":"<p>\u7528\u4e8e alidns \u7684 ACME DNS webhook \u63d0\u4f9b\u5546\u3002</p>"},{"location":"configuration/acme/dns01/alidns-webhook/#_1","title":"\u5b89\u88c5\u8bc1\u4e66\u7ba1\u7406\u5668","text":"<p>\u8bf7\u5728\u6b64\u67e5\u627e\u6587\u4ef6: https://cert-manager.io/docs/installation/kubernetes/</p>"},{"location":"configuration/acme/dns01/alidns-webhook/#webhook-cert-managerv011","title":"\u5b89\u88c5 webhook (cert-manager(v0.11) \u53ca\u4ee5\u4e0a)","text":"<ol> <li> <p>\u5b89\u88c5 alidns-webhook</p> <pre><code># Install alidns-webhook to cert-manager namespace.\nkubectl apply -f https://raw.githubusercontent.com/pragkent/alidns-webhook/master/deploy/bundle.yaml\n</code></pre> </li> <li> <p>\u521b\u5efa\u5305\u542b alidns \u51ed\u8bc1\u7684\u79d8\u5bc6</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: alidns-secret\nnamespace: cert-manager\ndata:\naccess-key: YOUR_ACCESS_KEY\nsecret-key: YOUR_SECRET_KEY\n</code></pre> </li> <li> <p>\u53d1\u884c\u4eba\u4f8b\u5b50</p> <pre><code>apiVersion: cert-manager.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\n# Change to your letsencrypt email\nemail: certmaster@example.com\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\nname: letsencrypt-staging-account-key\nsolvers:\n- dns01:\nwebhook:\ngroupName: acme.yourcompany.com\nsolverName: alidns\nconfig:\nregion: \"\"\naccessKeySecretRef:\nname: alidns-secret\nkey: access-key\nsecretKeySecretRef:\nname: alidns-secret\nkey: secret-key\n</code></pre> </li> <li> <p>\u9881\u53d1\u8bc1\u4e66</p> <pre><code>apiVersion: cert-manager.io/v1alpha2\nkind: Certificate\nmetadata:\nname: example-tls\nspec:\nsecretName: example-com-tls\ncommonName: example.com\ndnsNames:\n- example.com\n- \"*.example.com\"\nissuerRef:\nname: letsencrypt-staging\nkind: ClusterIssuer\n</code></pre> </li> </ol>"},{"location":"configuration/acme/dns01/alidns-webhook/#webhook-cert-managerv011_1","title":"\u5b89\u88c5 webhook (cert-manager(v0.11) \u4e4b\u524d\u7684)","text":"<ol> <li> <p>\u5b89\u88c5 alidns-webhook</p> <pre><code># Install alidns-webhook to cert-manager namespace.\nkubectl apply -f https://raw.githubusercontent.com/pragkent/alidns-webhook/master/deploy/legacy.yaml\n</code></pre> </li> <li> <p>\u521b\u5efa\u5305\u542b alidns \u51ed\u8bc1\u7684\u79d8\u5bc6</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: alidns-secret\nnamespace: cert-manager\ndata:\naccess-key: YOUR_ACCESS_KEY\nsecret-key: YOUR_SECRET_KEY\n</code></pre> </li> <li> <p>\u53d1\u884c\u4eba\u4f8b\u5b50</p> <pre><code>apiVersion: certmanager.k8s.io/v1alpha1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\nemail: certmaster@example.com\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\nname: letsencrypt-staging-account-key\nsolvers:\n- dns01:\nwebhook:\ngroupName: acme.yourcompany.com\nsolverName: alidns\nconfig:\nregion: \"\"\naccessKeySecretRef:\nname: alidns-secret\nkey: access-key\nsecretKeySecretRef:\nname: alidns-secret\nkey: secret-key\n</code></pre> </li> <li> <p>\u9881\u53d1\u8bc1\u4e66</p> <pre><code>apiVersion: certmanager.k8s.io/v1alpha1\nkind: Certificate\nmetadata:\nname: example-tls\nspec:\nsecretName: example-com-tls\ncommonName: example.com\ndnsNames:\n- example.com\n- \"*.example.com\"\nissuerRef:\nname: letsencrypt-staging\nkind: ClusterIssuer\n</code></pre> </li> </ol>"},{"location":"configuration/acme/dns01/azuredns/","title":"AzureDNS","text":"<p>'cert-manager configuration: ACME DNS-01 challenges using AzureDNS'</p> <p>To configure the AzureDNS DNS01 Challenge in a Kubernetes cluster there are 3 ways available:</p> <ul> <li>AzureDNS</li> <li>Managed Identity Using AAD Pod Identities</li> <li>Managed Identity Using AKS Kubelet Identity</li> <li>Service Principal</li> </ul>"},{"location":"configuration/acme/dns01/azuredns/#managed-identity-using-aad-pod-identities","title":"Managed Identity Using AAD Pod Identities","text":"<p>AAD Pod Identities allows assigning a Managed Identity to a pod. This removes the need for adding explicit credentials into the cluster to create the required DNS records.</p> <p>Note: When using Pod identity, even though assigning multiple identities to a single pod is allowed, currently cert-manager does not support this as it is not able to identify which identity to use.</p> <p>Firstly an identity should be created that has access to contribute to the DNS Zone.</p> <ul> <li>Example creation using <code>azure-cli</code> and <code>jq</code>:</li> </ul> <pre><code># Choose a unique Identity name and existing resource group to create identity in.\nIDENTITY=$(az identity create --name $IDENTITY_NAME --resource-group $IDENTITY_GROUP --output json)\n# Gets principalId to use for role assignment\nPRINCIPAL_ID=$(echo $IDENTITY | jq -r '.principalId')\n# Used for identity binding\nCLIENT_ID=$(echo $IDENTITY | jq -r '.clientId')\nRESOURCE_ID=$(echo $IDENTITY | jq -r '.id')\n# Get existing DNS Zone Id\nZONE_ID=$(az network dns zone show --name $ZONE_NAME --resource-group $ZONE_GROUP --query \"id\" -o tsv)\n# Create role assignment\naz role assignment create --role \"DNS Zone Contributor\" --assignee $PRINCIPAL_ID --scope $ZONE_ID\n</code></pre> <ul> <li>Example creation using Terraform</li> </ul> <pre><code>variable resource_group_name {}\nvariable location {}\nvariable dns_zone_id {}\n# Creates Identity\nresource \"azurerm_user_assigned_identity\" \"dns_identity\" {\nname                = \"cert-manager-dns01\"\nresource_group_name = var.resource_group_name\nlocation            = var.location\n}\n# Creates Role Assignment\nresource \"azurerm_role_assignment\" \"dns_contributor\" {\nscope                = var.dns_zone_id\nrole_definition_name = \"DNS Zone Contributor\"\nprincipal_id         = azurerm_user_assigned_identity.dns_identity.principal_id\n}\n# Client Id Used for identity binding\noutput \"identity_client_id\" {\nvalue = azurerm_user_assigned_identity.dns_identity.client_id\n}\n# Resource Id Used for identity binding\noutput \"identity_resource_id\" {\nvalue = azurerm_user_assigned_identity.dns_identity.id\n}\n</code></pre> <p>Next we need to ensure we have installed AAD Pod Identity using their walk-through. This will install the CRDs and deployment required to assign the identity.</p> <p>Now we can create the identity resource and binding using the below manifest as an example:</p> <pre><code>apiVersion: \"aadpodidentity.k8s.io/v1\"\nkind: AzureIdentity\nmetadata:\nannotations:\n# recommended to use namespaced identites https://azure.github.io/aad-pod-identity/docs/configure/match_pods_in_namespace/\naadpodidentity.k8s.io/Behavior: namespaced\nname: certman-identity\nnamespace: cert-manager # change to your preferred namespace\nspec:\ntype: 0 # MSI\nresourceID: &lt;Identity_Id&gt; # Resource Id From Previous step\nclientID: &lt;Client_Id&gt; # Client Id from previous step\n---\napiVersion: \"aadpodidentity.k8s.io/v1\"\nkind: AzureIdentityBinding\nmetadata:\nname: certman-id-binding\nnamespace: cert-manager # change to your preferred namespace\nspec:\nazureIdentity: certman-identity\nselector: certman-label # This is the label that needs to be set on cert-manager pods\n</code></pre> <p>Next we need to ensure the cert-manager pod has a relevant label to use the pod identity binding. This can be done by editing the deployment and adding the below into the <code>.spec.template.metadata.labels</code> field</p> <pre><code>spec:\ntemplate:\nmetadata:\nlabels:\naadpodidbinding: certman-label # must match selector in AzureIdentityBinding\n</code></pre> <p>Or by using the helm values <code>podLabels</code></p> <pre><code>podLabels:\naadpodidbinding: certman-label\n</code></pre> <p>Lastly when we create the certificate issuer we only need to specify the <code>hostedZoneName</code>, <code>resourceGroupName</code> and <code>subscriptionID</code> fields for the DNS zone. Example below:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\n...\nsolvers:\n- dns01:\nazureDNS:\nsubscriptionID: AZURE_SUBSCRIPTION_ID\nresourceGroupName: AZURE_DNS_ZONE_RESOURCE_GROUP\nhostedZoneName: AZURE_DNS_ZONE\n# Azure Cloud Environment, default to AzurePublicCloud\nenvironment: AzurePublicCloud\n</code></pre> <p>This authentication mechanism is what cert-manager considers 'ambient credentials'. Use of ambient credentials is disabled by default for cert-manager <code>Issuer</code>s. This to ensure unprivileged users who have permission to create issuers cannot issue certificates using any credentials cert-manager incidentally has access to. To enable this authentication mechanism for <code>Issuer</code>s, you will need to set <code>--issuer-ambient-credentials</code> flag on cert-manager controller to true. (There is a corresponding <code>--cluster-issuer-ambient-credentials</code> flag which is set to <code>true</code> by default).</p> <p>If you are using this authentication mechanism and ambient credentials are not enabled, you will see this error:</p> <pre><code>error instantiating azuredns challenge solver: ClientID is not set but neither --cluster-issuer-ambient-credentials nor --issuer-ambient-credentials are set.\n</code></pre> <p>These are necessary to enable Azure Managed Identities.</p>"},{"location":"configuration/acme/dns01/azuredns/#managed-identity-using-aks-kubelet-identity","title":"Managed Identity Using AKS Kubelet Identity","text":"<p>When creating an AKS cluster in Azure there is the option to use a managed identity that is assigned to the kubelet. This identity is assigned to the underlying node pool in the AKS cluster and can then be used by the cert-manager pods to authenticate to Azure Active Directory.</p> <p>There are some caveats with this approach, these mainly being:</p> <ul> <li>Any permissions granted to this identity will also be accessible to all containers running inside the Kubernetes cluster.</li> <li>Using AKS extensions like <code>Kube Dashboard</code>, <code>Virtual Node</code>, or <code>HTTP Application Routing</code> (see full list here) will create additional identities that are assigned to your node pools. If your node pools have more than one identity assigned, you will need to specify either <code>clientID</code> or <code>resourceID</code> to select the correct one.</li> </ul> <p>To set this up, firstly you will need to retrieve the identity that the kubelet is using by querying the AKS cluster. This can then be used to create the appropriate permissions in the DNS zone.</p> <ul> <li>Example commands using <code>azure-cli</code>:</li> </ul> <pre><code># Get AKS Kubelet Identity\nPRINCIPAL_ID=$(az aks show -n $CLUSTERNAME -g $CLUSTER_GROUP --query \"identityProfile.kubeletidentity.objectId\" -o tsv)\n# Get existing DNS Zone Id\nZONE_ID=$(az network dns zone show --name $ZONE_NAME --resource-group $ZONE_GROUP --query \"id\" -o tsv)\n# Create role assignment\naz role assignment create --role \"DNS Zone Contributor\" --assignee $PRINCIPAL_ID --scope $ZONE_ID\n</code></pre> <ul> <li>Example terraform:</li> </ul> <pre><code>variable dns_zone_id {}\n# Creating the AKS cluster, abbreviated.\nresource \"azurerm_kubernetes_cluster\" \"cluster\" {\n...\n  # Creates Identity associated to kubelet\nidentity {\ntype = \"SystemAssigned\"\n}\n...\n}\nresource \"azurerm_role_assignment\" \"dns_contributor\" {\nscope                            = var.dns_zone_id\nrole_definition_name             = \"DNS Zone Contributor\"\nprincipal_id                     = azurerm_kubernetes_cluster.cluster.kubelet_identity[0].object_id\nskip_service_principal_aad_check = true # Allows skipping propagation of identity to ensure assignment succeeds.\n}\n</code></pre> <p>Then when creating the cert-manager issuer we need to specify the <code>hostedZoneName</code>, <code>resourceGroupName</code> and <code>subscriptionID</code> fields for the DNS Zone.</p> <p>We also need to specify <code>managedIdentity.clientID</code> or <code>managedIdentity.resourceID</code> if multiple managed identities are assigned to the node pools.</p> <p>The value for <code>managedIdentity.clientID</code> can be fetched by running this command:</p> <pre><code>az aks show -n $CLUSTERNAME -g $CLUSTER_GROUP --query \"identityProfile.kubeletidentity.clientId\" -o tsv\n</code></pre> <p>Example below:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\n...\nsolvers:\n- dns01:\nazureDNS:\nsubscriptionID: AZURE_SUBSCRIPTION_ID\nresourceGroupName: AZURE_DNS_ZONE_RESOURCE_GROUP\nhostedZoneName: AZURE_DNS_ZONE\n# Azure Cloud Environment, default to AzurePublicCloud\nenvironment: AzurePublicCloud\n# optional, only required if node pools have more than 1 managed identity assigned\nmanagedIdentity:\n# client id of the node pool managed identity (can not be set at the same time as resourceID)\nclientID: YOUR_MANAGED_IDENTITY_CLIENT_ID\n# resource id of the managed identity (can not be set at the same time as clientID)\n# resourceID: YOUR_MANAGED_IDENTITY_RESOURCE_ID\n</code></pre>"},{"location":"configuration/acme/dns01/azuredns/#service-principal","title":"Service Principal","text":"<p>Configuring the AzureDNS DNS01 Challenge for a Kubernetes cluster requires creating a service principal in Azure.</p> <p>To create the service principal you can use the following script (requires <code>azure-cli</code> and <code>jq</code>):</p> <pre><code># Choose a name for the service principal that contacts azure DNS to present\n# the challenge.\n$ AZURE_CERT_MANAGER_NEW_SP_NAME=NEW_SERVICE_PRINCIPAL_NAME\n# This is the name of the resource group that you have your dns zone in.\n$ AZURE_DNS_ZONE_RESOURCE_GROUP=AZURE_DNS_ZONE_RESOURCE_GROUP\n# The DNS zone name. It should be something like domain.com or sub.domain.com.\n$ AZURE_DNS_ZONE=AZURE_DNS_ZONE\n\n$ DNS_SP=$(az ad sp create-for-rbac --name $AZURE_CERT_MANAGER_NEW_SP_NAME --output json)\n$ AZURE_CERT_MANAGER_SP_APP_ID=$(echo $DNS_SP | jq -r '.appId')\n$ AZURE_CERT_MANAGER_SP_PASSWORD=$(echo $DNS_SP | jq -r '.password')\n$ AZURE_TENANT_ID=$(echo $DNS_SP | jq -r '.tenant')\n$ AZURE_SUBSCRIPTION_ID=$(az account show --output json | jq -r '.id')\n</code></pre> <p>For security purposes, it is appropriate to utilize RBAC to ensure that you properly maintain access control to your resources in Azure. The service principal that is generated by this tutorial has fine-grained access to ONLY the DNS Zone in the specific resource group specified. It requires this permission so that it can read/write the _acme_challenge TXT records to the zone.</p> <p>Lower the Permissions of the service principal.</p> <pre><code>$ az role assignment delete --assignee $AZURE_CERT_MANAGER_SP_APP_ID --role Contributor\n</code></pre> <p>Give Access to DNS Zone.</p> <pre><code>$ DNS_ID=$(az network dns zone show --name $AZURE_DNS_ZONE --resource-group $AZURE_DNS_ZONE_RESOURCE_GROUP --query \"id\" --output tsv)\n$ az role assignment create --assignee $AZURE_CERT_MANAGER_SP_APP_ID --role \"DNS Zone Contributor\" --scope $DNS_ID\n</code></pre> <p>Check Permissions. As the result of the following command, we would like to see just one object in the permissions array with \"DNS Zone Contributor\" role.</p> <pre><code>$ az role assignment list --all --assignee $AZURE_CERT_MANAGER_SP_APP_ID\n</code></pre> <p>A secret containing service principal password should be created on Kubernetes to facilitate presenting the challenge to Azure DNS. You can create the secret with the following command:</p> <pre><code>$ kubectl create secret generic azuredns-config --from-literal=client-secret=$AZURE_CERT_MANAGER_SP_PASSWORD\n</code></pre> <p>Get the variables for configuring the issuer.</p> <pre><code>$ echo \"AZURE_CERT_MANAGER_SP_APP_ID: $AZURE_CERT_MANAGER_SP_APP_ID\"\n$ echo \"AZURE_CERT_MANAGER_SP_PASSWORD: $AZURE_CERT_MANAGER_SP_PASSWORD\"\n$ echo \"AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID\"\n$ echo \"AZURE_TENANT_ID: $AZURE_TENANT_ID\"\n$ echo \"AZURE_DNS_ZONE: $AZURE_DNS_ZONE\"\n$ echo \"AZURE_DNS_ZONE_RESOURCE_GROUP: $AZURE_DNS_ZONE_RESOURCE_GROUP\"\n</code></pre> <p>To configure the issuer, substitute the capital cased variables with the values from the previous script. You can get the subscription id from the Azure portal.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\n...\nsolvers:\n- dns01:\nazureDNS:\nclientID: AZURE_CERT_MANAGER_SP_APP_ID\nclientSecretSecretRef:\n# The following is the secret we created in Kubernetes. Issuer will use this to present challenge to Azure DNS.\nname: azuredns-config\nkey: client-secret\nsubscriptionID: AZURE_SUBSCRIPTION_ID\ntenantID: AZURE_TENANT_ID\nresourceGroupName: AZURE_DNS_ZONE_RESOURCE_GROUP\nhostedZoneName: AZURE_DNS_ZONE\n# Azure Cloud Environment, default to AzurePublicCloud\nenvironment: AzurePublicCloud\n</code></pre>"},{"location":"configuration/acme/dns01/cert-manager-alidns-webhook/","title":"\u963f\u91cc\u4e91 DNS ACME webhook","text":"<p>Alibaba Cloud DNS ACME webhook</p> <p>\u8be5\u9879\u76ee\u57fa\u4e8e\u6700\u521d\u5728https://github.com/go-acme/lego\u4e2d\u63d0\u4ea4\u7684\u4ee3\u7801</p> <p>\u8fd9\u662f\u4e00\u4e2a\u7f51\u7edc\u94a9\u5b50\u5b9e\u73b0\u7684 Cert-Manager \u4f7f\u7528\u963f\u91cc\u5df4\u5df4\u4e91 DNS(\u53c8\u540d AliDNS)\u3002 \u6709\u5173 webhook \u7684\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u9605 cert-manager \u7684\u6587\u6863: https://cert-manager.io/docs/concepts/webhook/</p>"},{"location":"configuration/acme/dns01/cert-manager-alidns-webhook/#_1","title":"\u5b89\u88c5","text":"<pre><code>helm repo add cert-manager-alidns-webhook https://devmachine-fr.github.io/cert-manager-alidns-webhook\nhelm repo update\nhelm install cert-manager-alidns-webhook/alidns-webhook\n</code></pre> <p>\u521b\u5efa\u6301\u6709\u963f\u91cc\u5df4\u5df4\u51ed\u8bc1\u7684\u79d8\u5bc6:</p> <pre><code>kubectl create secret generic alidns-secrets --from-literal=\"access-token=yourtoken\" --from-literal=\"secret-key=yoursecretkey\"\n</code></pre>"},{"location":"configuration/acme/dns01/cert-manager-alidns-webhook/#_2","title":"\u521b\u5efa\u9881\u53d1\u8005","text":"<p>\u8981\u4f7f\u7528\u7684\u6c42\u89e3\u5668\u7684\u540d\u79f0\u662f<code>alidns-solver</code>\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u521b\u5efa\u53d1\u884c\u4eba:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt\nnamespace: default\nspec:\nacme:\nemail: contact@example.com\nprivateKeySecretRef:\nname: letsencrypt\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nsolvers:\n- dns01:\nwebhook:\nconfig:\naccessTokenSecretRef:\nkey: access-token\nname: alidns-secrets\nregionId: cn-beijing\nsecretKeySecretRef:\nkey: secret-key\nname: alidns-secrets\ngroupName: example.com\nsolverName: alidns-solver\nselector:\ndnsNames:\n- example.com\n- \"*.example.com\"\n</code></pre> <p>\u6216\u8005\u60a8\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a<code>ClusterIssuer</code>\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt\nspec:\nacme:\nemail: contact@example.com\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\nname: letsencrypt\nsolvers:\n- dns01:\nwebhook:\nconfig:\naccessTokenSecretRef:\nkey: access-token\nname: alidns-secrets\nregionId: cn-beijing\nsecretKeySecretRef:\nkey: secret-key\nname: alidns-secrets\ngroupName: example.com\nsolverName: alidns-solver\n</code></pre> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u8bc1\u4e66\u7ba1\u7406\u5668\u6587\u6863: https://cert-manager.io/docs/configuration/acme/dns01/</p>"},{"location":"configuration/acme/dns01/cert-manager-alidns-webhook/#_3","title":"\u521b\u5efa\u8ba4\u8bc1","text":"<p>\u7136\u540e\u521b\u5efa\u5c06\u4f7f\u7528\u8be5\u9881\u53d1\u8005\u7684\u8bc1\u4e66: https://cert-manager.io/docs/usage/certificate/</p> <p>\u4f7f\u7528 Issuer \u521b\u5efa\u8ba4\u8bc1\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-tls\nspec:\nsecretName: example-com-tls\ncommonName: example.com\ndnsNames:\n- example.com\n- \"*.example.com\"\nissuerRef:\nname: letsencrypt\nkind: Issuer\n</code></pre> <p>\u6216\u4f7f\u7528 ClusterIssuer \u521b\u5efa\u8ba4\u8bc1\uff0c\u5982\u4e0b\u6240\u793a:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-tls\nspec:\nsecretName: example-com-tls\ncommonName: example.com\ndnsNames:\n- example.com\n- \"*.example.com\"\nissuerRef:\nname: letsencrypt\nkind: ClusterIssuer\n</code></pre>"},{"location":"configuration/acme/dns01/cloudflare/","title":"Cloudflare","text":"<p>description: 'cert-manager configuration: ACME DNS-01 challenges using Cloudflare DNS'</p> <p>To use Cloudflare, you may use one of two types of tokens. API Tokens allow application-scoped keys bound to specific zones and permissions, while API Keys are globally-scoped keys that carry the same permissions as your account.</p> <p>API Tokens are recommended for higher security, since they have more restrictive permissions and are more easily revocable.</p>"},{"location":"configuration/acme/dns01/cloudflare/#api-tokens","title":"API Tokens","text":"<p>Tokens can be created at User Profile &gt; API Tokens &gt; API Tokens. The following settings are recommended:</p> <ul> <li>Permissions:</li> <li><code>Zone - DNS - Edit</code></li> <li><code>Zone - Zone - Read</code></li> <li>Zone Resources:</li> <li><code>Include - All Zones</code></li> </ul> <p>To create a new <code>Issuer</code>, first make a Kubernetes secret containing your new API token:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: cloudflare-api-token-secret\ntype: Opaque\nstringData:\napi-token: &lt;API Token&gt;\n</code></pre> <p>Then in your <code>Issuer</code> manifest:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\n...\nsolvers:\n- dns01:\ncloudflare:\napiTokenSecretRef:\nname: cloudflare-api-token-secret\nkey: api-token\n</code></pre>"},{"location":"configuration/acme/dns01/cloudflare/#api-keys","title":"API Keys","text":"<p>API keys can be retrieved at User Profile &gt; API Tokens &gt; API Keys &gt; Global API Key &gt; View.</p> <p>To create a new <code>Issuer</code>, first make a Kubernetes secret containing your API key:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: cloudflare-api-key-secret\ntype: Opaque\nstringData:\napi-key: &lt;API Key&gt;\n</code></pre> <p>Then in your <code>Issuer</code> manifest:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\n...\nsolvers:\n- dns01:\ncloudflare:\nemail: my-cloudflare-acc@example.com\napiKeySecretRef:\nname: cloudflare-api-key-secret\nkey: api-key\n</code></pre>"},{"location":"configuration/acme/dns01/cloudflare/#troubleshooting","title":"Troubleshooting","text":""},{"location":"configuration/acme/dns01/cloudflare/#actor-comcloudflareapitokenxxxx-requires-permission-comcloudflareapiaccountzonelist-to-list-zones","title":"Actor <code>com.cloudflare.api.token.xxxx</code> requires permission <code>com.cloudflare.api.account.zone.list</code> to list zones","text":"<p>If you get the error that your token does not have the correct permission to list zones there can be 2 causes.</p> <ol> <li>The token lacks the <code>Zone - Zone - Read</code> permission</li> <li>cert-manager identified the wrong zone name for the domain due to DNS issues.</li> </ol> <p>In the case of the 2nd issue you will see an error like below:</p> <pre><code>Events:\n  Type     Reason        Age              From          Message\n  ----     ------        ----             ----          -------\n  Normal   Started       6s               cert-manager  Challenge scheduled for processing\n  Warning  PresentError  3s (x2 over 3s)  cert-manager  Error presenting challenge: Cloudflare API Error for GET \"/zones?name=&lt;TLD&gt;\"\n            Error: 0: Actor 'com.cloudflare.api.token.xxxx' requires permission 'com.cloudflare.api.account.zone.list' to list zones\n</code></pre> <p>In this case we recommend changing your DNS01 self-check nameservers.</p>"},{"location":"configuration/acme/dns01/cloudflare/#cloudflare-api-error-for-post-zonesiddns_records-generic-error","title":"<code>Cloudflare API error for POST \"/zones/&lt;id&gt;/dns_records</code> generic error","text":"<p>You might be hitting this as Cloudflare blocks the use of the API to update DNS records for the following TLDs: <code>.cf</code>, <code>.ga</code>, <code>.gq</code>, <code>.ml</code> and <code>.tk</code>. This is discussed in the Cloudflare Community. We recommend using an alternative DNS provider when using these TLDs.</p>"},{"location":"configuration/acme/dns01/digitalocean/","title":"DigitalOcean","text":"<p>description: 'cert-manager configuration: ACME DNS-01 challenges using DigitalOcean DNS'</p> <p>This provider uses a Kubernetes <code>Secret</code> resource to work. In the following example, the <code>Secret</code> will have to be named <code>digitalocean-dns</code> and have a sub-key <code>access-token</code> with the token in it. For example:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: digitalocean-dns\ndata:\n# insert your DO access token here\naccess-token: \"base64 encoded access-token here\"\n</code></pre> <p>The access token must have write access.</p> <p>To create a Personal Access Token, see DigitalOcean documentation.</p> <p>Handy direct link: https://cloud.digitalocean.com/account/api/tokens/new</p> <p>To encode your access token into base64, you can use the following</p> <pre><code>echo -n 'your-access-token' | base64\n</code></pre> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\n...\nsolvers:\n- dns01:\ndigitalocean:\ntokenSecretRef:\nname: digitalocean-dns\nkey: access-token\n</code></pre>"},{"location":"configuration/acme/dns01/google/","title":"Google CloudDNS","text":"<p>description: 'cert-manager configuration: ACME DNS-01 challenges using Google CloudDNS'</p> <p>This guide explains how to set up an <code>Issuer</code>, or <code>ClusterIssuer</code>, to use Google CloudDNS to solve DNS01 ACME challenges. It's advised you read the DNS01 Challenge Provider page first for a more general understanding of how cert-manager handles DNS01 challenges.</p> <p>This guide assumes that your cluster is hosted on Google Cloud Platform (GCP) and that you already have a domain set up with CloudDNS.</p> <p>You'll need to be using a Public DNS Zone, so that the ACME challenge checker is able to access the DNS records that cert-manager will create.</p>"},{"location":"configuration/acme/dns01/google/#set-up-a-service-account","title":"Set up a Service Account","text":"<p>cert-manager needs to be able to add records to CloudDNS in order to solve the DNS01 challenge. To enable this, a GCP service account must be created with the <code>dns.admin</code> role.</p> <p>Note: For this guide the <code>gcloud</code> command will be used to set up the service account. Ensure that <code>gcloud</code> is using the correct project and zone before entering the commands. These steps could also be completed using the Cloud Console.</p> <pre><code>PROJECT_ID=myproject-id\ngcloud iam service-accounts create dns01-solver --display-name \"dns01-solver\"\n</code></pre> <p>In the command above, replace <code>myproject-id</code> with the ID of your project.</p> <pre><code>gcloud projects add-iam-policy-binding $PROJECT_ID \\\n--member serviceAccount:dns01-solver@$PROJECT_ID.iam.gserviceaccount.com \\\n--role roles/dns.admin\n</code></pre> <p>Note: The use of the <code>dns.admin</code> role in this example role is for convenience. If you want to ensure cert-manager runs under a least privilege service account, you will need to create a custom role with the following permissions:</p> <ul> <li><code>dns.resourceRecordSets.*</code></li> <li><code>dns.changes.*</code></li> <li><code>dns.managedZones.list</code></li> </ul>"},{"location":"configuration/acme/dns01/google/#use-static-credentials","title":"Use Static Credentials","text":"<p>Follow the instructions in the following sections to deploy cert-manager using static credentials for the service account you created. You should rotate these credentials periodically.</p>"},{"location":"configuration/acme/dns01/google/#create-a-service-account-secret","title":"Create a Service Account Secret","text":"<p>To access this service account, cert-manager uses a key stored in a Kubernetes <code>Secret</code>. First, create a key for the service account and download it as a JSON file, then create a <code>Secret</code> from this file.</p> <p>Keep the key file safe and do not share it, as it could be used to gain access access to your cloud resources. The key file can be deleted once it has been used to generate the <code>Secret</code>.</p> <p>If you did not create the service account <code>dns01-solver</code> before, you need to create it first.</p> <pre><code>gcloud iam service-accounts create dns01-solver\n</code></pre> <p>Replace instances of <code>$PROJECT_ID</code> with the ID of your project.</p> <pre><code>gcloud iam service-accounts keys create key.json \\\n--iam-account dns01-solver@$PROJECT_ID.iam.gserviceaccount.com\nkubectl create secret generic clouddns-dns01-solver-svc-acct \\\n--from-file=key.json\n</code></pre> <p>Note: If you have already added the <code>Secret</code> but get an error: <code>...due to error processing: error getting clouddns service account: secret \"XXX\" not found</code>, the <code>Secret</code> may be in the wrong namespace. If you're configuring a <code>ClusterIssuer</code>, move the <code>Secret</code> to the <code>Cluster Resource Namespace</code> which is <code>cert-manager</code> by default. If you're configuring an <code>Issuer</code>, the <code>Secret</code> should be stored in the same namespace as the <code>Issuer</code> resource.</p>"},{"location":"configuration/acme/dns01/google/#create-an-issuer-that-uses-clouddns","title":"Create an Issuer That Uses CloudDNS","text":"<p>Next, create an <code>Issuer</code> (or <code>ClusterIssuer</code>) with a <code>cloudDNS</code> provider. An example <code>Issuer</code> manifest can be seen below with annotations.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\n...\nsolvers:\n- dns01:\ncloudDNS:\n# The ID of the GCP project\nproject: $PROJECT_ID\n# This is the secret used to access the service account\nserviceAccountSecretRef:\nname: clouddns-dns01-solver-svc-acct\nkey: key.json\n</code></pre> <p>For more information about <code>Issuers</code> and <code>ClusterIssuers</code>, see Configuration.</p> <p>Once an <code>Issuer</code> (or <code>ClusterIssuer</code>) has been created successfully, a <code>Certificate</code> can then be added to verify that everything works.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-com\nnamespace: default\nspec:\nsecretName: example-com-tls\nissuerRef:\n# The issuer created previously\nname: example-issuer\ndnsNames:\n- example.com\n- www.example.com\n</code></pre> <p>For more details about <code>Certificates</code>, see Usage.</p>"},{"location":"configuration/acme/dns01/google/#gke-workload-identity","title":"GKE Workload Identity","text":"<p>If you are deploying cert-manager into a Google Container Engine (GKE) cluster with workload identity enabled, you can leverage workload identity to avoid creating and managing static service account credentials. The workload identity how-to provides more detail on how workload identity functions, but briefly workload identity allows you to link a Google service accounts (GSA) to Kubernetes service accounts (KSA). This GSA/KSA linking is two-way, i.e., you must establish the link in GCP and Kubernetes. Once configured, workload identity allows Kubernetes pods running under a KSA to access the GCP APIs with the permissions of the linked GSA. The workload identity how-to also provides detailed instructions on how to enable workload identity in your GKE cluster. The instructions in the following sections assume you are deploying cert-manager to a GKE cluster with workload identity already enabled.</p>"},{"location":"configuration/acme/dns01/google/#link-ksa-to-gsa-in-gcp","title":"Link KSA to GSA in GCP","text":"<p>The cert-manager component that needs to modify DNS records is the pod created as part of the cert-manager deployment. The standard methods for deploying cert-manager to Kubernetes create the cert-manager deployment in the cert-manager namespace and its pod spec specifies it runs under the cert-manager service account. To link the GSA you created above to the cert-manager KSA in the cert-manager namespace in your GKE cluster, run the following command.</p> <pre><code>gcloud iam service-accounts add-iam-policy-binding \\\n--role roles/iam.workloadIdentityUser \\\n--member \"serviceAccount:$PROJECT_ID.svc.id.goog[cert-manager/cert-manager]\" \\\ndns01-solver@$PROJECT_ID.iam.gserviceaccount.com\n</code></pre> <p>If your cert-manager pods are running under a different service account, replace <code>goog[cert-manager/cert-manager]</code> with <code>goog[NAMESPACE/SERVICE_ACCOUNT]</code>, where <code>NAMESPACE</code> is the namespace of the service account and <code>SERVICE_ACCOUNT</code> is the name of the service account.</p>"},{"location":"configuration/acme/dns01/google/#link-ksa-to-gsa-in-kubernetes","title":"Link KSA to GSA in Kubernetes","text":"<p>After deploying cert-manager, add the proper workload identity annotation to the cert-manager service account.</p> <pre><code>kubectl annotate serviceaccount --namespace=cert-manager cert-manager \\\n\"iam.gke.io/gcp-service-account=dns01-solver@$PROJECT_ID.iam.gserviceaccount.com\"\n</code></pre> <p>Again, if your cert-manager pods are running under a different service account, replace <code>--namespace=cert-manager cert-manager</code> with <code>--namespace=NAMESPACE SERVICE_ACCOUNT</code>, where <code>NAMESPACE</code> is the namespace of the service account and <code>SERVICE_ACCOUNT</code> is the name of the service account.</p> <p>If you are deploying cert-manager using its helm chart, you can use the <code>serviceAccount.annotations</code> configuration parameter to add the above workload identity annotation to the cert-manager KSA.</p>"},{"location":"configuration/acme/dns01/google/#create-an-issuer-that-uses-clouddns_1","title":"Create an Issuer That Uses CloudDNS","text":"<p>Next, create an <code>Issuer</code> (or <code>ClusterIssuer</code>) with a <code>clouddns</code> provider. An example <code>Issuer</code> manifest can be seen below with annotations. Note that the issuer does not include a <code>serviceAccountSecretRef</code> property. Excluding this instructs cert-manager to use the default credentials provided by GKE workload identity.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\n...\nsolvers:\n- dns01:\ncloudDNS:\n# The ID of the GCP project\nproject: $PROJECT_ID\n</code></pre> <p>For more information about <code>Issuers</code> and <code>ClusterIssuers</code>, see Configuration.</p> <p>Once an <code>Issuer</code> (or <code>ClusterIssuer</code>) has been created successfully, a <code>Certificate</code> can then be added to verify that everything works.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-com\nnamespace: default\nspec:\nsecretName: example-com-tls\nissuerRef:\n# The issuer created previously\nname: example-issuer\ndnsNames:\n- example.com\n- www.example.com\n</code></pre> <p>For more details about <code>Certificates</code>, see Usage.</p>"},{"location":"configuration/acme/dns01/rfc2136/","title":"RFC-2136","text":"<p>description: 'cert-manager configuration: ACME DNS-01 challenges using RFC2136-compliant DNS providers'</p> <p>The goal of this document is to provide a configuration overview of the various facilities required to deploy cert-manager against a RFC2136 compliant DNS server such as BIND <code>named</code>. This capability is also commonly known as \u201cdynamic DNS\u201d.</p> <p>Unlike the peer of other cert-manager DNS integrations, <code>named</code> is a bit of a \u201cSwiss Army Knife\u201d of domain name servers. Over the years, it has been highly optimized to provide maximal vertical scalability for a single node, as well as horizontal scalability with service provider interfaces. This flexibility makes it impossible to go into every possible <code>named</code> deployment that a user may run in to though. Instead, this document will try to make sure your server is ready to accept requests from cert-manager using command line tools, then get on to the making the two work together.</p>"},{"location":"configuration/acme/dns01/rfc2136/#transaction-signatures-tsig","title":"Transaction Signatures \u21d2 TSIG","text":"<p>Dynamic DNS updates are essentially server queries which otherwise might return resource records (RRs). Since DNS servers are commonly exposed to the public internet, being able to push an unauthenticated update to any server that responds to queries would be immediately untenable.</p> <p>In the eyes of the <code>named</code> architects, the generic solution to this problem space was twofold. The first is to require manual enablement of updates at a zone level, such as <code>example.com</code>. In a naive network, there is no requirement that zone updates have any security to them, and clients can be configured such that they can provide updates without any authentication. An example of where this is useful is for machines booting using DHCP, in this case the machines know about themselves and the DNS server can be configured to accept updates when they come from the address being configured.</p> <p>This clearly has limitations in situations such as cert-manager and the DNS01 challenge. In this environment, a TXT RR must be created after coordination with the ACME server. After negotiating with the ACME server, a the TXT RR that is published on the domain validates that the domain is legitimately engaged with the process of creating a certificate for it. In the bigger picture of DNS, this means that an arbitrary actor (cert-manager, in this case) must be able to add one of these KV mappings to the domain and delete it after the certificate has been issued. <code>cert-manager</code> does not have a convenient physical characteristic such as a DHCP allocation to validate it's requests.</p> <p>For cases like this, we need to be able to sign a request that is being sent to the DNS server. We do that through TSIGs, or Transaction SIGnatures.</p>"},{"location":"configuration/acme/dns01/rfc2136/#configuration-step-1-set-up-your-dns-server-for-secure-dynamic-updates","title":"Configuration Step 1 - Set up your DNS server for secure dynamic updates","text":"<p>There are many excellent tutorials on the net that walk through preparing a basic <code>named</code> server for dynamic updates:</p> <ul> <li>https://www.cyberciti.biz/faq/unix-linux-bind-named-configuring-tsig/</li> <li>https://tomthorp.me/blog/using-tsig-enable-secure-zone-transfers-between-bind-9x-servers</li> </ul> <p>More complex <code>name</code> deployments will not use text files, but rather may use LDAP or SQL for a database for resource records. An additional wrinkle is metadata configuration, such as for zone metadata like enabling dynamic updates or access control lists (ACLs) for a zone. There are too many configurations to go into here, but you should be able to find the documentation to do so.</p> <p>Whatever your deployment is, the goal at this stage has nothing to do with cert-manager and everything to do with a tool called <code>nsupdate</code> generating updates signed with TSIG. Once this is out of the way, you can attack the cert-manager configuration with far greater confidence.</p>"},{"location":"configuration/acme/dns01/rfc2136/#using-nsupdate","title":"Using <code>nsupdate</code>","text":"<p>Most paths to configuring BIND <code>named</code> will go through using <code>dnssec-keygen</code>. This command-line tool generates a named private key that is used for signing TSIG requests. When a request is signed, both the signature and the name of the private key are attached to the request in an unencrypted form. In this manner, when the request is received, the name of the private key can be used to by the recipient to find the private key itself, build a new signature with it, and compare the two for acceptance.</p> <p>Since there are dozens of ways to have your <code>named</code> server misconfigured, we\u2019ll use <code>nsupdate</code> to test that the server behaves as expected before we get there. <code>https://debian-administration.org/article/591/Using_the_dynamic_DNS_editor_nsupdate</code> is a solid breakdown of how to use the tool.</p> <p>To get started, we\u2019ll simply run <code>nsupdate -k &lt;keyID&gt;</code> where <code>keyID</code> is the value returned from <code>dnssec-keygen</code>. This will read the key from disk and provide a command prompt to issue commands. In general, we want to write a simple TXT RR and make sure we can delete it.</p> <pre><code>$ nsupdate -k &lt;keyID&gt;\nupdate add www1.example.com 60 txt testing\nsend\n\u2026 test here with `nslookup`\nupdate delete www1.example.com txt\nsend\n\u2026 test here with `nslookup`\n</code></pre> <p>Any failures to write, read or delete the record will mean that cert-manager will not be able to do so either, no matter how well it is configured.</p>"},{"location":"configuration/acme/dns01/rfc2136/#configuration-step-2-set-up-cert-manager","title":"Configuration Step 2 - Set up cert-manager","text":"<p>Now we get to the fun stuff, seeing everything work. Remember that we need to set up the ACME DNS01 issuer and challenge mechanism as well as the <code>rfc2136</code> provider. Since the documentation covers the other parts sufficiently, let\u2019s focus on the provider here.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\n...\nsolvers:\n- dns01:\nrfc2136:\nnameserver: &lt;address of authoritative nameserver configured above&gt;\ntsigKeyName: &lt;key name used in `dnssec-keygen`, use something semantically meaningful in both environments&gt;\ntsigAlgorithm: HMACSHA512 // should be matched to the algo you chose in `dnssec-keygen`\ntsigSecretSecretRef:\nname: &lt;the name of the k8s secret holding the TSIG key.. not the key itself!&gt;\nkey: &lt;name of the key *inside* the secret&gt;\n</code></pre> <p>For example:</p> <pre><code>rfc2136:\nnameserver: 1.2.3.4:53\ntsigKeyName: example-com-secret\ntsigAlgorithm: HMACSHA512\ntsigSecretSecretRef:\nname: tsig-secret\nkey: tsig-secret-key\n</code></pre> <p>For this example configuration, we\u2019ll need the following two commands. The first, on your <code>named</code> server generates the key. Note how <code>example-com-secret</code> is both in the <code>tsigKeyName</code> above and the <code>dnssec-keygen</code> command that follows.</p> <pre><code>$ dnssec-keygen -r /dev/urandom -a HMAC-SHA512 -b 512 -n HOST example-com-secret\n</code></pre> <p>Also note how the <code>tsigAlgorithm</code> is provided in both the configuration and the <code>keygen</code> command. They are listed at <code>https://github.com/miekg/dns/blob/v1.0.12/tsig.go#L18-L23</code>.</p> <p>The second bit of configuration you need on the Kubernetes side is to create a secret. Pulling the secret key string from the <code>&lt;key&gt;.private</code> file generated above, use the secret in the placeholder below:</p> <pre><code>$ kubectl -n cert-manager create secret generic tsig-secret --from-literal=tsig-secret-key=&lt;somesecret&gt;\n</code></pre> <p>Note how the <code>tsig-secret</code> and <code>tsig-secret-key</code> match the configuration in the <code>tsigSecretSecretRef</code> above.</p>"},{"location":"configuration/acme/dns01/rfc2136/#rate-limits","title":"Rate Limits","text":"<p>The <code>rfc2136</code> provider waits until all nameservers to in your domain's SOA RR respond with the same result before it contacts Let's Encrypt to complete the challenge process. This is because the challenge server contacts a non-authoritative DNS server that does a recursive query (a query for records it does not maintain locally). If the servers in the SOA do not contain the correct values, it's likely that the non-authoritative server will have bad information as well, causing the request to go against rate limits and eventually locking the process out.</p> <p>This process is in place to protect users from server misconfiguration creating a more subtle lockout that persists after the server configuration has been repaired.</p> <p>As documented elsewhere, it is prudent to fully debug configurations using the ACME staging servers before using the production servers. The staging servers have less aggressive rate limits, but the certificates they issue are not signed with a root certificate trusted by browsers.</p>"},{"location":"configuration/acme/dns01/rfc2136/#whats-next","title":"What\u2019s next?","text":"<p>This configuration so far will actually do nothing. You still have to request a certificate as described here. Once a certificate is requested, the provider will begin processing the request.</p>"},{"location":"configuration/acme/dns01/rfc2136/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Be sure that you have fully tested the DNS server updates using <code>nsupdate</code>   first. Ideally, this is done from a pod in the same namespace as the <code>rfc2136</code>   provider to ensure there are no firewall issues.</li> <li>The logs for the <code>cert-manager</code> pod are your friend. Additional logs can be   generated by adding the <code>--v=5</code> argument to the container launch.</li> <li>The TSIG key is encoded with <code>base64</code>, but the Kubernetes API server also   expects that key literals will be decoded before they are stored. In some   cases, a key must be double-encoded. (If you've tested using <code>nsupdate</code>, it's   pretty easy to spot when you are running into this.)</li> <li>Pay attention to the refresh time of the zone you are working with. For zones   with low traffic, it will not make a significant difference to reduce the   refresh time down to about five minutes while getting initial certificates.   Once the process is working, the beauty of <code>cert-manager</code> is it doesn't matter   if a renewal takes hours due to refresh times, it's all automated!</li> <li>Compared to the other providers that often use REST APIs to modify DNS RRs,   this provider can take a little longer. You can <code>watch kubectl certificate yourcert</code> to get a display of what's going on. It's not uncommon for the process   to take five minutes in total.</li> </ul>"},{"location":"configuration/acme/dns01/route53/","title":"Route53","text":"<p>\u4f7f\u7528 Amazon AWS Route53 DNS \u7684 ACME DNS-01 \u6311\u6218</p> <p>\u672c\u6307\u5357\u89e3\u91ca\u4e86\u5982\u4f55\u8bbe\u7f6e<code>Issuer</code> \u6216 <code>ClusterIssuer</code>\uff0c\u4ee5\u4f7f\u7528 Amazon Route53 \u89e3\u51b3 DNS01 ACME \u6311\u6218\u3002 \u5efa\u8bae\u60a8\u5148\u9605\u8bfbDNS01 \u6311\u6218\u63d0\u4f9b\u7a0b\u5e8f\u9875\u9762\uff0c\u4ee5\u66f4\u5168\u9762\u5730\u4e86\u89e3 cert-manager \u5982\u4f55\u5904\u7406 DNS01 \u6311\u6218\u3002</p> <p>Note</p> <p>\u672c\u6307\u5357\u5047\u8bbe\u60a8\u7684\u96c6\u7fa4\u6258\u7ba1\u5728Amazon Web Services (AWS)\u4e0a\uff0c\u5e76\u4e14\u60a8\u5df2\u7ecf\u5728Route53\u4e2d\u6709\u4e00\u4e2a\u6258\u7ba1\u533a\u57df\u3002</p>"},{"location":"configuration/acme/dns01/route53/#iam","title":"\u914d\u7f6e IAM \u89d2\u8272","text":"<p>cert-manager \u9700\u8981\u80fd\u591f\u5411 Route53 \u6dfb\u52a0\u8bb0\u5f55\uff0c\u4ee5\u89e3\u51b3 DNS01 \u6311\u6218\u3002 \u4e3a\u6b64\uff0c\u9700\u8981\u521b\u5efa\u5177\u6709\u4ee5\u4e0b\u6743\u9650\u7684 IAM \u7b56\u7565:</p> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": \"route53:GetChange\",\n\"Resource\": \"arn:aws:route53:::change/*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": [\"route53:ChangeResourceRecordSets\", \"route53:ListResourceRecordSets\"],\n\"Resource\": \"arn:aws:route53:::hostedzone/*\"\n},\n{\n\"Effect\": \"Allow\",\n\"Action\": \"route53:ListHostedZonesByName\",\n\"Resource\": \"*\"\n}\n]\n}\n</code></pre> <p>Note</p> <p>The <code>route53:ListHostedZonesByName</code> statement can be removed if you  specify the (optional) <code>hostedZoneID</code>. You can further tighten the policy by limiting the hosted zone that cert-manager has access to (e.g. <code>arn:aws:route53:::hostedzone/DIKER8JEXAMPLE</code>).</p>"},{"location":"configuration/acme/dns01/route53/#_1","title":"\u51ed\u8bc1","text":"<p>\u60a8\u6709\u4e24\u4e2a\u8bbe\u7f6e\u9009\u9879\u2014\u521b\u5efa\u7528\u6237\u6216\u89d2\u8272\u5e76\u4ece\u4e0a\u9762\u9644\u52a0\u8be5\u7b56\u7565\u3002 \u4f7f\u7528\u89d2\u8272\u88ab\u8ba4\u4e3a\u662f\u6700\u4f73\u5b9e\u8df5\uff0c\u56e0\u4e3a\u60a8\u4e0d\u5fc5\u5728\u79d8\u5bc6\u4e2d\u5b58\u50a8\u6c38\u4e45\u51ed\u636e\u3002</p> <p>cert-manager supports two ways of specifying credentials:</p> <ul> <li>explicit by providing a <code>accessKeyID</code> and <code>secretAccessKey</code></li> <li>or implicit (using metadata   service   or environment variables or credentials   file.</li> </ul> <p>cert-manager also supports specifying a <code>role</code> to enable cross-account access and/or limit the access of cert-manager. Integration with <code>kiam</code> and <code>kube2iam</code> should work out of the box.</p>"},{"location":"configuration/acme/dns01/route53/#_2","title":"\u8de8\u5e10\u6237\u8bbf\u95ee","text":"<p>Account Y manages Route53 DNS Zones. </p> <p>\u73b0\u5728\uff0c\u60a8\u5e0c\u671b\u5728\u5e10\u6237X(\u6216\u8bb8\u591a\u5176\u4ed6\u5e10\u6237)\u4e2d\u8fd0\u884c\u7684cert-manager\u80fd\u591f\u7ba1\u7406\u5e10\u6237Y\u4e2d\u6258\u7ba1\u7684Route53\u533a\u57df\u4e2d\u7684\u8bb0\u5f55\u3002</p> <p>First, create a role with the permissions policy above (let's call the role <code>dns-manager</code>) in Account Y, and attach a trust relationship like the one below.</p> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Principal\": {\n\"AWS\": \"arn:aws:iam::XXXXXXXXXXX:role/cert-manager\"\n},\n\"Action\": \"sts:AssumeRole\"\n}\n]\n}\n</code></pre> <p>Bear in mind, that you won't be able to define this policy until <code>cert-manager</code> role on account Y is created. If you are setting this up using a configuration language, you may want to define principal as:</p> <pre><code>\"Principal\": {\n\"AWS\": \"XXXXXXXXXXX\"\n}\n</code></pre> <p>And restrict it, in a future step, after all the roles are created.</p> <p>This allows the role <code>cert-manager</code> in Account X to assume the <code>dns-manager</code> role in Account Y to manage the Route53 DNS zones in Account Y. For more information visit the official documentation.</p> <p>Second, create the cert-manager role in Account X; this will be used as a credentials source for the cert-manager pods running in Account X. Attach to the role the following permissions policy:</p> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Resource\": \"arn:aws:iam::YYYYYYYYYYYY:role/dns-manager\",\n\"Action\": \"sts:AssumeRole\"\n}\n]\n}\n</code></pre> <p>And the following trust relationship (Add AWS <code>Service</code>s as needed):</p> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Principal\": {\n\"Service\": \"ec2.amazonaws.com\"\n},\n\"Action\": \"sts:AssumeRole\"\n}\n]\n}\n</code></pre>"},{"location":"configuration/acme/dns01/route53/#or-clusterissuer","title":"\u521b\u5efa\u9881\u53d1\u8005 (or <code>ClusterIssuer</code>)","text":"<p>Here is an example configuration for a <code>ClusterIssuer</code>:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-prod\nspec:\nacme:\n...\nsolvers:\n# example: cross-account zone management for example.com\n# this solver uses ambient credentials (i.e. inferred from the environment or EC2 Metadata Service)\n# to assume a role in a different account\n- selector:\ndnsZones:\n- \"example.com\"\ndns01:\nroute53:\nregion: us-east-1\nhostedZoneID: DIKER8JEXAMPLE # optional, see policy above\nrole: arn:aws:iam::YYYYYYYYYYYY:role/dns-manager\n# this solver handles example.org challenges\n# and uses explicit credentials\n- selector:\ndnsZones:\n- \"example.org\"\ndns01:\nroute53:\nregion: eu-central-1\naccessKeyID: AKIAIOSFODNN7EXAMPLE\nsecretAccessKeySecretRef:\nname: prod-route53-credentials-secret\nkey: secret-access-key\n# you can also assume a role with these credentials\nrole: arn:aws:iam::YYYYYYYYYYYY:role/dns-manager\n</code></pre> <p>Note</p> <p>as mentioned above, the pod is using <code>arn:aws:iam::XXXXXXXXXXX:role/cert-manager</code> as a credentials source in Account X, but the <code>ClusterIssuer</code> ultimately assumes the <code>arn:aws:iam::YYYYYYYYYYYY:role/dns-manager</code> role to actually make changes in Route53 zones located in Account Y.</p>"},{"location":"configuration/acme/dns01/route53/#eks-iam-irsa","title":"\u670d\u52a1\u5e10\u6237\u7684 EKS IAM \u89d2\u8272(IRSA)","text":"<p>While <code>kiam</code> / <code>kube2iam</code> work directly with cert-manager, some special attention is needed for using the IAM Roles for Service Accounts feature available on EKS.</p>"},{"location":"configuration/acme/dns01/route53/#oidc","title":"OIDC \u63d0\u4f9b\u8005","text":"<p>First follow the AWS documentation Enabling IAM roles for service accounts on your cluster to ensure that the OIDC provider for the EKS cluster is enabled. The OIDC information is needed to create the trust relationship for the cert-manager role below.</p>"},{"location":"configuration/acme/dns01/route53/#iam_1","title":"IAM \u89d2\u8272\u4fe1\u4efb\u7b56\u7565","text":"<p>The cert-manager role needs the following trust relationship attached to the role in order to use the IRSA method. Replace the following:</p> <ul> <li><code>&lt;aws-account-id&gt;</code> with the AWS account ID of the EKS cluster.</li> <li><code>&lt;aws-region&gt;</code> with the region where the EKS cluster is located.</li> <li><code>&lt;eks-hash&gt;</code> with the hash in the EKS API URL; this will be a random 32 character hex string (example: <code>45DABD88EEE3A227AF0FA468BE4EF0B5</code>)</li> <li><code>&lt;namespace&gt;</code> with the namespace where cert-manager is running.</li> <li><code>&lt;service-account-name&gt;</code> with the name of the <code>ServiceAccount</code> object created by cert-manager.</li> </ul> <pre><code>{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n\"Effect\": \"Allow\",\n\"Action\": \"sts:AssumeRoleWithWebIdentity\",\n\"Principal\": {\n\"Federated\": \"arn:aws:iam::&lt;aws-account-id&gt;:oidc-provider/oidc.eks.&lt;aws-region&gt;.amazonaws.com/id/&lt;eks-hash&gt;\"\n},\n\"Condition\": {\n\"StringEquals\": {\n\"oidc.eks.&lt;aws-region&gt;.amazonaws.com/id/&lt;eks-hash&gt;:sub\": \"system:serviceaccount:&lt;namespace&gt;:&lt;service-account-name&gt;\"\n}\n}\n}\n]\n}\n</code></pre> <p>Note</p> <p>If you're following the Cross Account example above, this trust policy is attached to the cert-manager role in Account X with ARN <code>arn:aws:iam::XXXXXXXXXXX:role/cert-manager</code>. The permissions policy is the same as above.</p>"},{"location":"configuration/acme/dns01/route53/#_3","title":"\u670d\u52a1\u6ce8\u91ca","text":"<p>Annotate the <code>ServiceAccount</code> created by cert-manager:</p> <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\nannotations:\neks.amazonaws.com/role-arn: arn:aws:iam::XXXXXXXXXXX:role/cert-manager\n</code></pre> <p>You will also need to modify the cert-manager <code>Deployment</code> with the correct file system permissions, so the <code>ServiceAccount</code> token can be read.</p> <pre><code>spec:\ntemplate:\nspec:\nsecurityContext:\nfsGroup: 1001\n</code></pre> <p>The cert-manager Helm chart provides a variable for injecting annotations into cert-manager's <code>ServiceAccount</code> and <code>Deployment</code> object like so:</p> <pre><code>serviceAccount:\nannotations:\neks.amazonaws.com/role-arn: arn:aws:iam::XXXXXXXXXXX:role/cert-manager\nsecurityContext:\nfsGroup: 1001\n</code></pre> <p>Note</p> <p>If you're following the Cross Account example above, modify the <code>ClusterIssuer</code> in the same way as above with the role from Account Y.</p>"},{"location":"configuration/acme/dns01/webhook/","title":"Webhook","text":"<p>ACME DNS-01 \u6311\u6218\u4f7f\u7528\u5916\u90e8 Webhook \u6c42\u89e3\u5668</p> <p>webhook <code>Issuer</code>\u662f\u4e00\u4e2a\u901a\u7528\u7684 ACME \u6c42\u89e3\u5668\u3002 \u5b9e\u9645\u5de5\u4f5c\u7531\u5916\u90e8\u670d\u52a1\u5b8c\u6210\u3002 \u67e5\u770b<code>dns-providers</code>\u5404\u81ea\u7684\u6587\u6863\u3002</p> <p>\u67e5\u770b\u66f4\u591a webhook \u6c42\u89e3\u5668https://github.com/topics/cert-manager-webhook\u3002</p> <p>\u4e0b\u9762\u662f\u5982\u4f55\u914d\u7f6e webhook \u63d0\u4f9b\u8005\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 \u6240\u6709<code>DNS01</code>\u63d0\u4f9b\u7a0b\u5e8f\u5c06\u5305\u542b\u4ed6\u4eec\u81ea\u5df1\u7684\u7279\u5b9a\u914d\u7f6e\uff0c\u4f46\u90fd\u9700\u8981\u4e00\u4e2a<code>groupName</code> \u548c <code>solverName</code>\u5b57\u6bb5\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\n...\nsolvers:\n- dns01:\nwebhook:\ngroupName: $WEBHOOK_GROUP_NAME\nsolverName: $WEBHOOK_SOLVER_NAME\nconfig:\n...\n&lt;webhook-specific-configuration&gt;\n</code></pre>"},{"location":"configuration/acme/http01/","title":"HTTP01","text":"<p>\ud83d\udccc \u672c\u9875\u91cd\u70b9\u4ecb\u7ecd\u5982\u4f55\u89e3\u51b3 ACME HTTP-01 \u6311\u6218\u3002</p> <p>\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u5982\u4f55\u901a\u8fc7\u6ce8\u91ca\u5165\u53e3\u6e90\u6216\u7f51\u5173\u6e90\u6765\u81ea\u52a8\u521b\u5efa\u8bc1\u4e66\u6e90\uff0c\u8bf7\u53c2\u89c1\u4fdd\u62a4\u5165\u53e3\u6e90\u548c\u4fdd\u62a4\u7f51\u5173\u6e90\u3002</p> <p>cert-manager \u4f7f\u7528\u60a8\u73b0\u6709\u7684\u5165\u53e3\u6216\u7f51\u5173\u914d\u7f6e\u6765\u89e3\u51b3 HTTP01 \u7684\u6311\u6218\u3002</p>"},{"location":"configuration/acme/http01/#http01_1","title":"\u914d\u7f6e HTTP01 \u5165\u53e3\u6c42\u89e3\u5668","text":"<p>\u672c\u9875\u5305\u542b\u6709\u5173<code>Issuer</code>\u6e90\u7684 HTTP01 \u6311\u6218\u89e3\u51b3\u7a0b\u5e8f\u914d\u7f6e\u4e0a\u53ef\u7528\u7684\u4e0d\u540c\u9009\u9879\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u6709\u5173\u914d\u7f6e ACME \u53d1\u884c\u8005\u53ca\u5176 API \u683c\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfbACME \u53d1\u884c\u8005\u6587\u6863\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728Let's Encrypt challenge \u7c7b\u578b\u9875\u9762\u4e0a\u9605\u8bfb\u6709\u5173 HTTP01 \u6311\u6218\u7c7b\u578b\u5982\u4f55\u5de5\u4f5c\u7684\u5185\u5bb9.</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684<code>HTTP01</code> ACME \u9881\u53d1\u5668\u7684\u4f8b\u5b50\uff0c\u4e0b\u9762\u6709\u66f4\u591a\u7684\u914d\u7f6e\u9009\u9879:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: example-issuer\nspec:\nacme:\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\nname: example-issuer-account-key\nsolvers:\n- http01:\ningress:\nclass: nginx\n</code></pre>"},{"location":"configuration/acme/http01/#_1","title":"\u9009\u9879","text":"<p>HTTP01 \u53d1\u884c\u8005\u652f\u6301\u8bb8\u591a\u9644\u52a0\u9009\u9879\u3002\u6709\u5173\u53ef\u7528\u9009\u9879\u8303\u56f4\u7684\u5b8c\u6574\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb\u53c2\u8003\u6587\u6863.</p>"},{"location":"configuration/acme/http01/#class","title":"<code>class</code>","text":"<p>\u5982\u679c\u6307\u5b9a\u4e86<code>class</code>\u5b57\u6bb5\uff0ccert-manager \u5c06\u521b\u5efa\u65b0\u7684<code>Ingress</code>\u6e90\uff0c\u4ee5\u4fbf\u5c06\u6d41\u91cf\u8def\u7531\u5230<code>acmesolver</code> pod\uff0c\u8fd9\u4e9b pod \u8d1f\u8d23\u54cd\u5e94 ACME \u6311\u6218\u9a8c\u8bc1\u8bf7\u6c42\u3002</p> <p>\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u8be5\u5b57\u6bb5\uff0c\u5e76\u4e14<code>name</code>\u4e5f\u6ca1\u6709\u6307\u5b9a\uff0ccert-manager \u5c06\u9ed8\u8ba4\u521b\u5efa \u65b0 \u7684<code>Ingress</code>\u6e90\uff0c\u4f46 \u4e0d\u4f1a \u5728\u8fd9\u4e9b\u6e90\u4e0a\u8bbe\u7f6e\u5165\u53e3\u7c7b\uff0c\u8fd9\u610f\u5473\u7740\u96c6\u7fa4\u4e2d\u5b89\u88c5\u7684 \u6240\u6709 \u5165\u53e3\u63a7\u5236\u5668\u5c06\u4e3a\u6311\u6218\u6c42\u89e3\u5668\u63d0\u4f9b\u6d41\u91cf\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u989d\u5916\u7684\u6210\u672c\u3002</p>"},{"location":"configuration/acme/http01/#name","title":"<code>name</code>","text":"<p>\u5982\u679c\u6307\u5b9a\u4e86<code>name</code>\u5b57\u6bb5\uff0ccert-manager \u5c06\u7f16\u8f91\u547d\u540d\u7684\u5165\u53e3\u6e90\u4ee5\u89e3\u51b3 HTTP01 \u6311\u6218\u3002</p> <p>\u8fd9\u5bf9\u4e8e\u517c\u5bb9\u5165\u53e3\u63a7\u5236\u5668\u5f88\u6709\u7528\uff0c\u6bd4\u5982<code>ingress-gce</code>\uff0c\u5b83\u4e3a\u6bcf\u4e2a\u521b\u5efa\u7684<code>Ingress</code>\u6e90\u4f7f\u7528\u552f\u4e00\u7684 IP \u5730\u5740\u3002</p> <p>\u5f53\u4f7f\u7528\u4e3a\u6240\u6709\u5165\u53e3\u6e90\u516c\u5f00\u5355\u4e2a IP \u7684\u5165\u53e3\u63a7\u5236\u5668\u65f6\uff0c\u5e94\u8be5\u907f\u514d\u8fd9\u79cd\u6a21\u5f0f\uff0c\u56e0\u4e3a\u5b83\u4f1a\u4e0e\u67d0\u4e9b\u5165\u53e3\u63a7\u5236\u5668\u7279\u5b9a\u7684\u6ce8\u91ca\u4ea7\u751f\u517c\u5bb9\u6027\u95ee\u9898\u3002</p>"},{"location":"configuration/acme/http01/#servicetype","title":"<code>serviceType</code>","text":"<p>\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u4e0d\u53ef\u80fd/\u4e0d\u5e0c\u671b\u4f7f\u7528<code>NodePort</code>\u4f5c\u4e3a HTTP01 \u6311\u6218\u54cd\u5e94\u670d\u52a1\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\uff0c\u7531\u4e8e Kubernetes \u7684 limit \u9650\u5236\u3002 \u8981\u5b9a\u4e49\u5728\u6311\u6218\u54cd\u5e94\u671f\u95f4\u4f7f\u7528\u54ea\u79cd Kubernetes \u670d\u52a1\u7c7b\u578b\uff0c\u8bf7\u6307\u5b9a\u4ee5\u4e0b HTTP01 \u914d\u7f6e:</p> <pre><code>http01:\ningress:\n# Valid values are ClusterIP and NodePort\nserviceType: ClusterIP\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u60a8\u4e0d\u8bbe\u7f6e HTTP01 \u6216\u5c06<code>serviceType</code>\u8bbe\u7f6e\u4e3a\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u5c06\u4f7f\u7528<code>NodePort</code>\u7c7b\u578b\u3002 \u901a\u5e38\u4e0d\u9700\u8981\u6539\u53d8\u8fd9\u4e2a\u3002</p>"},{"location":"configuration/acme/http01/#podtemplate","title":"<code>podTemplate</code>","text":"<p>\u60a8\u53ef\u80fd\u5e0c\u671b\u66f4\u6539\u6216\u6dfb\u52a0\u89e3\u7b97\u5668 Pod \u7684\u6807\u7b7e\u548c\u6ce8\u91ca\u3002 \u8fd9\u4e9b\u53ef\u4ee5\u5728<code>podTemplate</code>\u4e0b\u7684<code>metadata</code>\u5b57\u6bb5\u4e0b\u914d\u7f6e\u3002</p> <p>\u7c7b\u4f3c\u5730\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728<code>podTemplate</code>\u7684<code>spec</code>\u5b57\u6bb5\u4e0b\u914d\u7f6e\u6765\u8bbe\u7f6e<code>nodeSelector</code>\uff0c\u516c\u5dee\u548c\u6c42\u89e3\u5668 pods \u7684\u4eb2\u548c\u6027\u3002 \u4e0d\u80fd\u7f16\u8f91\u5176\u4ed6\u89c4\u683c\u5b57\u6bb5\u3002</p> <p>\u5982\u4f55\u914d\u7f6e\u6a21\u677f\u7684\u793a\u4f8b\u5982\u4e0b:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: ...\nspec:\nacme:\nserver: ...\nprivateKeySecretRef:\nname: ...\nsolvers:\n- http01:\ningress:\npodTemplate:\nmetadata:\nlabels:\nfoo: \"bar\"\nenv: \"prod\"\nspec:\nnodeSelector:\nbar: baz\n</code></pre> <p>\u6dfb\u52a0\u7684\u6807\u7b7e\u548c\u6ce8\u91ca\u5c06\u5408\u5e76\u5230 cert-manager \u9ed8\u8ba4\u503c\u4e4b\u4e0a\uff0c\u8986\u76d6\u5177\u6709\u76f8\u540c\u952e\u7684\u6761\u76ee\u3002</p> <p><code>podTemplate</code> \u4e2d\u4e0d\u5b58\u5728\u5176\u4ed6\u5b57\u6bb5\u3002</p>"},{"location":"configuration/acme/http01/#ingresstemplate","title":"<code>ingressTemplate</code>","text":"<p>\u53ef\u4ee5\u5411\u6c42\u89e3\u5668\u5165\u53e3\u6e90\u6dfb\u52a0\u6807\u7b7e\u548c\u6ce8\u91ca\u3002 \u5f53\u4f60\u5728\u6574\u4e2a\u96c6\u7fa4\u4e2d\u7ba1\u7406\u591a\u4e2a\u5165\u53e3\u63a7\u5236\u5668\uff0c\u5e76\u4e14\u4f60\u60f3\u8981\u786e\u4fdd\u6b63\u786e\u7684\u4e00\u4e2a\u5c06\u62fe\u53d6\u5e76\u66b4\u9732\u89e3\u7b97\u5668(\u7528\u4e8e\u5373\u5c06\u89e3\u51b3\u7684\u6311\u6218)\u65f6\uff0c\u5b83\u975e\u5e38\u6709\u7528\u3002 \u8fd9\u4e9b\u53ef\u4ee5\u5728<code>ingressTemplate</code>\u4e0b\u7684<code>metadata</code>\u5b57\u6bb5\u4e0b\u914d\u7f6e:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: ...\nspec:\nacme:\nserver: ...\nprivateKeySecretRef:\nname: ...\nsolvers:\n- http01:\ningress:\ningressTemplate:\nmetadata:\nlabels:\nfoo: \"bar\"\nannotations:\n\"nginx.ingress.kubernetes.io/whitelist-source-range\": \"0.0.0.0/0,::/0\"\n\"nginx.org/mergeable-ingress-type\": \"minion\"\n\"traefik.ingress.kubernetes.io/frontend-entry-points\": \"http\"\n</code></pre> <p>\u6dfb\u52a0\u7684\u6807\u7b7e\u548c\u6ce8\u91ca\u5c06\u5408\u5e76\u5230 cert-manager \u9ed8\u8ba4\u503c\u4e4b\u4e0a\uff0c\u8986\u76d6\u5177\u6709\u76f8\u540c\u952e\u7684\u6761\u76ee\u3002</p> <p>\u5165\u53e3\u7684\u5176\u4ed6\u5b57\u6bb5\u90fd\u4e0d\u80fd\u88ab\u7f16\u8f91\u3002</p>"},{"location":"configuration/acme/http01/#http-01-api","title":"\u914d\u7f6e HTTP-01 \u7f51\u5173 API \u89e3\u6790\u5668","text":"<p>\u529f\u80fd\u72b6\u6001: cert-manager 1.5 [alpha]</p> <p>Gateway \u548c HTTPRoute \u6e90\u662fGateway API\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u662f\u4e00\u7ec4\u53ef\u4ee5\u5b89\u88c5\u5728 Kubernetes \u96c6\u7fa4\u4e0a\u7684 CRDs\uff0c\u5b83\u63d0\u4f9b\u4e86\u5bf9 Ingress API \u7684\u5404\u79cd\u6539\u8fdb\u3002</p> <p>\ud83d\udccc \u8be5\u7279\u6027\u9700\u8981\u5b89\u88c5Gateway API \u5305\uff0c\u5e76\u5c06\u7279\u6027\u6807\u5fd7\u4f20\u9012\u7ed9 cert-manager \u63a7\u5236\u5668\u3002</p> <p>\u5b89\u88c5v1.5.1\u7f51\u5173API\u5305(\u7f51\u5173crd\u548cwebhook)\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4:</p> <pre><code>kubectl apply -f \"https://github.com/kubernetes-sigs/gateway-api/releases/download/v0.5.1/standard-install.yaml\"\n</code></pre> <p>\u8981\u5728cert-manager\u4e2d\u542f\u7528\u8be5\u529f\u80fd\uff0c\u8bf7\u6253\u5f00<code>GatewayAPI</code>\u529f\u80fd\u95e8:</p> <ul> <li>\u5982\u679c\u4f60\u4f7f\u7528Helm:</li> </ul> <pre><code>helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager \\\n--set \"extraArgs={--feature-gates=ExperimentalGatewayAPISupport=true}\"\n</code></pre> <ul> <li>\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u539f\u59cb\u7684cert-manager\u6e05\u5355\uff0c\u8bf7\u5728cert-manager\u63a7\u5236\u5668\u90e8\u7f72\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u6807\u5fd7:</li> </ul> <pre><code>args:\n- --feature-gates=ExperimentalGatewayAPISupport=true\n</code></pre> <p>\u7f51\u5173API CRDs\u5e94\u8be5\u5728\u542f\u52a8cert-manager\u4e4b\u524d\u5b89\u88c5\uff0c\u6216\u8005\u5728\u5b89\u88c5\u7f51\u5173API crd\u4e4b\u540e\u91cd\u65b0\u542f\u52a8cert-manager\u90e8\u7f72\u3002 \u8fd9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u4e00\u4e9bcert-manager\u7ec4\u4ef6\u53ea\u5728\u542f\u52a8\u65f6\u6267\u884cGateway API\u68c0\u67e5\u3002\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u91cd\u542fcert-manager\u3002</p> <pre><code>kubectl rollout restart deployment cert-manager -n cert-manager\n</code></pre> <p>Info</p> <p>\ud83d\udea7 cert-manager 1.8+\u4f7f\u7528v1alpha2 Kubernetes Gateway API\u8fdb\u884c\u6d4b\u8bd5\u3002 \u7531\u4e8e\u6e90\u8f6c\u6362\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4e0ev1beta1\u4e00\u8d77\u5de5\u4f5c\uff0c\u4f46\u8fd8\u6ca1\u6709\u4f7f\u7528\u5b83\u8fdb\u884c\u6d4b\u8bd5\u3002</p> <p>HTTP-01 \u6c42\u89e3\u5668\u4f7f\u7528\u7ed9\u5b9a\u7684\u6807\u7b7e\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684 HTTPRoute\u3002 \u8fd9\u4e9b\u6807\u7b7e\u5fc5\u987b\u4e0e\u5728\u7aef\u53e3 80 \u4e0a\u5305\u542b\u4fa6\u542c\u5668\u7684 Gateway \u5339\u914d\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528\u7f51\u5173 API \u7684 HTTP-01 ACME \u53d1\u5e03\u8005\u7684\u4f8b\u5b50:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt\nnamespace: default\nspec:\nacme:\nsolvers:\n- http01:\ngatewayHTTPRoute:\nparentRefs:\n- name: traefik\nnamespace: traefik\nkind: Gateway\n</code></pre> <p>\u9881\u53d1\u8005\u4f9d\u8d56\u4e8e\u96c6\u7fa4\u4e0a\u73b0\u6709\u7684\u7f51\u5173\u3002cert-manager \u4e0d\u7f16\u8f91\u7f51\u5173\u6e90\u3002</p> <p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u7f51\u5173\u5c06\u5141\u8bb8\u53d1\u884c\u8005\u89e3\u51b3\u6311\u6218:</p> <pre><code>apiVersion: gateway.networking.k8s.io/v1alpha2\nkind: Gateway\nmetadata:\nname: traefik\nnamespace: traefik\nspec:\ngatewayClassName: traefik\nlisteners:\n- name: http\nprotocol: HTTP\nport: 80\nallowedRoutes:\nnamespaces:\nfrom: All\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7f51\u5173\u662f\u4e13\u95e8\u4e3a\u89e3\u51b3 HTTP-01 \u6311\u6218\u800c\u521b\u5efa\u7684\uff0c\u4f46\u662f\u60a8\u4e5f\u53ef\u4ee5\u9009\u62e9\u91cd\u7528\u73b0\u6709\u7684\u7f51\u5173\uff0c\u53ea\u8981\u5b83\u5728\u7aef\u53e3 80 \u4e0a\u6709\u4e00\u4e2a\u4fa6\u542c\u5668\u3002</p> <p>\u53ea\u8981\u7f51\u5173\u7684\u7aef\u53e3 80 \u76d1\u542c\u5668\u914d\u7f6e\u4e3a<code>from: All</code>\uff0c\u9881\u53d1\u8005\u4e0a\u7684\u201c\u6807\u7b7e\u201d\u53ef\u4ee5\u5f15\u7528\u4f4d\u4e8e\u5355\u72ec\u540d\u79f0\u7a7a\u95f4\u4e0a\u7684\u7f51\u5173\u3002 \u8bf7\u6ce8\u610f\uff0c\u8bc1\u4e66\u4ecd\u5c06\u5728\u4e0e\u9881\u53d1\u8005\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e0a\u521b\u5efa\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u5c06\u65e0\u6cd5\u5728\u4e0a\u8ff0\u7f51\u5173\u4e2d\u5f15\u7528\u6b64 Secret\u3002</p> <p>\u5f53\u4e0a\u9762\u7684\u9881\u53d1\u8005\u83b7\u5f97\u8bc1\u4e66\u65f6\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u4f1a\u521b\u5efa\u4e34\u65f6\u7684 HTTPRoute\u3002\u4f8b\u5982\uff0c\u4f7f\u7528\u4ee5\u4e0b\u8bc1\u4e66:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-tls\nnamespace: default\nspec:\nissuerRef:\nname: letsencrypt\ndnsNames:\n- example.net\n</code></pre> <p>\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a HTTPRoute \u51fa\u73b0:</p> <pre><code>apiVersion: gateway.networking.k8s.io/v1alpha2\nkind: HTTPRoute\nmetadata:\nname: cm-acme-http-solver-gdhvg\nnamespace: default\nspec:\nparentRefs:\n- name: traefik\nnamespace: traefik\nkind: Gateway\nhostnames:\n- example.net\nrules:\n- forwardTo:\n- port: 8089\nserviceName: cm-acme-http-solver-gdhvg\nweight: 1\nmatches:\n- path:\ntype: Exact\nvalue: /.well-known/acme-challenge/YadC4gaAzqEPU1Yea0D2MrzvNRWiBCtUizCtpiRQZqI\n</code></pre> <p>\u8bc1\u4e66\u9881\u53d1\u540e\uff0cHTTPRoute \u5c06\u88ab\u5220\u9664\u3002</p>"},{"location":"configuration/acme/http01/#gatewayhttproute-labels","title":"\u7b80\u4ecb","text":""},{"location":"configuration/acme/http01/#labels","title":"<code>labels</code>","text":"<p>\u8fd9\u4e9b\u6807\u7b7e\u88ab\u590d\u5236\u5230\u8bc1\u4e66\u7ba1\u7406\u5668\u4e3a\u89e3\u51b3 HTTP-01 \u6311\u6218\u800c\u521b\u5efa\u7684\u4e34\u65f6 HTTPRoute \u4e2d\u3002\u8fd9\u4e9b\u6807\u7b7e\u5fc5\u987b\u4e0e\u96c6\u7fa4\u4e0a\u7684\u4e00\u4e2a Gateway \u6e90\u76f8\u5339\u914d\u3002\u5339\u914d\u7684 Gateway \u5728\u7aef\u53e3 80 \u4e0a\u6709\u4e00\u4e2a\u76d1\u542c\u5668\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5f53\u6807\u7b7e\u4e0e\u96c6\u7fa4\u4e0a\u7684\u4efb\u4f55 Gateway \u4e0d\u5339\u914d\u65f6\uff0ccert-manager \u5c06\u521b\u5efa\u4e34\u65f6 HTTPRoute \u6311\u6218\uff0c\u5e76\u4e14\u4e0d\u4f1a\u53d1\u751f\u4efb\u4f55\u4e8b\u60c5\u3002</p>"},{"location":"configuration/acme/http01/#gatewayhttproute-service-type","title":"\u7b80\u4ecb","text":""},{"location":"configuration/acme/http01/#servicetype_1","title":"<code>serviceType</code>","text":"<p>\u6b64\u5b57\u6bb5\u4e0e <code>http01.ingress.serviceType</code>\u542b\u4e49\u76f8\u540c\u3002.</p>"},{"location":"configuration/acme/http01/#http-01","title":"\u4e3a HTTP-01 \u6c42\u89e3\u5668\u4f20\u64ad\u68c0\u67e5\u8bbe\u7f6e\u540d\u79f0\u670d\u52a1\u5668","text":"<p>\u5728\u5c1d\u8bd5 HTT01 \u6311\u6218\u4e4b\u524d\uff0ccert-manager \u5c06\u6267\u884c\u53ef\u8fbe\u6027\u6d4b\u8bd5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ccert-manager \u5c06\u4f7f\u7528\u4ece<code>/etc/resolv.conf</code>\u4e2d\u83b7\u5f97\u7684\u9012\u5f52\u540d\u79f0\u670d\u52a1\u5668\u6765\u67e5\u8be2\u6311\u6218 URL\u3002</p> <p>\u5982\u679c\u8fd9\u4e0d\u662f\u6240\u5e0c\u671b\u7684(\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5206\u5272\u5730\u5e73\u7ebf\u7684 DNS)\uff0c cert-manager \u63a7\u5236\u5668\u5c06\u66b4\u9732\u4e00\u4e2a\u6807\u5fd7\uff0c\u5141\u8bb8\u60a8\u66f4\u6539\u6b64\u884c\u4e3a:</p> <p><code>--acme-http01-solver-nameservers</code> cert-manager \u5e94\u8be5\u67e5\u8be2\u7684\u9012\u5f52\u540d\u79f0\u670d\u52a1\u5668\u7684\u4e3b\u673a\u548c\u7aef\u53e3\u7684\u9017\u53f7\u5206\u9694\u5b57\u7b26\u4e32\u3002</p> <p>\u4f7f\u7528\u793a\u4f8b:</p> <pre><code>--acme-http01-solver-nameservers=\"8.8.8.8:53,1.1.1.1:53\"\n</code></pre> <p>\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528<code>cert-manager</code> helm chart\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7<code>ValuesextraArgs</code>\u6216\u5728 helm \u5b89\u88c5/\u5347\u7ea7\u65f6\u4f7f\u7528<code>--set</code>\u547d\u4ee4\u8bbe\u7f6e\u9012\u5f52\u540d\u79f0\u670d\u52a1\u5668:</p> <pre><code>--set 'extraArgs={--acme-http01-solver-nameservers=8.8.8.8:53\\,1.1.1.1:53}'\n</code></pre>"},{"location":"configuration/acme/http01/externalloadbalancer/","title":"\u5916\u90e8\u8d1f\u8f7d\u5747\u8861\u5668","text":"<p>ACME HTTP-01 \u6311\u6218\u4f7f\u7528\u5916\u90e8\u8d1f\u8f7d\u5747\u8861\u5668</p> <p>\u5f53\u60a8\u4f7f\u7528\u4efb\u4f55\u4e3b\u673a\u63d0\u4f9b\u7684\u5916\u90e8\u8d1f\u8f7d\u5747\u8861\u5668\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u9762\u4e34\u51e0\u4e2a\u914d\u7f6e\u95ee\u9898\uff0c\u4ee5\u4f7f\u5176\u4e0e cert-manager \u4e00\u8d77\u5de5\u4f5c\u3002</p> <p>\u672c\u6587\u6863\u65e8\u5728\u5e2e\u52a9\u4e3a\u5916\u90e8\u8d1f\u8f7d\u5747\u8861\u5668\u540e\u9762\u7684\u5b9e\u4f8b\u914d\u7f6e HTTP-01 \u6311\u6218\u7c7b\u578b\u3002</p>"},{"location":"configuration/acme/http01/externalloadbalancer/#nat-loopback-hairpin","title":"NAT Loopback / Hairpin","text":"<p>\u7b2c\u4e00\u4e2a\u914d\u7f6e\u70b9\u662f NAT \u73af\u56de\u3002 \u7531\u4e8e\u8d1f\u8f7d\u5747\u8861\u5668\u963b\u6b62\u5176\u540e\u9762\u7684\u5b9e\u4f8b\u8bbf\u95ee\u5176\u5916\u90e8\u63a5\u53e3\uff0c\u60a8\u53ef\u80fd\u4f1a\u9762\u4e34\u68c0\u67e5\u95ee\u9898\u3002</p> <p>\u4e00\u4e9b\u7f51\u7edc\u8d1f\u8f7d\u5747\u8861\u5668\u7531\u4e8e\u51e0\u4e2a\u539f\u56e0\u6709\u8fd9\u79cd\u9650\u5236\u3002 \u5b83\u53ef\u4ee5\u901a\u8fc7<code>iptables</code>\u91cd\u8def\u7531\u914d\u7f6e\uff0c\u5373<code>NAT loopback</code>\u8fdb\u884c\u914d\u7f6e\u3002</p> <p>\u8981\u68c0\u67e5\u4f60\u662f\u5426\u9047\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898:</p> <ol> <li>\u68c0\u67e5\u6311\u6218\u7684\u7ec8\u70b9\u662f\u5426\u5bf9\u516c\u4f17\u5f00\u653e: <code>curl &lt;endpoint&gt;</code></li> <li>\u68c0\u67e5\u6311\u6218\u7aef\u70b9\u4e0d\u80fd\u4ece\u8d1f\u8f7d\u5747\u8861\u5668\u540e\u9762\u7684\u5185\u90e8\u8bbf\u95ee:\u4f7f\u7528 SSH \u5728\u8d1f\u8f7d\u5747\u8861\u5668\u540e\u9762\u7684\u8282\u70b9\u4e0a\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd;\u7136\u540e\u542f\u52a8\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u547d\u4ee4: <code>curl &lt;endpoint&gt;</code></li> </ol> <p>\u5f53<code>pre-check</code>\u5931\u8d25\u65f6\uff0c\u53ef\u4ee5\u5728\u65e5\u5fd7\u4e2d\u627e\u5230<code>HTTP-01</code>\u6311\u6218\u7684\u7aef\u70b9\u3002 \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u5728\u65e5\u5fd7\u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7<code>kubectl</code>\u547d\u4ee4\u68c0\u67e5\u6311\u6218 URL\u3002</p> <p><code>&lt;endpoint&gt;</code> \u662f\u7528\u4e8e\u4ece\u8bc1\u4e66<code>Issuer</code>\u6d4b\u8bd5 HTTP-01 \u7684 URL\u3002 \u4ee5 Let's Encrypt \u4e3a\u4f8b\uff0cURL \u7684\u683c\u5f0f\u4e3a<code>&lt;domain&gt;/.well-known/acme-challenge/&lt;hash&gt;</code></p>"},{"location":"configuration/acme/http01/externalloadbalancer/#http","title":"\u8d1f\u8f7d\u5747\u8861\u5668 HTTP \u7aef\u70b9","text":"<p>\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861\u5668(\u5728\u6258\u7ba1\u7684 Kubernetes \u670d\u52a1\u4e4b\u5916)\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u5c06\u8d1f\u8f7d\u5747\u8861\u5668\u534f\u8bae\u914d\u7f6e\u4e3a HTTP, HTTPS, TCP, UDP\u3002 \u4e00\u4e9b\u8d1f\u8f7d\u5747\u8861\u5668\u73b0\u5728\u901a\u8fc7 Let's Encrypt \u63d0\u4f9b\u514d\u8d39 TLS \u8bc1\u4e66\u3002</p> <p>\u5f53\u60a8\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u4f7f\u7528 HTTP \u534f\u8bae\u65f6\uff0c\u5b83\u53ef\u4ee5\u62e6\u622a\u6311\u6218 URL\uff0c\u7528\u5b83\u4eec\u7684\u54c8\u5e0c\u66ff\u6362\u54cd\u5e94\u7684\u9a8c\u8bc1\u54c8\u5e0c\u3002</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0ccert-manager \u5c06\u5931\u8d25 <code>did not get expected response when querying endpoint, expected 'xxxx' but got: yyyy (truncated)</code>.</p> <p>\u7531\u4e8e\u591a\u79cd\u539f\u56e0\uff0c\u53ef\u4ee5\u629b\u51fa\u8fd9\u79cd\u9519\u8bef\u3002 \u8fd9\u4e2a\u6848\u4f8b\u663e\u793a\u4e86\u4e00\u4e2a\u683c\u5f0f\u6b63\u786e\u7684\u54cd\u5e94\uff0c\u4f46\u4e0d\u662f\u9884\u671f\u7684\u54cd\u5e94\u3002 \u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 TCP \u534f\u8bae\u914d\u7f6e\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u8fd9\u6837 HTTP \u8bf7\u6c42\u5c31\u4e0d\u4f1a\u88ab\u4e3b\u673a\u62e6\u622a\u3002</p>"},{"location":"contributing/","title":"\u8d21\u732e","text":""},{"location":"contributing/#_2","title":"\u5f88\u9ad8\u5174\u89c1\u5230\u4f60!","text":"<p>\u65e0\u8bba\u60a8\u662f\u4ee5\u524d\u7684\u8d21\u732e\u8005\u8fd8\u662f\u7b2c\u4e00\u6b21\u60f3\u8981\u53c2\u4e0e\u8fdb\u6765\u7684\u4eba\uff0c\u6211\u4eec\u90fd\u559c\u6b22\u793e\u533a\u805a\u96c6\u5728\u4e00\u8d77\u6765\u6539\u8fdb\u9879\u76ee!</p> <p>\u5728\u8fd9\u4e2a\u201c\u8d21\u732e\u201d\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u8bb0\u5f55\u4e86\u4f5c\u4e3a\u4e00\u4e2a\u9879\u76ee\u6240\u9075\u5faa\u7684\u6d41\u7a0b\uff0c\u5e76\u5305\u62ec\u4e86\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u57fa\u4e8e\u5f00\u53d1\u76ee\u7684\u6784\u5efa\u3001\u6d4b\u8bd5\u548c\u8fd0\u884c cert-manager \u7684\u7ec6\u8282\u3002</p>"},{"location":"contributing/#_3","title":"\u4f1a\u8bae","text":"<p>All cert-manager meetings are open for everyone to join!</p> <p>To get invites you can subscribe to our mailing list.</p> <p>We have 2 regular repeating meetings:</p> <ul> <li>daily stand-up meetings on Google Meet at 10:30 London time every weekday</li> <li>bi-weekly developer meetings on Google Meet at 17:00 London time (for dates, check calendar invites or meeting notes)</li> </ul>"},{"location":"contributing/#slack","title":"Slack","text":"<p>We have two cert-manager channels on Kubernetes Slack which we use to chat:</p> <ul> <li><code>cert-manager</code>: for all users of cert-manager; use this one for any usage related questions</li> <li><code>cert-manager-dev</code>: for collaboration between cert-manager contributors and maintainers; please only use this for code related questions</li> </ul>"},{"location":"contributing/#2022","title":"\u8c37\u6b4c\u6587\u6863 2022 \u8d5b\u5b63","text":"<p>The cert-manager team are participating in Google Season of Docs 2022!</p> <p>Check out our 2022 Project Proposals if you want to get involved!</p>"},{"location":"contributing/building/","title":"Building cert-manager","text":"<p>cert-manager is built and tested using make, with a focus on using the standard Go tooling where possible and keeping system dependencies to a minimum. The cert-manager build system can provision most of its dependencies - including Go - automatically if required.</p> <p>cert-manager's build system fully supports developers who use <code>Linux amd64</code>, <code>macOS amd64</code> and <code>macOS arm64</code>. Other operating systems and architectures may work, but are largely untested.</p>"},{"location":"contributing/building/#prerequisites","title":"Prerequisites","text":"<p>There are very few other requirements needed for developing cert-manager, and crucially the build system should tell you with a friendly error message if there's anything missing. If you think an error message which relates to a missing dependency is unhelpful, we consider that a bug and we'd appreciate if you raised an issue to tell us about it!</p> <p>You should install the following tools before you start developing cert-manager:</p> <ul> <li>git</li> <li>curl</li> <li>GNU make, <code>v3.82</code> or newer</li> <li>GNU Coreutils (usually already installed on Linux, available via homebrew for macOS)</li> <li><code>jq</code> (available in Linux package managers and in homebrew)</li> <li><code>docker</code> (or <code>podman</code>, see Container Engines below)</li> <li><code>Go</code> (optional; see Go Versions below)</li> </ul>"},{"location":"contributing/building/#getting-started","title":"Getting Started","text":"<p>The vast majority of commands which you're likely to need to use are documented via <code>make help</code>. That's probably the first place to start if you're developing cert-manager. We'll also provide an overview on this page of some of the key targets and things to bear in mind.</p>"},{"location":"contributing/building/#go-versions","title":"Go Versions","text":"<p>cert-manager defaults to using whatever version of Go you've installed locally on your system. If you want to use your system Go, that's totally fine.</p> <p>Alternatively, make can provision and \"vendor\" Go specifically for cert-manager, helping to ensure you use the same version that's used in CI and to make it easier to get started developing.</p> <p>To start using a vendored Go, run: <code>make vendor-go</code>.</p> <p>You only need to run <code>vendor-go</code> once and it'll be \"sticky\", being used for all future make invocations in your local checkout.</p> <p>To return to using your system version of go, run: <code>make unvendor-go</code>.</p> <p>To check which version of Go is currently being used, run: <code>make which-go</code>, which prints the version number of Go and the path to the Go binary.</p> <pre><code># Use a vendored version of go\n$ make vendor-go\ncd _bin/tools/ &amp;&amp; ln -f -s ../downloaded/tools/_go-1.XY.Z-linux-amd64/goroot .\ncd _bin/tools/ &amp;&amp; ln -f -s ../downloaded/tools/_go-1.XY.Z-linux-amd64/goroot/bin/go .\n# A path to go inside the cert-manager directory indicates that a vendored Go is being used\n$ make which-go\ngo version go1.XY.Z linux/amd64\ngo binary used for above version information: /home/user/workspace/cert-manager/_bin/tools/go\n# Go back to the system Go\n$ make unvendor-go\nrm -rf _bin/tools/go _bin/tools/goroot\n# The binary is now \"go\" which should be found in $PATH\n$ make which-go\ngo version go1.AB.C linux/amd64\ngo binary used for above version information: go\n</code></pre>"},{"location":"contributing/building/#parallelism","title":"Parallelism","text":"<p>The cert-manager Makefile is designed to be highly parallel wherever possible. Any build and test commands should be able to be executed in parallel using standard Make functionality.</p> <p>One important caveat is that that Go will default to detecting the number of cores available on the system and spinning up as many threads as it can. If you're using Make functionality to run multiple builds in parallel, this number of threads can be excessive and actually lead to slower builds.</p> <p>It's possible to limit the number of threads Go uses we'd generally recommend doing so when using Make parallelism.</p> <p>The best values to use will depend on your system, but we've had success using around half of the available number of cores for Make and limiting Go to between 2 and 4 threads per core.</p> <p>For example, using an 8-core machine:</p> <pre><code># Run 4 make targets in parallel, and limit each `go build` to 2 threads.\nmake GOMAXPROCS=2 -j4 release-artifacts\n</code></pre>"},{"location":"contributing/building/#testing","title":"Testing","text":"<p>cert-manager's build pipeline and CI infrastructure uses the same Makefile that you use when developing locally, so there should be no divergence between what the tests run and what you run. That means you should be able to be pretty confident that any changes you make won't break when tested in CI.</p>"},{"location":"contributing/building/#running-local-changes-in-a-cluster","title":"Running Local Changes in a Cluster","text":"<p>It's common that you might want to run a local Kubernetes cluster with your locally-changed copy of cert-manager in it, for manual testing.</p> <p>There are make targets to help with this; see Developing with Kind for more information.</p>"},{"location":"contributing/building/#unit-and-integration-tests","title":"Unit and Integration Tests","text":"<p>First of all: If you want to test using <code>go test</code>, feel free! For unit tests (which we define as any test outside of the <code>test/</code> directory), <code>go test</code> will work on a fresh checkout.</p> <p>Integration tests may require some external tools to be set up first, so to run the integration tests inside <code>test/</code> you might need to run:</p> <pre><code>make setup-integration-tests\n</code></pre> <p>Helper targets are also available which use <code>gotestsum</code> for prettier output. It's also possible to configure these targets to run specific tests:</p> <pre><code># Run all unit and integration tests\nmake test\n# Run only unit tests\nmake unit-test\n\n# Run only integration tests\nmake integration-test\n\n# Run all tests in pkg\nmake WHAT=./pkg/... test\n# Run unit and integration tests exactly as run in CI\n# (NB: usually not needed - this is mostly for JUnit test output for dashboards)\nmake test-ci\n</code></pre>"},{"location":"contributing/building/#end-to-end-testing","title":"End-to-End Testing","text":"<p>cert-manager's end-to-end tests are a little more involved and have dedicated documentation describing their use.</p>"},{"location":"contributing/building/#other-checks","title":"Other Checks","text":"<p>We run a variety of other tools on every Pull Request to check things like formatting, import ordering and licensing. These checks can all be run locally:</p> <pre><code>make ci-presubmit\n</code></pre> <p>NB: One of these checks currently requires Python 3 to be installed, which is a unique requirement in the code base. We'd like to remove that requirement in the future.</p>"},{"location":"contributing/building/#updating-crds-and-code-generation","title":"Updating CRDs and Code Generation","text":"<p>Changes to cert-manager's CRDs require some code generation to be done, which will be checked on every pull request.</p> <p>If you make changes to cert-manager CRDs, you'll need to run some commands locally before raising your PR.</p> <p>This is documented in our CRDs section.</p>"},{"location":"contributing/building/#building","title":"Building","text":"<p>cert-manager produces many artifacts for a lot of different OS / architecture combinations, including:</p> <ul> <li>Container images</li> <li>Client binaries (<code>cmctl</code> and <code>kubectl_cert-manager</code>)</li> <li>Manifests (Helm charts, static YAML)</li> </ul> <p>All of these artifacts can be built locally using make.</p>"},{"location":"contributing/building/#containers","title":"Containers","text":"<p>cert-manager's most important artifacts are the containers which actually run cert-manager in a cluster. We default to using <code>docker</code> for this, but aim to support docker-compatible CLI tools such as <code>podman</code>, too. See Container Engines for more info.</p> <p>There are several targets for building different cert-manager containers locally. These will all default to using <code>docker</code>:</p> <pre><code># Build everything for every architecture\nmake all-containers\n\n# Build just the controller containers on every architecture\nmake cert-manager-controller-linux\n\n# As above, but for the webhook, cainjector, acmesolver and cmctl containers\nmake cert-manager-webhook-linux\nmake cert-manager-cainjector-linux\nmake cert-manager-acmesolver-linux\nmake cert-manager-ctl-linux\n</code></pre>"},{"location":"contributing/building/#container-engines","title":"Container Engines","text":"<p>NB: This section doesn't apply to end-to-end tests, which might not work outside of Docker at the time of writing. See the end-to-end documentation for more information.</p> <p>It's possible to use an alternative container engine to build cert-manager containers. This has been successfully tested using <code>podman</code>.</p> <p>Configure an alternative container engine by setting the <code>CTR</code> variable:</p> <pre><code># Build everything for every architecture, using podman\nmake CTR=podman all-containers\n</code></pre>"},{"location":"contributing/building/#client-binaries","title":"Client Binaries","text":"<p>Both <code>cmctl</code> and <code>kubectl_cert-manager</code> can be built locally for a release. These binaries are built for Linux, macOS and Windows across several architectures.</p> <pre><code># Build all cmctl binaries for all platforms, then for linux only, then for macOS only, then for Windows only\nmake cmctl\nmake cmctl-linux\nmake cmctl-darwin\nmake cmctl-windows\n\n# As above but for kubectl_cert-manager\nmake kubectl_cert-manager\nmake kubectl_cert-manager-linux\nmake kubectl_cert-manager-darwin\nmake kubectl_cert-manager-windows\n</code></pre>"},{"location":"contributing/building/#manifests","title":"Manifests","text":"<p>We use \"manifests\" as a catch-all term for non-binary artifacts which we build as part of a release including static installation YAML and our Helm chart.</p> <p>Everything can be built using make:</p> <pre><code>make helm-chart\nmake static-manifests\n</code></pre>"},{"location":"contributing/building/#everything","title":"Everything","text":"<p>Sometimes it's useful to build absolutely everything locally, to be sure that a change didn't break some obscure architecture and to build confidence when raising a PR.</p> <p>It's not easy to build a complete release locally since a full release includes signatures which depend on KMS keys being configured. Most users probably don't need that, though, and for this use case there's a make target which will build everything except the signed artifacts:</p> <pre><code>make GOMAXPROCS=2 -j4 release-artifacts\n</code></pre>"},{"location":"contributing/coding-conventions/","title":"Coding Conventions","text":"<p>cert-manager, like most Go projects, delegates almost all stylistic choices to <code>gofmt</code>, with <code>goimports</code> on top for organizing imports. Broadly speaking, if you set your editor to run <code>goimports</code> when you save a file, your code will be stylistically correct.</p> <p>cert-manager generally also follows the Kubernetes coding conventions and the Google Go code review comments.</p>"},{"location":"contributing/coding-conventions/#organizing-imports","title":"Organizing Imports","text":"<p>Imports should be organized into 3 blocks, with each block separated by two newlines:</p> <pre><code>import (\n\"stdlib\"\n\"external\"\n\"internal\"\n)\n</code></pre> <p>An example might be the following, taken from <code>pkg/acme/accounts/client.go</code>:</p> <pre><code>import (\n\"crypto/rsa\"\n\"crypto/tls\"\n\"net\"\n\"net/http\"\n\"time\"\nacmeapi \"golang.org/x/crypto/acme\"\nacmecl \"github.com/cert-manager/cert-manager/pkg/acme/client\"\nacmeutil \"github.com/cert-manager/cert-manager/pkg/acme/util\"\ncmacme \"github.com/cert-manager/cert-manager/pkg/apis/acme/v1\"\n\"github.com/cert-manager/cert-manager/pkg/metrics\"\n\"github.com/cert-manager/cert-manager/pkg/util\"\n)\n</code></pre> <p>Once this manual split of standard library, external and internal imports has been made, it will be enforced automatically by <code>goimports</code> when executed in the future.</p>"},{"location":"contributing/coding-conventions/#uk-vs-us-spelling","title":"UK vs. US spelling","text":"<p>For the sake of consistency, cert-manager uses en-US spelling for the documentation in https://cert-manager.io as well as within the cert-manager codebase. A comprehensive list of en-GB \u2192 en-US word substitution is available on Ubuntu's <code>WordSubstitution</code> page.</p>"},{"location":"contributing/contributing-flow/","title":"Contributing Flow","text":"<p>All of cert-manager's development is done via GitHub which contains code, issues and pull requests.</p> <p>All code for the documentation and cert-manager.io can be found at the cert-manager/website repo. Any issues towards the documentation should also be filed there.</p>"},{"location":"contributing/contributing-flow/#github-bot","title":"GitHub bot","text":"<p>We use Prow on all our repositories. If you've ever looked at a Kubernetes repo, you will probably already have met Prow. Prow will be able to help you in GitHub using its commands. You can find then all on the command help page. Prow will also run all tests and assign certain labels on PRs.</p>"},{"location":"contributing/contributing-flow/#bugs","title":"Bugs","text":"<p>All bugs should be tracked as issues inside the GitHub repository. Issues should then be attached with the <code>kind/bug</code> tag. To do this add <code>/kind bug</code> to your issue description. This may then be assigned a priority and milestone to be addressed in a future release.</p> <p>The more logs and information you can give about what and how the bug has been discovered, the faster it can be resolved.</p> <p>Critical bug fixes are typically also cherry picked to the current minor stable releases.</p> <p>Note: If you are simply looking for troubleshooting then you should post your question to the community <code>cert-manager</code> slack channel. Many more people read this channel than GitHub issues, it's likely your problem will be solved quicker by using Slack. Please also check that the bug has not already been filed by searching for key terms in the issue search bar.</p>"},{"location":"contributing/contributing-flow/#reopening-and-closing-issues","title":"(Re)opening and closing issues","text":"<p>Prow can assist you to reopen or close issues you file, you can trigger it using <code>/reopen</code> or <code>/close</code> in a GitHub Issue comment.</p>"},{"location":"contributing/contributing-flow/#features","title":"Features","text":"<p>Feature requests should be created as GitHub issues. They should contain clear motivation for the feature you wish to see as well as some possible solutions for how it can be implemented. Issues should then be tagged with <code>kind/feature</code>. To do this add <code>/kind feature</code> to your issue description.</p> <p>Note: It is often a good idea to bring your feature request up on the community <code>cert-manager</code> slack channel to discuss whether the feature request has already been made or is aligned with the project's priorities.</p>"},{"location":"contributing/contributing-flow/#creating-pull-requests","title":"Creating Pull Requests","text":"<p>Changes to the cert-manager code base is done via pull requests. Each pull request should ideally have a corresponding issue attached that is to be fixed by this pull request. It is valid for multiple pull requests to resolve a single issue in the interest of keeping code changes self contained and simpler to review.</p> <p>Once created, a team member will assign themselves for review and enable testing. To make sure the changes get merged, keep an eye out for reviews which can have multiple cycles.</p> <p>If the pull request is a critical bug fix then this will probably also be cherry picked to the current stable version of cert-manager as a patch release.</p> <p>To let people know that your PR is still a work in progress, we usually add a <code>WIP:</code> prefix to the title of the PR. Prow will then automatically set the label <code>do-not-merge/work-in-progress</code>.</p>"},{"location":"contributing/contributing-flow/#cherry-picking","title":"Cherry Picking","text":"<p>If the pull request contains a critical bug fix then this should be cherry picked in to the current stable cert-manager branch  and released as a patch release.</p> <p>To trigger the cherry-pick process, add a comment to the GitHub PR. For example: <pre><code>/cherry-pick release-x.y\n</code></pre></p> <p>The <code>jetstack-bot</code> will then create a new branch and a PR against the release branch, which should be reviewed, approved and merged using the process described above.</p>"},{"location":"contributing/contributing-flow/#dco-signoff","title":"DCO signoff","text":"<p>All commits in the PR should be signed off, more info on how to do this is at the DCO Sign Off page. Exceptions can only be made for small documentation fixes.</p>"},{"location":"contributing/contributing-flow/#project-management","title":"Project Management","text":"<p>Most of cert-manager's project management is done on GitHub, with the help of Prow.</p>"},{"location":"contributing/contributing-flow/#when-will-something-be-released","title":"When will something be released?","text":"<p>Our team works using GitHub milestones. When a milestone is set on an Issue it is generally an indication of when we plan to address this. Prow will apply milestones on merged PRs, this will tell you in which version that PR will land.</p> <p>The milestone page will also have an indicated due date when we will release. This might have some delay. We brief our users/contributors about this in our bi-weekly community meeting, for an up to date status report we recommend joining these.</p>"},{"location":"contributing/contributing-flow/#labels","title":"Labels","text":"<p>We make a heavy use of GitHub labels for PRs and Issues. The ones on PRs are mostly managed by Prow and code reviewers. In issues we always aim to add 3 types: area, priority and kind. These are set using Prow using <code>/area</code>, <code>/kind</code> and <code>/priority</code>. Sometimes <code>/triage</code> is also added which helps us when following up Issues.</p> <ul> <li>Area indicates the code area which is/will need changing</li> <li>Kind indicates if it is a <code>bug</code> or a <code>feature</code> but also can be <code>documentation</code> or <code>cleanup</code> (general maintenance)</li> <li>Priority is the priority it has for the cert-manager team, PRs are still very welcome for those!</li> </ul>"},{"location":"contributing/contributing-flow/#assignees-meaning-in-prs-and-issues","title":"Assignees meaning in PRs and issues","text":"<p>Sometimes, you might see someone commenting with the <code>/assign</code> prow command:</p> <pre><code>/assign @meyskens\n</code></pre> <p>Here is the meaning that we give to the GitHub assignees:</p> <ul> <li>On issues, it means that the assignee is working on it.</li> <li>On PRs, we use it as a way to know who should be taking a look at the PR at any time:</li> <li>When the author is assigned, it means the PR needs work to be done aka \"changes requested\";</li> <li>When nobody is assigned, it means this PR needs review;</li> <li>When someone different from the author is assigned, it means this person is reviewing this PR.</li> </ul>"},{"location":"contributing/contributing-flow/#triage-party","title":"Triage Party!","text":"<p>Every few weeks we will plan a Triage Party meeting, where we use the (Triage Party)[https://triage.build-infra.jetstack.net/] tool to go recent/old issues to prioritise them so we can address them in a timely matter. These meetings are open to everyone and invites will be sent out using our mailing list (warning: despite the word party these meetings are sometimes boring).</p>"},{"location":"contributing/crds/","title":"CRDs","text":"<p>cert-manager uses Kubernetes Custom Resources to define the resources which users interact with when using cert-manager, such as <code>Certificate</code>s and <code>Issuer</code>s.</p> <p>When changes are made to the CRDs in code, there are a couple of extra steps which are required.</p>"},{"location":"contributing/crds/#generating-crd-updates","title":"Generating CRD Updates","text":"<p>We use <code>controller-gen</code> to update our CRDs, and <code>k8s-code-generator</code> for code generation.</p> <p>Verifying and updating CRDs and generated code can be done entirely through make. There are two steps; one will update CRDs and one will update generated code:</p> <pre><code># Check that CRDs and codegen are up to date\nmake verify-crds verify-codegen\n\n# Update CRDs based on code\nmake update-crds\n\n# Update generated code based on CRD defintions in code\nmake update-codegen\n</code></pre>"},{"location":"contributing/crds/#versions","title":"Versions","text":"<p>cert-manager currently has a single <code>v1</code> API version for public use.</p> <p>cert-manager API types are defined in <code>pkg/apis/certmanager</code>.</p> <p>ACME related resources are in <code>pkg/apis/acme</code>.</p>"},{"location":"contributing/crds/#code-comments","title":"Code Comments","text":"<p>Code comments on API type fields are converted into documentation on this website as well as appearing in the output of <code>kubectl explain</code>.</p> <p>That means that <code>go doc</code>-style comments on API fields should be written to be user-facing and not developer-facing. For this reason it's also fine to break from usual Go standards regarding code comments when editing these fields.</p>"},{"location":"contributing/crds/#internal-api-versions","title":"Internal API Versions","text":"<p>cert-manager also has an internal API version which lives under <code>internal/apis</code>.</p> <p>The internal version is only used for validation and conversion and controllers should not generally use it; it's not intended to be user-friendly or stable and can change. However all new fields also have to be added here for the conversion logic to work.</p> <p>For details on conversion and versions, see the official Kubernetes docs for CRD versioning.</p>"},{"location":"contributing/crds/#kubebuilder","title":"Kubebuilder","text":"<p>While cert-manager doesn't fully use Kubebuilder, CRDs can make use of special Kubebuilder flags such as validation flags.</p>"},{"location":"contributing/crds/#making-changes-to-apis","title":"Making Changes to APIs","text":"<p>Please see our API compatibility promise for details on which types of changes to APIs are acceptable.</p> <p>Generally, the gist is that new fields can be added but that existing fields cannot be removed.</p> <p>This also means that when a field is added to a version of the API, it's permanent and its name cannot be changed. Because of this, we try to be cautious when adding new fields.</p> <p>The same principles apply to constants and enumerated types.</p>"},{"location":"contributing/dns-providers/","title":"DNS Providers","text":""},{"location":"contributing/dns-providers/#creating-dns-providers","title":"Creating DNS Providers","text":"<p>Due to the large number of requests to support DNS providers to resolve DNS challenges, it became impractical and infeasible to maintain and test all DNS providers in the main cert-manager repository.</p> <p>For this reason, it was decided that new DNS providers should be supported out-of-tree by way of external webhooks.</p> <p>To implement an external DNS provider webhook, it is recommended to base your implementation on the cert-manager webhook-example.</p> <p>There's further information available in the configuration section:</p> <ul> <li>ACME DNS01 via webhook</li> <li>Configuring an ACME issuer with external webhook</li> </ul> <p>If you're struggling with creating a new DNS webhook, reach out on Slack!</p>"},{"location":"contributing/e2e/","title":"Running End-to-End Tests","text":"<p>cert-manager has an extensive end-to-end (e2e) test suite that verifies functionality against a real Kubernetes cluster.</p> <p>The full end-to-end test suite can take a long time to complete and is run against every pull request made to the cert-manager project.</p> <p>Unless you've made huge changes to the cert-manager codebase --- or to the end-to-end tests themselves --- you probably don't need to run the tests locally. If you do want to run the tests, though, this document explains how.</p>  The status of each commit on the master branch is reported on [`testgrid.k8s.io`](https://testgrid.k8s.io/jetstack-cert-manager-master). Join the [`cert-manager-dev-alerts`](https://groups.google.com/g/cert-manager-dev-alerts) Google group to receive email notifications when tests fail."},{"location":"contributing/e2e/#requirements","title":"Requirements","text":"<p>There are no special requirements for the end-to-end tests. All dependencies can be provisioned automatically through the make build system.</p>"},{"location":"contributing/e2e/#set-up-end-to-end-tests","title":"Set up End-to-End Tests","text":""},{"location":"contributing/e2e/#create-a-cluster","title":"Create a Cluster","text":"<p>You can create a kind cluster using Make:</p> <pre><code># Create a cluster using whatever K8s version is default, named \"kind\"\nmake e2e-setup-kind\n# Create a cluster using K8s 1.23 named \"keith\"\nmake K8S_VERSION=1.23 KIND_CLUSTER_NAME=keith e2e-setup-kind\n</code></pre> <p>IMPORTANT: the kind cluster will be set up using a specific service CIDR range to enable certain functionality in end-to-end tests. This CIDR range is not currently configurable.</p> <p>Once complete, the cluster is available via <code>kubectl</code> as you'd expect.</p>"},{"location":"contributing/e2e/#install-test-dependencies","title":"Install Test Dependencies","text":"<p>There are various dependencies which the end-to-end tests require, all of which can also be installed via Make:</p> <pre><code>make e2e-setup\n</code></pre> <p>If you only need to update or reinstall one of these dependencies in your test cluster, you can instead install named components explicitly to save some time.</p> <p>The most common use case for this is to reinstall cert-manager itself, say if you've made a change locally and want to test that change in a cluster:</p> <pre><code># Most important: reinstall cert-manager, including rebuilding changed containers locally\nmake e2e-setup-certmanager\n# An example of reinstalling something else; reinstall bind\nmake e2e-setup-bind\n# More generally, see make/e2e-setup.mk for different targets!\n</code></pre>"},{"location":"contributing/e2e/#run-end-to-end-tests","title":"Run End-to-End Tests","text":"<p>As with setup, running tests is available through make. In fact, you can just run <code>make e2e</code> directly and avoid having to set anything up manually!</p> <pre><code># Set up a cluster using the defaults if one's not already present, and then run the end-to-end tests\nmake e2e\n# Set up a K8s 1.23 cluster and then run tests\nmake K8S_VERSION=1.23 e2e\n# Run tests exactly as they're run in CI; usually not needed\nmake e2e-ci\n</code></pre> <p>If you don't want to run every test you can focus on specific tests using <code>GINKGO_FOCUS</code> syntax, as described in the Ginkgo documentation:</p> <pre><code>make GINKGO_FOCUS=\".*my test description\" e2e\n</code></pre>"},{"location":"contributing/e2e/#cluster-ip-details","title":"Cluster IP Details","text":"<p>As mentioned above, the end-to-end tests expect that certain components are deployed in a specific way and even at specific IP addresses.</p> <p>By way of illustration, the following cluster components are deployed with specific IPs:</p> Component / Make Target Used in IP DNS A Record <code>e2e-setup-bind</code> DNS-01 tests <code>10.0.0.16</code> <code>e2e-setup-ingressnginx</code> HTTP-01 <code>Ingress</code> tests <code>10.0.0.15</code> <code>*.ingress-nginx.db.http01.example.com</code> <code>e2e-setup-projectcontour</code> HTTP-01 <code>GatewayAPI</code> tests <code>10.0.0.14</code> <code>*.gateway.db.http01.example.com</code> <p>If you don't set these components up correctly, you might see that the ACME HTTP01 (and other) end-to-end tests fail.</p>"},{"location":"contributing/e2e/#end-to-end-test-structure","title":"End-to-End Test Structure","text":"<p>The end-to-end tests consist of 2 main parts: issuer specific tests and the conformance suite.</p> <p>Both parts use Ginkgo to run their tests under the hood.</p>"},{"location":"contributing/e2e/#conformance-suite","title":"Conformance Suite","text":""},{"location":"contributing/e2e/#rbac","title":"RBAC","text":"<p>This suite tests all RBAC permissions granted to cert-manager on the cluster to check that it is able to operate correctly.</p>"},{"location":"contributing/e2e/#certificates","title":"Certificates","text":"<p>This suite tests certificate functionality against all issuers.</p>"},{"location":"contributing/e2e/#feature-sets","title":"Feature Sets","text":"<p>Some issuers don't support certain features, such as for example issuing Ed25519 certificates or adding an email address to the X.509 SAN extension.</p> <p>Each test specifies a used feature using <code>s.checkFeatures(feature)</code>, which is then checked against the issuer's <code>UnsupportedFeatures</code> list. Tests which use a feature unsupported by an issuer are skipped for that issuer.</p>"},{"location":"contributing/e2e/#cloud-provider-tests","title":"Cloud Provider Tests","text":"<p>The master branch of cert-manager can also be tested against different cloud providers. Currently, tests for EKS are present which run as a periodic job once every two days.</p>"},{"location":"contributing/e2e/#extending-the-cloud-provider-tests","title":"Extending The Cloud Provider Tests","text":"<p>The infrastructure used to run the e2e tests on cloud providers is present in the cert-manager/test-infra repository. More cloud providers can be added by creating infrastructure for them using Terraform.</p> <p>Apart from that, tests for the existing infrastructure can be customized by editing their respective prow jobs present in the Jetstack testing repository repository. Values like the cert-manager version or the cloud provider version are present as variables in Terraform so their values can be changed when using <code>terraform apply</code> in the prow jobs, for example, for the EKS prow job the cert-manager version being tested can be changed using</p> <pre><code>terraform apply -var=\"cert_manager_version=v1.3.3\" -auto-approve\n</code></pre> <p>To see a list of all configurable variables present for a particular infrastructure you can see the <code>variables.tf</code> file for that cloud provider's infrastructure.</p> <p>Please note that the cloud provider tests run the e2e tests present in the master branch of cert-manager on a predefined version of cert-manager (can be changed in the prow job). Currently, they do not test code in a PR, but we have an issue tracking that request.</p>"},{"location":"contributing/external-issuers/","title":"Implementing External Issuers","text":"<p>cert-manager offers a number of core issuer types that represent various certificate authorities.</p> <p>Since the number of potential issuers is larger than what could reasonably be supported in the main cert-manager repository, cert-manager also supports out-of-tree external issuers, and treats them the same as in-tree issuer types.</p> <p>This document is for people looking to create external issuers. For more information on how to install and configure external issuer types, read the configuration documentation.</p>"},{"location":"contributing/external-issuers/#general-overview","title":"General Overview","text":"<p>An issuer represents a certificate authority that signs incoming certificate requests. In cert-manager, the <code>CertificateRequest</code> resource represents a single request for a signed certificate, containing the raw certificate request PEM data as well as other information relating to the desired certificate.</p> <p>In cert-manager, each issuer type has its own controller that watches these <code>CertificateRequest</code> resources and checks to see if a given <code>CertificateRequest</code> is configured to use the issuer.</p> <p>This is done via the <code>issuerRef</code> stanza on the <code>CertificateRequest</code> which contains an issuer <code>name</code>, <code>kind</code> and <code>group</code>.</p> <p><code>group</code> denotes an API group such as <code>cert-manager.io</code> (which is responsible for all core issuer types).</p> <p><code>kind</code> denotes the \"kind\" resource type of the issuer - usually <code>Issuer</code> or <code>ClusterIssuer</code>.</p> <p><code>name</code> denotes the name of the issuer resource of the specified kind. An example might be <code>my-ca-issuer</code>.</p> <p>When an issuer controller observes a new <code>CertificateRequest</code> which refers to it, it then ensures that the corresponding issuer resource exists in Kubernetes.</p> <p>It then uses the information inside the issuer resource to attempt to create a signed certificate, based upon the information inside the certificate request.</p>"},{"location":"contributing/external-issuers/#sample-external-issuer","title":"Sample External Issuer","text":"<p>If you want to create an External Issuer, the best place to start is likely to be the Sample External Issuer.</p> <p>The Sample External Issuer is maintained by the cert-manager team, and its README file has step-by-step instructions on how to write an external issuer using Kubebuilder and controller-runtime.</p>"},{"location":"contributing/external-issuers/#approval","title":"Approval","text":"<p>Before signing a certificate, Issuers must also ensure that the <code>CertificateRequest</code> is <code>Approved</code>.</p> <p>If the <code>CertificateRequest</code> is not <code>Approved</code>, the issuer must not process it. Issuers are not responsible for approving <code>CertificateRequests</code> and should refuse to proceed if they find a certificate that is not approved.</p>"},{"location":"contributing/external-issuers/#supporting-legacy-cert-manager-releases","title":"Supporting Legacy cert-manager Releases","text":"<p>Certificate approval was added to cert-manager in <code>v1.3</code>. In order to support older versions of cert-manager, external issuers may choose to sign <code>CertificateRequests</code> that will never have an approval condition set, but this should be feature-gated and disabled by default.</p> <p>If you're creating a new External Issuer today, we'd strongly recommend that you do not support such old versions of cert-manager.</p>"},{"location":"contributing/external-issuers/#conditions","title":"Conditions","text":"<p>Once a signed certificate has been gathered by the issuer controller, it updates the status of the <code>CertificateRequest</code> resource with the signed certificate. It is then important to update the condition status of that resource to a ready state, as this is what is used to signal to higher order controllers - such as the <code>Certificate</code> controller - that the resource is ready to be consumed.</p> <p>Conversely, if the <code>CertificateRequest</code> fails, it is as important to mark the resource as such, as this will also be used as a signal to higher order controllers. Valid condition states are listed under concepts.</p>"},{"location":"contributing/external-issuers/#implementation","title":"Implementation","text":"<p>It is recommended that you make use of the kubebuilder project in order to implement your external issuer controller. This makes it very simple to generate <code>CustomResourceDefinitions</code> and gives you a lot of controller functionality out of the box.</p> <p>If you have further questions on how to implement an external issuer controller, it is best to reach out on slack or to join a community calls.</p>"},{"location":"contributing/importing/","title":"Importing cert-manager in Go","text":"<p>cert-manager is written in Go, and uses Go modules. You can import it as a Go module, and in some cases that's fine or even encouraged, but as a rule we generally recommend against importing cert-manager.</p> <p>Generally speaking, except for the cases listed below under When You Might Import cert-manager, code in the cert-manager repository is not covered under any Go module compatibility guarantee. We can and will make breaking changes, even in publicly exported Go code and even in a minor or patch release of cert-manager. We have made breaking changes like this in the past.</p> <p>Note that this doesn't affect running cert-manager. Our commitment on compatibility is to not break the runtime functionality of cert-manager, and we take that seriously.</p> <p>If you're certain that you do need to import cert-manager as a module, see Module Import Paths below for a note on how to do that.</p>"},{"location":"contributing/importing/#when-you-might-import-cert-manager","title":"When You Might Import cert-manager","text":"<p>You might need to import cert-manager if you're writing Go code which:</p> <ul> <li>uses cert-manager custom resources, so you want to import something under <code>pkg/apis</code></li> <li>implements an external DNS solver webhook, as in the webhook-example</li> <li>implements an external issuer, as in the sample-external-issuer</li> </ul> <p>If you think you really need to import other parts of the code, please do reach out and talk to us so we're aware of this need! We'll always try to avoid breakage where we can.</p>"},{"location":"contributing/importing/#module-import-paths","title":"Module Import Paths","text":"<p>The original cert-manager repository was created on GitHub as <code>https://github.com/jetstack/cert-manager</code>, and was later migrated to <code>https://github.com/cert-manager/cert-manager</code>.</p> <p>This means the Go module import path you need depends on the version of cert-manager you're trying to use.</p> <p>For cert-manager 1.8 and later, use the new path:  <code>github.com/cert-manager/cert-manager</code></p> <p>For cert-manager 1.7 and earlier, including all point releases, use the old path:  <code>github.com/jetstack/cert-manager</code></p>"},{"location":"contributing/kind/","title":"Developing with Kind","text":"<p>Kind allows you to provision Kubernetes clusters locally using nested Docker containers, with no requirement for virtual machines.</p> <p>These clusters are quick to create and destroy, and are useful for simple testing for development. cert-manager also uses kind clusters in its end-to-end tests.</p>"},{"location":"contributing/kind/#using-kind-locally","title":"Using Kind Locally","text":"<p>You should be able to make use of cert-manager's end-to-end test setup logic to create a local Kind cluster for development. As such, if you want a local cluster you might want to follow some of the details in the end-to-end test documentation.</p> <p>If, though, you just want to get a cluster up and running with your local changes to cert-manager running inside <code>kind</code>, try the following:</p> <pre><code>make e2e-setup-kind e2e-setup-certmanager\n</code></pre> <p>Or, if you need a specific version of Kubernetes:</p> <pre><code>make K8S_VERSION=1.xx e2e-setup-kind e2e-setup-certmanager\n</code></pre> <p>That should leave you with a working cluster which you can interact with using <code>kubectl</code>!</p>"},{"location":"contributing/policy/","title":"Feature Policy","text":"<p>We love to receive both feature requests and PRs which add to and improve cert-manager; the community is at the heart of what we do!</p> <p>If you're thinking of adding a feature, we recommend you read this doc to maximize the chances of your contribution getting the attention it deserves and hopefully to get it merged quickly!</p> <p>We recommend creating an issue first for it to be discussed with the cert-manager maintainers. Another possibility is bringing it up in a community meeting for an open discussion on the implementation.</p>"},{"location":"contributing/policy/#feature-sizing-getting-your-change-accepted","title":"Feature Sizing: Getting Your Change Accepted","text":"<p>We evaluate new features and PRs based on their size and their significance; either they're small or large.</p>"},{"location":"contributing/policy/#smaller-features","title":"Smaller Features","text":"<p>Many contributions are small. That usually - but not always - means that implementing them won't require many lines of code to be added or changed, and in any case they should be easy for maintainers to review. A PR being small is a good thing; if you can down-scope your feature to make it smaller, we won't complain!</p> <p>If you believe your feature is small, please feel free to just raise a PR and optionally also post a link to your PR in the cert-manager-dev slack channel. Usually a sufficiently small PR can be merged without too much ceremony. If we think it's actually a larger piece of work, we'll let you know.</p>"},{"location":"contributing/policy/#larger-features","title":"Larger Features","text":"<p>If you're not sure whether your PR is small, or if you know it's bigger, you'll want to speak to us first before raising a PR. This will help to ensure that your PR is something we're likely to merge to avoid wasting your time. It'll also make it easier for us to do the design process.</p>"},{"location":"contributing/policy/#design-documents","title":"Design Documents","text":"<p>Larger feature development should normally start with a design discussion. To get that started, you would raise a PR with a design document against cert-manager/cert-manager/design. This allows us to discuss the proposed functionality before starting the work to implement it and serves as a way to document the decisions and reasoning behind them. Ideally, a good design document should allow for faster and more consistent feature development and implementation process by providing a single place where all potential concerns and questions are answered.</p> <p>We have a design template that outlines the structure of the document. (This is a simplified version of Kubernetes enhancements KEP template). Do reach out if you need help with the design.</p> <p>Part of the process of discussing a design document may also include a video call with you included! That helps us to plan how a feature should be implemented and approached. It'll be pretty informal and casual; we just want to make sure we're all on the same page. This call might be part of a biweekly meeting.</p>"},{"location":"contributing/policy/#making-progress-with-larger-features","title":"Making Progress with Larger Features","text":"<p>Larger features with a design document are much more likely to be accepted, and in turn we're much more likely to commit a single named cert-manager maintainer to the effort to help the PR to be successful. That maintainer might not be able to answer all your questions, but they should certainly be able to point you in the right direction.</p> <p>To get in touch to discuss a feature, please reach out on the cert-manager-dev slack channel, or join a cert-manager public meeting to talk about your proposal.</p> <p>If you have an open PR with a design document (or have some questions about how to proceed with a design), you should absolutely feel free to add the PR with your design or a link to the relevant GitHub issue to the meeting notes for our next biweekly meeting and join in so we're sure to discuss it and so you can contribute to the discussion!</p>"},{"location":"contributing/policy/#large-feature-lifecycle","title":"Large Feature Lifecycle","text":"<ol> <li>Informally ask about the feature in slack or a public meeting</li> <li>Create a PR with a lightweight design document using the design template, for discussion</li> <li>Design doc PR gets reviewed - possibly includes meeting or discussion in a biweekly meeting</li> <li>Implement your feature, helped and reviewed by a named cert-manager maintainer</li> </ol>"},{"location":"contributing/policy/#feature-requests-well-likely-reject","title":"Feature Requests We'll Likely Reject","text":"<p>In some cases, people will request features which we've previously rejected or which for some reason we have to reject.</p> <p>It's nothing personal; sometimes we have to make tough choices and especially when it comes to security and maintainability we have to reject certain proposals. If your feature request is listed below, there's a high chance we'll have to reject it.</p> <p>That said, if you think we've made a mistake and that we should reconsider, we're open to chatting - consider joining our biweekly meetings to discuss it with us!</p>"},{"location":"contributing/policy/#vendoring-kubernetes-related-apis-outside-of-the-k8sio-namespace","title":"Vendoring Kubernetes related APIs outside of the <code>k8s.io/</code> namespace","text":"<p>Vendoring project APIs that also vendor <code>k8s.io/apimachinery</code>, such as OpenShift, Contour, or Velero, is not recommend because the Kubernetes dependency is likely to conflict with cert-manager's instance. It could also cause a conflict with different Kubernetes client versions being used.</p> <p>If this is needed it is suggested to use a \"dynamic client\" that converts the objects into internal structures copied into the cert-manager codebase.</p>"},{"location":"contributing/policy/#additional-configuration-options-for-the-helm-chart","title":"Additional configuration options for the Helm chart","text":"<p>cert-manager's Helm chart is intended to allow to create a standard, best practices cert-manager installation with basic configuration options, such as being able to provide flags to cert-manager components, label resources etc. We do not aim to include every possible configuration option for resources that the chart creates to avoid maintenance burden and because we do not have automated testing for all chart configuration options. Therefore we are likely to not accept PRs that add advanced or niche configuration options to Helm charts- we recommend that users who require that configuration use another mechanism such as Helm's post-install hooks.</p>"},{"location":"contributing/policy/#helm-crds","title":"Helm + CRDs","text":"<p>Helm suggests that CRDs be included in a <code>crds/</code> subdirectory of a chart, with the <code>crd-install</code> annotation included. This has the unfortunate side effect that CRDs are not upgraded if changed in a later release.</p> <p>CRDs being upgraded without being removed and re-installed is essential for cert-manager to move forward.</p> <p>This was previously discussed in the Helm community.</p> <p>cert-manager works around this limitation by shipping CRDs in the templates.</p>"},{"location":"contributing/policy/#helm-subchart-capabilities","title":"Helm Subchart capabilities","text":"<p>cert-manager now has the capability to be installed as a subchart.</p> <p>But you need to be careful when adding it to your umbrella chart.</p> <p>This is because the cert-manager installation creates cluster scoped resources like admission webhooks and custom resource definitions. cert-manager should be seen as part of your cluster and should be treated as such for being installed. An apt comparison to other Kubernetes components would be a LoadBalancer controller or a PV provisioner.</p> <p>It is your responsibility to ensure that cert-manager is only installed once in your cluster. This can be managed via the <code>condition</code> parameter of the dependency in your <code>Chart.yaml</code>, which allows users to disable the installation of a subchart. The condition parameter must be added when using cert-manager as a subchart to allow users to disable your dependency.</p> <pre><code>apiVersion: v2\nname: example_chart\ndescription: A Helm chart with cert-manager as subchart\ntype: application\nversion: 0.1.0\nappVersion: \"0.1.0\"\ndependencies:\n- name: cert-manager\nversion: v1.8.0\nrepository: https://charts.jetstack.io\nalias: cert-manager\ncondition: cert-manager.enabled\n</code></pre>"},{"location":"contributing/policy/#secret-injection-or-copying","title":"Secret injection or copying","text":"<p>cert-manager deals with very sensitive information (all TLS certificates for your services) and has cluster-level access to secret resources. As such, when designing features we need to consider all of the ways these secrets might be abused to escalate privilege.</p> <p>Secret data is meant to be securely stored in <code>Secret</code> resources and have narrow scoped access privileges for unauthorized users. Because of this, we won't usually add any functionality that allows this data to be copied/injected into any resource other than a Kubernetes <code>Secret</code>.</p>"},{"location":"contributing/policy/#cainjector","title":"cainjector","text":"<p>The cainjector component is a special exception to this rule as it deals in non-sensitive information (CAs, not cert/key pairs). This component is able to inject the <code>ca.crt</code> file into predefined fields on <code>ValidatingWebhookConfiguration</code>, <code>MutatingWebhookConfiguration</code>, and <code>CustomResourceDefinition</code> resources from Certificate resources.</p> <p>These 3 components are already scoped only for privileged users, and will already give you cluster scoped access to resources.</p> <p>If you\u2019re designing a resource that needs a CA Certificate or TLS key pair it is strongly recommended to use a reference to a secret instead of embedding it in a resource.</p>"},{"location":"contributing/policy/#cross-namespace-resources","title":"Cross namespace resources","text":"<p>Namespace boundaries in Kubernetes provide a barrier for access scopes. Apps or users can be limited to only access resources in a certain namespace.</p> <p>cert-manager is a controller that operates on cluster wide resources however, and while it may seem interesting to allow access to copy or write certificate data from one namespace to the other, this can cause a bypass of the namespace security model for all users, which is usually not intended and can be a major a security issue.</p> <p>We don't support this behavior; if you believe you need it, and it's intended for your use case then there are other Kubernetes controllers that can do this, although we'd suggest extreme caution.</p>"},{"location":"contributing/policy/#sign-certificates-using-the-kubernetes-ca","title":"Sign certificates using the Kubernetes CA","text":"<p>Kubernetes has a Certificate Signing Requests API, and a <code>kubectl certificates</code> command which allows you to approve certificate signing requests and have them signed by the certificate authority (CA) of the Kubernetes cluster. This CA is generally used for your nodes.</p> <p>This API and CLI have occasionally been misused to sign certificates for use by pods outside of the control plane; we believe this is a mistake.</p> <p>For the security of the Kubernetes cluster it's important to limit access to the Kubernetes certificate authority; such certificates increase the attack surface for the Kubernetes API server since this CA signs certificates for authorization against the API server. If cert-manager used this cert, it could allow any user with permission to create cert-manager resources to elevate privileges by signing certificates which are trusted for API access.</p> <p>See our FAQ for more details on this.</p>"},{"location":"contributing/policy/#integrations-with-third-party-infrastructure-providers","title":"Integrations with third party infrastructure providers","text":"<p>We try to not include in core cert-manager new functionality that involves calling third party APIs that we don't have infrastructure to test (or that the maintainers don't have the skills to work with).</p> <p>Instead we try to build interfaces such as external DNS webhook solver that can be implemented to use cert-manager with a particular third party implementation. We believe that this is a more sustainable approach as that way folks who have knowledge and skills to work with particular infrastructure can own a project that interacts with it and it lets us avoid merging potentially untested code to core cert-manager. An example of a PR that might be rejected would be adding a new external DNS solver kind, see https://github.com/cert-manager/cert-manager/pull/1088</p>"},{"location":"contributing/release-process/","title":"Release Process","text":"<p>This document aims to outline the process that should be followed for cutting a new release of cert-manager. If you would like to know more about current releases and the timeline for future releases, take a look at the Supported Releases page.</p>"},{"location":"contributing/release-process/#prerequisites","title":"Prerequisites","text":"<p>\u26d4\ufe0f Do not proceed with the release process if you do not meet all of the following conditions:</p> <ol> <li>The relevant testgrid dashboard should not be failing for the release you're trying to perform.</li> <li>The release process takes about 40 minutes. You must have time to complete all the steps.</li> <li>You currently need to be at Jetstack to get the required GitHub and GCP    permissions. (we'd like contributors outside Jetstack to be able to get    access; if that's of interest to you, please let us know).</li> <li> <p>You need to have the GitHub <code>admin</code> permission on the cert-manager project.    To check that you have the <code>admin</code> role, run:</p> <pre><code>brew install gh\ngh auth login\ngh api /repos/cert-manager/cert-manager/collaborators/$(gh api /user | jq -r .login)/permission | jq .permission\n</code></pre> <p>If your permission is <code>admin</code>, then you are good to go. To request the <code>admin</code> permission on the cert-manager project, open a PR with a link to here.</p> </li> <li> <p>You need to be added as an \"Editor\" to the GCP project    cert-manager-release.    To check if you do have access, try opening the Cloud Build    page.    To get the \"Editor\" permission on the GCP project, open a PR with your name    added to the maintainers list in    <code>cert_manager_release.tf</code></p> <pre><code>--- a/cert_manager_release.tf\n+++ b/cert_manager_release.tf\n@@ -17,6 +17,7 @@ locals {\n    var.personal_email[\"...\"],\n     var.personal_email[\"...\"],\n     var.personal_email[\"...\"],\n+    var.personal_email[\"mael-valais\"],\n  ])\n }\n</code></pre> <p>You may use the following PR description:</p> <pre><code>Title: Access to the cert-manager-release GCP project\n\nHi. As stated in \"Prerequisites\" on the [release-process][1] page,\nI need access to the [cert-manager-release][2] project on GCP in\norder to perform the release process. Thanks!\n\n[1]: https://cert-manager.io/docs/contributing/release-process/#prerequisites\n[2]: https://console.cloud.google.com/?project=cert-manager-release\n</code></pre> </li> </ol> <p>This guide applies for versions of cert-manager released using <code>make</code>, which should be every version from cert-manager 1.8 and later.</p> <p>If you need to release a version of cert-manager 1.7 or earlier see older releases.</p> <p>First, ensure that you have all the tools required to perform a cert-manager release:</p> <ol> <li>Install the <code>release-notes</code> CLI:</li> </ol> <pre><code>go install k8s.io/release/cmd/release-notes@v0.13.0\n</code></pre> <ol> <li>Install our <code>cmrel</code> CLI:</li> </ol> <pre><code>go install github.com/cert-manager/release/cmd/cmrel@latest\n</code></pre> <ol> <li>Clone the <code>cert-manager/release</code> repo:</li> </ol> <pre><code># Don't clone it from inside the cert-manager repo folder.\ngit clone https://github.com/cert-manager/release\ncd release\n</code></pre> <ol> <li>Install the <code>gcloud</code> CLI.</li> <li>Login    to <code>gcloud</code>:</li> </ol> <pre><code>gcloud auth application-default login\n</code></pre> <ol> <li>Make sure <code>gcloud</code> points to the cert-manager-release project:</li> </ol> <pre><code>gcloud config set project cert-manager-release\nexport CLOUDSDK_CORE_PROJECT=cert-manager-release # this is used by cmrel\n</code></pre> <ol> <li>Get a GitHub access token here    with no scope ticked. It is used only by the <code>release-notes</code> CLI to    avoid API rate limiting since it will go through all the PRs one by one.</li> </ol>"},{"location":"contributing/release-process/#minor-releases","title":"Minor releases","text":"<p>A minor release is a backwards-compatible 'feature' release. It can contain new features and bug fixes.</p>"},{"location":"contributing/release-process/#release-schedule","title":"Release schedule","text":"<p>We aim to cut a new minor release once per month. The rough goals for each release are outlined as part of a GitHub milestone. We cut a release even if some of these goals are missed, in order to keep up release velocity.</p>"},{"location":"contributing/release-process/#process-for-releasing-a-version","title":"Process for releasing a version","text":"\ud83d\udd30 Please click on the **Edit this page** button on the top-right corner of this page if a step is missing or if it is outdated.  <ol> <li> <p>Make sure to note which type of release you are doing. That will be helpful    in the next steps.</p> Type of release Example of git tag initial alpha release <code>v1.3.0-alpha.0</code> subsequent alpha release <code>v1.3.0-alpha.1</code> initial beta release <code>v1.3.0-beta.0</code> subsequent beta release <code>v1.3.0-beta.1</code> final release <code>v1.3.0</code> (optional) patch pre-release1 <code>v1.3.1-beta.0</code> patch release (or \"point release\") <code>v1.3.1</code> </li> <li> <p>(final release only) Make sure that a PR with the new upgrade    document is ready to be merged on    cert-manager/website. See for    example, see    upgrading-1.0-1.1.</p> </li> <li> <p>Update the release branch:</p> </li> <li> <p>(initial alpha, subsequent alpha and initial beta) The release branch       should already exist (it was created at the end of the last final       release). Update the release branch with the latest commits from the       master branch, as follows:</p> <pre><code># Must be run from the cert-manager repo folder.\ngit fetch --all\ngit branch --force release-1.0 origin/release-1.0\ngit checkout release-1.0\ngit merge --ff-only origin/master # don't run for a point release!\n</code></pre> <ul> <li>(subsequent beta, patch release and final release): do nothing since   things have been merged using <code>/cherry-pick release-1.0</code>.</li> </ul> <p>Note about the code freeze:</p> <p>The first beta starts a new \"code freeze\" period that lasts until the    final release. Just before the code freeze, we fast-forward everything    from master into the release branch.</p> <p>During the code freeze, we continue merging PRs into master as usual.</p> <p>We don't fast-forward master into the release branch for the second (and    subsequent) beta, and only <code>/cherry-pick release-1.0</code> the fixes that should be part    of the subsequent beta.</p> <p>We don't fast-forward for patch releases and final releases; instead, we    prepare these releases using the <code>/cherry-pick release-1.0</code> command.</p> </li> <li> <p>Push the new or updated release branch and create the tag:</p> <ol> <li> <p>Check that the <code>origin</code> remote is correct. To do that, run the following     command and make sure it returns     the upstream <code>https://github.com/cert-manager/cert-manager.git</code>:</p> <pre><code># Must be run from the cert-manager repo folder.\ngit remote -v | grep origin\n</code></pre> </li> <li> <p>Push the release branch:</p> <pre><code># Must be run from the cert-manager repo folder.\ngit push --set-upstream origin release-1.0\n</code></pre> <p>GitHub permissions: <code>git push</code> will only work if you have the        <code>admin</code> GitHub permission on the cert-manager repo to create or push to        the branch, see prerequisites. If you do not have this        permission, you will have to open a PR to merge master into the release        branch), and wait for the PR checks to become green.</p> </li> <li> <p>Create the tag for the new release locally and push it upstream:</p> </li> </ol> <pre><code>git tag -m\"v1.8.0-beta.0\" v1.8.0-beta.0\n# be sure to push the named tag explicitly; you don't want to push any other local tags!\ngit push origin v1.8.0-beta.0\n</code></pre> </li> <li> <p>Generate and edit the release notes:</p> <ol> <li> <p>Use the following two tables to understand how to fill in the four    environment variables needed for the next step. These four environment    variables are documented on the    README    for the Kubernetes <code>release-notes</code> tool.</p> Variable Description <code>START_REV</code>* The git tag of the \"previous\"* release <code>END_REV</code> Name of your release branch (inclusive) <code>BRANCH</code> Name of your release branch <code>RELEASE_VERSION</code> The git tag <p>Examples for each release type (e.g., initial alpha release):</p> Variable Example 1 Example 2 Example 2 Example 3 Example 4 initial alpha subsequent alpha beta release final release patch release <code>v1.3.0-alpha.0</code> <code>v1.3.0-alpha.1</code> <code>v1.3.0-beta.0</code> <code>v1.3.0</code> <code>v1.3.1</code> <code>START_TAG</code>* <code>v1.2.0</code> <code>v1.3.0-alpha.0</code> <code>v1.3.0-alpha.1</code> <code>v1.2.0</code>** <code>v1.3.0</code> <code>END_REV</code> <code>release-1.3</code> <code>release-1.3</code> <code>release-1.3</code> <code>release-1.3</code> <code>release-1.3</code> <code>BRANCH</code> <code>release-1.3</code> <code>release-1.3</code> <code>release-1.3</code> <code>release-1.3</code> <code>release-1.3</code> <code>RELEASE_VERSION</code> <code>v1.3.0-alpha.0</code> <code>v1.3.0-alpha.1</code> <code>v1.3.0-beta.0</code> <code>v1.3.0</code> <code>v1.3.1</code> <p>*The git tag of the \"previous\" release (<code>START_TAG</code>) depends on which type of release you count on doing. Look at the above examples to understand a bit more what those are.</p> <p>**Do not use a patch here (e.g., no <code>v1.2.3</code>). It must be <code>v1.2.0</code>: you must use the latest tag that belongs to the release branch you are releasing on; in the above example, the release branch is <code>release-1.3</code>, and the latest tag on that branch is <code>v1.2.0</code>.</p> <p>After finding out the value for each of the 4 environment variables, set the variables in your shell (for example, following the example 1):</p> <pre><code>export RELEASE_VERSION=\"v1.3.0-alpha.0\"\nexport BRANCH=\"release-1.3\"\nexport START_TAG=\"v1.2.0\"\nexport END_REV=\"release-1.3\"\n</code></pre> </li> <li> <p>Generate <code>release-notes.md</code> at the root of your cert-manager repo folder    with the following command:</p> <pre><code># Must be run from the cert-manager folder.\nexport GITHUB_TOKEN=*your-token*\ngit fetch origin $BRANCH:$BRANCH\nexport START_SHA=\"$(git rev-list --reverse --ancestry-path $(git merge-base $START_TAG $BRANCH)..$BRANCH | head -1)\"\nrelease-notes --debug --repo-path cert-manager \\\n--org cert-manager --repo cert-manager \\\n--required-author \"jetstack-bot\" \\\n--output release-notes.md\n</code></pre> <p><p> The GitHub token does not need any scope. The token is required only to avoid rate-limits imposed on anonymous API users. </p></p> </li> <li> <p>Sanity check the notes:</p> <ul> <li>Make sure the notes contain details of all the features and bug   fixes that you expect to be in the release.</li> <li>Add additional blurb, notable items and characterize change log.</li> </ul> <p>You can see the commits that will go into this release by using the GitHub compare. For example, while releasing <code>v1.0.0</code>, you want to compare it with the latest pre-released version <code>v1.0.0-beta.1</code>:</p> <pre><code>https://github.com/cert-manager/cert-manager/compare/v1.0.0-beta.1...master\n</code></pre> </li> <li> <p>(final release only) Check the release notes include all changes    since the last final release.</p> </li> </ol> </li> <li> <p>Run <code>cmrel makestage</code>:</p> <ol> <li> <p>In this example we stage a release using the <code>v1.8.0-beta.0</code> git ref:</p> <pre><code># Must be run from the \"cert-manager/release\" repo folder.\ncmrel makestage --ref=$RELEASE_VERSION\n</code></pre> <p>This step takes ~5 minutes. It will build all container images and create all the manifest files, sign Helm charts and upload everything to a storage bucket on Google Cloud. These artifacts will then be published and released in the next steps.</p> </li> <li> <p>While the build is running, send a first Slack message to    <code>#cert-manager-dev</code>:</p> <p><p> Releasing <code>1.2.0-alpha.2</code> \ud83e\uddf5 </p></p> <p><p> \ud83d\udd30 Please have a quick look at the build log as it might contain some unredacted data that we forgot to redact. We try to make sure the sensitive data is properly redacted but sometimes we forget to update this. </p></p> </li> <li> <p>Send a second Slack message in reply to this first message with the    Cloud Build job link that <code>cmrel</code> displayed in \"View logs at\". For    example, the message would look like:</p> <p><p> Follow the <code>cmrel stage</code> build: https://console.cloud.google.com/cloud-build/builds/7641734d-fc3c-42e7-9e4c-85bfc4d1d547?project=1021342095237 </p></p> </li> </ol> </li> <li> <p>Run <code>cmrel publish</code>:</p> <ol> <li> <p>Do a <code>cmrel publish</code> dry-run to ensure that all the staged resources are    valid. Run the following command:</p> <pre><code># Must be run from the \"cert-manager/release\" repo folder.\ncmrel publish --release-name \"$RELEASE_VERSION\"\n</code></pre> <p>You can view the progress by clicking the Google Cloud Build URL in the output of this command.</p> </li> <li> <p>While the build is running, send a third Slack message in reply to the first message:</p> <p><p> Follow the <code>cmrel publish</code> dry-run build: https://console.cloud.google.com/cloud-build/builds16f6f875-0a23-4fff-b24d-3de0af207463?project=1021342095237 </p></p> </li> <li> <p>Now publish the release artifacts for real. The following command will publish the artifacts to GitHub, <code>Quay.io</code> and to our    helm chart repository:</p> <pre><code># Must be run from the \"cert-manager/release\" repo folder.\ncmrel publish --nomock --release-name \"$RELEASE_VERSION\"\n</code></pre> </li> </ol> <p>      \u23f0 Upon completion there will be:      <ol> <li> A draft release of cert-manager on GitHub </li> <li> A pull request containing the new Helm chart </li> </ol> </p> <ol> <li> <p>While the build is running, send a fourth Slack message in reply to the first message:</p> <p><p> Follow the <code>cmrel publish</code> build: https://console.cloud.google.com/cloud-build/builds/b6fef12b-2e81-4486-9f1f-d00592351789?project=1021342095237 </p></p> </li> </ol> </li> <li> <p>Publish the GitHub release:</p> <ol> <li> <p>Visit the draft GitHub release and paste in the release notes that you    generated earlier. You will need to manually edit the content to match    the style of earlier releases. In particular, remember to remove    package-related changes.</p> </li> <li> <p>(initial alpha, subsequent alpha and beta only) Tick the box \"This is    a pre-release\".</p> </li> <li> <p>Click \"Publish\" to make the GitHub release live. This will create a Git    tag automatically.</p> </li> </ol> </li> <li> <p>Merge the pull request containing the Helm chart:</p> </li> </ol> <p>The Helm charts for cert-manager are served using Cloudflare pages    and the Helm chart files and metadata are stored in the Jetstack charts repository.    The <code>cmrel publish --nomock</code> step (above) will have created a PR in this repository which you now have to review and merge, as follows:</p> <pre><code>1. [Visit the pull request](https://github.com/jetstack/jetstack-charts/pulls)\n2. Review the changes\n3. Fix any failing checks\n4. Merge the PR\n5. Check that the [cert-manager Helm chart is visible on ArtifactHUB](https://artifacthub.io/packages/helm/cert-manager/cert-manager).\n</code></pre> <ol> <li> <p>(final release only) Add the new final release to the     supported-releases page.</p> </li> <li> <p>Open a PR for a Homebrew formula update for <code>cmctl</code>.</p> <p>Assuming you have <code>brew</code> installed, you can use the <code>brew bump-formula-pr</code> command to do this. You'll need the new tag name and the commit hash of that tag. See <code>brew bump-formula-pr --help</code> for up to date details, but the command will be of the form:</p> <pre><code>brew bump-formula-pr --dry-run --tag v0.10.0 --revision da3265115bfd8be5780801cc6105fa857ef71965 cmctl\n</code></pre> <p>Replacing the tag and revision with the new ones.</p> <p>This will take time for the Homebrew team to review. Once the pull reqeust against https://github.com/homebrew/homebrew-core has been opened, continue with further release steps.</p> </li> <li> <p>Post a Slack message as an answer to the first message. Toggle the check    box \"Also send to <code>#cert-manager-dev</code>\" so that the message is well    visible. Also cross-post the message on <code>#cert-manager</code>.</p> <p><p> https://github.com/cert-manager/cert-manager/releases/tag/v1.0.0 \ud83c\udf89 </p></p> </li> <li> <p>(final release only) Show the release to the world:</p> <ol> <li> <p>Send an email to    <code>cert-manager-dev@googlegroups.com</code>    with the <code>release</code> label    (examples).</p> </li> <li> <p>Send a tweet    (example)    and make sure @JetstackHQ retweets it.</p> </li> </ol> </li> <li> <p>Proceed to the post-release steps:</p> <ol> <li> <p>(initial alpha only) Create a PR on    cert-manager/release,    add the new release to our list of periodic ProwJobs. Use this PR as an example.</p> </li> <li> <p>(initial alpha only) Run <code>cmrel generate-prow --branch='*' -o file</code> with the new version from the previous step and    open a PR to cert-manager/testing adding the generated prow configs.    Use this PR as an example.</p> </li> <li> <p>(initial alpha only) If needed, open a PR to    <code>cert-manager/website</code> in    order to:</p> </li> <li> <p>Update the section \"How we determine supported Kubernetes versions\" on      the supported-releases page.</p> </li> <li> <p>(final release only) Create a PR on    cert-manager/release,    removing the now unsupported release version (2 versions back) in this file:</p> </li> </ol> <pre><code>prowspecs/specs.go\n</code></pre> <p>This will remove the periodic ProwJob for this version as it is no longer needed.</p> <ol> <li> <p>(final release only) Run <code>cmrel generate-prow --branch='*' -o file</code> with the new version from the previous step and    open a PR to cert-manager/testing adding the generated prow configs.</p> </li> <li> <p>(final release only) Open a PR to    <code>cert-manager/website</code> in    order to:</p> </li> <li> <p>Update the section \"Supported releases\" in the      supported-releases page.</p> </li> <li>Update the section \"Supported releases\" in the      supported-releases page.</li> <li> <p>Update the section \"How we determine supported Kubernetes versions\" on      the supported-releases page.      In the table, set \"n/a\" for the line where \"next periodic\" is since      these tests will be disabled until we do our first alpha.</p> </li> <li> <p>(final release only) Open a PR to    <code>jetstack/testing</code> and change Prow's    config. To do this, take inspiration from Maartje's PR    example.</p> </li> <li> <p>(final release only) Push a new release branch to    <code>cert-manager/cert-manager</code>. If the    final release is <code>v1.0.0</code>, then push the new branch <code>release-1.1</code>:</p> <pre><code># Must be run from the cert-manager repo folder.\ngit checkout -b release-1.1 v1.0.0\ngit push origin release-1.1\n</code></pre> </li> <li> <p>(final release only) Open a PR to    <code>cert-manager/website</code> with    updates to the website configuration. To do this, take inspiration from    Maartje's PR    example.</p> </li> <li> <p>Ensure that any installation commands in    <code>cert-manager/website</code> install    the latest version. This should be done after every release, including    patch releases as we want to encourage users to always install the latest    patch.</p> </li> <li> <p>Future: check that our Algolia search indexing is up-to-date for the website - i.e. that the new version of the docs    is being indexed correctly. This is listed here as it's a step we should be checking after a release of a major version    but at the time of writing we don't know how to do it!</p> </li> <li> <p>Open a PR against the Krew index such as this one,     bumping the versions of our kubectl plugins.</p> </li> <li> <p>Create a new OLM package and publish to OperatorHub</p> <p>cert-manager can be installed using Operator Lifecycle Manager (OLM) so we need to create OLM packages for each cert-manager version and publish them to both operatorhub.io and the equivalent package index for RedHat OpenShift.</p> <p>Follow the cert-manager OLM release process and, once published, verify that the cert-manager OLM installation instructions still work.</p> </li> </ol> </li> </ol>"},{"location":"contributing/release-process/#older-releases","title":"Older Releases","text":"<p>The above guide only applies for versions of cert-manager from v1.8 onwards.</p> <p>Older versions were built using Bazel and this difference in build process is reflected in the release process.</p>"},{"location":"contributing/release-process/#cert-manager-16-and-17","title":"cert-manager 1.6 and 1.7","text":"<p>Follow this older version of the release process on GitHub, rather than the guide on this website.</p> <p>The most notable difference is you'll call <code>cmrel stage</code> rather than <code>cmrel makestage</code>. You should be fine to use the latest version of <code>cmrel</code> to do the release.</p>"},{"location":"contributing/release-process/#cert-manager-15-and-earlier","title":"cert-manager 1.5 and earlier","text":"<p>If you're releasing version 1.5 or earlier you must also be sure to install a different version of <code>cmrel</code>.</p> <p>In the step where you install <code>cmrel</code>, you'll want to run the following instead:</p> <pre><code>go install github.com/cert-manager/release/cmd/cmrel@cert-manager-pre-1.6\n</code></pre> <p>This will ensure that the version of <code>cmrel</code> you're using is compatible with the version of cert-manager you're releasing.</p> <p>In addition, when you check out the <code>cert-manager/release</code> repository you should be sure to check out the <code>cert-manager-pre-1.6</code> tag in that repo:</p> <pre><code>git checkout cert-manager-pre-1.6\n</code></pre> <p>Other than the different <code>cert-manager/release</code> tag and <code>cmrel</code> version, you can follow the same older release documentation as is used for 1.6 and 1.7 - just remember to change the version of <code>cmrel</code> you install!</p> <ol> <li> <p>One or more \"patch pre-releases\" may be created to allow voluntary community testing of a bug fix or security fix before the fix is made generally available. The suffix <code>-beta</code> must be used for patch pre-releases.\u00a0\u21a9</p> </li> </ol>"},{"location":"contributing/security/","title":"Reporting Security Issues","text":"<p>Security is the number one priority for cert-manager. If you think you've found a vulnerability in any cert-manager project, please follow the vulnerability reporting process documented in the main cert-manager repository.</p> <p>The reporting process is the same for all repositories under the cert-manager organization. The process is documented in one place to ensure a single source of truth and a single list of security contacts.</p>"},{"location":"contributing/sign-off/","title":"DCO Sign Off","text":"<p>All contributors to the project retain copyright to their work, but must only submit work which they have the rights to submit.</p> <p>We require all contributors to acknowledge that they have the rights to the code they're contributing by signing their commits in git using a \"DCO Sign Off\". Note that this is different to \"commit signing\" using something like PGP or <code>gitsign</code>!</p> <p>Any copyright notices in a cert-manager repo should specify the authors as \"The cert-manager Authors\".</p> <p>To sign your work, pass the <code>--signoff</code> option to <code>git commit</code> or <code>git rebase</code>:</p> <pre><code># Sign off a commit as you're making it\ngit commit --signoff -m\"my commit\"\n# Add a signoff to the last commit you made\ngit commit --amend --signoff\n\n# Rebase your branch against master and sign off every commit in your branch\ngit rebase --signoff master\n</code></pre> <p>This will add a line similar to the following at the end of your commit:</p> <pre><code>Signed-off-by: Joe Bloggs &lt;joe@example.com&gt;\n</code></pre> <p>By signing off a commit you're stating that you certify the following:</p> <pre><code>Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n</code></pre> <p>That statement is taken from https://developercertificate.org/.</p>"},{"location":"contributing/signing-keys/","title":"Signing Keys","text":"<p>This page describes the bootstrapping process for a key, including how to do it and why a bootstrapping process is required.</p>"},{"location":"contributing/signing-keys/#what-do-we-serve","title":"What do we Serve?","text":"<p>To facilitate verification of signatures, we serve public key information from the cert-manager website directly. It's important to serve the keys from a different location to where the artifacts are hosted; if the keys were hosted at the same location as the artifacts, an attacker able to change the artifacts would be able to also change the keys!</p> <p>We serve several key types under <code>static/public-keys</code>:</p> <ul> <li><code>cert-manager-pgp-2021-09-20-1020CF3C033D4F35BAE1C19E1226061C665DF13E.asc</code>: ASCII-armored PGP public key, used for verifying signatures on helm charts via <code>helm verify</code> (after being converted to a keyring)</li> <li><code>cert-manager-keyring-2021-09-20-1020CF3C033D4F35BAE1C19E1226061C665DF13E.gpg</code>: Old style GPG keyring, needed by the <code>--keyring</code> parameter to <code>helm verify</code>. See Keyring below.</li> <li><code>cert-manager-pubkey-2021-09-20.pem</code>: The raw, PEM-encoded public key used for signing. Cannot be used with GPG (and therefore helm), but should be used for other verification types.</li> </ul>"},{"location":"contributing/signing-keys/#background-architecture","title":"Background / Architecture","text":"<p>Code signing for cert-manager artifacts is done entirely using cloud KMS keys, to ensure that nobody can get access to the private keys in plain-text; all signing operations using the key are therefore done through cloud APIs and are logged.</p> <p>Currently, all keys are on Google KMS, since the rest of cert-manager's release infrastructure is also in GCP. The key - and the role bindings which allow access to it - are specified in terraform in a closed source Jetstack repo.</p>"},{"location":"contributing/signing-keys/#why-bootstrap","title":"Why Bootstrap?","text":"<p>While the private key is not retrievable for a KMS key, the public key is and must be retrieved so that end-users can verify signatures made by the key. In GCP, retrieving the public key is itself an API call which returns the raw key in a PEM encoded format.</p> <p>That PEM-encoded public key works for some cases (e.g. verifying container signature made using <code>cosign</code>) but it's not sufficient for Helm chart verification, since Helm chart signing (sadly) requires the use of PGP.</p>"},{"location":"contributing/signing-keys/#bootstrapping-a-pgp-identity","title":"Bootstrapping a PGP Identity","text":"<p>It's possible to use a shim to use GCP KMS as a PGP key which enables us to avoid having two separate signing keys, but PGP public identities are slightly more complicated than plain public keys; they also contain a name, creation time, comment and email address to identify the signer. This public \"identity\" must itself be signed by the private key (to prove that the information in the identity is legitimate).</p> <p>This bootstrapping can be done using the cert-manager release tool, <code>cmrel</code>:</p> <pre><code># note that the key name might not exactly match this in the future\n$ cmrel bootstrap-pgp --key \"projects/cert-manager-release/locations/europe-west1/keyRings/cert-manager-release/cryptoKeys/cert-manager-release-signing-key/cryptoKeyVersions/1\"\n</code></pre> <p>This will trigger a cloud build job which will output both the armored PGP identity and the raw PEM public key; the values can be copied from the job output.</p>"},{"location":"contributing/signing-keys/#gpg-keyring","title":"GPG Keyring","text":"<p>As an additional UX feature, we can also generate a GPG keyring from the PGP identity, since the keyring is what's required by the Helm CLI to actually validate a chart:</p> <pre><code># Example of verifying a chart.\n$ helm verify --keyring cert_manager_keyring_1020CF3C033D4F35BAE1C19E1226061C665DF13E.gpg /path/to/chart.tgz\nSigned by: cert-manager Maintainers &lt;cert-manager-maintainers@googlegroups.com&gt;\nUsing Key With Fingerprint: 1020....\nChart Hash Verified: sha256:bb86...\n</code></pre> <p>The keyring can be generated using this script.</p>"},{"location":"contributing/third-party-code-donation/","title":"Donating Third Party Code to cert-manager","text":"<p>The cert-manager project welcomes external contributions and has benefited greatly from thousands of commits from hundreds of different contributors. Most code is usually committed through pull requests to a specific repo, whether that be the main cert-manager repository or one of the associated repositories such as the website.</p> <p>Some contributions aren't as well suited to that kind of workflow, however. That would most likely be because their functionality doesn't belong in any particular existing cert-manager repo, while still relating to the cert-manager project.</p> <p>This document aims to address the donation of code to the cert-manager project, and to provide a framework for sustainable contributions which can be tested and relied upon going forwards by both cert-manager maintainers and users.</p> <p>The requirements in this document are based in part on what's done for CoreDNS, Envoy, Kubernetes and containerd.</p>"},{"location":"contributing/third-party-code-donation/#requirements","title":"Requirements","text":"<ol> <li>Code must be licensed appropriately, including any dependencies      We'd prefer Apache 2.0 since that's     what cert-manager uses, but the     license must be OSI approved.</li> <li>Code must conform to CNCF standards and due diligence requirements      You don't need to go over this with a fine-toothed comb; the intent here is that no code donation     should have a negative effect on cert-manager's progress as a CNCF project. See the     CNCF due diligence template</li> <li>Must be sponsored by an existing maintainer      An existing regular contributor to cert-manager must sponsor the adoption of any third party code     donation. This ensures that there's a single point of contact for the party donating the code.</li> <li>Must pass cert-manager conformance tests      This might not apply to all donations, but where conformance tests exist any donated code must     pass them. E.g. for external issuers</li> <li>Must provide a point-of-contact for questions about the project for at least 3 months after acceptance     We don't anticipate that we'd need to reach out often after the donation has been accepted,     but it's important to have someone we can reach out to if we need to.</li> <li>The donation must be a defined extension type or justify why it doesn't belong in the main repositories      E.g. an ACME DNS solver, a custom issuer or an ACME HTTP solver</li> <li>Code must have a similar level of quality to cert-manager itself     This could be enforced by, for example, running static analysis tools on the code base similar to     those used by cert-manager.</li> <li>Code must have a non-trivial test suite, including both unit tests and end-to-end tests     These tests must be able to be run in their entirety after a PR is raised against the repo. We don't     need 100% code coverage, but there should be tests for important functionality.</li> <li>The project must adopt the cert-manager security policy and link back to the policy, as in e.g.     the istio-csr <code>SECURITY.md</code></li> <li>Must have DCO sign-offs or coverage for all commits     To ensure that all code can legally be donated, all commits should have DCO sign-off or else have     a positive affirmation made by each contributor prior to donation. See below.</li> </ol>"},{"location":"contributing/third-party-code-donation/#preferences","title":"Preferences","text":"<p>These items are not absolutely necessary but they definitely help if a code donation is to be accepted.</p> <ul> <li>Should be written in Go    We don't need code to be written in Go, but we'd much prefer that it is. Since cert-manager itself   is written in Go, code donations in Go allow us to use existing experience and tooling on Go code.</li> </ul>"},{"location":"contributing/third-party-code-donation/#dco-signoff","title":"DCO Signoff","text":"<p>As a method of ensuring that the donator has permission to donate the code, we require DCO sign-offs - or something equivalent - to be in place at the time of the donation.</p> <p>The cert-manager DCO signoff process would be appropriate. Existing contributors could bootstrap this process by creating an empty signed-off with a note that previous code should be considered signed off as of that commit:</p> <pre><code>git commit --allow-empty --signoff --message=\"bootstrapping DCO signoff for past commits\"\n</code></pre>"},{"location":"contributing/third-party-code-donation/#after-donation","title":"After Donation","text":"<p>Code files in the donated repository must be updated to include the relevant  cert-manager boilerplate</p>"},{"location":"contributing/google-season-of-docs/","title":"Google Season of Docs","text":"<p>The cert-manager organization has registered for the Google Season of Docs!</p> <p>Check out our 2022 proposals!</p>"},{"location":"contributing/google-season-of-docs/2022/","title":"Google Season of Docs 2022","text":"<p>We registered our interest to participate in Google Season of Docs 2022!</p> <p>There's one project proposal:</p> <p>Improve the Navigation and Structure of the cert-manager Website</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/","title":"Improve the Navigation and Structure of the cert-manager Website","text":""},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#project-updates","title":"Project Updates","text":""},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#7-sept-2022-the-webhook-debugging-guide","title":"7 Sept 2022: The Webhook Debugging Guide","text":"<p>At the start of the Google Season of Docs program, we built friction logs for common user tasks, such as debugging the error \"connect: connection refused\". The friction log for this task, visible in the GSoD work document, was to serve as a reference point to see whether the improvements we aimed to bring would have an impact or not.</p> <p>The friction log showed a consistent pattern: the user searches the error on Google, is confused by GitHub issues that don't have any solutions, then clicks the second link in the Google results, without much luck. We realized that one improvement we could make was to add a link to the FAQ page \"Troubleshooting Problems with the Webhook\". We found two problems with this FAQ page:</p> <ol> <li>It could not be found by anyone because the error messages were not listed in    the page, meaning that Google would not show the page in the search results.</li> <li>Many error messages were not listed in the page.</li> </ol> <p>We set ourselves to rewrite this page with the goal of making it error-focused, meaning that the user would just be able to look for their particular error and start debugging it. We called it \"The Definitive Debugging Guide for the cert-manager Webhook Pod\", and it can be found here.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#12-aug-2022-improved-the-layout-of-the-navigation-menu","title":"12 Aug 2022: Improved the layout of the navigation menu","text":"<p>On displays <code>&gt;=1280px</code> the left-hand menu was too narrow to display the nested menu items clearly, On smaller displays the responsive CSS actually made the menu larger. So we've widened it by 1 column on displays <code>&gt;=1280px</code>  and reduced the width of the content by 1 column to compensate. This makes the menu much easier to read on laptop and desktop computer screens.</p> <p>We fixed an inconsistency in the vertical spacing between menu items with sub-menus and those without.</p> <p>And finally, we moved the version selector to the bottom of the side-bar to avoid distracting the reader.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#3-august-2022-the-cert-managerio-documentation-survey-is-now-closed","title":"3 August 2022: The cert-manager.io Documentation Survey is now closed","text":"<p>Thank you to everyone who participated in our documentation survey. We will use the results to prioritize sections of the website for restructuring and rewriting. Before the conclusion of this Season-of-Docs we will select a random winner from among the responses and contact you about your prize.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#18-july-2022-the-cert-managerio-documentation-survey","title":"18 July 2022: The cert-manager.io Documentation Survey","text":"<p>We have created a short survey, to help us identify what are the top-priorities for the cert-manager.io documentation.</p> <ol> <li>We want identify the most useful documentation, so that we don't go and change things that are already working well.</li> <li>We want to know which documentation is not useful, so that we can make improvements.</li> <li>We'd like to hear from new and experienced users about how and how often you use the documentation.</li> <li>And we'd like to know where else you find good information about cert-manager, outside of the cert-manager.io website, so that we can try and incorporate some of those sources.</li> </ol> <p>We've added a link to the survey to the banner at the top of this site and we will also be sharing the link in our Slack channels and mailing lists.</p> <p>Please take 10 minutes to fill in the survey.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#15-july-2022-new-getting-started-pages","title":"15 July 2022: New \"Getting Started\" pages","text":"<p>We have been auditing the existing documentation to identify some key tasks that our users and potential new users need to carry out. We have created \"friction logs\" for some of these tasks. What this means is that we imagine ourselves in the place of the user and ask, for example,</p> <p>How can I get a Let's Encrypt certificate for my server in Kubernetes?</p> <p>So we searched Google and DuckDuckGo for \"Let's Encrypt Kubernetes\" and to our surprise, cert-manager.io does not feature among the top search results.</p> <p>Among the results are some excellent third-party tutorials and videos about using cert-manager to create Let's Encrypt certificates, and we are grateful to the authors for taking the time to write such detailed content. But inevitably, some of these refer to much older versions of cert-manager and Kubernetes. So we have decided to write some official guides, for the cert-manager.io website which demonstrate how to quickly install cert-manager and configure it for Let's Encrypt. We hope that in time these will be indexed by the search engines and that they will reach the top of the search results for \"Let's Encrypt Kubernetes\". The advantages will be that users and potential users will find up-to-date information, and the cert-manager.io maintainers will receive fewer support requests from new users who are attempting this task.</p> <p>Go and read the new Getting Started Guide for GKE Users and tell us what you think.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#5-may-2022-announcing-mehak-saeed-as-technical-writer","title":"5 May 2022: Announcing Mehak Saeed as Technical Writer","text":"<p>We are delighted to announce that Mehak Saeed will be the technical writer working on this project. We were extremely impressed with Mehak's presentation during her interview and impressed with her detailed preparations and planning. We look forward to working with her.</p> <p>Thank you to all the other technical writers who applied for this project.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#14-april-2022-project-accepted","title":"14 April 2022: Project Accepted","text":"<p>This project was accepted on 14 April 2022.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#24-march-2022-project-registered","title":"24 March 2022: Project Registered","text":"<p>We have registered our interest to  participate in Google Season of Docs 2022, and have submitted a single project proposal detailed in the remaining of this page.</p> <p>You have until 27 April 2022 18:00 UTC to apply for the technical writer role.</p> <p>We will be sharing the name of the selected candidate on Wed 4 May 2022 at 15:00 London Time (14:00 UTC) on Slack in the channel <code>#cert-manager-dev</code>.</p> <p>To apply as a technical writer, please let us know by one of the two ways below:</p> <ul> <li>e-mail us at <code>cert-manager-maintainers@googlegroups.com</code> with the prefix   <code>GSoD2022:</code> in the e-mail subject.</li> <li>or open an issue on   cert-manager/website with the   prefix <code>GSoD2022:</code> in the issue title.</li> </ul> <p>You can join our open standup (every day at 10:30 UK time), and join the Kubernetes Slack channel <code>#cert-manager-dev</code> to know more about this project proposal.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#about-cert-manager","title":"About cert-manager","text":"<p>cert-manager (current version 1.8.0, first release in October 2017) is an Apache-2.0 licensed Kubernetes add-on to automate the management and issuance of TLS certificates.</p> <p>Our typical contributors are Go developers from around the world with experience of the Kubernetes ecosystem with experience contributing to core Kubernetes components and Kubernetes operators.</p> <p>Our users are often developers and system administrators who are trying to automate the rotation of TLS certificates for applications running in their Kubernetes clusters.</p> <p>Our largest users have cert-manager installed on multiple Kubernetes clusters and managing many thousands of TLS certificates.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#project-overview","title":"Project Overview","text":"<p>Right now the content is not designed with our target audiences in mind. For example a new user will not easily find a guide explaining how to install cert-manager on AWS and configure it for Let\u2019s Encrypt. Nor will a Cluster Administrator easily find information about how to optimize cert-manager for a large cluster with many Certificates. The information exists but is spread across multiple pages and is often not at the obvious page.</p> <p>As a visual example, a user looking for a guide on how the Certificate resource can be used may feel helpless when realizing that the \"Certificate\" page exists twice: once under the \"Usage\" section, and once under the \"Concepts\" section.</p> <p></p> <p>(NB: This screenshot is from our old site design but the text and layout are broadly the same)</p> <p>We would like a technical writer:</p> <ol> <li>to help us identify our target audiences, and</li> <li>to identify the key tasks of each of these audiences, and</li> <li>re-structure the cert-manager.io website with this in mind.</li> </ol> <p>For example, we have discussed the following audiences and tasks: Beginner, Cluster Administrator, User, Integrator, New Contributor and each of these people will be interested in a different set of tasks. We would like them to quickly and easily find the information they need.</p> <p>By making it easier for each group to find the information they need we aim to reduce the number of support queries.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#scope","title":"Scope","text":"<p>The scope of this project is as follows:</p> <ol> <li>Identify and describe three target audiences.</li> <li>Identify three key top tasks for each of these audiences.</li> <li>Audit the existing documentation and create a friction log of the current documentation.</li> <li>Using the friction log as a baseline, re-organize the documentation to minimize friction for three top tasks.</li> <li>Incorporate feedback from documentation testers (volunteers in the project) and the wider cert-manager community.</li> <li>Work with the cert-manager team to publish the documentation on cert-manager.io.</li> <li>Create documentation for website contributors explaining how we structure our content around audiences and tasks.</li> </ol>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#measuring-success","title":"Measuring success","text":"<p>After the technical writer has helped us identify the 3 key tasks for each audience we will measure a baseline number of clicks required to achieve the task and we will aim to minimize the number of clicks for each task.</p>"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#timeline","title":"Timeline","text":"Dates Action Items May Orientation May / June Identify audiences and tasks May / June Audit and friction log June Restructuring tasks June / July Incorporating feedback June / July Publish to cert-manager.io July Finish writing guidance for website contributors July Project Completion"},{"location":"contributing/google-season-of-docs/2022/improve-navigation-and-structure/#budget","title":"Budget","text":"Budget item Amount  ($) Running Total ($) Notes Technical writer audit and restructuring of the cert-manager.io documentation 12,000 12,000 Volunteer stipends 1,500 13,500 3 volunteer stipends x 500 each TOTAL 13,500 <p>Regarding the amount of $12,000, we assume that it will be enough to fund one experienced technical writer part-time (for example, they could work half day from Tuesday to Friday, for a total of 24 days, for 3 months at a daily rate of $500).</p> <p>We will give the \"volunteer stipend\" to contributors who can show they have one PR within the project time frame (from 1st May to 30th July) in which a re-write of one page or a set of pages. Before starting the rewriting, the volunteer will suggest which page they wish to work on either on Slack (Kubernetes Slack, channel #cert-manager-dev), or in an issue on GitHub, and make sure by asking the team whether it makes sense to rework this page. As long as at least one positive reaction, the volunteer can start working. For the stipend to be validated, the PR needs to be reviewed and merged.</p>"},{"location":"faq/","title":"\u5e38\u89c1\u95ee\u9898 (FAQ)","text":"<p>\u5728\u672c\u9875\u4e0a\uff0c\u60a8\u5c06\u627e\u5230\u6709\u5173 cert-manager \u7684\u4e00\u4e9b\u5e38\u89c1\u95ee\u9898\u7684\u7b54\u6848\u3002</p>"},{"location":"faq/#_1","title":"\u672f\u8bed","text":"<code>publicly trusted</code> \u548c <code>self-signed</code>\u662f\u4ec0\u4e48\u610f\u601d? <p>\u8fd9\u4e9b\u672f\u8bed\u7684\u5b9a\u4e49\u89c1TLS\u672f\u8bed\u9875.</p> \u201c\u6839\u8bc1\u4e66\u201d\u3001\u201c\u4e2d\u95f4\u8bc1\u4e66\u201d\u548c\u201c\u53f6\u8bc1\u4e66\u201d\u662f\u4ec0\u4e48\u610f\u601d? <p>These terms are defined in the TLS Terminology page.</p>"},{"location":"faq/#_2","title":"\u8bc1\u4e66","text":"\u6211\u53ef\u4ee5\u968f\u610f\u4ece\u8bc1\u4e66\u7ba1\u7406\u5668\u89e6\u53d1\u7eed\u7b7e\u5417? <p>This is a feature in cert-manager starting in <code>v0.16</code> using the <code>cmctl</code> CLI. More information can be found on the renew command's page</p> \u8bc1\u4e66\u4ec0\u4e48\u65f6\u5019\u91cd\u65b0\u9881\u53d1? <p>\u4e3a\u4e86\u786e\u5b9a\u662f\u5426\u9700\u8981\u91cd\u65b0\u9881\u53d1\u8bc1\u4e66\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u4f1a\u67e5\u770b<code>Certificate</code>\u6e90\u89c4\u8303\u548c\u6700\u65b0\u7684<code>CertificateRequest</code>\u89c4\u8303\uff0c \u4ee5\u53ca<code>Secret</code>\u4e2d\u5305\u542bX.509\u8bc1\u4e66\u7684\u6570\u636e\u3002</p> <p>\u5982\u679c\u51fa\u73b0\u4ee5\u4e0b\u60c5\u51b5\uff0c\u53d1\u884c\u8fc7\u7a0b\u5c06\u59cb\u7ec8\u88ab\u89e6\u53d1:</p> <ul> <li>\u5728<code>Certificate</code>\u89c4\u8303\u4e0a\u547d\u540d\u7684<code>Secret</code>\uff0c\u4e0d\u5b58\u5728\uff0c\u7f3a\u5c11\u79c1\u94a5\u6216\u8bc1\u4e66\u6570\u636e\u6216\u5305\u542b\u635f\u574f\u7684\u6570\u636e</li> <li>\u5b58\u50a8\u5728<code>Secret</code> \u4e2d\u7684\u79c1\u94a5\u4e0e<code>Certificate</code>\u4e0a\u7684\u79c1\u94a5\u89c4\u683c\u4e0d\u5339\u914d</li> <li>\u5df2\u53d1\u51fa\u8bc1\u4e66\u7684\u516c\u5f00\u5bc6\u5319\u4e0e\u50a8\u5b58\u5728<code>Secret</code>\u5185\u7684\u79c1\u94a5\u4e0d\u76f8\u7b26\u3002</li> <li><code>Secret</code>\u4e0a\u7684cert-manager\u9881\u53d1\u8005\u6ce8\u91ca\u4e0e<code>Certificate</code>\u4e0a\u6307\u5b9a\u7684\u9881\u53d1\u8005\u4e0d\u5339\u914d</li> <li>\u9881\u53d1\u8bc1\u4e66\u4e0a\u7684DNS\u540d\u79f0\u3001IP\u5730\u5740\u3001url\u6216\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u4e0e<code>Certificate</code>\u89c4\u8303\u4e0a\u7684\u4e0d\u5339\u914d</li> <li>\u8bc1\u4e66\u9700\u8981\u66f4\u65b0(\u56e0\u4e3a\u5df2\u8fc7\u671f\u6216\u66f4\u65b0\u65f6\u95f4\u5df2\u8fc7)</li> <li>\u8bc1\u4e66\u5df2\u88ab\u6807\u8bb0\u4e3a\u624b\u52a8\u66f4\u65b0\u4f7f\u7528<code>cmctl</code></li> </ul> <p>\u6b64\u5916\uff0c\u5982\u679c\u627e\u5230\u4e86<code>Certificate</code>\u7684\u6700\u65b0<code>CertificateRequest</code>\uff0c\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u4e5f\u4f1a\u91cd\u65b0\u9881\u53d1:</p> <ul> <li>\u5728<code>CertificateRequest</code>\u4e2d\u53d1\u73b0\u7684CSR\u4e0a\u7684\u901a\u7528\u540d\u79f0\u4e0e<code>Certificate</code>\u89c4\u8303\u4e0a\u7684\u4e0d\u5339\u914d</li> <li>\u5728<code>CertificateRequest</code>\u4e2d\u53d1\u73b0\u7684CSR\u7684\u4e3b\u9898\u5b57\u6bb5\u4e0e<code>Certificate</code>\u89c4\u8303\u7684\u4e3b\u9898\u5b57\u6bb5\u4e0d\u5339\u914d</li> <li><code>CertificateRequest</code>\u4e0a\u7684\u6301\u7eed\u65f6\u95f4\u4e0e<code>Certificate</code>\u89c4\u8303\u4e0a\u7684\u6301\u7eed\u65f6\u95f4\u4e0d\u5339\u914d</li> <li><code>Certificate</code>\u89c4\u8303\u4e0a\u7684 <code>isCA</code> \u5b57\u6bb5\u503c\u4e0e<code>CertificateRequest</code>\u4e0d\u5339\u914d</li> <li><code>CertificateRequest</code>\u89c4\u8303\u4e2d\u7684DNS\u540d\u79f0\u3001IP\u5730\u5740\u3001url\u6216\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u4e0e<code>Certificate</code>\u89c4\u8303\u4e2d\u7684\u4e0d\u5339\u914d</li> <li><code>CertificateRequest</code>\u89c4\u8303\u4e0a\u7684\u5173\u952e\u7528\u6cd5\u4e0e<code>Certificate</code>\u89c4\u8303\u4e0a\u7684\u4e0d\u5339\u914d</li> </ul> <p>Note</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u5b57\u6bb5\uff0c\u53ea\u6709\u5f53\u5b58\u5728<code>CertificateRequest</code>\u65f6\u624d\u4f1a\u89e6\u53d1\u66f4\u6539\u540e\u7684\u91cd\u65b0\u53d1\u5e03\uff0c \u8bc1\u4e66\u7ba1\u7406\u5668\u53ef\u4ee5\u4f7f\u7528<code>CertificateRequest</code>\u6765\u786e\u5b9a<code>Certificate</code>\u7684\u89c4\u8303\u81ea\u4e0a\u6b21\u53d1\u5e03\u4ee5\u6765\u662f\u5426\u53d1\u751f\u4e86\u66f4\u6539\u3002 \u8fd9\u662f\u56e0\u4e3a\u67d0\u4e9b\u9881\u53d1\u8005\u53ef\u80fd\u4e0d\u5c0a\u91cd\u8fd9\u4e9b\u5b57\u6bb5\u7684\u8bf7\u6c42\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u4f9d\u8d56\u5df2\u9881\u53d1\u7684X.509\u8bc1\u4e66\u4e2d\u7684\u503c\u3002 \u4e00\u4e2a\u8fd9\u6837\u7684\u5b57\u6bb5\u662f<code>.spec.duration</code>\u2014\u2014\u5982\u679c\u6709\u4e00\u4e2a<code>CertificateRequest</code>\u8fdb\u884c\u6bd4\u8f83\uff0c\u5bf9\u8be5\u5b57\u6bb5\u7684\u66f4\u6539\u53ea\u4f1a\u89e6\u53d1\u91cd\u65b0\u53d1\u5e03\u3002 \u5982\u679c\u60a8\u9700\u8981\u91cd\u65b0\u7b7e\u53d1\uff0c\u4f46\u7531\u4e8e\u6ca1\u6709<code>CertificateRequest</code>(\u5373\u5728\u5907\u4efd\u548c\u6062\u590d\u4e4b\u540e)\u800c\u65e0\u6cd5\u81ea\u52a8\u89e6\u53d1\u91cd\u65b0\u7b7e\u53d1\uff0c \u60a8\u53ef\u4ee5\u4f7f\u7528<code>cmctl renew</code>\u624b\u52a8\u89e6\u53d1\u5b83\u3002</p> \u4e3a\u4ec0\u4e48\u6211\u7684\u6839\u8bc1\u4e66\u4e0d\u5728\u6211\u9881\u53d1\u7684 Secret <code>tls.crt</code>\u4e2d? <p>Occasionally, people work with systems which have made a flawed choice regarding TLS chains. The TLS spec has the following section for the \"Server Certificate\" section of the TLS handshake:</p> <p>This is a sequence (chain) of certificates. The sender's certificate MUST come first in the list. Each following certificate MUST directly certify the one preceding it. Because certificate validation requires that root keys be distributed independently, the self-signed certificate that specifies the root certificate authority MAY be omitted from the chain, under the assumption that the remote end must already possess it in order to validate it in any case.</p> <p>In a standard, secure and correctly configured TLS environment, adding a root certificate to the chain is almost always unnecessary and wasteful.</p> <p>There are two ways that a certificate can be trusted:</p> <ul> <li>explicitly, by including it in a trust store.</li> <li>through a signature, by following the certificate's chain back up to an explicitly trusted certificate.</li> </ul> <p>Crucially, root certificates are by definition self-signed and they cannot be validated through a signature.</p> <p>As such, if we have a client trying to validate the certificate chain sent by the server, the client must already have the root before the connection is started. If the client already has the root, there was no point in it being sent by the server!</p> <p>The same logic with not sending root certificates applies for servers trying to validate client certificates; the same justification is given in the TLS RFC.</p> \u5982\u4f55\u67e5\u770b\u4e0e\u8bc1\u4e66\u5bf9\u8c61\u76f8\u5173\u7684\u6240\u6709\u5386\u53f2\u4e8b\u4ef6? <p>cert-manager publishes all events to the Kubernetes events mechanism, you can get the events for your specific resources using <code>kubectl describe &lt;resource&gt; &lt;name&gt;</code>.</p> <p>Due to the nature of the Kubernetes event mechanism these will be purged after a while. If you're using a dedicated logging system it might be able or is already also storing Kubernetes events.</p> \u5982\u679c\u53d1\u884c\u5931\u8d25\u4f1a\u53d1\u751f\u4ec0\u4e48?\u5b83\u4f1a\u88ab\u91cd\u65b0\u5ba1\u5224\u5417? <p>{/_ This empty link preserves old links to #what-happens-if-a-renewal-doesn't happen?-will-it-be-tried-again-after-some-time?\", which matched the old title of this section _/}</p> <p></p> <p>cert-manager will retry a failed issuance except for a few rare edge cases where manual intervention is needed.</p> <p>If an issuance fails because of a temporary error, it will be retried again with a short exponential backoff (currently 5 seconds to 5 minutes). A temporary error is one that does not result in a failed <code>CertificateRequest</code>.</p> <p>If the issuance fails with an error that resulted in a failed <code>CertificateRequest</code>, it will be retried with a longer binary exponential backoff (1 hour to 32 hours) to avoid overwhelming external services.</p> <p>You can always trigger immediate renewal using the <code>cmctl renew</code> command</p> \u662f\u5426\u652f\u6301 ECC(\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6)? <p>cert-manager supports ECDSA key pairs! You can set your certificate to use ECDSA in the <code>privateKey</code> part of your Certificate resource.</p> <p>For example:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: ecdsa\nspec:\nsecretName: ecdsa-cert\nisCA: false\nprivateKey:\nalgorithm: ECDSA\nsize: 256\ndnsNames:\n- ecdsa.example.com\nissuerRef: [...]\n</code></pre> \u5982\u679c<code>renewBefore</code> \u6216 <code>duration</code>\u6ca1\u6709\u5b9a\u4e49\uff0c\u90a3\u4e48\u9ed8\u8ba4\u503c\u662f\u4ec0\u4e48? <p>Default <code>duration</code> is 90 days. If <code>renewBefore</code> has not been set, <code>Certificate</code> will be renewed \u2154 through its actual duration.</p>"},{"location":"faq/#_3","title":"\u6742\u9879","text":"Kubernetes \u6709\u4e00\u4e2a\u5185\u7f6e\u7684<code>CertificateSigningRequest</code>API\u3002\u4e3a\u4ec0\u4e48\u4e0d\u7528\u5462? <p>Kubernetes has a Certificate Signing Requests API, and a [<code>kubectl certificates</code> command] which allows you to approve certificate signing requests and have them signed by the certificate authority (CA) of the Kubernetes cluster.</p> <p>This API and CLI have occasionally been misused to sign certificates for use by non-control-plane Pods but this is a mistake. For the security of the Kubernetes cluster, it is important to limit access to the Kubernetes certificate authority, and it is important that you do not use that certificate authority to sign certificates which are used outside of the control-plane, because such certificates increase the opportunity for attacks on the Kubernetes API server.</p> <p>In Kubernetes 1.19 the Certificate Signing Requests API has reached V1 and it can be used more generally by following (or automating) the Request Signing Process.</p> <p>cert-manager currently has some limited experimental support for this resource.</p> How to write <code>cert-manager</code> <p>cert-manager should always be written in lowercase. Even when it would normally be capitalized such as in titles or at the start of sentences. A hyphen should always be used between the words, don't replace it with a space and don't remove it.</p>"},{"location":"getting-started/","title":"\u5f00\u59cb\u4f7f\u7528 cert-manager","text":"<p>Quote</p> <p>\u8bc1\u4e66\u7ba1\u7406\u5668\u7684\u5feb\u901f\u5165\u95e8\u6307\u5357</p> <p>\u4e86\u89e3\u5982\u4f55\u5728 \u8c37\u6b4c Kubernetes \u5f15\u64ce \u4e0a\u90e8\u7f72 cert-manager\uff0c\u4ee5\u53ca\u5982\u4f55\u914d\u7f6e\u5b83\u4ee5\u4f7f\u7528 Let's Encrypt \u4e3a\u5165\u53e3\u7b7e\u7f72 SSL \u8bc1\u4e66\u3002</p> <p>\u4e86\u89e3\u5982\u4f55\u90e8\u7f72 cert-manager\uff0c\u4ee5\u53ca\u5982\u4f55\u914d\u7f6e\u5b83\u4e3a NGINX \u5165\u53e3\u63a7\u5236\u5668 \u4f7f\u7528 Let's Encrypt \u7b7e\u7f72 SSL \u8bc1\u4e66\u3002</p>"},{"location":"installation/","title":"\u5b89\u88c5","text":"<p>\u4e86\u89e3\u53ef\u4ee5\u5b89\u88c5 cert-manager \u7684\u5404\u79cd\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u9009\u62e9\u3002</p>"},{"location":"installation/#_2","title":"\u9ed8\u8ba4\u9759\u6001\u5b89\u88c5","text":"<p>\u4e0d\u9700\u8981\u5bf9 cert-manager \u5b89\u88c5\u53c2\u6570\u8fdb\u884c\u4efb\u4f55\u8c03\u6574\u3002</p> <p>\u9ed8\u8ba4\u9759\u6001\u914d\u7f6e\u7684\u5b89\u88c5\u65b9\u5f0f\u5982\u4e0b:</p> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.yaml\n</code></pre> <p>\ud83d\udcd6 \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u4f7f\u7528 kubectl \u5e94\u7528\u7a0b\u5e8f\u548c\u9759\u6001\u6e05\u5355\u5b89\u88c5 cert-manager.</p>"},{"location":"installation/#_3","title":"\u5f00\u59cb","text":"<p>\u60a8\u5f88\u5feb\u5c31\u4f1a\u60f3\u8981\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 cert-manager \u4ee5\u53ca\u5b83\u7684\u7528\u9014\u3002</p> <p>\ud83d\udcd6 kubectl apply: \u5bf9\u4e8e\u65b0\u7528\u6237\uff0c\u6211\u4eec\u5efa\u8bae\u4f7f\u7528 kubectl \u5e94\u7528\u7a0b\u5e8f\u548c\u9759\u6001\u6e05\u5355\u5b89\u88c5 cert-manager.</p> <p>\ud83d\udcd6 helm: \u60a8\u53ef\u4ee5\u4f7f\u7528 helm \u6765\u5b89\u88c5 cert-manager\uff0c\u8fd9\u4e5f\u5141\u8bb8\u60a8\u5728\u5fc5\u8981\u65f6\u81ea\u5b9a\u4e49\u5b89\u88c5\u3002</p> <p>\ud83d\udcd6 OperatorHub: \u5982\u679c\u60a8\u6709\u4e00\u4e2a OpenShift \u96c6\u7fa4\uff0c\u8bf7\u8003\u8651\u901a\u8fc7 OperatorHub \u5b89\u88c5 cert-manager\uff0c\u60a8\u53ef\u4ee5\u4ece OpenShift web \u63a7\u5236\u53f0\u6267\u884c\u6b64\u64cd\u4f5c\u3002</p> <p>\ud83d\udea7 cmctl: \u5c1d\u8bd5experimental <code>cmctl x install</code> \u547d\u4ee4\u6765\u5feb\u901f\u5b89\u88c5 cert-manager\u3002</p>"},{"location":"installation/#_4","title":"\u6301\u7eed\u90e8\u7f72","text":"<p>\u60a8\u77e5\u9053\u5982\u4f55\u914d\u7f6e\u60a8\u7684\u8bc1\u4e66\u7ba1\u7406\u5668\u8bbe\u7f6e\uff0c\u5e76\u5e0c\u671b\u5c06\u5176\u81ea\u52a8\u5316\u3002</p> <p>\ud83d\udcd6 helm: \u60a8\u53ef\u4ee5\u5c06cert-manager Helm \u56fe\u8868\u76f4\u63a5\u7528\u4e8e Flux\u3001ArgoCD \u548c Anthos \u7b49\u7cfb\u7edf\u3002</p> <p>\ud83d\udcd6 helm template: \u60a8\u53ef\u4ee5\u4f7f\u7528<code>helm template</code>\u751f\u6210\u81ea\u5b9a\u4e49\u7684 cert-manager \u5b89\u88c5\u6e05\u5355\u3002 \u53c2\u89c1\u4f7f\u7528 helm \u6a21\u677f\u8f93\u51fa YAML\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\u3002 \u8fd9\u4e2a\u6a21\u677f\u5316\u7684\u8bc1\u4e66\u7ba1\u7406\u5668\u6e05\u5355\u53ef\u4ee5\u901a\u8fc7\u7ba1\u9053\u8fde\u63a5\u5230\u60a8\u9996\u9009\u7684\u90e8\u7f72\u5de5\u5177\u4e2d\u3002</p>"},{"location":"installation/api-compatibility/","title":"API compatibility","text":"<p>cert-manager aims to abide by the same API compatibility policy as upstream Kubernetes APIs as documented in the Kubernetes Deprecation Policy.</p> <p>This is to ensure a smooth upgrade and downgrade experience for users, i.e to make sure that users' cert-manager custom resources keep functioning in the same way after an upgrade or downgrade of cert-manager.</p> <p>In some cases, we may need to require users to take actions before upgrading or may need to diverge from the API compatibility promise but we'll treat this as an absolute last resort. In general the main criteria by which we'd determine whether a change is acceptable would be user value.</p> <p>For example in the event of a truly critical bug, a fix that breaks the API compatibility promise by changing the default behavior of an API field might be acceptable. As of yet, though, there has never been a need for such a change.</p>"},{"location":"installation/api-compatibility/#alpha-beta-api-versions","title":"Alpha / Beta API Versions","text":"<p>As in upstream Kubernetes, We don't commit to preserving alpha or beta API versions indefinitely.</p> <p>In cert-manager v1.7 all alpha and beta API versions prior to <code>v1</code> were removed.</p> <p>NB: The Kubernetes deprecation policy notes that API removal introduces an issue with objects stored at the removed versions. To fix this, we wrote a custom tool that users could run once to migrate their resources.</p>"},{"location":"installation/code-signing/","title":"cert-manager Signature Verification","text":"<p>To help prevent supply chain attacks, some cert-manager release artifacts are cryptographically signed so you can be sure that the version of cert-manager you're about to install is actually built by and provided by the cert-manager maintainers.</p> <p>This signing is vitally important if for any reason you need to use a mirrored version of cert-manager; it allows you to confirm that the mirror hasn't tampered with the code you're about to install.</p> <p>Signing keys required for verification are all available on this website, but the actual key that you need might depend on the artifact you're trying to validate in the future. At the time of writing, all signing is done using the same underlying key.</p>"},{"location":"installation/code-signing/#container-images-cosign","title":"Container Images / Cosign","text":"<p>For all cert-manager versions from <code>v1.8.0</code> and later, cert-manager container images are signed and verifiable using <code>cosign</code>.</p> <p>The simplest way to verify signatures is to download the public key and then pass it to the cosign CLI directly:</p> <pre><code>curl -sSOL https://cert-manager.io/public-keys/cert-manager-pubkey-2021-09-20.pem\nIMAGE_TAG=v1.10.1  # change as needed\ncosign verify --signature-digest-algorithm sha512 --key cert-manager-pubkey-2021-09-20.pem quay.io/jetstack/cert-manager-acmesolver:$IMAGE_TAG\ncosign verify --signature-digest-algorithm sha512 --key cert-manager-pubkey-2021-09-20.pem quay.io/jetstack/cert-manager-cainjector:$IMAGE_TAG\ncosign verify --signature-digest-algorithm sha512 --key cert-manager-pubkey-2021-09-20.pem quay.io/jetstack/cert-manager-ctl:$IMAGE_TAG\ncosign verify --signature-digest-algorithm sha512 --key cert-manager-pubkey-2021-09-20.pem quay.io/jetstack/cert-manager-controller:$IMAGE_TAG\ncosign verify --signature-digest-algorithm sha512 --key cert-manager-pubkey-2021-09-20.pem quay.io/jetstack/cert-manager-webhook:$IMAGE_TAG\n</code></pre> <p>For a more fully-featured signature verification process in Kubernetes, check out <code>connaisseur</code>.</p> <ul> <li>PEM-encoded public key: <code>cert-manager-pubkey-2021-09-20.pem</code></li> </ul>"},{"location":"installation/code-signing/#helm-charts","title":"Helm Charts","text":"Helm requires the use of PGP for verification; the key format is different.  Trying to use \"plain\" PEM encoded public keys during verification will fail.  <p>For all cert-manager versions from <code>v1.6.0</code> and later, Helm charts are signed and verifiable through the Helm CLI.</p> <p>The easiest way to verify is to grab the GPG keyring directly, which can then be passed into <code>helm verify</code> like so:</p> <pre><code>curl -sSL https://cert-manager.io/public-keys/cert-manager-keyring-2021-09-20-1020CF3C033D4F35BAE1C19E1226061C665DF13E.gpg &gt; cert-manager-keyring-2021-09-20-1020CF3C033D4F35BAE1C19E1226061C665DF13E.gpg\nhelm verify --keyring cert-manager-keyring-2021-09-20-1020CF3C033D4F35BAE1C19E1226061C665DF13E.gpg /path/to/cert-manager-vx.y.z.tgz\n</code></pre> <ul> <li>GPG keyring: <code>cert-manager-keyring-2021-09-20-1020CF3C033D4F35BAE1C19E1226061C665DF13E.gpg</code></li> </ul> <p>If you know what you're doing and you want the signing key in a format that's easy to import into GPG, it's available in an ASCII armored version:</p> <ul> <li>ASCII-armored signing key: <code>cert-manager-pgp-2021-09-20-1020CF3C033D4F35BAE1C19E1226061C665DF13E.asc</code></li> </ul>"},{"location":"installation/compatibility/","title":"\u4e0e Kubernetes \u5e73\u53f0\u63d0\u4f9b\u5546\u7684\u517c\u5bb9\u6027","text":"<p>cert-manager \u5b89\u88c5:\u4e91\u63d0\u4f9b\u5546\u517c\u5bb9\u6027</p> <p>\u4e0b\u9762\u60a8\u5c06\u53d1\u73b0\u90e8\u7f72 cert-manager \u65f6\u53ef\u80fd\u4f1a\u53d7\u5230\u7684\u5404\u79cd\u517c\u5bb9\u6027\u95ee\u9898\u548c\u602a\u7656\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u5982\u679c\u4f60\u8ba4\u4e3a\u6211\u4eec\u9519\u8fc7\u4e86\u4e00\u4e9b\u4e1c\u897f\uff0c\u8bf7\u968f\u65f6\u63d0\u51fa\u4e00\u4e2a\u95ee\u9898\u6216\u62c9\u8bf7\u6c42\u7684\u7ec6\u8282!</p> <p>\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528 AWS Fargate\uff0c\u6216\u8005\u60a8\u5df2\u7ecf\u4e13\u95e8\u914d\u7f6e\u4e86 cert-manager \u6765\u8fd0\u884c\u4e3b\u673a\u7684\u7f51\u7edc\uff0c\u8bf7\u6ce8\u610f kubelet \u9ed8\u8ba4\u76d1\u542c\u7aef\u53e3 <code>10250</code>\uff0c\u8be5\u7aef\u53e3\u4e0e cert-manager webhook \u7684\u9ed8\u8ba4\u7aef\u53e3\u51b2\u7a81\u3002</p> <p>\u56e0\u6b64\uff0c\u5728\u8bbe\u7f6e cert-manager \u65f6\uff0c\u60a8\u9700\u8981\u66f4\u6539 webhook \u7684\u7aef\u53e3\u3002</p> <p>\u5bf9\u4e8e\u4f7f\u7528 Helm \u7684\u5b89\u88c5\uff0c\u60a8\u53ef\u4ee5\u5728\u5b89\u88c5 cert-manager \u65f6\u4f7f\u7528\u547d\u4ee4\u884c\u6807\u5fd7\u6216<code>values.yaml</code>\u6587\u4ef6\u4e2d\u7684\u6761\u76ee\u8bbe\u7f6e<code>webhook.securePort</code>\u53c2\u6570\u3002</p> <p>\u5982\u679c\u7aef\u53e3\u51b2\u7a81\uff0c\u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u5173\u4e8e\u4e0d\u53d7\u4fe1\u4efb\u7684\u8bc1\u4e66\u7684\u4ee4\u4eba\u56f0\u60d1\u7684\u9519\u8bef\u6d88\u606f\u3002 \u8be6\u89c1#3237\u3002</p>"},{"location":"installation/compatibility/#gke","title":"GKE","text":"<p>\u5f53\u8c37\u6b4c\u4e3a\u79c1\u6709\u96c6\u7fa4\u914d\u7f6e\u63a7\u5236\u5e73\u9762\u65f6\uff0c\u5b83\u4eec\u4f1a\u81ea\u52a8\u5728 Kubernetes \u96c6\u7fa4\u7684\u7f51\u7edc\u548c\u5355\u72ec\u7684 Google \u7ba1\u7406\u9879\u76ee\u4e4b\u95f4\u914d\u7f6e VPC \u5bf9\u7b49\u3002</p> <p>In order to restrict what Google are able to access within your cluster, the firewall rules configured restrict access to your Kubernetes pods. This means that the webhook won't work, and you'll see errors such as <code>Internal error occurred: failed calling admission webhook ... the server is currently unable to handle the request</code>.</p> <p>In order to use the webhook component with a GKE private cluster, you must configure an additional firewall rule to allow the GKE control plane access to your webhook pod.</p> <p>You can read more information on how to add firewall rules for the GKE control plane nodes in the GKE docs.</p>"},{"location":"installation/compatibility/#gke-autopilot","title":"GKE Autopilot","text":"<p>GKE \u81ea\u52a8\u9a7e\u9a76\u6a21\u5f0f\u4e0e Kubernetes &lt; 1.21 \u4e0d\u652f\u6301 cert-manager\uff0c\u7531\u4e8e\u9650\u5236\u7a81\u53d8\u8bb8\u53ef webhooks.</p> <p>As of October 2021, only the \"rapid\" Autopilot release channel has rolled out version 1.21 for Kubernetes masters. Installation via the helm chart may end in an error message but cert-manager is reported to be working by some users. Feedback and PRs are welcome.</p> <p>Problem: GKE Autopilot does not allow modifications to the <code>kube-system</code>-namespace.</p> <p>Historically we've used the <code>kube-system</code> namespace to prevent multiple installations of cert-manager in the same cluster.</p> <p>Installing cert-manager in these environments with default configuration can cause issues with bootstrapping. Some signals are:</p> <ul> <li><code>cert-manager-cainjector</code> logging errors like:</li> </ul> <pre><code>E0425 09:04:01.520150       1 leaderelection.go:334] error initially creating leader election record: leases.coordination.k8s.io is forbidden: User \"system:serviceaccount:cert-manager:cert-manager-cainjector\" cannot create resource \"leases\" in API group \"coordination.k8s.io\" in the namespace \"kube-system\": GKEAutopilot authz: the namespace \"kube-system\" is managed and the request's verb \"create\" is denied\n</code></pre> <ul> <li><code>cert-manager-startupapicheck</code> not completing and logging messages like:</li> </ul> <pre><code>Not ready: the cert-manager webhook CA bundle is not injected yet\n</code></pre> <p>Solution: Configure cert-manager to use a different namespace for leader election, like this:</p> <pre><code>helm install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version ${CERT_MANAGER_VERSION} --set global.leaderElection.namespace=cert-manager\n</code></pre>"},{"location":"installation/compatibility/#aws-eks","title":"AWS EKS","text":"<p>\u5f53\u5728 EKS \u4e0a\u4f7f\u7528\u81ea\u5b9a\u4e49 CNI(\u5982 Weave \u6216 Calico)\u65f6\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u65e0\u6cd5\u8bbf\u95ee\u7f51\u7edc\u94a9\u5b50\u3002 \u8fd9\u662f\u56e0\u4e3a\u63a7\u5236\u5e73\u9762\u4e0d\u80fd\u914d\u7f6e\u4e3a\u5728 EKS \u4e0a\u7684\u81ea\u5b9a\u4e49 CNI \u4e0a\u8fd0\u884c\uff0c\u56e0\u6b64\u63a7\u5236\u5e73\u9762\u548c\u5de5\u4f5c\u8282\u70b9\u4e4b\u95f4\u7684 CNI \u662f\u4e0d\u540c\u7684\u3002</p> <p>To address this, the webhook can be run in the host network so it can be reached by cert-manager, by setting the <code>webhook.hostNetwork</code> key to true on your deployment, or, if using Helm, configuring it in your <code>values.yaml</code> file.</p> <p>Note that running on the host network will necessitate changing the webhook's port; see the warning at the top of the page for details.</p>"},{"location":"installation/compatibility/#aws-fargate","title":"AWS Fargate","text":"<p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528 AWS Fargate \u4e0d\u5141\u8bb8\u592a\u591a\u7684\u7f51\u7edc\u914d\u7f6e\uff0c\u5e76\u4e14\u4f1a\u5bfc\u81f4 webhook \u7684\u7aef\u53e3\u4e0e\u8fd0\u884c\u5728\u7aef\u53e3 10250 \u4e0a\u7684 kubelet \u51b2\u7a81\uff0c\u5982#3237\u6240\u793a\u3002</p> <p>When deploying cert-manager on Fargate, you must change the port on which the webhook listens. See the warning at the top of this page for more details.</p> <p>Because Fargate forces you to use its networking, you cannot manually set the networking type and options such as <code>webhook.hostNetwork</code> on the helm chart will cause your cert-manager deployment to fail in surprising ways.</p>"},{"location":"installation/helm/","title":"Helm","text":"<p>'cert-manager installation: Using Helm'</p>"},{"location":"installation/helm/#helm_1","title":"\u4f7f\u7528 Helm \u5b89\u88c5","text":"<p>cert-manager provides Helm charts as a first-class method of installation on both Kubernetes and OpenShift.</p> <p>Be sure never to embed cert-manager as a sub-chart of other Helm charts; cert-manager manages non-namespaced resources in your cluster and care must be taken to ensure that it is installed exactly once.</p>"},{"location":"installation/helm/#_1","title":"\u5148\u51b3\u6761\u4ef6","text":"<ul> <li>Install Helm version 3 or later.</li> <li>Install a supported version of Kubernetes or OpenShift.</li> <li>Read Compatibility with Kubernetes Platform Providers if you are using Kubernetes on a cloud platform.</li> </ul>"},{"location":"installation/helm/#_2","title":"\u6b65\u9aa4","text":""},{"location":"installation/helm/#1-add-the-helm-repository","title":"1. Add the Helm repository","text":"<p>This repository is the only supported source of cert-manager charts. There are some other mirrors and copies across the internet, but those are entirely unofficial and could present a security risk.</p> <p>Notably, the \"Helm stable repository\" version of cert-manager is deprecated and should not be used.</p> <pre><code>helm repo add jetstack https://charts.jetstack.io\n</code></pre>"},{"location":"installation/helm/#2-update-your-local-helm-chart-repository-cache","title":"2. Update your local Helm chart repository cache:","text":"<pre><code>helm repo update\n</code></pre>"},{"location":"installation/helm/#3-install-customresourcedefinitions","title":"3. Install <code>CustomResourceDefinitions</code>","text":"<p>cert-manager requires a number of CRD resources, which can be installed manually using <code>kubectl</code>, or using the <code>installCRDs</code> option when installing the Helm chart.</p>"},{"location":"installation/helm/#option-1-installing-crds-with-kubectl","title":"Option 1: installing CRDs with <code>kubectl</code>","text":"<pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.crds.yaml\n</code></pre>"},{"location":"installation/helm/#option-2-install-crds-as-part-of-the-helm-release","title":"Option 2: install CRDs as part of the Helm release","text":"<p>To automatically install and manage the CRDs as part of your Helm release, you must add the <code>--set installCRDs=true</code> flag to your Helm installation command.</p> <p>Uncomment the relevant line in the next steps to enable this.</p> <p>Note that if you're using a <code>helm</code> version based on Kubernetes <code>v1.18</code> or below (Helm <code>v3.2</code>), <code>installCRDs</code> will not work with cert-manager <code>v0.16</code>. See the v0.16 upgrade notes for more details.</p>"},{"location":"installation/helm/#4-install-cert-manager","title":"4. Install cert-manager","text":"<p>To install the cert-manager Helm chart, use the Helm install command as described below.</p> <pre><code>helm install \\\ncert-manager jetstack/cert-manager \\\n--namespace cert-manager \\\n--create-namespace \\\n--version v1.10.1 \\\n# --set installCRDs=true\n</code></pre> <p>A full list of available Helm values is on cert-manager's ArtifactHub page.</p> <p>The example below shows how to tune the cert-manager installation by overwriting the default Helm values:</p> <pre><code>helm install \\\ncert-manager jetstack/cert-manager \\\n--namespace cert-manager \\\n--create-namespace \\\n--version v1.10.1 \\\n--set prometheus.enabled=false \\  # Example: disabling prometheus using a Helm parameter\n--set webhook.timeoutSeconds=4   # Example: changing the webhook timeout using a Helm parameter\n</code></pre> <p>Once you have deployed cert-manager, you can verify the installation.</p>"},{"location":"installation/helm/#installing-cert-manager-as-subchart","title":"Installing cert-manager as subchart","text":"<p>If you have configured cert-manager as a subchart all the components of cert-manager will be installed into the namespace of the helm release you are installing.</p> <p>There may be a situation where you want to specify the namespace to install cert-manager different to the umbrella chart's namespace.</p> <p>This is a known issue with helm and subcharts, that you can't specify the namespace for the subchart and is being solved by most public charts by allowing users to set the namespace via the values file, but needs to be a capability added to the chart by the maintainers.</p> <p>This capability is now available in the cert-manager chart and can be set either in the values file or via the <code>--set</code> switch.</p>"},{"location":"installation/helm/#example-usage","title":"Example usage","text":"<p>Below is an example <code>Chart.yaml</code> with cert-manager as a subchart</p> <pre><code>apiVersion: v2\nname: example_chart\ndescription: A Helm chart with cert-manager as subchart\ntype: application\nversion: 0.1.0\nappVersion: \"0.1.0\"\ndependencies:\n- name: cert-manager\nversion: v1.10.1\nrepository: https://charts.jetstack.io\nalias: cert-manager\ncondition: cert-manager.enabled\n</code></pre> <p>You can then override the namespace in 2 ways</p> <ol> <li>In <code>Values.yaml</code> file</li> </ol> <pre><code>cert-manager: #defined by either the name or alias of your dependency in Chart.yaml\nnamespace: security\n</code></pre> <ol> <li>In the helm command using <code>--set</code></li> </ol> <pre><code>helm install example example_chart \\\n--namespace example \\\n--create-namespace \\\n--set cert-manager.namespace=security\n</code></pre> <p>The above example will install cert-manager into the security namespace.</p>"},{"location":"installation/helm/#output-yaml","title":"Output YAML","text":"<p>Instead of directly installing cert-manager using Helm, a static YAML manifest can be created using the Helm template command. This static manifest can be tuned by providing the flags to overwrite the default Helm values:</p> <pre><code>helm template \\\ncert-manager jetstack/cert-manager \\\n--namespace cert-manager \\\n--create-namespace \\\n--version v1.10.1 \\\n# --set prometheus.enabled=false \\   # Example: disabling prometheus using a Helm parameter\n# --set installCRDs=true \\           # Uncomment to also template CRDs\n&gt; cert-manager.custom.yaml\n</code></pre>"},{"location":"installation/helm/#_3","title":"\u5378\u8f7d","text":"<p>Warning: To uninstall cert-manager you should always use the same process for installing but in reverse. Deviating from the following process whether cert-manager has been installed from static manifests or Helm can cause issues and potentially broken states. Please ensure you follow the below steps when uninstalling to prevent this happening.</p> <p>Before continuing, ensure that all cert-manager resources that have been created by users have been deleted. You can check for any existing resources with the following command:</p> <pre><code>kubectl get Issuers,ClusterIssuers,Certificates,CertificateRequests,Orders,Challenges --all-namespaces\n</code></pre> <p>Once all these resources have been deleted you are ready to uninstall cert-manager using the procedure determined by how you installed.</p>"},{"location":"installation/helm/#uninstalling-with-helm","title":"Uninstalling with Helm","text":"<p>Uninstalling cert-manager from a <code>helm</code> installation is a case of running the installation process, in reverse, using the delete command on both <code>kubectl</code> and <code>helm</code>.</p> <pre><code>helm --namespace cert-manager delete cert-manager\n</code></pre> <p>Next, delete the cert-manager namespace:</p> <pre><code>kubectl delete namespace cert-manager\n</code></pre> <p>Finally, delete the cert-manager <code>CustomResourceDefinitions</code> using the link to the version <code>vX.Y.Z</code> you installed:</p> <p>Warning: This command will also remove installed cert-manager CRDs. All cert-manager resources (e.g. <code>certificates.cert-manager.io</code> resources) will be removed by Kubernetes' garbage collector.</p> <pre><code>kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/vX.Y.Z/cert-manager.crds.yaml\n</code></pre>"},{"location":"installation/helm/#namespace-stuck-in-terminating-state","title":"Namespace Stuck in Terminating State","text":"<p>If the namespace has been marked for deletion without deleting the cert-manager installation first, the namespace may become stuck in a terminating state. This is typically due to the fact that the <code>APIService</code> resource still exists however the webhook is no longer running so is no longer reachable. To resolve this, ensure you have run the above commands correctly, and if you're still experiencing issues then run:</p> <pre><code>kubectl delete apiservice v1beta1.webhook.cert-manager.io\n</code></pre>"},{"location":"installation/kubectl/","title":"kubectl apply","text":"<p>\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 kubectl \u548c\u9759\u6001\u6e05\u5355\u5b89\u88c5 cert-manager\u3002</p>"},{"location":"installation/kubectl/#_1","title":"\u5148\u51b3\u6761\u4ef6","text":"<ul> <li>\u5b89\u88c5 <code>kubectl</code> \u7248\u672c <code>&gt;= v1.19.0</code>. (\u5426\u5219\uff0c\u4f60\u5c06\u5728\u66f4\u65b0 CRDs \u65f6\u9047\u5230\u95ee\u9898 - \u53c2\u89c1v0.16 \u5347\u7ea7\u8bf4\u660e)</li> <li>\u5b89\u88c5\u53d7\u652f\u6301\u7684 Kubernetes \u6216 OpenShift \u7248\u672c.</li> <li>\u5982\u679c\u60a8\u6b63\u5728\u4e91\u5e73\u53f0\u4e0a\u4f7f\u7528 Kubernetes\uff0c\u8bf7\u9605\u8bfb\u4e0e Kubernetes \u5e73\u53f0\u63d0\u4f9b\u5546\u7684\u517c\u5bb9\u6027\u3002</li> </ul>"},{"location":"installation/kubectl/#_2","title":"\u6b65\u9aa4","text":"<p>\u6240\u6709\u6e90( <code>CustomResourceDefinitions</code>\u548c cert-manager, caainjector \u548c webhook \u7ec4\u4ef6)\u90fd\u5305\u542b\u5728\u5355\u4e2a YAML \u6e05\u5355\u6587\u4ef6\u4e2d:</p> <p>\u5b89\u88c5\u6240\u6709 cert-manager \u7ec4\u4ef6:</p> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.yaml\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ccert-manager \u5c06\u5b89\u88c5\u5728<code>cert-manager</code>\u547d\u540d\u7a7a\u95f4\u4e2d\u3002 \u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u8fd0\u884c cert-manager\uff0c\u4e0d\u8fc7\u9700\u8981\u5bf9\u90e8\u7f72\u6e05\u5355\u8fdb\u884c\u4fee\u6539\u3002</p> <p>\u4e00\u65e6\u90e8\u7f72\u4e86 cert-manager\uff0c\u5c31\u53ef\u4ee5\u9a8c\u8bc1\u5b89\u88c5.</p>"},{"location":"installation/kubectl/#kubernetes","title":"\u8c37\u6b4c Kubernetes \u5f15\u64ce\u6743\u9650\u9519\u8bef","text":"<p>\u5f53\u8fd0\u884c\u5728 GKE(\u8c37\u6b4c Kubernetes \u5f15\u64ce)\u4e0a\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u5728\u521b\u5efa\u4e00\u4e9b\u6240\u9700\u7684\u6e90\u65f6\u9047\u5230'permission denied'\u9519\u8bef\u3002 \u8fd9\u662f GKE \u5904\u7406 RBAC \u548c IAM \u6743\u9650\u7684\u7ec6\u5fae\u5dee\u522b\uff0c\u56e0\u6b64\uff0c\u5728\u8fd0\u884c<code>kubectl apply</code>\u4e4b\u524d\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5c06\u81ea\u5df1\u7684\u6743\u9650\u63d0\u5347\u5230\"cluster-admin\"\u7684\u6743\u9650\u3002</p> <p>\u5982\u679c\u4f60\u5df2\u7ecf\u8fd0\u884c\u4e86<code>kubectl apply</code>\uff0c\u4f60\u5e94\u8be5\u5728\u63d0\u5347\u4f60\u7684\u6743\u9650\u540e\u518d\u6b21\u8fd0\u884c\u5b83:</p> <pre><code>kubectl create clusterrolebinding cluster-admin-binding \\\n--clusterrole=cluster-admin \\\n--user=$(gcloud config get-value core/account)\n</code></pre>"},{"location":"installation/kubectl/#_3","title":"\u5378\u8f7d","text":"<p>Warning</p> <p>\u8981\u5378\u8f7dcert-manager\uff0c\u60a8\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528\u4e0e\u5b89\u88c5\u76f8\u540c\u7684\u8fc7\u7a0b\uff0c\u4f46\u662f\u76f8\u53cd\u3002 \u65e0\u8bba\u4ece\u9759\u6001\u6e05\u5355\u8fd8\u662fHelm\u5b89\u88c5cert-manager\uff0c\u504f\u79bb\u4ee5\u4e0b\u8fc7\u7a0b\u90fd\u53ef\u80fd\u5bfc\u81f4\u95ee\u9898\u548c\u6f5c\u5728\u7684\u7834\u574f\u72b6\u6001\u3002 \u8bf7\u786e\u4fdd\u5728\u5378\u8f7d\u65f6\u9075\u5faa\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u4ee5\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u3002</p> <p>\u5728\u7ee7\u7eed\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u7528\u6237\u521b\u5efa\u7684\u4e0d\u9700\u8981\u7684 cert-manager \u6e90\u5df2\u7ecf\u5220\u9664\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u68c0\u67e5\u4efb\u4f55\u73b0\u6709\u7684\u6e90:</p> <pre><code>kubectl get Issuers,ClusterIssuers,Certificates,CertificateRequests,Orders,Challenges --all-namespaces\n</code></pre> <p>\u5efa\u8bae\u5728\u5378\u8f7d cert-manager \u4e4b\u524d\u5220\u9664\u6240\u6709\u8fd9\u4e9b\u6e90\u3002 \u5982\u679c\u8ba1\u5212\u7a0d\u540e\u91cd\u65b0\u5b89\u88c5\uff0c\u5e76\u4e14\u4e0d\u60f3\u5931\u53bb\u4e00\u4e9b\u81ea\u5b9a\u4e49\u6e90\uff0c\u60a8\u53ef\u4ee5\u4fdd\u7559\u5b83\u4eec\u3002 \u7136\u800c\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7ec8\u7ed3\u5668\u51fa\u73b0\u95ee\u9898\u3002 \u4e00\u4e9b\u6e90\uff0c\u6bd4\u5982<code>Challenges</code>\uff0c\u5e94\u8be5\u88ab\u5220\u9664\uff0c\u4ee5\u907f\u514d\u9677\u5165\u6302\u8d77\u72b6\u6001.</p> <p>\u4e00\u65e6\u5220\u9664\u4e86\u4e0d\u9700\u8981\u7684\u6e90\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u7531\u5b89\u88c5\u65b9\u5f0f\u51b3\u5b9a\u7684\u8fc7\u7a0b\u5378\u8f7d cert-manager \u4e86\u3002</p> <p>Warning</p> <p>\u5378\u8f7d\u8bc1\u4e66\u7ba1\u7406\u5668\u6216\u7b80\u5355\u5730\u5220\u9664<code>Certificate</code>\u6e90\u53ef\u4ee5\u5bfc\u81f4TLS\u7684<code>Secret</code>\u88ab\u5220\u9664\uff0c\u5982\u679c\u4ed6\u4eec\u6709<code>metadata.ownerReferences</code>\u8bbe\u7f6e\u7684\u8bc1\u4e66\u7ba1\u7406\u5668\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528<code>--enable-certificate-owner-ref</code> \u63a7\u5236\u5668\u6807\u5fd7\u6765\u63a7\u5236\u662f\u5426\u5c06\u6240\u6709\u8005\u5f15\u7528\u6dfb\u52a0\u5230<code>Secret</code>\u4e2d\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u6807\u5fd7\u88ab\u8bbe\u7f6e\u4e3afalse\uff0c\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u6dfb\u52a0\u4efb\u4f55\u6240\u6709\u8005\u5f15\u7528\u3002 \u4f46\u662f\uff0c\u5728cert-manager v1.8\u53ca\u66f4\u8001\u7248\u672c\u4e2d\uff0c\u5c06\u6807\u5fd7\u7684\u503c\u4ecetrue\u66f4\u6539\u4e3afalse \u5e76\u4e0d\u4f1a \u5220\u9664\u73b0\u6709\u7684\u6240\u6709\u8005\u5f15\u7528\u3002 \u5728cert-manager v1.8\u4e2d\u4fee\u590d\u4e86\u6b64\u884c\u4e3a\u3002 \u8bf7\u68c0\u67e5\u6240\u6709\u8005\u5f15\u7528\uff0c\u4ee5\u786e\u8ba4\u5b83\u4eec\u786e\u5b9e\u88ab\u5220\u9664\u4e86\u3002</p>"},{"location":"installation/kubectl/#_4","title":"\u4f7f\u7528\u5e38\u89c4\u6e05\u5355\u5378\u8f7d","text":"<p>\u4ece\u5177\u6709\u5e38\u89c4\u6e05\u5355\u7684\u5b89\u88c5\u4e2d\u5378\u8f7d\u662f\u4f7f\u7528<code>kubectl</code>\u7684<code>delete</code>\u547d\u4ee4*\u53cd\u5411*\u8fd0\u884c\u5b89\u88c5\u8fc7\u7a0b\u7684\u60c5\u51b5\u3002</p> <p>\u4f7f\u7528\u5f53\u524d\u8fd0\u884c\u7248\u672c<code>vX.Y.Z</code>\u7684\u94fe\u63a5\u5220\u9664\u5b89\u88c5\u6e05\u5355\uff0c\u5982\u4e0b\u6240\u793a:</p> <p>Warning</p> <p>\u6b64\u547d\u4ee4\u8fd8\u5c06\u5220\u9664\u5df2\u5b89\u88c5\u7684cert-manager CRDs\u3002 \u6240\u6709\u8bc1\u4e66\u7ba1\u7406\u5668\u6e90(\u4f8b\u5982:<code>certificates.cert-manager.io</code>\u6e90)\u5c06\u88abKubernetes\u7684\u5783\u573e\u6536\u96c6\u5668\u5220\u9664\u3002 \u5982\u679c\u5220\u9664<code>CustomResourceDefinition</code>\uff0c\u5219\u4e0d\u80fd\u4fdd\u7559\u4efb\u4f55\u81ea\u5b9a\u4e49\u6e90\u3002 \u5982\u679c\u4f60\u60f3\u4fdd\u7559\u6e90\uff0c\u4f60\u5e94\u8be5\u5355\u72ec\u7ba1\u7406<code>CustomResourceDefinition</code>\u3002</p> <pre><code>kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/vX.Y.Z/cert-manager.yaml\n</code></pre>"},{"location":"installation/kubectl/#_5","title":"\u547d\u540d\u7a7a\u95f4\u5904\u4e8e\u7ec8\u6b62\u72b6\u6001","text":"<p>\u5982\u679c\u547d\u540d\u7a7a\u95f4\u88ab\u6807\u8bb0\u4e3a\u5220\u9664\uff0c\u800c\u6ca1\u6709\u9996\u5148\u5220\u9664 cert-manager \u5b89\u88c5\uff0c\u5219\u547d\u540d\u7a7a\u95f4\u53ef\u80fd\u4f1a\u5904\u4e8e\u7ec8\u6b62\u72b6\u6001\u3002 \u8fd9\u901a\u5e38\u662f\u7531\u4e8e<code>APIService</code>\u6e90\u4ecd\u7136\u5b58\u5728\uff0c\u4f46 webhook \u4e0d\u518d\u8fd0\u884c\uff0c\u56e0\u6b64\u4e0d\u518d\u53ef\u8fbe\u3002 \u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8bf7\u786e\u4fdd\u6b63\u786e\u8fd0\u884c\u4e86\u4e0a\u8ff0\u547d\u4ee4\uff0c\u5982\u679c\u4ecd\u7136\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u8fd0\u884c:</p> <pre><code>kubectl delete apiservice v1beta1.webhook.cert-manager.io\n</code></pre>"},{"location":"installation/kubectl/#challenge","title":"\u5220\u9664\u6302\u8d77\u7684 Challenge","text":"<p>\u5f53\u7ec8\u7ed3\u5668\u65e0\u6cd5\u5b8c\u6210\uff0c\u800c Kubernetes \u6b63\u5728\u7b49\u5f85 cert-manager \u63a7\u5236\u5668\u5b8c\u6210\u65f6\uff0cChallenge \u53ef\u80fd\u4f1a\u9677\u5165\u60ac\u800c\u672a\u51b3\u7684\u72b6\u6001\u3002 \u5f53\u63a7\u5236\u5668\u4e0d\u518d\u8fd0\u884c\u4ee5\u5220\u9664\u6807\u5fd7\uff0c\u5e76\u4e14\u6e90\u88ab\u5b9a\u4e49\u4e3a\u9700\u8981\u7b49\u5f85\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u624b\u52a8\u6267\u884c\u63a7\u5236\u5668\u7684\u64cd\u4f5c\u6765\u4fee\u590d\u6b64\u95ee\u9898\u3002</p> <p>\u9996\u5148\uff0c\u5220\u9664\u73b0\u6709\u7684 cert-manager webhook \u914d\u7f6e\uff0c\u5982\u679c\u6709\u7684\u8bdd:</p> <pre><code>kubectl delete mutatingwebhookconfigurations cert-manager-webhook\n</code></pre> <p>\u7136\u540e\u901a\u8fc7\u7f16\u8f91 Challenge \u6e90\u5c06<code>.metadata.finalizers</code>\u5b57\u6bb5\u66f4\u6539\u4e3a\u7a7a\u5217\u8868:</p> <pre><code>kubectl edit challenge &lt;the-challenge&gt;\n</code></pre>"},{"location":"installation/operator-lifecycle-manager/","title":"\u64cd\u4f5c\u5458\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668","text":"<p>'cert-manager installation: Using OLM'</p>"},{"location":"installation/operator-lifecycle-manager/#olm","title":"\u7531 OLM \u7ba1\u7406\u5b89\u88c5","text":""},{"location":"installation/operator-lifecycle-manager/#_2","title":"\u5148\u51b3\u6761\u4ef6","text":"<ul> <li>Install a supported version of Kubernetes or OpenShift.</li> <li>Read Compatibility with Kubernetes Platform Providers if you are using Kubernetes on a cloud platform.</li> </ul>"},{"location":"installation/operator-lifecycle-manager/#1-openshift-operatorhub-web","title":"\u9009\u9879 1:\u4ece OpenShift \u4e0a\u7684 OperatorHub Web \u63a7\u5236\u53f0\u5b89\u88c5","text":"<p>cert-manager is in the Red Hat-provided Operator catalog called \"community-operators\". On OpenShift 4 you can install cert-manager from the OperatorHub web console or from the command line. These installation methods are described in Red Hat's Adding Operators to a cluster documentation.</p> <p>\u26a0\ufe0f In cert-manager 1.10 the secure computing (seccomp) profile for all the Pods is set to <code>RuntimeDefault</code>. On some versions and configurations of OpenShift this can cause the Pod to be rejected by the Security Context Constraints admission webhook.</p> <p>\ud83d\udcd6 Read the Breaking Changes section in the 1.10 release notes before installing or upgrading.</p>"},{"location":"installation/operator-lifecycle-manager/#option-2-installing-from-operatorhubio","title":"Option 2: Installing from OperatorHub.io","text":"<p>Browse to the cert-manager page on OperatorHub.io, click the \"Install\" button and follow the installation instructions.</p>"},{"location":"installation/operator-lifecycle-manager/#option-3-manual-install-via-kubectl-operator-plugin","title":"Option 3: Manual install via <code>kubectl operator</code> plugin","text":"<p>Install OLM and [install the <code>kubectl operator</code> plugin][] from the Krew Kubectl plugins index and then use that to install the cert-manager as follows:</p> <pre><code>operator-sdk olm install\nkubectl krew install operator\nkubectl operator install cert-manager -n operators --channel stable --approval Automatic\n</code></pre> <p>You can monitor the progress of the installation as follows:</p> <pre><code>kubectl get events -w -n operators\n</code></pre> <p>And you can see the status of the installation with:</p> <pre><code>kubectl operator list\n</code></pre>"},{"location":"installation/operator-lifecycle-manager/#release-channels","title":"Release Channels","text":"<p>Whichever installation method you chose, there will now be an OLM Subscription resource for cert-manager, tracking the \"stable\" release channel. E.g.</p> <pre><code>$ kubectl get subscription cert-manager -n operators -o yaml\n...\nspec:\n  channel: stable\n  installPlanApproval: Automatic\n  name: cert-manager\n...\nstatus:\n  currentCSV: cert-manager.v1.7.1\n  state: AtLatestKnown\n...\n</code></pre> <p>This means that OLM will discover new cert-manager releases in the stable channel, and, depending on the Subscription settings it will upgrade cert-manager automatically, when new releases become available. Read Manually Approving Upgrades via Subscriptions for information about automatic and manual upgrades.</p> <p>NOTE: There is a single release channel called \"stable\" which will contain all cert-manager releases, shortly after they are released. In future we may introduce other release channels with alternative release schedules, in accordance with OLM's Recommended Channel Naming.</p>"},{"location":"installation/operator-lifecycle-manager/#debugging-installation-issues","title":"Debugging installation issues","text":"<p>If you have any issues with your installation, please refer to the FAQ.</p>"},{"location":"installation/operator-lifecycle-manager/#configuration","title":"Configuration","text":"<p>The configuration options are quite limited when you install cert-manager using OLM. There are a few Deployment settings which can be overridden permanently in the Subscription and most other elements of the cert-manager manifests can be changed by editing the ClusterServiceVersion, but changes to the ClusterServiceVersion are temporary and will be lost if OLM upgrades cert-manager, because an upgrade results in a new ClusterServiceVersion resource.</p>"},{"location":"installation/operator-lifecycle-manager/#configuration-via-subscription","title":"Configuration Via Subscription","text":"<p>When you create an OLM Subscription you can override some of the cert-manager Deployment settings, but the options are quite limited. The configuration which you add to the Subscription will be applied immediately to the current cert-manager Deployments. It will also be re-applied if OLM upgrades cert-manager.</p> <p>\ud83d\udd30 Read the Configuring Operators deployed by OLM design doc in the OLM repository.</p> <p>\ud83d\udd30 Refer to the Subscription API documentation.</p> <p>Here are some examples of configuration that can be achieved by modifying the Subscription resource. In each case we assume that you are starting with the following default Subscription from OperatorHub.io:</p> <pre><code># cert-manager.yaml\napiVersion: operators.coreos.com/v1alpha1\nkind: Subscription\nmetadata:\nname: my-cert-manager\nnamespace: operators\nspec:\nchannel: stable\nname: cert-manager\nsource: operatorhubio-catalog\nsourceNamespace: olm\n</code></pre> <pre><code>kubectl create -f https://operatorhub.io/install/cert-manager.yaml\n</code></pre>"},{"location":"installation/operator-lifecycle-manager/#change-the-resource-requests-and-limits","title":"Change the Resource Requests and Limits","text":"<p>It is possible to change the resource requests and limits by adding a <code>config</code> stanza to the Subscription:</p> <pre><code># resources-patch.yaml\nspec:\nconfig:\nresources:\nrequests:\nmemory: \"64Mi\"\ncpu: \"250m\"\nlimits:\nmemory: \"128Mi\"\ncpu: \"500m\"\n</code></pre> <pre><code>kubectl -n operators patch subscription my-cert-manager --type merge --patch-file resources-patch.yaml\n</code></pre> <p>You will see all the cert-manager Pods are restarted with the new resources:</p> <pre><code>$ kubectl -n operators get pods -o \"custom-columns=name:.metadata.name,mem:.spec.containers[*].resources\"\nname                                       mem\ncert-manager-669867589c-n8dcn              map[limits:map[cpu:500m memory:128Mi] requests:map[cpu:250m memory:100Mi]]\ncert-manager-cainjector-7b7fff8b9c-dxw6b   map[limits:map[cpu:500m memory:128Mi] requests:map[cpu:250m memory:100Mi]]\ncert-manager-webhook-975bc87b5-tqdj4       map[limits:map[cpu:500m memory:128Mi] requests:map[cpu:250m memory:100Mi]]\n</code></pre> <p>\u26a0\ufe0f This configuration will apply to all the cert-manager Deployments. This is a known limitation of OLM which does not support configuration of individual Deployments.</p>"},{"location":"installation/operator-lifecycle-manager/#change-the-nodeselector","title":"Change the NodeSelector","text":"<p>It is possible to change the <code>nodeSelector</code> for cert-manager Pods by adding the following stanza to the Subscription:</p> <pre><code># nodeselector-patch.yaml\nspec:\nconfig:\nnodeSelector:\nkubernetes.io/arch: amd64\n</code></pre> <pre><code>kubectl -n operators patch subscription my-cert-manager --type merge --patch-file nodeselector-patch.yaml\n</code></pre> <p>You will see all the cert-manager Pods are restarted with the new <code>nodeSelector</code>:</p> <pre><code>$ kubectl -n operators get pods -o \"custom-columns=name:.metadata.name,nodeselector:.spec.nodeSelector\"\nname                                      nodeselector\ncert-manager-5b6b8f7d74-k7l94             map[kubernetes.io/arch:amd64 kubernetes.io/os:linux]\ncert-manager-cainjector-b89cd6f46-kdkk2   map[kubernetes.io/arch:amd64 kubernetes.io/os:linux]\ncert-manager-webhook-8464bc7cc8-64b4w     map[kubernetes.io/arch:amd64 kubernetes.io/os:linux]\n</code></pre> <p>\u26a0\ufe0f This configuration will apply to all the cert-manager Deployments. This is a known limitation of OLM which does not support configuration of individual Deployments.</p>"},{"location":"installation/operator-lifecycle-manager/#configuration-via-clusterserviceversion-csv","title":"Configuration Via ClusterServiceVersion (CSV)","text":"<p>The ClusterServiceVersion (CSV) resource contains the templates for all the cert-manager Deployments. If you patch these templates, OLM will immediately roll out the changes to the Deployments.</p> <p>\u26a0\ufe0f If OLM upgrades cert-manager your changes will be lost because it will create a new CSV with default Deployment templates.</p> <p>Nevertheless, editing (patching) the CSV can be a useful way to override certain cert-manager settings. An example:</p>"},{"location":"installation/operator-lifecycle-manager/#change-the-log-level-of-cert-manager-components","title":"Change the log level of cert-manager components","text":"<p>The following JSON patch will append <code>-v=6</code> to command line arguments of the cert-manager controller-manager (the first container of the first Deployment).</p> <pre><code>kubectl patch csv cert-manager.v1.10.1 \\\n--type json \\\n-p '[{\"op\": \"add\", \"path\": \"/spec/install/spec/deployments/0/spec/template/spec/containers/0/args/-\", \"value\": \"-v=6\" }]'\n</code></pre> <p>You will see the controller-manager Pod is restarted with the new arguments.</p> <pre><code>$ kubectl  -n operators get pods -o \"custom-columns=name:.metadata.name,args:.spec.containers[0].args\"\nname                                      args\ncert-manager-797979cbdb-g444r             [-v=2 --cluster-resource-namespace=$(POD_NAMESPACE) --leader-election-namespace=kube-system -v=6]\n...\n</code></pre> <p>\ud83d\udd30 Refer to the ClusterServiceVersion API documentation.</p>"},{"location":"installation/operator-lifecycle-manager/#uninstall","title":"Uninstall","text":"<p>Below is the processes for uninstalling cert-manager on OpenShift.</p> <p>\u26a0\ufe0f To uninstall cert-manager you should always use the same process for installing but in reverse. Deviating from the following process can cause issues and potentially broken states. Please ensure you follow the below steps when uninstalling to prevent this happening.</p>"},{"location":"installation/other-tools/","title":"\u53ef\u4f9b\u9009\u62e9\u7684\u5b89\u88c5\u65b9\u6cd5","text":""},{"location":"installation/other-tools/#kubeproddeprecated","title":"kubeprod(deprecated)","text":"<p>Bitnami Kubernetes \u751f\u4ea7\u8fd0\u884c\u65f6 (<code>BKPR</code>, <code>kubeprod</code>) \u662f\u60a8\u9700\u8981\u90e8\u7f72\u5728 Kubernetes \u96c6\u7fa4\u4e4b\u4e0a\u7684\u670d\u52a1\u7684\u96c6\u5408\uff0c\u4ee5\u542f\u7528\u65e5\u5fd7\u8bb0\u5f55\uff0c\u76d1\u63a7\uff0c\u8bc1\u4e66\u7ba1\u7406\uff0c\u901a\u8fc7\u516c\u5171 DNS \u670d\u52a1\u5668\u81ea\u52a8\u53d1\u73b0 Kubernetes \u6e90\u548c\u5176\u4ed6\u516c\u5171\u57fa\u7840\u8bbe\u65bd\u9700\u6c42\u3002</p> <p>\u5b83\u4f9d\u8d56\u4e8e<code>cert-manager</code>\u8fdb\u884c\u8bc1\u4e66\u7ba1\u7406\uff0c\u5e76\u4e14\u5b83\u662f\u5b9a\u671f\u6d4b\u8bd5\u7684\uff0c\u56e0\u6b64\u5df2\u77e5\u7ec4\u4ef6\u5728 GKE\u3001AKS \u548c EKS \u96c6\u7fa4\u4e2d\u534f\u540c\u5de5\u4f5c\u3002 \u5bf9\u4e8e\u5176\u5165\u53e3\u5806\u6808\uff0c\u5b83\u5728\u914d\u7f6e\u7684 DNS \u533a\u57df\u4e2d\u521b\u5efa\u4e00\u4e2a DNS \u6761\u76ee\uff0c\u5e76\u4ece Let's Encrypt \u9884\u6f14\u670d\u52a1\u5668\u8bf7\u6c42 TLS \u8bc1\u4e66\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528<code>kubeprod install</code>\u547d\u4ee4\u90e8\u7f72 BKPR\uff0c\u8be5\u547d\u4ee4\u5c06\u90e8\u7f72<code>cert-manager</code>\u4f5c\u4e3a\u5176\u4e00\u90e8\u5206\u3002 \u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u89c1BKPR \u5b89\u88c5\u6307\u5357\u3002</p>"},{"location":"installation/supported-releases/","title":"\u652f\u6301\u7684\u7248\u672c","text":"<p>\u652f\u6301\u7684\u7248\u672c\uff0cKubernetes \u7248\u672c\uff0cOpenShift \u7248\u672c\u548c\u5373\u5c06\u53d1\u5e03\u7684\u65f6\u95f4\u8868</p> <p>\u53d7\u5230 https://istio.io/latest/about/supported-releases/ \u542f\u53d1</p> <p>\u672c\u9875\u5217\u51fa\u5f53\u524d\u652f\u6301\u7248\u672c\u7684\u72b6\u6001\u3001\u65f6\u95f4\u8f74\u548c\u7b56\u7565\u3002</p> <p>\u6bcf\u4e2a\u7248\u672c\u652f\u6301\u56db\u4e2a\u6708\u7684\u65f6\u95f4\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5927\u7ea6\u6bcf\u4e24\u4e2a\u6708\u521b\u5efa\u4e00\u4e2a\u65b0\u7248\u672c\uff0c\u5305\u62ec\u5047\u65e5\u671f\u95f4\u3001\u4e3b\u8981\u4f1a\u8bae\u548c\u5176\u4ed6\u4e16\u754c\u4e8b\u4ef6\u3002</p> <p>cert-manager \u5e0c\u671b\u6240\u6709 Kubernetes(1.24 \u53ca\u4ee5\u4e0a\u7248\u672c)\u7684\u96c6\u7fa4\u4e2d\u90fd\u542f\u7528 ServerSideApply\u3002</p>"},{"location":"installation/supported-releases/#supported-releases","title":"\u5f53\u524d\u652f\u6301\u7684\u7248\u672c","text":"Release Release Date End of Life Supported Kubernetes versions Supported OpenShift versions 1.10 Oct 17, 2022 Release of 1.12 1.20 \u2192 1.26 4.7 \u2192 4.13 1.9 Jul 22, 2022 Release of 1.11 1.20 \u2192 1.24 4.7 \u2192 4.11 <p>\u5e94\u8be5\u5728\u96c6\u7fa4\u4e2d\u542f\u7528 ServerSideApply</p>"},{"location":"installation/supported-releases/#_2","title":"\u5373\u5c06\u53d1\u5e03\u7684","text":"Release Release Date End of Life Supported Kubernetes versions Supported OpenShift versions 1.11 Jan 11, 2023 Mid May, 2023 1.21 \u2192 1.26 4.8 \u2192 4.13 1.12 ~Mar 15, 2023 Mid July, 2023 1.22 \u2192 1.26 4.9 \u2192 4.13 <p>\u672a\u6765\u7684\u65e5\u671f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u53ef\u80fd\u4f1a\u6539\u53d8\u3002</p>"},{"location":"installation/supported-releases/#_3","title":"\u65e7\u7684\u7248\u672c","text":"Release Release Date EOL Compatible Kubernetes versions Compatible OpenShift versions 1.8 Apr 05, 2022 Oct 17, 2022 1.19 \u2192 1.24 4.6 \u2192 4.11 1.7 Jan 26, 2021 Jul 22, 2022 1.18 \u2192 1.23 4.5 \u2192 4.9 1.6 Oct 26, 2021 Apr 05, 2022 1.17 \u2192 1.22 4.4 \u2192 4.9 1.5 Aug 11, 2021 Jan 26, 2022 1.16 \u2192 1.22 4.3 \u2192 4.8 1.4 Jun 15, 2021 Oct 26, 2021 1.16 \u2192 1.21 4.3 \u2192 4.7 1.3 Apr 08, 2021 Aug 11, 2021 1.16 \u2192 1.21 4.3 \u2192 4.7 1.2 Feb 10, 2021 Jun 15, 2021 1.16 \u2192 1.21 4.3 \u2192 4.7 1.1 Nov 24, 2020 Apr 08, 2021 1.11 \u2192 1.21 3.11 \u2192 4.7 1.0 Sep 02, 2020 Feb 10, 2021 1.11 \u2192 1.21 3.11 \u2192 4.7 0.16 Jul 23, 2020 Nov 24, 2020 1.11 \u2192 1.21 3.11 \u2192 4.7 0.15 May 06, 2020 Sep 02, 2020 1.11 \u2192 1.21 3.11 \u2192 4.7 0.14 Mar 11, 2020 Jul 23, 2020 1.11 \u2192 1.21 3.11 \u2192 4.7 0.13 Jan 21, 2020 May 06, 2020 1.11 \u2192 1.21 3.11 \u2192 4.7 0.12 Nov 27, 2019 Mar 11, 2020 1.11 \u2192 1.21 3.11 \u2192 4.7 0.11 Oct 10, 2019 Jan 21, 2020 1.9 \u2192 1.21 3.09 \u2192 4.7 <p>We list cert-manager releases on GitHub, and release notes on cert-manager.io.</p> <p>We also maintain detailed upgrade instructions.</p>"},{"location":"installation/supported-releases/#_4","title":"\u652f\u6301\u653f\u7b56","text":""},{"location":"installation/supported-releases/#_5","title":"\u652f\u6301\u662f\u4ec0\u4e48\u610f\u601d","text":"<p>Our support window is four months for each release branch. In the below diagram, <code>release-1.2</code> is an example of a release branch. The support window corresponds to the two latest releases, given that we produce a new final release every two months. We offer two types of support:</p> <ul> <li>Technical support,</li> <li>Security and bug fixes.</li> </ul> <p>For example, imagining that the latest release is <code>v1.2.0</code>, you can expect support for both <code>v1.2.0</code> and <code>v1.1.0</code>. Only the last patch release of each branch is actually supported.</p> <pre><code>   v1.0.0                                                          ^\n Sep 2, 2020                                                       | UNSUPPORTED\n------+---------------------------------------------&gt; release-1.0  | RELEASES\n       \\                                                           v\n        \\\n         \\       v1.1.0\n          \\    Nov 24, 2020                                        ^\n           ---------+-------------------------------&gt; release-1.1  |\n                     \\                                             | SUPPORTED\n                      \\                                            | RELEASES\n                       \\         v1.2.0                            | = the two\n                        \\      Feb 10, 2021                        |   last\n                         ------------+--------------&gt; release-1.2  |   releases\n                                      \\                            v\n                                       \\\n                                        \\\n                                         \\\n                                          -----------&gt; master branch\n                                                       April 1, 2021\n</code></pre>"},{"location":"installation/supported-releases/#technical-support","title":"\u6280\u672f\u652f\u6301","text":"<p>Technical assistance is offered on a best-effort basis for supported releases only. You can request support from the community on Kubernetes Slack (in the <code>#cert-manager</code> channel), using GitHub Discussions or using the cert-manager-dev Google group.</p>"},{"location":"installation/supported-releases/#bug-fixes-support","title":"Security and bug fixes","text":"<p>We back-port important bug fixes \u2014 including security fixes \u2014 to all currently supported releases.</p> <ul> <li>Security issues,</li> <li>Critical bugs,</li> <li>Long-standing bugs.</li> </ul>"},{"location":"installation/supported-releases/#security-issues","title":"Security issues","text":"<p>Security issues are fixed as soon as possible. They get back-ported to the last two releases, and a new patch release is immediately created for them.</p>"},{"location":"installation/supported-releases/#critical-bugs","title":"Critical bugs","text":"<p>Critical bugs include both regression bugs as well as upgrade bugs.</p> <p>Regressions are functionalities that worked in a previous release but no longer work. #4142, #3393 and #2857 are three examples of regressions.</p> <p>Upgrade bugs are issues (often Helm-related) preventing users from upgrading to currently supported releases from earlier releases of cert-manager. #3882 and #3644 are examples of upgrade bugs.</p> <p>Note that intentional breaking changes do not belong to this category.</p> <p>Fixes for critical bugs are (usually) immediately back-ported by creating a new patch release for the currently supported releases.</p>"},{"location":"installation/supported-releases/#long-standing-bugs","title":"Long-standing bugs","text":"<p>Long-standing bug: sometimes a bug exists for a long time, and may have known workarounds. #3444 is an example of a long-standing bug.</p> <p>Where we feel that back-porting would be difficult or might be a stability risk to clusters running cert-manager, we'll make the fix in a major release but avoid back-porting the fix.</p>"},{"location":"installation/supported-releases/#breaking-changes","title":"Breaking changes","text":"<p>Breaking changes are changes that intentionally break the cert-manager Kubernetes API or the command line flags. We avoid making breaking changes where possible, and where they're required we'll give as much notice as possible.</p>"},{"location":"installation/supported-releases/#other-backports","title":"Other back-ports","text":"<p>We aim to be conservative in what we back-port. That applies especially for anything which could be a runtime change - that is, a change which might alter behavior for someone upgrading between patch releases.</p> <p>That means that if a candidate for back-porting has a chance of having a runtime impact we're unlikely to accept the change unless it addresses a security issue or a critical bug.</p> <p>We reserve the right to back-port other changes which are unlikely to have a runtime impact, such as documentation or tooling changes. An example would be #5209 which updated how we perform a release of cert-manager but didn't have any realistic chance of having a runtime impact.</p> <p>Generally we'll seek to be pragmatic. A rule of thumb might be to ask:</p> <p>\"Does this back-port improve cert-manager, bearing in mind that we really value stability for already-released versions?\"</p>"},{"location":"installation/supported-releases/#kubernetes-supported-versions","title":"How we determine supported Kubernetes versions","text":"<p>The list of supported Kubernetes versions displayed in the Supported Releases section depends on what the cert-manager maintainers think is reasonable to support and to test.</p> <p>In practice, this is largely determined based on what versions of kind are available for testing, and which versions of Kubernetes are provided by major upstream cloud Kubernetes vendors including EKS, GKE, AKS and OpenShift.</p> Vendor Oldest Kubernetes Release* Other Older Kubernetes Releases EKS 1.21 (EOL Feb 2023) 1.22 (EOL May 2023) GKE 1.21 (EOL Feb 2023) 1.22 (EOL May 2023) AKS 1.23 (EOL ~Feb 2023) OpenShift 4 1.21 (4.8 EUS, EOL Feb 2023) 1.22 (4.9, EOL Apr 2023) <p>*Oldest release relevant to the next cert-manager release, as of 2022-07-18</p>"},{"location":"installation/supported-releases/#openshift","title":"OpenShift","text":"<p>cert-manager \u652f\u6301\u57fa\u4e8e Kubernetes \u7248\u672c\u7684 OpenShift 4 \u7248\u672c\u3002</p> <p>For convenience, the following table shows these version mappings:</p> OpenShift versions Kubernetes version 4.13 1.26 4.12 1.25 4.11 1.24 4.10, 4.10 EUS 1.23 4.9 1.22 4.8, 4.8 EUS 1.21 4.7 1.20 4.6, 4.6 EUS 1.19 <p>Note that some OpenShift versions listed above may be predicted, since an updated version of OpenShift may not yet be available for the latest Kubernetes releases.</p> <p>The last version of cert-manager to support OpenShift 3 was cert-manager 1.2, which is no longer maintained.</p>"},{"location":"installation/supported-releases/#_6","title":"\u672f\u8bed","text":"<p>The term \"release\" (or \"minor release\") refers to one minor version of cert-manager. For example, 1.2 and 1.3 are two releases. Note that we do not use the prefix <code>v</code> for releases (just \"1.2\"). This is because releases are not used as git tags.</p> <p>Patch releases use the <code>v</code> prefix (e.g., <code>v1.2.0</code>, <code>v1.3.1</code>...) since one patch release = one git tag. The initial patch release is called \"final release\":</p> Type of release Example of git tag Corresponding release Corresponding release branch* Final release <code>v1.3.0</code> 1.3 <code>release-1.3</code> Patch release <code>v1.3.1</code> 1.3 <code>release-1.3</code> Pre-release <code>v1.4.0-alpha.0</code> N/A** <code>release-1.4</code> <p>*For maintainers: each release has an associated long-lived branch that we call the \u201crelease branch\u201d. For example, <code>release-1.2</code> is the release branch for release 1.2.</p> <p>**Pre-releases (e.g., <code>v1.3.0-alpha.0</code>) don't have a corresponding release (e.g., 1.3) since a release only exists after a final release (e.g., <code>v1.3.0</code>) has been created.</p> <p>Our naming scheme mostly follows Semantic Versioning 2.0.0 with <code>v</code> prepended to git tags and docker images:</p> <pre><code>v&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;\n</code></pre> <p>where <code>&lt;minor&gt;</code> is increased for each release, and <code>&lt;patch&gt;</code> counts the number of patches for the current <code>&lt;minor&gt;</code> release. A patch is usually a small change relative to the <code>&lt;minor&gt;</code> release.</p>"},{"location":"installation/uninstall/","title":"Uninstall","text":"<p>cert-manager supports running on Kubernetes and OpenShift. The uninstallation process between the two platforms is similar. Select the method that was used for installing cert-manager to go to the relevant uninstall documentation.</p> <ul> <li>kubectl</li> <li>helm</li> </ul>"},{"location":"installation/verify/","title":"\u5b89\u88c5\u9a8c\u8bc1","text":""},{"location":"installation/verify/#cert-manager-api","title":"\u68c0\u67e5 cert-manager API","text":"<p>\u9996\u5148\uff0c\u786e\u4fddcmctl \u5df2\u5b89\u88c5.</p> <p>cmctl \u5bf9 Kubernetes \u96c6\u7fa4\u6267\u884c\u4e00\u4e2a\u5e72\u8fd0\u884c\u8bc1\u4e66\u521b\u5efa\u68c0\u67e5\u3002 \u5982\u679c\u6210\u529f\uff0c\u7cfb\u7edf\u63d0\u793a<code>The cert-manager API is ready</code>\u3002</p> <pre><code>$ cmctl check api\nThe cert-manager API is ready\n</code></pre> <p>\u8be5\u547d\u4ee4\u4e5f\u53ef\u4ee5\u7528\u4e8e\u7b49\u5f85\u68c0\u67e5\u6210\u529f\u3002 \u4e0b\u9762\u662f\u5728\u5b89\u88c5 cert-manager \u7684\u540c\u65f6\u8fd0\u884c\u8be5\u547d\u4ee4\u7684\u8f93\u51fa\u793a\u4f8b:</p> <pre><code>$ cmctl check api --wait=2m\nNot ready: the cert-manager CRDs are not yet installed on the Kubernetes API server\nNot ready: the cert-manager CRDs are not yet installed on the Kubernetes API server\nNot ready: the cert-manager webhook deployment is not ready yet\nNot ready: the cert-manager webhook deployment is not ready yet\nNot ready: the cert-manager webhook deployment is not ready yet\nNot ready: the cert-manager webhook deployment is not ready yet\nThe cert-manager API is ready\n</code></pre>"},{"location":"installation/verify/#_2","title":"\u624b\u52a8\u9a8c\u8bc1","text":"<p>\u5b89\u88c5\u4e86 cert-manager \u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u5b83\u662f\u5426\u6b63\u786e\u90e8\u7f72 \u68c0\u67e5<code>cert-manager</code>\u547d\u540d\u7a7a\u95f4\u662f\u5426\u6b63\u5728\u8fd0\u884c pod:</p> <pre><code>$ kubectl get pods --namespace cert-manager\n\nNAME                                       READY   STATUS    RESTARTS   AGE\ncert-manager-5c6866597-zw7kh               1/1     Running   0          2m\ncert-manager-cainjector-577f6d9fd7-tr77l   1/1     Running   0          2m\ncert-manager-webhook-787858fcdb-nlzsq      1/1     Running   0          2m\n</code></pre> <p>\u4f60\u5e94\u8be5\u770b\u5230<code>cert-manager</code>, <code>cert-manager-cainjector</code>, \u548c <code>cert-manager-webhook</code> Pod \u5904\u4e8e<code>Running</code>\u72b6\u6001\u3002 webhook \u53ef\u80fd\u6bd4\u5176\u4ed6 webhook \u9700\u8981\u66f4\u957f\u7684\u65f6\u95f4\u624d\u80fd\u6210\u529f\u63d0\u4f9b\u3002</p> <p>\u5982\u679c\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u5148\u67e5\u770bFAQ.</p> <p>\u521b\u5efa\u4e00\u4e2a<code>Issuer</code>\u6765\u6d4b\u8bd5 webhook \u7684\u5de5\u4f5c\u60c5\u51b5\u3002</p> <pre><code>$ cat &lt;&lt;EOF &gt; test-resources.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: cert-manager-test\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: test-selfsigned\n  namespace: cert-manager-test\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: selfsigned-cert\n  namespace: cert-manager-test\nspec:\n  dnsNames:\n    - example.com\n  secretName: selfsigned-cert-tls\n  issuerRef:\n    name: test-selfsigned\nEOF\n</code></pre> <p>\u521b\u5efa\u6d4b\u8bd5\u6e90\u3002</p> <pre><code>$ kubectl apply -f test-resources.yaml\n</code></pre> <p>\u68c0\u67e5\u65b0\u521b\u5efa\u7684\u8bc1\u4e66\u7684\u72b6\u6001\u3002 \u5728\u8bc1\u4e66\u7ba1\u7406\u5668\u5904\u7406\u8bc1\u4e66\u8bf7\u6c42\u4e4b\u524d\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u7b49\u5f85\u51e0\u79d2\u949f\u3002</p> <pre><code>$ kubectl describe certificate -n cert-manager-test\n\n...\nSpec:\n  Common Name:  example.com\n  Issuer Ref:\n    Name:       test-selfsigned\n  Secret Name:  selfsigned-cert-tls\nStatus:\n  Conditions:\n    Last Transition Time:  2019-01-29T17:34:30Z\n    Message:               Certificate is up to date and has not expired\n    Reason:                Ready\n    Status:                True\n    Type:                  Ready\n  Not After:               2019-04-29T17:34:29Z\nEvents:\n  Type    Reason      Age   From          Message\n  ----    ------      ----  ----          -------\n  Normal  CertIssued  4s    cert-manager  Certificate issued successfully\n</code></pre> <p>\u6e05\u7406\u6d4b\u8bd5\u6e90\u3002</p> <pre><code>$ kubectl delete -f test-resources.yaml\n</code></pre> <p>\u5982\u679c\u4ee5\u4e0a\u6240\u6709\u6b65\u9aa4\u90fd\u6b63\u786e\u5730\u5b8c\u6210\u4e86\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f00\u59cb\u4e86!</p>"},{"location":"installation/verify/#_3","title":"\u793e\u533a\u7ef4\u62a4\u5de5\u5177","text":"<p>\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u793e\u533a\u7ef4\u62a4cert-manager-verifier\u5de5\u5177\u81ea\u52a8\u68c0\u67e5 cert-manager \u914d\u7f6e\u662f\u5426\u6b63\u786e\u3002</p>"},{"location":"installation/upgrading/","title":"\u66f4\u65b0","text":"<p>'cert-manager installation: \u5347\u7ea7 cert-manager \u6982\u8ff0'</p> <p>\u672c\u8282\u5305\u542b\u6709\u5173\u5347\u7ea7 cert-manager \u7684\u4fe1\u606f\u3002 \u5b83\u8fd8\u5305\u542b\u8be6\u7ec6\u63cf\u8ff0 cert-manager \u7248\u672c\u4e4b\u95f4\u7684\u91cd\u5927\u53d8\u5316\u7684\u6587\u6863\uff0c\u4ee5\u53ca\u5347\u7ea7\u65f6\u9700\u8981\u6ce8\u610f\u7684\u4fe1\u606f\u3002</p> <p>Note</p> <p>\u5728\u5347\u7ea7cert-manager\u4e4b\u524d\uff0c\u5efa\u8bae\u5907\u4efd\u6240\u6709cert-manager\u6e90\uff0c\u4ee5\u9632\u5728\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u95ee\u9898\u3002 \u5907\u4efd\u548c\u6062\u590dcert-manager\u7684\u64cd\u4f5c\u8bf7\u53c2\u89c1\u5907\u4efd\u548c\u6062\u590d\u6307\u5357\u3002</p> <p>We recommend that you upgrade cert-manager one minor version at a time, always choosing the latest patch version for the minor version. You should always read the release notes for the minor version to which you are upgrading. In cases where a large version jump is needed to get an installation up to date, it may be possible to do a full uninstall and re-install of cert-manager without application downtime and/or unnecessary re-issuances, however we do not guarantee that this will work for your particular setup see Reinstalling cert-manager.</p>"},{"location":"installation/upgrading/#helm","title":"\u7528 Helm \u5347\u7ea7","text":"<p>If you installed cert-manager using Helm, you can easily upgrade using the Helm CLI.</p> <p>Note: Before upgrading, please read the relevant instructions at the links below for your from and to version.</p> <p>Once you have read the relevant upgrading notes and taken any appropriate actions, you can begin the upgrade process like so - replacing <code>&lt;release_name&gt;</code> with the name of your Helm release for cert-manager (usually this is <code>cert-manager</code>) and replacing <code>&lt;version&gt;</code> with the version number you want to install.</p> <p>Add the Jetstack Helm repository (if you haven't already) and update it.</p> <pre><code>helm repo add jetstack https://charts.jetstack.io\nhelm repo update jetstack\n</code></pre> <p>The helm upgrade command will upgrade cert-manager to the specified or latest version of cert-manager, as listed on the cert-manager Helm chart documentation page.</p> <p>Note: You can find out your release name using <code>helm list | grep cert-manager</code>.</p>"},{"location":"installation/upgrading/#crds","title":"\u72ec\u7acb\u7ba1\u7406\u7684 CRDs","text":"<p>If you have installed the CRDs separately (instead of with the <code>--set installCRDs=true</code> option added to your Helm install command), you should upgrade your CRD resources first:</p> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/&lt;version&gt;/cert-manager.crds.yaml\n</code></pre> <p>And then upgrade the Helm chart:</p> <pre><code>helm upgrade --version &lt;version&gt; &lt;release_name&gt; jetstack/cert-manager\n</code></pre>"},{"location":"installation/upgrading/#helm-crds","title":"\u4f7f\u7528 helm \u7ba1\u7406 CRDs","text":"<p>If you have installed the CRDs together with the helm install command, you should include CRD resources when upgrading the Helm chart:</p> <pre><code>helm upgrade --set installCRDs=true --version &lt;version&gt; &lt;release_name&gt; jetstack/cert-manager\n</code></pre>"},{"location":"installation/upgrading/#_2","title":"\u4f7f\u7528\u9759\u6001\u6e05\u5355\u5347\u7ea7","text":"<p>If you installed cert-manager using the static deployment manifests published on each release, you can upgrade them in a similar way to how you first installed them.</p> <p>Note: Before upgrading, please read the relevant instructions at the links below Note: for your from and to version.</p> <p>Once you have read the relevant notes and taken any appropriate actions, you can begin the upgrade process like so - replacing <code>&lt;version&gt;</code> with the version number you want to install:</p> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/&lt;version&gt;/cert-manager.yaml\n</code></pre> <p>Once you have deployed the new version of cert-manager, you can verify the installation.</p>"},{"location":"installation/upgrading/#cert-manager","title":"\u91cd\u65b0\u5b89\u88c5 cert-manager","text":"<p>In some cases there may be a need to do a full uninstall and re-install of cert-manager. An example could be when a very old cert-manager version needs to be brought up to date and it isn't feasible to upgrade one minor version at a time, which is our default recommended upgrade strategy.</p> <p>If cert-manager <code>CustomResourceDefinition</code>s are also uninstalled, this will mean loss of associated cert-manager custom resources such as <code>Certificate</code>s. The main concern associated with this is application downtime and unnecessary certificate reissuance, that could happen if <code>Secret</code>s with the X.509 certificates get deleted. You can use <code>--enable-certificate-owner-ref</code> flag on the cert-manager controller to configure whether the <code>Secret</code>s should be deleted. If this flag is set to true, each <code>Secret</code> will have an owner reference to the <code>Certificate</code> for which it was created and when the <code>Certificate</code> is deleted, the <code>Secret</code> will be garbage collected. The default value for this flag is false. If the <code>Certificate</code>s get deleted and re-applied, but the <code>Secret</code>s remain in the cluster, the newly applied <code>Certificate</code>s should be able to pick up the same <code>Secret</code>s and should not unnecessarily reissue the X.509 certs.</p> <p>When uninstalling and re-installing in order to upgrade, you should still read through the release notes for each skipped version.</p> <p>Some things to look out for when considering uninstalling and re-installing cert-manager including the CRDs:</p> <ul> <li>Is <code>--enable-certificate-owner-ref</code> flag currently set to true or could it have been set to true at some point previously? Due to an earlier bug, the owner reference that gets added to <code>Secret</code>s is not removed when the value of <code>--enable-certificate-owner-ref</code> is changed from true to false, see <code>cert-manager#4788</code></li> <li>Are there currently any certificate issuances in progress? If so, with the custom resources deleted, the progress will be lost. This could potentially cause duplicated issuances.</li> <li>Is there a need to convert cert-manager custom resource manifests to v1 API? You can use <code>cmctl convert</code> command to do that.</li> </ul>"},{"location":"installation/upgrading/ingress-class-compatibility/","title":"\u5173\u4e8e\u5165\u7c7b\u517c\u5bb9\u6027\u7684\u8bf4\u660e","text":"<p>'cert-manager installation: Notes on ingress classes and safe upgrades'</p> <p>\u5728 cert-manager v1.5.4 \u4e2d\uff0c\u6211\u4eec\u5bf9 HTTP-01 \u4ee3\u7801\u8fdb\u884c\u4e86\u66f4\u6539\uff0c\u5b83\u4e0d\u5411\u540e\u517c\u5bb9\u3002 \u53c2\u89c1[\u56de\u5f52:HTTP-01 \u6311\u6218\u5931\u8d25\u4e0e Istio, Traefik, ingress-gce \u548c Azure AGIC]\u3002</p> <p>In v1.5.5, v1.6.2 and 1.7.1 we fixed this problem.</p> <p>If you have cert-manager v1.5.3 (or below) you should skip v1.5.4 and instead:</p> <ul> <li>upgrade to v1.5.5</li> <li>then the newest version of cert-manager 1.6</li> <li>and then the newest version of cert-manager 1.7</li> </ul> <p>and you can ignore the rest of this document.</p> <p>The following notes apply to anyone upgrading from cert-manager v1.5.4, v1.6.0, v1.6.1 on Kubernetes v1.19 or later.</p>"},{"location":"installation/upgrading/ingress-class-compatibility/#background","title":"Background","text":"<p>cert-manager 1.5 was released to coincide with Kubernetes 1.22, which removed the <code>v1beta1</code> Ingress API. As cert-manager creates Ingress resources to solve HTTP-01 challenges, this code path needed to be updated.</p> <p>In the <code>v1beta1</code> spec, Ingress Class was a string annotation that was adopted by all popular Ingress controllers by convention. In the <code>v1</code> spec, <code>IngressClass</code> is now its own resource type, and the <code>.spec.ingressClassName</code> field on <code>v1</code> Ingresses is now a reference to that object. As the Kubernetes documentation points out, the old and new specs are not directly equivalent.</p> <p>During the 1.5 and 1.6 cert-manager release cycles, we discovered that ingress controllers have handled the graduation of Ingress to <code>v1</code> differently. Some treat the class as an opaque string, similarly to the annotation. Some were unintentionally broken, as their default ingress class name contains characters that are disallowed in object references, e.g. (<code>/</code>). Some now require you to create an <code>IngressClass</code> object matching the field to work.</p> <p>cert-manager aims to be compatible with as many ingress controllers as possible. According to the Ingress v1 Kubernetes enhancement proposal, the deprecated annotation, if present, takes precedence over the new field. From our perspective, the option that maintains the highest compatibility is to only use the annotation, even when creating <code>v1</code> Ingresses.</p>"},{"location":"installation/upgrading/ingress-class-compatibility/#notes-for-specific-ingress-controllers","title":"Notes For Specific Ingress Controllers","text":""},{"location":"installation/upgrading/ingress-class-compatibility/#ingress-nginx","title":"ingress-nginx","text":"<p>If you chose not to use the IngressClass <code>nginx</code> that is created by default by the Helm chart (e.g., you named the IngressClass <code>nginx-outside</code>), you will need to add the flags <code>--ingress-class</code> and <code>--ingress-class-by-name</code> to your ingress-nginx deployment:</p> <pre><code>--ingress-class=nginx-outside --ingress-class-by-name=true\n</code></pre> <p>In case you are using the Helm chart, you will need to use at least these values:</p> <pre><code>ingressClassResource:\nname: nginx-outside\ncontrollerValue: k8s.io/ingress-nginx-outside\ningressClassByName: true\ningressClass: nginx-outside\n</code></pre>"},{"location":"installation/upgrading/ingress-class-compatibility/#istio","title":"Istio","text":"<p>If you are using Istio and you had to create an IngressClass while migrating to cert-manager 1.5 or 1.6 and you chose to create an IngressClass that isn't named <code>istio</code> (e.g., you named it <code>istio-internal</code>), you will need to change the <code>class</code> field on those Issuers back to <code>istio</code>.</p>"},{"location":"installation/upgrading/ingress-class-compatibility/#traefik","title":"Traefik","text":"<p>If you are using Traefik and you had to create an IngressClass while migrating to cert-manager 1.5 or 1.6 and the IngressClass you created isn't named <code>traefik</code> (for example, you called the IngressClass <code>traefik-external</code>), you will need to add a command-line argument to your Traefik deployment:</p> <pre><code>--providers.kubernetesingress.ingressclass=traefik-external\n</code></pre>"},{"location":"installation/upgrading/ingress-class-compatibility/#ambassador","title":"Ambassador","text":"<p>If you are using Ambassador and you had to create an IngressClass while migrating to cert-manager 1.5 or 1.6, and the IngressClass you created isn't named <code>ambassador</code> (e.g., <code>ambassador-internal</code>), you will need to change the <code>class</code> field on the affected Issuers back to <code>ambassador</code>.</p>"},{"location":"installation/upgrading/remove-deprecated-apis/","title":"\u8fc1\u79fb\u5e9f\u5f03\u7684 API \u6e90","text":"<p>'cert-manager installation: Removal of deprecated APIs'</p> <p>The following cert-manager APIs were deprecated in cert-manager <code>v1.4</code>:</p> <ul> <li><code>cert-manager.io/v1alpha2</code></li> <li><code>cert-manager.io/v1alpha3</code></li> <li><code>cert-manager.io/v1beta1</code></li> <li><code>acme.cert-manager.io/v1alpha2</code></li> <li><code>acme.cert-manager.io/v1alpha3</code></li> <li><code>acme.cert-manager.io/v1beta1</code></li> </ul> <p>These APIs are no longer served in cert-manager 1.6 and are fully removed in cert-manager 1.7. If you have a cert-manager installation that is using or has previously used these deprecated APIs you might need to upgrade your cert-manager custom resources and CRDs. This should be done before upgrading to cert-manager 1.6 or later.</p>  An earlier version of this document listed a number of kubectl commands to run to migrate resources. These steps have now been encoded in [`cmctl upgrade migrate-api-version` command](../../reference/cmctl.md#migrate-api-version). If you have already run the kubectl commands, your resources should have been migrated and there should be no need to also run the `cmctl` command. However, if you are not sure, you can still run the `cmctl` command as well- it will be a no-op if no actions are needed."},{"location":"installation/upgrading/remove-deprecated-apis/#upgrading-existing-cert-manager-resources","title":"Upgrading existing cert-manager resources","text":"<ol> <li> <p>Familiarize yourself with the official Kubernetes documentation on CRD versioning.</p> </li> <li> <p>Make sure your cert-manager deployment is currently at version <code>v1.0</code> or later.</p> </li> <li> <p>Make sure that any cert-manager custom resource manifests that refer to the deprecated APIs are updated to use the <code>cert-manager.io/v1</code> API and re-applied. You can use the cmctl convert commandto convert manifests.</p> </li> <li> <p>Run the command <code>cmctl upgrade migrate-api-version</code>. It automates the steps described in Upgrade existing objects to a new stored version.</p> </li> </ol>"},{"location":"installation/upgrading/upgrading-0.10-0.11/","title":"Upgrading from v0.10 to v0.11","text":"<p>The <code>v0.11</code> release marks the removal of the <code>v1alpha1</code> API that was used in previous versions of cert-manager, as well as our API group changing to be <code>cert-manager.io</code> instead of <code>certmanager.k8s.io</code>.</p> <p>We have also removed support for the old configuration format that was deprecated in the <code>v0.8</code> release. This means you must transition to using the new <code>solvers</code> style configuration format for your ACME issuers before upgrading to <code>v0.11</code>. For more information, see the upgrading to <code>v0.8</code> guide.</p> <p>This makes for a fairly significant breaking change for users, as all cert-manager resources, or even Ingresses that reference cert-manager resources, will need to be updated to reflect these changes.</p> <p>This upgrade should be performed in a few steps:</p> <ol> <li> <p>Back up existing cert-manager resources, as per the    backup and restore guide.</p> </li> <li> <p>Uninstall cert-manager.</p> </li> <li> <p>Ensure the old cert-manager CRD resources have also been deleted: <code>kubectl get crd | grep certmanager.k8s.io</code></p> </li> <li> <p>Update the <code>apiVersion</code> on all your backed up resources from    <code>certmanager.k8s.io/v1alpha1</code> to <code>cert-manager.io/v1alpha2</code>.</p> </li> <li> <p>Re-install cert-manager from scratch according to the installation    guide.</p> </li> </ol> <p>You must be sure to properly backup, uninstall, re-install and restore your installation in order to ensure the upgrade is successful.</p>"},{"location":"installation/upgrading/upgrading-0.10-0.11/#additional-annotation-changes","title":"Additional annotation changes","text":"<p>As well as changing the API group used by our CRDs, we have also changed the annotation-based configuration key to also reflect the new API group.</p> <p>This means that if you use any cert-manager annotations on any of your other resources (such as Ingresses, <code>{Validating,Mutating}WebhookConfiguration</code>, etc) you will need to update them to reflect the new API group.</p> <p>A full table of annotations, including the old and new equivalents:</p> Old Annotation New Annotation <code>certmanager.k8s.io/acme-http01-edit-in-place</code> <code>acme.cert-manager.io/http01-edit-in-place</code> <code>certmanager.k8s.io/acme-http01-ingress-class</code> <code>acme.cert-manager.io/http01-ingress-class</code> <code>certmanager.k8s.io/issuer</code> <code>cert-manager.io/issuer</code> <code>certmanager.k8s.io/cluster-issuer</code> <code>cert-manager.io/cluster-issuer</code> <code>certmanager.k8s.io/acme-challenge-type</code> <code>DEPRECATED</code> <code>certmanager.k8s.io/acme-dns01-provider</code> <code>DEPRECATED</code> <code>certmanager.k8s.io/alt-names</code> <code>cert-manager.io/alt-names</code> <code>certmanager.k8s.io/ip-sans</code> <code>cert-manager.io/ip-sans</code> <code>certmanager.k8s.io/common-name</code> <code>cert-manager.io/common-name</code> <code>certmanager.k8s.io/issuer-name</code> <code>cert-manager.io/issuer-name</code> <code>certmanager.k8s.io/issuer-kind</code> <code>cert-manager.io/issuer-kind</code> <p>You can use the following bash magic to print a list of Ingress resources that still contain an old annotation:</p> <pre><code>$ kubectl get ingress \\\n--all-namespaces \\\n-o json | \\\njq '.items[] | select(.metadata.annotations| to_entries | map(.key)[] | test(\"certmanager\")) | \"Ingress resource \\(.metadata.namespace)/\\(.metadata.name) contains old annotations: (\\( .metadata.annotations | to_entries | map(.key)[] | select( . | test(\"certmanager\") )  ))\"'\nIngress resource \"demo/testcrt contains old annotations: (certmanager.k8s.io/cluster-issuer)\"\nIngress resource \"example/ingress-resource contains old annotations: (certmanager.k8s.io/cluster-issuer)\"\n</code></pre> <p>In order to help with this migration, the following CLI tool will automatically migrate these annotations for you. Note that it will not make any changes to your cluster for you.</p> <p>Firstly, download the binary for your given platform <pre><code>   $ wget -O api-migration https://github.com/cert-manager/cert-manager/releases/download/v0.11.0/api-migration-linux\n</code></pre></p> <p>Or for Darwin <pre><code>   $ wget -O api-migration https://github.com/cert-manager/cert-manager/releases/download/v0.11.0/api-migration-darwin\n</code></pre></p> <p>Mark the binary as executable and run the binary against your cluster <pre><code>$ chmod +x api-migration &amp;&amp; ./api-migration --kubeconfig /path/to/my/kubeconfig.yaml\n</code></pre></p> <p>Follow the CLI output and check for the difference that has been made in files <pre><code>$ diff ingress.yaml ingress-migrated.yaml\n</code></pre></p> <p>Finally, once the new ingress resources have been reviewed, apply the manifests <pre><code>$ kubectl apply -f ingress-migrated.yaml --kubeconfig /path/to/my/kubeconfig.yaml\n</code></pre></p> <p>You should make sure to update all Ingress resources to ensure that your certificates continue to be kept up to date.</p>"},{"location":"installation/upgrading/upgrading-0.10-0.11/#issuerclusterissuer-solvers","title":"<code>Issuer/ClusterIssuer</code> solvers","text":"<p>Support for the deprecated <code>spec.http01</code> or <code>spec.dns01</code> fields in <code>Issuer</code> and <code>ClusterIssuer</code> have been removed. Any <code>Issuer</code> or <code>ClusterIssuer</code> objects must be converted to use the equivalent <code>spec.solvers[].http01</code> or <code>spec.solvers[].dns01</code> syntax. You can read more about the Issuer resource in the configuration documentation.</p> <p>Any issuers that haven't been converted will result the <code>cert-manager</code> pod being unable to find any solvers at the expected location. This will result in errors like the following: <code>no configured challenge solvers can be used for this challenge</code></p>"},{"location":"installation/upgrading/upgrading-0.11-0.12/","title":"Upgrading from v0.11 to v0.12","text":"<p>The focus of this release has been on stability and bug fixes, as well as overhauling and improving the documentation website. As such, there has been minimal changes that effect end users bar two changes which require action when upgrading.</p> <p>After addressing the following points, you should then follow the standard upgrade process here.</p>"},{"location":"installation/upgrading/upgrading-0.11-0.12/#changes-to-the-vault-kubernetes-auth-mount-path","title":"Changes to the Vault Kubernetes Auth Mount Path","text":"<p>If you are using Kubernetes authentication for Vault <code>Issuers</code> then there has been a change to the required mount path. This value now requires the entire mount path. For example, if the previous path had been set to <code>kubernetes</code>, the new path will now require <code>/v1/auth/kubernetes</code>. You can read why this change was made here.</p>"},{"location":"installation/upgrading/upgrading-0.11-0.12/#removal-of-the-webhook-api-service","title":"Removal of the Webhook API service","text":"<p>The Webhook component now no longer makes use of a Kubernetes <code>APIService</code>, and as such, should be removed. This action is only required if you have installed cert-manager using static manifests. The following command will delete the service and can be done before or after applying the upgrade.</p> <pre><code>$ kubectl delete apiservice v1beta1.webhook.cert-manager.io\n</code></pre>"},{"location":"installation/upgrading/upgrading-0.12-0.13/","title":"Upgrading from v0.12 to v0.13","text":"<p>When upgrading from <code>v0.12</code> to <code>v0.13</code>, no special upgrade steps are required. Follow the regular upgrade process here.</p>"},{"location":"installation/upgrading/upgrading-0.13-0.14/","title":"Upgrading from v0.13 to v0.14","text":"<p>Due to changes in the Deployment selector you will need to remove the deployments first before being able to upgrade.</p> <p>You should run the following before upgrading: <pre><code>$ kubectl delete -n cert-manager deployment cert-manager cert-manager-cainjector cert-manager-webhook\n</code></pre></p> <p>If you're using Helm to install cert-manager with a deployment name different than <code>cert-manager</code> you might need to change the deployment names in the command above.</p> <p>This will delete the deployment so they can be replaced when you apply the upgrade. This step will not affect any existing certificates but will stop renewal or new issuance while upgrading.</p> <p>Version <code>v0.14</code> now comes in 2 versions of static manifests, you will need to use the correct new one:</p> <ul> <li>Kubernetes 1.15 or higher: you can use the normal <code>cert-manager.yaml</code></li> <li>Kubernetes 1.14 or lower: you have to now use the <code>cert-manager-legacy.yaml</code> version</li> <li>OpenShift 4: you can now use the normal <code>cert-manager.yaml</code></li> <li>OpenShift 3: you have to now use the <code>cert-manager-legacy.yaml</code> version instead of the OpenShift version</li> </ul> <p>Note: If you're using the <code>cert-manager-legacy.yaml</code> version you will not have API version conversion and thus only support <code>cert-manager.io/v1alpha2</code> API resources.</p> <p>The webhook is now a required component, meaning that <code>no-webhook</code> variant of the manifests are no longer available in this release. Please use the appropriate manifests as mentioned above according to your Kubernetes version.</p> <p>From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-0.14-0.15/","title":"Upgrading from v0.14 to v0.15","text":""},{"location":"installation/upgrading/upgrading-0.14-0.15/#new-installcrds-addition","title":"New <code>installCRDs</code> addition","text":"<p>If you're using Helm to install cert-manager you now have the option <code>installCRDs</code>. This will let Helm install CRDs like other cluster resources. If you deployed cert-manager before do NOT use this option as it does not support upgrading from manually installed CRDs.</p> <p>Note: If enabled, when uninstalling, CRD resources will be deleted causing all installed custom resources to be DELETED.</p>"},{"location":"installation/upgrading/upgrading-0.14-0.15/#removal-of-00-crdsyaml-file","title":"Removal of <code>00-crds.yaml</code> file","text":"<p>As part of changes to the way we publish release artifacts, the <code>00-crds.yaml</code> file is no longer made available as part of our repository.</p> <p>You can now find the appropriate version of the CRD resources to install attached to the GitHub release. You will need to select the appropriate 'legacy' or full manifest variant depending on the Kubernetes or OpenShift version you are running.</p> <p>From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-0.15-0.16/","title":"Upgrading from v0.15 to v0.16","text":""},{"location":"installation/upgrading/upgrading-0.15-0.16/#issue-with-older-versions-of-kubectl","title":"Issue with older versions of <code>kubectl</code>","text":"<p><code>kubectl</code> versions with patch versions lower than <code>v1.18.8</code> <code>v1.17.11</code> or <code>v1.16.14</code> have issues updating the <code>v0.16</code> CRD files, due to a bug when handling deeply nested CRDs. This bug will make <code>kubectl apply -f [...]</code> hang. </p> <p>This bug only happens during a re-apply of the v0.16 CRDs. Initial upgrade does not cause issues. If you have this issue please upgrade your <code>kubectl</code> to the latest patch release. Versions of <code>kubectl</code> of <code>v1.15.x</code> or below are not being supported anymore as these are unsupported by the Kubernetes community.</p>"},{"location":"installation/upgrading/upgrading-0.15-0.16/#helm","title":"Helm","text":"<p>Helm users who use <code>installCRDs=true</code> MUST upgrade to Helm <code>v3.3.1</code> before upgrading.</p> <p>From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-0.16-1.0/","title":"Upgrading from v0.16 to v1.0","text":"<p>The upgrade process for upgrading to <code>v1.0</code> is very Kubernetes version specific. Please check the version of your cluster using <code>kubectl version</code> and follow the steps required for your version of Kubernetes.</p>"},{"location":"installation/upgrading/upgrading-0.16-1.0/#issue-with-older-versions-of-kubectl","title":"Issue with older versions of <code>kubectl</code>","text":"<p><code>kubectl</code> versions with patch versions lower than <code>v1.18.8</code> <code>v1.17.11</code> or <code>v1.16.14</code> have issues updating from the <code>v0.16</code> CRD files, due to a bug when handling deeply nested CRDs. This bug will make <code>kubectl apply -f [...]</code> hang.</p> <p>This bug only happens during a re-apply of the v0.16 CRDs or upgrading from it. Upgrades from lower versions do not cause issues. If you have this issue please upgrade your <code>kubectl</code> to the latest patch release. Versions of <code>kubectl</code> of <code>v1.15.x</code> or below are not being supported anymore as these are unsupported by the Kubernetes community.</p>"},{"location":"installation/upgrading/upgrading-0.16-1.0/#helm","title":"Helm","text":"<p>Helm users who use <code>installCRDs=true</code> MUST upgrade to Helm <code>v3.3.1</code> or later before upgrading.</p>"},{"location":"installation/upgrading/upgrading-0.16-1.0/#upgrade-instructions-per-kubernetes-version","title":"Upgrade instructions per Kubernetes version","text":""},{"location":"installation/upgrading/upgrading-0.16-1.0/#kubernetes-116-and-above","title":"Kubernetes <code>1.16</code> and above","text":"<p>These are the upgrade instructions to upgrade from cert-manager <code>v0.14.0</code> or higher, please consult other upgrade guides first before upgrading to <code>v1.0</code> if you run an older version of cert-manager.</p> <p>No special requirements, you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-0.16-1.0/#kubernetes-115x","title":"Kubernetes <code>1.15.x</code>","text":"<p>cert-manager now uses <code>apiextensions.k8s.io/v1</code> to install CRDs inside Kubernetes. This got added in Kubernetes <code>1.16</code>. Our legacy installation will still be using <code>apiextensions.k8s.io/v1beta1</code>. For this reason Kubernetes 1.15 users now need to install the legacy version of the cert-manager manifests. You can follow the instructions of \"Kubernetes 1.14\" below on how to upgrade to the legacy version of <code>v1.0</code>.</p> <p>Note: The legacy version only supports a single CRD version. We advise you to consider upgrading to Kubernetes 1.16 or above for an easier migration.</p>"},{"location":"installation/upgrading/upgrading-0.16-1.0/#kubernetes-114-and-below","title":"Kubernetes <code>1.14</code> and below","text":"<p>These are the upgrade instructions to upgrade from cert-manager <code>v0.11.0</code> or higher, please consult other upgrade guides first before upgrading to <code>v1.0</code> if you run an older version of cert-manager.</p> <p>Note: Due to the lack of support for conversion webhooks in your Kubernetes version this will not be an easy migration. We advise you to consider upgrading to Kubernetes 1.16 or higher before upgrading. Upgrading your Kubernetes cluster might be easier than upgrading cert-manager.</p> <p>We have released our <code>cert-manager.io/v1</code> API that replaces <code>cert-manager.io/v1alpha2</code>. Since the legacy version for Kubernetes 1.15 and below only supports one CRD version you have to transition all resources to <code>cert-manager.io/v1</code>.</p> <p>This makes for a fairly significant breaking change for users, as all cert-manager resources will need to be updated to reflect these changes. Ingress annotations will stay the same, this means if you only use ingress-shim you do not have to convert these resources over but it is recommended. However you should convert the (Cluster)Issuers and delete the old CRD versions.</p> <p>This upgrade MUST be performed in the following sequence of steps:</p> <ol> <li> <p>Back up existing cert-manager resources. See the backup section.</p> </li> <li> <p>Uninstall cert-manager.</p> </li> <li> <p>Update the <code>apiVersion</code> on all your backed up resources from    <code>cert-manager.io/v1alpha2</code> to <code>cert-manager.io/v1</code>. See the converting section for that.</p> </li> <li> <p>Ensure the old cert-manager CRD resources have also been deleted: <code>kubectl get crd | grep cert-manager.io</code></p> </li> <li> <p>Re-install cert-manager <code>v1.0</code> from scratch according to the installation    guide.</p> </li> <li> <p>Apply the backed up resources again.</p> </li> </ol> <p>You must be sure to properly backup, uninstall, re-install and restore your installation in order to ensure the upgrade is successful.</p>"},{"location":"installation/upgrading/upgrading-0.16-1.0/#backing-up-resources","title":"Backing up resources","text":"<p>You can backup the custom resources you or cert-manager created using the following <code>kubectl</code> command:</p> <pre><code>kubectl get -o yaml \\\n--all-namespaces \\\nissuer,clusterissuer,certificates,certificaterequests &gt; cert-manager-backup.yaml\n</code></pre> <p>Note that this will not export private keys or secrets.</p>"},{"location":"installation/upgrading/upgrading-0.16-1.0/#converting-resources","title":"Converting resources","text":"<p>You can use our kubectl plugin to automatically convert your backup from <code>v1alpha2</code> to <code>v1</code> using the following command:</p> <pre><code>kubectl cert-manager convert --output-version cert-manager.io/v1 -f cert-manager-backup.yaml &gt; cert-manager-v1.yaml\n</code></pre> <p>Tip: you can use <code>kubectl apply --dry-run</code> on a local/test cluster with cert-manager <code>v1.0</code> installed to validate your conversion</p>"},{"location":"installation/upgrading/upgrading-0.16-1.0/#uninstall-cert-manager","title":"Uninstall cert-manager","text":"<p>Next step is to uninstall cert-manager. This will cause a temporary halt to renewal of certificates but will not affect any TLS traffic.</p> <p>How you do this depends on how you installed cert-manager.</p> <p>Using Helm:</p> <pre><code>$ helm --namespace cert-manager delete cert-manager\n</code></pre> <p>Using <code>kubectl</code>:</p> <pre><code>kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/vX.Y.Z/cert-manager.yaml\n</code></pre> <p>Make sure you also delete the CRDs. This will delete all cert-manager resources, so make sure your backup is complete. You can do this manually by executing the following commands:</p> <pre><code>kubectl delete crd certificaterequests.cert-manager.io\nkubectl delete crd certificates.cert-manager.io\nkubectl delete crd challenges.acme.cert-manager.io\nkubectl delete crd clusterissuers.cert-manager.io\nkubectl delete crd issuers.cert-manager.io\nkubectl delete crd orders.acme.cert-manager.io\n</code></pre> <p>For more info see the uninstall cert-manager guide.</p>"},{"location":"installation/upgrading/upgrading-0.16-1.0/#reinstall-and-restore","title":"Reinstall and restore","text":"<p>To install cert-manager again you can follow the normal installation guide.</p> <p>Once it has been fully installed you can re-apply the converted resources:</p> <pre><code>kubectl apply -f cert-manager-v1.yaml\n</code></pre> <p>Congratulations you're now fully upgraded to cert-manager <code>v1.0</code></p>"},{"location":"installation/upgrading/upgrading-0.2-0.3/","title":"Upgrading from v0.2 to v0.3","text":"<p>During the <code>v0.3</code> release, a number of breaking changes were made that require you to update either deployment configuration and runtime configuration (e.g. <code>Certificate</code>, <code>Issuer</code> and <code>ClusterIssuer</code> resources).</p> <p>After reading these instructions, you should then proceed to upgrade cert-manager according to your deployment configuration (e.g. using <code>helm upgrade</code> if installing via Helm chart, or <code>kubectl apply</code> if installing with raw manifests).</p> <p>A brief summary:</p> <ul> <li> <p>Supporting resources for <code>ClusterIssuers</code> (e.g. signing CA certificates, or   ACME account private keys) will now be stored in the same namespace as   cert-manager, instead of <code>kube-system</code> in previous versions (#329, <code>@munnerz</code>)</p> </li> <li> <p>Switch to <code>ConfigMaps</code> instead of Endpoints for leader election (#327, <code>@mikebryant</code>)</p> </li> <li> <p>Removing support for ACMEv1 in favor of ACMEv2 (#309, <code>@munnerz</code>)</p> </li> <li> <p>Removing ingress-shim and compiling it into cert-manager itself (#502, <code>@munnerz</code>)</p> </li> <li> <p>Change to the default behavior of ingress-shim. It now generates Certificates   with the <code>ingressClass</code> field set instead of the <code>ingress</code> field. This will   mean users of ingress controllers that assign a single IP to a single Ingress (e.g.   the GCE ingress controller) will no longer work without adding a new annotation   to your ingress resource.</p> </li> </ul>"},{"location":"installation/upgrading/upgrading-0.2-0.3/#supporting-resources-for-clusterissuers-moving-into-the-cert-manager-namespace","title":"Supporting resources for <code>ClusterIssuers</code> moving into the cert-manager namespace","text":"<p>In the past, the cert-manager controller was hard coded to look for supplemental resources, such as Secrets containing DNS provider credentials, in the <code>kube-system</code> namespace.</p> <p>We now store these resources in the same namespace as the cert-manager pod itself runs within.</p> <p>When upgrading, you should make sure to move any of these supplemental resources into the cert-manager deployment namespace, or otherwise deploy cert-manager into <code>kube-system</code> itself.</p> <p>You can also change the 'cluster resource namespace' when deploying cert-manager:</p> <p>With the helm chart: <code>--set clusterResourceNamespace=kube-system</code>.</p> <p>Or if using the static deployment manifests, by adding the <code>--cluster-resource-namespace</code> flag to the <code>args</code> field of the cert-manager container.</p>"},{"location":"installation/upgrading/upgrading-0.2-0.3/#switch-to-configmaps-instead-of-endpoints-for-leader-election","title":"Switch to <code>ConfigMaps</code> instead of Endpoints for leader election","text":"<p>cert-manager-controller performs leader election to allow you to run 'hot standby' replicas of cert-manager.</p> <p>In the past, we used Endpoint resources to perform this election. The new best practice is to use <code>ConfigMap</code> resources in order to reduce API overhead in large clusters.</p> <p>As such, <code>v0.3</code> switches us to use <code>ConfigMap</code> resources for leader election.</p> <p>During the upgrade, you should first scale your cert-manager-controller deployment to 0 to ensure no other replicas of cert-manager are running when the new <code>v0.3</code> deployment starts:</p> <pre><code>$ kubectl scale --namespace &lt;deployment-namespace&gt; --replicas=0 deployment &lt;cert-manager-deployment-name&gt;\n</code></pre>"},{"location":"installation/upgrading/upgrading-0.2-0.3/#removing-support-for-acmev1-in-favor-of-acmev2","title":"Removing support for ACMEv1 in favor of ACMEv2","text":"<p>The ACME <code>v2</code> specification is now in production with Let's Encrypt. In order to support this new spec, which includes support for wildcard certificates, we have removed support for the <code>v1</code> protocol altogether.</p> <p>If you have any ACME Issuer or <code>ClusterIssuer</code> resources, you should update the server fields of these to the new ACMEv2 endpoints.</p> <p>For example, if you have a Let's Encrypt production issuer, you should update the server URL:</p> <pre><code>apiVersion: certmanager.k8s.io/v1alpha2\nkind: Issuer\n...\nspec:\nacme:\n# server: https://acme-v01.api.letsencrypt.org/directory\nserver: https://acme-v02.api.letsencrypt.org/directory # we switch 'v01' to 'v02'\n</code></pre>"},{"location":"installation/upgrading/upgrading-0.2-0.3/#removing-ingress-shim-and-compiling-it-into-cert-manager-itself","title":"Removing ingress-shim and compiling it into cert-manager itself","text":"<p>In <code>v0.3</code> we removed the ingress-shim component and instead now compile in its functionality into the main cert-manager binary.</p> <p>This change also introduces a change to the way you configure default Issuers and <code>ClusterIssuers</code> at deployment time.</p> <p>The deployment documentation has been updated accordingly, but instead of setting <code>ingressShim.extraArgs={--default-issuer-name=letsencrypt-pod}</code> there are now dedicated Helm chart fields:</p> <pre><code>  --set ingressShim.defaultIssuerName=letsencrypt-prod \\\n--set ingressShim.defaultIssuerKind=ClusterIssuer\n</code></pre>"},{"location":"installation/upgrading/upgrading-0.2-0.3/#change-to-the-default-behavior-of-ingress-shim","title":"Change to the default behavior of ingress-shim","text":"<p>In the past, when using ingress-shim, we set the <code>ingress</code> field on the Certificate resource to trigger cert-manager to edit the specified Ingress resource to solve the challenge.</p> <p>The alternate option is to set the <code>ingressClass</code> field, which causes cert-manager to create temporary Ingress resources to solve the challenge. This behavior provides better compatibility with ingress controllers like <code>nginx-ingress</code>.</p> <p>In <code>v0.3</code> we have changed the default behavior of ingress-shim to set the <code>ingressClass</code> field instead of <code>ingress</code>.</p> <p>This will cause validations for ingress controllers like <code>ingress-gce</code> to fail without additional configuration in your Ingress resources annotations.</p> <p>Add the follow annotation to your Ingress resources if you are using the GCE ingress controller, in addition to the usual ingress-shim annotation(s):</p>"},{"location":"installation/upgrading/upgrading-0.3-0.4/","title":"Upgrading from v0.3 to v0.4","text":"<p>There are no special notes or considerations when upgrading from <code>v0.3</code> to <code>v0.4</code>.</p>"},{"location":"installation/upgrading/upgrading-0.4-0.5/","title":"Upgrading from v0.4 to v0.5","text":"<p>Version 0.5 of cert-manager introduces a new 'webhook' component, which is used by the Kubernetes apiserver to validate our CRD resource types.</p> <p>This should help in future to reduce errors caused by misconfigured Certificate and Issuer resources.</p> <p>When upgrading from a previous release using Helm, it is essential that you perform one extra step before upgrading.</p>"},{"location":"installation/upgrading/upgrading-0.4-0.5/#disabling-resource-validation-on-the-cert-manager-namespace","title":"Disabling resource validation on the cert-manager namespace","text":"<p>Before upgrading, you should add the <code>certmanager.k8s.io/disable-validation: \"true\"</code> label to the <code>cert-manager</code> namespace.</p> <p>This will allow the system resources that cert-manager requires to bootstrap TLS to be created in its own namespace.</p>"},{"location":"installation/upgrading/upgrading-0.5-0.6/","title":"Upgrading from v0.5 to v0.6","text":"<p>Warning: If you are upgrading from a release older than <code>v0.5</code>, please read the Upgrading from older versions using Helm note at the bottom of this document!</p> <p>The upgrade process from <code>v0.5</code> to <code>v0.6</code> should be fairly seamless for most users. As part of the new release, we have changed how we ship the <code>CustomResourceDefinition</code> resources that cert-manager needs in order to operate (as well as introducing two new CRD types).</p> <p>Depending on the way you have installed cert-manager in the past, your upgrade process will slightly vary:</p>"},{"location":"installation/upgrading/upgrading-0.5-0.6/#upgrading-with-the-helm-chart","title":"Upgrading with the Helm chart","text":"<p>If you have previously deployed cert-manager <code>v0.5</code> using the Helm installation method, you will now need to perform one extra step before upgrading.</p> <p>Due to issues with the way Helm handles CRD resources in Helm charts, we have now moved the installation of these resources into a separate YAML manifest that must be installed with <code>kubectl apply</code> before upgrading the chart.</p> <p>You can follow the regular upgrade guide as usual in order to upgrade from <code>v0.5</code> to <code>v0.6</code>.</p>"},{"location":"installation/upgrading/upgrading-0.5-0.6/#upgrading-with-static-manifests","title":"Upgrading with static manifests","text":"<p>The static manifests have moved into the <code>deploy/manifests</code> directory for this release.</p> <p>We now also no longer ship different manifests for different configurations, in favor of a single <code>cert-manager.yaml</code> file which should work for all Kubernetes clusters from Kubernetes <code>v1.9</code> onward.</p> <p>You can follow the regular upgrade guide as  usual in order to upgrade from <code>v0.5</code> to <code>v0.6</code>.</p>"},{"location":"installation/upgrading/upgrading-0.5-0.6/#upgrading-from-older-versions-using-helm","title":"Upgrading from older versions using Helm","text":"<p>If you are upgrading from a version older than <code>v0.5</code> and have installed with Helm, you will need to perform a fresh installation of cert-manager due to issues with the Helm upgrade process. This will involve the removal of all cert-manager custom resources. This will not delete the Secret resources being used by your apps.</p> <p>Before upgrading you will need to:</p> <ol> <li> <p>Read and follow the backup guide to create a    backup of your configuration.</p> </li> <li> <p>Delete the existing cert-manager Helm release (replacing 'cert-manager' with    the name of your Helm release):</p> </li> </ol> <p>Uninstall the Helm chart. <pre><code>$ helm delete --purge cert-manager\n</code></pre></p> <p>Ensure the cert-manager <code>CustomResourceDefinition</code> resources do not exist: <pre><code>$ kubectl delete crd \\\ncertificates.certmanager.k8s.io \\\nissuers.certmanager.k8s.io \\\nclusterissuers.certmanager.k8s.io\n</code></pre></p> <ol> <li>Perform a fresh install (as per the installation guide</li> </ol> <p>Install the cert-manager CRDs <pre><code>    $ kubectl apply \\\n-f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.6/deploy/manifests/00-crds.yaml\n</code></pre></p> <p>Update helm repository cache <pre><code>$ helm repo update\n</code></pre></p> <p>Install cert-manager <pre><code>$ helm install \\\n--name cert-manager \\\n--namespace cert-manager \\\n--version v0.6.6 \\\nstable/cert-manager\n</code></pre></p> <ol> <li> <p>Follow the steps in the restore guide to    restore your configuration.</p> </li> <li> <p>Verify that your Issuers and Certificate resources are 'Ready':</p> </li> </ol> <pre><code>$ kubectl get clusterissuer,issuer,certificates --all-namespaces\nNAMESPACE      NAME                               READY   SECRET                             AGE\ncert-manager   cert-manager-webhook-ca            True    cert-manager-webhook-ca            1m\ncert-manager   cert-manager-webhook-webhook-tls   True    cert-manager-webhook-webhook-tls   1m\nexample-com    example-com-tls                    True    example-com-tls                    11s\n</code></pre>"},{"location":"installation/upgrading/upgrading-0.6-0.7/","title":"Upgrading from v0.6 to v0.7","text":"<p>There are no special notes or considerations when upgrading from <code>v0.6</code> to <code>v0.7</code>.</p>"},{"location":"installation/upgrading/upgrading-0.7-0.8/","title":"Upgrading from v0.7 to v0.8","text":"<p>Upgrading from <code>v0.7</code> to <code>v0.8</code> is possible using the regular upgrade guide.</p> <p>All resources should continue to operate as before.</p> <p>As part of <code>v0.8</code>, a new format for configure ACME Certificate resources has been introduced. Notably, challenge solver configuration has moved from the Certificate resource (under <code>certificate.spec.acme</code>) and now resides on your configure Issuer resource, under <code>issuer.spec.acme.solvers</code>.</p> <p>This allows Certificate resources to be portable between different Issuer types.</p> <p>Both the old and the new format of configuration are supported in the <code>v0.8</code> release, so it is possible to incrementally upgrade your resources if you have a large, multi-team deployment of cert-manager that makes it complex to upgrade all manifests at once in place.</p> <p>After upgrading, it is strongly recommended that you update your ACME Issuer and Certificate resources to the new format.</p> <p>We will be removing support for the old format ahead of the 1.0 release.</p> <p>The documentation has been updated to reflect configuring using the new format, and as such, exhaustive information can be found in the document.</p>"},{"location":"installation/upgrading/upgrading-0.7-0.8/#performing-an-incremental-switch-to-the-new-format","title":"Performing an incremental switch to the new format","text":"<p>The following guide assumes you have 2 'solver types' currently in use across your cert-manager deployment - one for DNS01 and another for HTTP01 using an ingress class of <code>nginx</code>. The <code>nginx</code> based HTTP01 solver will be configured as the default solver type for Certificate resources that reference our issuer.</p> <p>You can adjust the instructions below to fit your own configuration, either with more or less solvers as appropriate.</p> <p>First, we will modify our ACME Issuer to add the new HTTP01 and DNS01 solvers. This operation will not effect any existing Certificates that already explicitly set a <code>certificate.spec.acme</code> field:</p> <pre><code>apiVersion: certmanager.k8s.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\nemail: user@example.com\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\nname: example-issuer-account-key\n# The HTTP01 and DNS01 fields are now **deprecated**.\n# We leave them in place here so that any Certificates that still\n# specify a `certificate.spec.acme` stanza will continue to operate\n# correctly.\n# cert-manager will decide which configuration to use based on whether\n# the Certificate contains a `certificate.spec.acme` stanza.\nhttp01: {}\ndns01:\nproviders:\n- name: cloudflare\ncloudflare:\nemail: my-cloudflare-acc@example.com\napiKeySecretRef:\nname: cloudflare-api-key-secret\nkey: api-key\n# Configure the challenge solvers.\nsolvers:\n# An empty selector will 'match' all Certificate resources that\n# reference this Issuer.\n- selector: {}\nhttp01:\ningress:\nclass: nginx\n- selector:\n# Any Certificate resources, or Ingress resources that use\n# ingress-shim and match the below label selector will use this\n# configured solver type instead of the default nginx based HTTP01\n# solver above.\n# You can continue to add new solver types if needed.\n# The most specific 'match' will be used.\nmatchLabels:\nuse-cloudflare-solver: \"true\"\ndns01:\n# Adjust the configuration below according to your environment.\n# You can view more example configurations for different DNS01\n# providers in the documentation: https://cert-manager.io/docs/tutorials/acme/dns-validation/\ncloudflare:\nemail: my-cloudflare-acc@example.com\napiKeySecretRef:\nname: cloudflare-api-key-secret\nkey: api-key\n</code></pre> <p>By retaining both the old and the new configuration format on the Issuer resource, we can begin the process of incrementally upgrading our Certificate resources.</p> <p>Any Certificate resources that you have manually created (i.e. not managed by ingress-shim) must then be updated to remove the <code>certificate.spec.acme</code> stanza.</p> <p>Given the above configuration, certificates will use the HTTP01 solver with the <code>nginx</code> ingress class in order to solve ACME challenges.</p> <p>If a particular certificate requires a wildcard, or you simply want to use DNS01 for that certificate instead of HTTP01, you can add the <code>use-cloudflare-solver: \"true\"</code> label to your Certificate resources and the appropriate ACME challenge solver will be used.</p>"},{"location":"installation/upgrading/upgrading-0.7-0.8/#upgrading-ingress-shim-managed-certificates-to-the-new-format","title":"Upgrading ingress-shim managed certificates to the new format","text":"<p>When using ingress-shim, cert-manager itself will create and manage your Certificate resource for you.</p> <p>In order to support both the old and the new format simultaneously, ingress-shim will continue to set the <code>certificate.spec.acme</code> field on Certificate resources it manages.</p> <p>In order to force ingress-shim to also use the new format, you must remove the old format configuration from your Issuer resources (i.e. <code>issuer.spec.acme.http01</code> and <code>issuer.spec.acme.dns01</code>).</p> <p>When ingress-shim detects that these fields are not specified, it will clear/not set the <code>certificate.spec.acme</code> field.</p> <p>If you are managing a certificate using ingress-shim that requires an alternative solver type (other than the default solver configured on the issuer which in this instance is the HTTP01 <code>nginx</code> solver), you can add labels to the Ingress resource which will be automatically copied across to the Certificate resource:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: my-test-ingress\nlabels:\nuse-cloudflare-solver: \"true\"\n</code></pre>"},{"location":"installation/upgrading/upgrading-0.7-0.8/#confirming-all-certificate-resources-are-upgraded","title":"Confirming all Certificate resources are upgraded","text":"<p>In order to check if any of your Certificate resources still have the old configuration format, you can run the following command:</p> <pre><code>$ kubectl get certificate --all-namespaces \\\n-o custom-columns=\"NAMESPACE:.metadata.namespace,NAME:.metadata.name,OWNER:.metadata.ownerReferences[0].kind,OLD FORMAT:.spec.acme\"\nNAMESPACE   NAME    OWNER    OLD FORMAT\ndefault     test    &lt;none&gt;   &lt;none&gt;\ndefault     test2   Ingress  map[config:[map[domains:[abc.com] http01:map[ingressClass:nginx]]]]\n</code></pre> <p>In the above example, we can see there are two Certificate resources.</p> <p>The <code>test</code> resource has been updated to no longer include the <code>certificate.spec.acme</code> field.</p> <p>The <code>test2</code> resource still specifies the old configuration format, however it also has an <code>OwnerReference</code> linking it to an Ingress resource. This is because the <code>test2</code> Certificate resource is managed by ingress-shim.</p> <p>As mentioned in the previous section, ingress-shim managed certificates will only switch to the new format once the old format configuration on the Issuer resource has been removed. This means we need to continue to the next section in order to remove the old format configuration altogether from Issuer resource in order for ingress-shim to automatically migrate the <code>test2</code> Certificate resource.</p>"},{"location":"installation/upgrading/upgrading-0.7-0.8/#removing-old-configuration-altogether","title":"Removing old configuration altogether","text":"<p>Once we've verified that all non-ingress-shim managed Certificate resources have been updated to not specify the <code>certificate.spec.acme</code> stanza using the command above, we can proceed to remove the <code>issuer.spec.acme.http01</code> and <code>issuer.spec.acme.dns01</code> stanzas from our Issuer resources. Once completed, the Issuer resource from the previous section should look like the following:</p> <pre><code>apiVersion: certmanager.k8s.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\nemail: user@example.com\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\nname: example-issuer-account-key\n# Configure the challenge solvers.\nsolvers:\n# An empty selector will 'match' all Certificate resources that\n# reference this Issuer.\n- selector: {}\nhttp01:\ningress:\nclass: nginx\n- selector:\n# Any Certificate resources, or Ingress resources that use\n# ingress-shim and match the below label selector will use this\n# configured solver type instead of the default nginx based HTTP01\n# solver above.\n# You can continue to add new solver types if needed.\n# The most specific 'match' will be used.\nmatchLabels:\nuse-cloudflare-solver: \"true\"\ndns01:\n# Adjust the configuration below according to your environment.\n# You can view more example configurations for different DNS01\n# providers in the documentation: https://cert-manager.io/docs/tutorials/acme/dns-validation/\ncloudflare:\nemail: my-cloudflare-acc@example.com\napiKeySecretRef:\nname: cloudflare-api-key-secret\nkey: api-key\n</code></pre> <p>After applying the above Issuer resource, you should re-run the command from the last section to verify that the remaining ingress-shim managed Certificate resources have also been updated to the new format:</p> <pre><code>$ kubectl get certificate --all-namespaces \\\n-o custom-columns=\"NAMESPACE:.metadata.namespace,NAME:.metadata.name,OWNER:.metadata.ownerReferences[0].kind,OLD FORMAT:.spec.acme\"\nNAMESPACE   NAME    OWNER    OLD FORMAT\ndefault     test    &lt;none&gt;   &lt;none&gt;\ndefault     test2   Ingress  &lt;none&gt;\n</code></pre>"},{"location":"installation/upgrading/upgrading-0.7-0.8/#manually-triggering-a-certificate-to-be-issued-to-validate-the-full-configuration","title":"Manually triggering a Certificate to be issued to validate the full configuration","text":"<p>To be certain that you've correctly configured your new Issuer/Certificate resources, it is advised you attempt to issue a new Certificate after removing the old configuration format.</p> <p>To do so, you can either:</p> <ul> <li>update the <code>secretName</code> field of an existing Certificate resource</li> <li>add an additional <code>dnsName</code> to one of your existing Certificate resources</li> <li>create a new Certificate resource</li> </ul> <p>You should ensure that your Certificates are still be issued correctly to avoid any potential issues at renewal time.</p>"},{"location":"installation/upgrading/upgrading-0.7-0.8/#special-notes-for-ingress-gce-users","title":"Special notes for <code>ingress-gce</code> users","text":"<p>Users of the <code>ingress-gce</code> ingress controller may find that their experience configuring cert-manager to solve challenges using HTTP01 validation is slightly more painful using the new format, as it requires the <code>ingressName</code> field to be specified as a distinct <code>solver</code> on the Issuer resource (as opposed to in the past where the <code>ingressName</code> could be specified as a field on the <code>Certificate</code> resource).</p> <p>This is a known issue, and a workaround is scheduled to be completed for <code>v0.9</code>.</p> <p>In the meantime, <code>ingress-gce</code> users can either choose to manually create a new solver entry per Ingress resource they want to use to solve challenges, or otherwise continue to use the old format until a suitable alternative appears in <code>v0.9</code>.</p>"},{"location":"installation/upgrading/upgrading-0.8-0.9/","title":"Upgrading from v0.8 to v0.9","text":"<p>Due to a change in the API group that cert-manager deployments use (<code>apps/v1beta1</code> to <code>apps/v1</code>), cert-manager deployments must first be deleted before applying the new version. This will cause downtime until the new version has been applied. No data loss will occur during this operation however it is always advised to backup your data during an upgrade, which you can follow here. To perform this action run:</p> <pre><code>$ kubectl delete deployments --namespace cert-manager \\\ncert-manager \\\ncert-manager-cainjector \\\ncert-manager-webhook\n</code></pre> <p>After this operation, follow the standard upgrade process as defined in the upgrade guide.</p>"},{"location":"installation/upgrading/upgrading-0.9-0.10/","title":"Upgrading from v0.9 to v0.10","text":"<p>Due to changes in the way the webhook component's TLS is bootstrapped in <code>v0.10</code>, you will need to delete your webhook's Certificate and Issuer resources.</p> <p>If you are using a deployment tool that automatically handles this (i.e. Helm), there should be no additional action to take.</p> <p>If you are using the 'static manifests' to install, you should run the following after upgrading:</p> <pre><code>$ kubectl delete -n cert-manager issuer cert-manager-webhook-ca cert-manager-webhook-selfsign\n$ kubectl delete -n cert-manager certificate cert-manager-webhook-ca cert-manager-webhook-webhook-tls\n$ kubectl delete apiservice v1beta1.admission.certmanager.k8s.io\n</code></pre> <p>The Secret resources used to contain TLS assets for the webhook are now automatically handled internally by cert-manager, so these resources are no longer required.</p>"},{"location":"installation/upgrading/upgrading-1.0-1.1/","title":"Upgrading from v1.0 to v1.1","text":"<p>When upgrading from <code>v1.0</code> to <code>v1.1</code>, no special upgrade steps are required \ud83c\udf89. From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-1.1-1.2/","title":"Upgrading from v1.1 to v1.2","text":"<p>In an effort to introduce new features whilst keeping the project maintainable, cert-manager now only supports Kubernetes down to version <code>v1.16</code>. This means the <code>legacy</code> manifests have now been removed. Some users experience issues when upgrading the legacy <code>CRD</code>s to <code>v1.2</code>. To solve this, you could replace the <code>CRD</code>s: 1. Backup <code>cert-manager</code> resources as described in the docs 2. Run <code>kubectl replace -f https://github.com/cert-manager/cert-manager/releases/download/v1.2.0/cert-manager.crds.yaml</code> to replace the CRDs. 3. Follow the standard upgrade process. You can read more about supported Kubernetes versions    here.</p> <p>In this release some features have been deprecated.  Please read the version 1.2 release notes for more details and consider whether you are using any of these deprecated features before you proceed with the upgrade.</p> <p>From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-1.2-1.3/","title":"Upgrading from v1.2 to v1.3","text":""},{"location":"installation/upgrading/upgrading-1.2-1.3/#upgrade-notes-for-users-of-the-venafi-cloud-issuer","title":"Upgrade notes for users of the Venafi Cloud Issuer","text":"<p>This release updates the Venafi Cloud Issuer to use <code>OutagePREDICT</code> instead of <code>DevOpsACCELERATE</code>.</p> <p>The only impact to Venafi Cloud users is the change in zone syntax. The zone is now <code>&lt;Application Name&gt;\\&lt;Issuing Template Alias&gt;</code> (e.g. <code>My Application\\My CIT</code>).</p>"},{"location":"installation/upgrading/upgrading-1.2-1.3/#background","title":"Background","text":"<p>Venafi are currently transitioning Venafi Cloud users to the <code>OutagePREDICT</code> (\"OP\") product, from <code>DevOpsACCELERATE</code> (\"DA\"), which will be sunset later in 2021.</p> <p>The Venafi Cloud Issuer in cert-manager relies upon the <code>VCert</code> library, and the [<code>VCert</code> <code>v4.13.0</code>][] release marks this \"DA2OP\" transition. The <code>VCert</code> module dependencies in cert-manager have been updated in order for cert-manager to complete the transition as well.</p> <p>With this update, cert-manager users with Venafi Cloud issuers will need to be aware that the zone format changes from a UUID (DA Zone ID) to a string of the form <code>&lt;Application Name&gt;\\&lt;Issuing Template Alias&gt;</code>. This means users will need to create an Application in <code>OutagePREDICT</code> and associate an Issuing Template with it (the same Issuing Templates assigned to DA Projects Zones can be used since Issuing Templates are shared between Venafi Cloud products).</p>"},{"location":"installation/upgrading/upgrading-1.2-1.3/#next-steps","title":"Next Steps","text":"<p>You should now follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-1.3-1.4/","title":"Upgrading from v1.3 to v1.4","text":""},{"location":"installation/upgrading/upgrading-1.3-1.4/#removal-of-the-cert-manager-operator-package-on-red-hat-marketplace","title":"Removal of the cert-manager operator package on Red Hat Marketplace","text":"<p>Since cert-manager <code>v0.15</code> there has been a package for cert-manager on Red Hat Marketplace, but this has now been removed because it was not maintained and was found to be unreliable: #4055 #3732 #436</p> <p>It is replaced by a new package which is generated via the Community Operators Repository, and which is therefore available on OperatorHub.io, OpenShift Container Platform and OKD.</p> <p>Please uninstall the existing cert-manager package and re-install by following the OLM Installation Documentation.</p>"},{"location":"installation/upgrading/upgrading-1.3-1.4/#now-follow-the-regular-upgrade-process","title":"Now Follow the Regular Upgrade Process","text":"<p>From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-1.4-1.5/","title":"Upgrading from v1.4 to v1.5","text":"<p>If you are currently using HTTP-01 challenges or the Ingress shim annotations, please read the Ingress class compatibility notes to see if your Ingress controller has any known issues with the migration to Ingress v1.</p>"},{"location":"installation/upgrading/upgrading-1.4-1.5/#now-follow-the-regular-upgrade-process","title":"Now Follow the Regular Upgrade Process","text":"<p>From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-1.5-1.6/","title":"Upgrading from v1.5 to v1.6","text":""},{"location":"installation/upgrading/upgrading-1.5-1.6/#upgrading-cert-manager-crds-and-stored-versions-of-cert-manager-custom-resources","title":"Upgrading cert-manager CRDs and stored versions of cert-manager custom resources","text":"<p>Following their deprecation in version 1.4, the cert-manager API versions <code>v1alpha2, v1alpha3, and v1beta1</code> are no longer served.</p> <p>This means if your deployment manifests contain any of these API versions, you will not be able to deploy them after upgrading. Our new <code>cmctl</code> utility or old <code>kubectl cert-manager</code> plugin can convert old manifests to <code>v1</code> for you.</p>   \u26d4\ufe0f  If you are upgrading cert-manager on a cluster which has previously had cert-manager &lt; `v1.0.0`, you will need to ensure that all cert-manager custom resources are stored in `etcd` at `v1` version and that cert-manager CRDs do not reference the deprecated APIs **before you upgrade to `v1.6`**.  This is explained in more detail in the [Upgrading existing cert-manager resources](./remove-deprecated-apis.md#upgrading-existing-cert-manager-resources) page.   <p>If you are currently using HTTP-01 challenges or the Ingress shim annotations, please read the Ingress class compatibility notes to see if your Ingress controller has any known issues with the migration to Ingress v1.</p>"},{"location":"installation/upgrading/upgrading-1.5-1.6/#now-follow-the-regular-upgrade-process","title":"Now Follow the Regular Upgrade Process","text":"<p>From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-1.6-1.7/","title":"Upgrading from v1.6 to v1.7","text":"<p>\u26a0 Following their deprecation in version 1.5, the cert-manager API versions v1alpha2, v1alpha3, and v1beta1 have been removed. You must ensure that all cert-manager custom resources are stored in etcd at version v1 and that all cert-manager <code>CustomResourceDefinition</code>s have only v1 as the stored version before upgrading. Please read Migrating Deprecated API Resources for full instructions.</p> <p>If you are currently using HTTP-01 challenges or the Ingress shim annotations, please read the Ingress class compatibility notes to see if your Ingress controller has any known issues with the migration to Ingress v1.</p> <p>If running Kubernetes versions before <code>v1.22</code>, the  <code>ServerSideApply</code> feature gate must be enabled in the cluster. This beta feature is enabled by default on supported versions before <code>v1.22</code>.</p>"},{"location":"installation/upgrading/upgrading-1.6-1.7/#now-follow-the-regular-upgrade-process","title":"Now Follow the Regular Upgrade Process","text":"<p>From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-1.7-1.8/","title":"Upgrading from v1.7 to v1.8","text":""},{"location":"installation/upgrading/upgrading-1.7-1.8/#validation-of-the-rotationpolicy-field","title":"Validation of the <code>rotationPolicy</code> field","text":"<p>The field <code>spec.privateKey.rotationPolicy</code> on Certificate resources is now validated. Valid options are Never and Always.</p> <p>Before upgrading to 1.8.0, you will need to check that all the Certificate YAML manifests you have stored in Git if you are using a GitOps flow (or any other \"source of truth\") have a correct <code>rotationPolicy</code> value. To help you find out which Certificate YAML manifests need updating, you can run the following command:</p> <pre><code>kubectl get cert -A -ojson | jq -r \\\n'.items[] | select(.spec.privateKey.rotationPolicy | strings | . != \"Always\" and . != \"Never\") | \"\\(.metadata.name) in namespace \\(.metadata.namespace) has rotationPolicy=\\(.spec.privateKey.rotationPolicy)\"'\n</code></pre> <p>This command will show you, the name and namespace of each Certificate resource that needs to be updated in Git. For example:</p> <pre><code>smoketest-cert in namespace default has rotationPolicy=Foo\n</code></pre>"},{"location":"installation/upgrading/upgrading-1.7-1.8/#server-side-apply","title":"Server-Side Apply","text":"<p>Server-Side Apply is an alpha feature of cert-manager introduced in 1.8. By default, the feature is disabled, in which case you can skip this section.</p> <p>If you are using Server-Side Apply, i.e., you are running the cert-manager controller with the flag</p> <pre><code>--feature-gates=ServerSideApply=true\n</code></pre> <p>Then you need to take action before upgrading to cert-manager 1.8. You will have to make sure that there are no Challenge resources currently in the cluster. If there are some, you will need to manually delete them once they are in a 'valid' state.</p> <p>The reason the Challenge resources need to be removed before upgrading to 1.8 when using the new Server-Side Apply feature is that cert-manager post-1.8 is not able to clean up Challenge resources that were created pre-1.8.</p> <p>If running Kubernetes versions before <code>v1.22</code>, the <code>ServerSideApply</code>  feature gate must be enabled in the cluster. This beta feature is enabled by default on supported versions before <code>v1.22</code>.</p>"},{"location":"installation/upgrading/upgrading-1.7-1.8/#migrating-from-the-gateway-api-v1alpha1-to-v1alpha2","title":"Migrating from the Gateway API v1alpha1 to v1alpha2","text":"<p>This section only applies to you if you are using the feature gate <code>ExperimentalGatewayAPISupport</code>.</p> <p>cert-manager 1.8 drops support for the Gateway API v1alpha1, and now only supports v1alpha2.</p> <p>Before upgrading cert-manager, you will need to:</p> <ol> <li>remove all existing Gateway API v1alpha1 resources,</li> <li>upgrade the Gateway API CRDs to v1alpha2,</li> <li>re-create the Gateway API resources with the v1alpha2.</li> </ol> <p>This manual intervention is needed because the Gateway API project does not come with a conversion webhook that would allow an easier migration from v1alpha1 to v1alpha2.</p> <p>After upgrading cert-manager to 1.8, you will need to remove the <code>labels</code> field, and add the <code>parentRefs</code>:</p> <pre><code> apiVersion: cert-manager.io/v1\n kind: Issuer\n metadata:\n   name: letsencrypt\n   namespace: default\n spec:\n   acme:\n     solvers:\n       - http01:\n           gatewayHTTPRoute:\n-            labels:\n-              gateway: traefik\n+            parentRefs:\n+              - name: traefik\n+                namespace: traefik\n+                kind: Gateway\n</code></pre>"},{"location":"installation/upgrading/upgrading-1.7-1.8/#now-follow-the-regular-upgrade-process","title":"Now, Follow the Regular Upgrade Process","text":"<p>From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-1.8-1.9/","title":"Upgrading from v1.8 to v1.9","text":"<p>If running Kubernetes versions before <code>v1.22</code>, the <code>ServerSideApply</code> feature gate must be enabled in the cluster. This beta feature is enabled by default on supported versions before <code>v1.22</code>.</p> <p>From here on you can follow the regular upgrade process.</p>"},{"location":"installation/upgrading/upgrading-1.9-1.10/","title":"Upgrading from v1.9 to v1.10","text":""},{"location":"installation/upgrading/upgrading-1.9-1.10/#on-openshift-the-cert-manager-pods-may-fail-until-you-modify-security-context-constraints","title":"On OpenShift the cert-manager Pods may fail until you modify Security Context Constraints","text":"<p>In cert-manager 1.10 the secure computing (seccomp) profile for all the Pods is set to <code>RuntimeDefault</code>. On some versions and configurations of OpenShift this can cause the Pod to be rejected by the Security Context Constraints admission webhook.</p> <p>\ud83d\udcd6 Read the Breaking Changes section in the 1.10 release notes before upgrading.</p>"},{"location":"installation/upgrading/upgrading-1.9-1.10/#next-steps","title":"Next Steps","text":"<p>From here on you can follow the regular upgrade process.</p>"},{"location":"projects/","title":"\u9879\u76ee","text":"<p>cert-manager \u9879\u76ee\u6709\u8bb8\u591a\u536b\u661f\u9879\u76ee\uff0c\u5b83\u4eec\u6269\u5c55\u4e86\u9879\u76ee\u7684\u529f\u80fd\uff0c\u5e76\u8865\u5145\u4e86\u6838\u5fc3\u7684 cert-manager \u7279\u6027\u96c6\u3002</p> <p>\u8fd9\u4e9b\u5de5\u5177\u6709\u52a9\u4e8e\u5b89\u5168\u6027\u3001\u9075\u4ece\u6027\u548c\u63a7\u5236\u3002</p> <ul> <li>istio-csr: Secure Istio service mesh with istio-csr which is   an agent that allows for Istio workload and control plane   components to be secured using cert-manager.</li> <li>approver-policy:   a cert-manager approver that will automatically approve or deny   certificate requests based on defined policy.</li> <li>csi-driver:   a Container Storage Interface (CSI) driver plugin for Kubernetes to work along   cert-manager. The goal for this plugin is to seamlessly request and mount   certificate key pairs to pods. This is useful for facilitating mTLS, or   otherwise securing connections of pods with guaranteed present certificates   whilst having all of the features that cert-manager provides.</li> <li>csi-driver-spiffe:   another CSI driver plugin to work along cert-manager. This CSI driver   transparently delivers SPIFFE SVIDs   in the form of X.509 certificate key pairs to mounting Kubernetes Pods. The   end result is all and any Pod running in Kubernetes can securely request their   SPIFFE identity document from a Trust Domain with minimal configuration.</li> <li>trust-manager: \u5728 Kubernetes \u96c6\u7fa4\u4e2d\u5206\u53d1\u4fe1\u4efb\u5305(\u5982 CA \u8bc1\u4e66)\u7684\u64cd\u4f5c\u7b26\u3002</li> </ul>"},{"location":"projects/approver-policy/","title":"approver-policy","text":"<p>approver-policy \u662f\u4e00\u4e2a\u8bc1\u4e66\u7ba1\u7406\u5668approver\uff0c\u5b83\u5c06\u6839\u636e CRD \u5b9a\u4e49\u7684\u7b56\u7565\u6279\u51c6\u6216\u62d2\u7edd CertificateRequests\u3002</p>"},{"location":"projects/approver-policy/#_1","title":"\u5b89\u88c5","text":"<p>cert-manager\u9700\u8981\u4e0e approver-policy \u4e00\u8d77\u5b89\u88c5\u3002</p> <p>\u26a0\ufe0f</p> <p>It is important that the default approver is disabled in cert-manager. If the default approver is not disabled in cert-manager, approver-policy will race with cert-manager and thus policy becomes useless.</p> <pre><code>$ helm upgrade -i -n cert-manager cert-manager jetstack/cert-manager --set extraArgs={--controllers='*\\,-certificaterequests-approver'} --set installCRDs=true --create-namespace\n</code></pre> <p>\u26a0\ufe0f</p> <p>To install approver-policy:</p> <pre><code>$ helm repo add jetstack https://charts.jetstack.io --force-update\n$ helm upgrade -i -n cert-manager cert-manager-approver-policy jetstack/cert-manager-approver-policy --wait\n</code></pre> <p>If you are using approver-policy with external issuers, you must include their signer names so that approver-policy has permissions to approve and deny CertificateRequests that reference them. For example, if using approver-policy for the internal issuer types, along with google-ca-issuer, and aws-privateca-issuer, set the following values when installing:</p> <pre><code>$ helm upgrade -i -n cert-manager cert-manager-approver-policy jetstack/cert-manager-approver-policy --wait \\\n  --set app.approveSignerNames=\"{\\\nissuers.cert-manager.io/*,clusterissuers.cert-manager.io/*,\\\ngooglecasclusterissuers.cas-issuer.jetstack.io/*,googlecasissuers.cas-issuer.jetstack.io/*,\\\nawspcaclusterissuers.awspca.cert-manager.io/*,awspcaissuers.awspca.cert-manager.io/*\\\n}\"\n</code></pre>"},{"location":"projects/approver-policy/#_2","title":"\u914d\u7f6e","text":"<p>Example policy resources can be found here.</p> <p>When a CertificateRequest is created, approver-policy will evaluate whether the request is appropriate for any existing policy, and if so, evaluate whether it should be approved or denied.</p> <p>For a CertificateRequest to be appropriate for a policy and therefore be evaluated by it, it must be both bound via RBAC and be selected by the policy selector. CertificateRequestPolicy currently only supports <code>issuerRef</code> as a selector.</p> <p>If at least one policy permits the request, the request is approved. If at least one policy is appropriate for the request but none of those permit the request, the request is denied.</p> <p>CertificateRequestPolicies are cluster scoped resources that can be thought of as \"policy profiles\". They describe any request that is approved by that policy. Policies are bound to Kubernetes users and ServiceAccounts using RBAC.</p> <p>Below is an example of a policy that is bound to all Kubernetes users who may only request certificates that have the common name of <code>\"hello.world\"</code>.</p> <pre><code>apiVersion: policy.cert-manager.io/v1alpha1\nkind: CertificateRequestPolicy\nmetadata:\nname: test-policy\nspec:\nallowed:\ncommonName:\nvalue: \"hello.world\"\nrequired: true\nselector:\n# Select all IssuerRef\nissuerRef: {}\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: cert-manager-policy:hello-world\nrules:\n- apiGroups: [\"policy.cert-manager.io\"]\nresources: [\"certificaterequestpolicies\"]\nverbs: [\"use\"]\n# Name of the CertificateRequestPolicies to be used.\nresourceNames: [\"test-policy\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: cert-manager-policy:hello-world\nroleRef:\n# ClusterRole or Role _must_ be bound to a user for the policy to be considered.\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: cert-manager-policy:hello-world\nsubjects:\n# The users who should be bound to the policies defined.\n# Note that in the case of users creating Certificate resources, cert-manager\n# is the entity that is creating the actual CertificateRequests, and so the\n# cert-manager controller's\n# Service Account should be bound instead.\n- kind: Group\nname: system:authenticated\napiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"projects/approver-policy/#behavior","title":"Behavior","text":"<p>CertificateRequestPolicy are split into 4 parts; <code>allowed</code>, <code>contraints</code>, <code>selector</code>, and <code>plugins</code>.</p>"},{"location":"projects/approver-policy/#allowed","title":"Allowed","text":"<p>Allowed is the block that defines attributes that match against the corresponding attribute in the request. A request is permitted by the policy if the request omits an allowed attribute, but will deny the request if it contains an attribute which is not present in the allowed block.</p> <p>An allowed attribute can be marked as <code>required</code>, which if true, will enforce that the attribute has been defined in the request. A field can only be marked as <code>required</code> if the corresponding field is also defined. The <code>required</code> field is not available for <code>isCA</code> or <code>usages</code>.</p> <p>In the following CertificateRequestPolicy, a request will be permitted if it does not request a DNS name, requests the DNS name <code>\"example.com\"</code>, but will be denied when requesting <code>\"bar.example.com\"</code>.</p> <pre><code>spec:\n...\nallowed:\ndnsNames:\nvalues:\n- \"example.com\"\n- \"foo.example.com\"\n...\n</code></pre> <p>In the following, a request will be denied if the request contains no Common Name, but will permit requests whose Common Name ends in \".com\".</p> <pre><code>spec:\n...\nallowed:\ncommonName:\nvalue: \"*.com\"\nrequired: true\n...\n</code></pre> <p>If an allowed field is omitted, that attribute is considered \"deny all\" for requests.</p> <p>Allowed string fields accept wildcards \"*\" within its values. Wildcards \"*\" in patterns represent any string that has a length of 0 or more. A pattern containing only \"*\" will match anything. A pattern containing <code>\"\\*foo\"</code> will match <code>\"foo\"</code> as well as any string which ends in <code>\"foo\"</code> (e.g. <code>\"bar-foo\"</code>). A pattern containing <code>\"\\*.foo\"</code> will match <code>\"bar-123.foo\"</code>, but not <code>\"barfoo\"</code>.</p> <p>Allowed fields that are lists will permit requests that are a subset of that list. This means that if <code>usages</code> contains <code>[\"server auth\", \"client auth\"]</code>, then a request containing only <code>[\"server auth\"]</code> would be permitted, but not <code>[\"server auth\", \"cert sign\"]</code>.</p> <p>Below is an example including all supported allowed fields of CertificateRequestPolicy.</p> <pre><code>apiVersion: policy.cert-manager.io/v1alpha1\nkind: CertificateRequestPolicy\nmetadata:\nname: my-policy\nspec:\nallowed:\ncommonName:\nvalue: \"example.com\"\ndnsNames:\nvalues:\n- \"example.com\"\n- \"*.example.com\"\nipAddresses:\nvalues:\n- \"1.2.3.4\"\n- \"10.0.1.*\"\nuris:\nvalues:\n- \"spiffe://example.org/ns/*/sa/*\"\nemailAddresses:\nvalues:\n- \"*@example.com\"\nrequired: true\nisCA: false\nusages:\n- \"server auth\"\n- \"client auth\"\nsubject:\norganizations:\nvalues: [\"hello-world\"]\ncountries:\nvalues: [\"*\"]\norganizationalUnits:\nvalues: [\"*\"]\nlocalities:\nvalues: [\"*\"]\nprovinces:\nvalues: [\"*\"]\nstreetAddresses:\nvalues: [\"*\"]\npostalCodes:\nvalues: [\"*\"]\nserialNumber:\nvalue: \"*\"\n...\n</code></pre>"},{"location":"projects/approver-policy/#constraints","title":"Constraints","text":"<p>Constraints is the block that is used to limit what attributes the request can have. If a constraint is not defined, then the attribute is considered \"allow all\".</p> <p>Below is an example containing all supported constraints fields of CertificateRequestPolicy.</p> <pre><code>apiVersion: policy.cert-manager.io/v1alpha1\nkind: CertificateRequestPolicy\nmetadata:\nname: my-policy\nspec:\n...\nconstraints:\nminDuration: 1h\nmaxDuration: 24h\nprivateKey:\nalgorithm: RSA\nminSize: 2048\nmaxSize: 4096\n...\n</code></pre>"},{"location":"projects/approver-policy/#selector","title":"Selector","text":"<p>Selector is a required field that is used for matching CertificateRequestPolicies against a CertificateRequest for evaluation. approver-policy currently only supports selecting over the <code>issuerRef</code> of a request.</p> <p><code>issuerRef</code> values accept wildcards \"*\". If an <code>issuerRef</code> is set to an empty object \"{}\", then the policy will match against all RBAC bound requests.</p> <pre><code>apiVersion: policy.cert-manager.io/v1alpha1\nkind: CertificateRequestPolicy\nmetadata:\nname: my-policy\nspec:\n...\nselector:\nissuerRef:\n- name: \"my-ca\"\nkind: \"*Issuer\"\ngroup: \"cert-manager.io\"\n</code></pre> <pre><code>apiVersion: policy.cert-manager.io/v1alpha1\nkind: CertificateRequestPolicy\nmetadata:\nname: match-all-requests\nspec:\n...\nselector:\nissuerRef: {}\n</code></pre> <p>\u26a0\ufe0f Note that the user must still be bound by RBAC for the policy to be considered for evaluation against a request.</p>"},{"location":"projects/approver-policy/#plugins","title":"Plugins","text":"<p>Plugins are external approvers that are built into approver-policy at compile time. Plugins are designed to be used as extensions to the existing policy checks where the user requires special functionality that the existing checks can't provide.</p> <p>Plugins are defined as a block on the CertificateRequestPolicy Spec.</p> <pre><code>apiVersion: policy.cert-manager.io/v1alpha1\nkind: CertificateRequestPolicy\nmetadata:\nname: plugins\nspec:\n...\nplugins:\nmy-plugin:\nvalues:\nval-1: key-1\n</code></pre> <p>There are currently no none open source plugins.</p>"},{"location":"projects/csi-driver-spiffe/","title":"csi-driver-spiffe","text":"<p>csi-driver-spiffe \u662f\u4e00\u4e2a\u5bb9\u5668\u5b58\u50a8\u63a5\u53e3(CSI)\u9a71\u52a8\u63d2\u4ef6\uff0c\u7528\u4e8e Kubernetes \u4e0ecert-manager\u4e00\u8d77\u5de5\u4f5c\u3002 \u8fd9\u4e2a CSI \u9a71\u52a8\u7a0b\u5e8f\u4ee5 X.509 \u8bc1\u4e66\u5bc6\u94a5\u5bf9\u7684\u5f62\u5f0f\u900f\u660e\u5730\u4ea4\u4ed8 SPIFFE SVIDs \u6765\u5b89\u88c5 Kubernetes Pods\u3002</p> <p>\u6700\u7ec8\u7684\u7ed3\u679c\u662f\uff0c\u8fd0\u884c\u5728 Kubernetes \u4e2d\u7684\u6240\u6709 Pod \u90fd\u53ef\u4ee5\u901a\u8fc7\u6700\u5c0f\u7684\u914d\u7f6e\u5b89\u5168\u5730\u4ece\u4fe1\u4efb\u57df\u8bf7\u6c42\u4ed6\u4eec\u7684 SPIFFE \u8eab\u4efd\u6587\u6863\u3002 \u8fd9\u4e9b\u6587\u4ef6\u662f:</p> <ul> <li>\u81ea\u52a8\u66f4\u65b0; \u2714\ufe0f</li> <li>\u79c1\u94a5\u6c38\u8fdc\u4e0d\u4f1a\u79bb\u5f00\u8282\u70b9\u7684\u865a\u62df\u5185\u5b58; \u2714\ufe0f</li> <li>\u6bcf\u4e2a Pod \u7684\u6587\u6863\u90fd\u662f\u552f\u4e00\u7684; \u2714\ufe0f</li> <li>\u6587\u6863\u4e0e Pod \u5171\u4eab\u76f8\u540c\u7684\u751f\u547d\u5468\u671f\uff0c\u5e76\u5728 Pod \u7ec8\u6b62\u65f6\u9500\u6bc1\u3002 \u2714\ufe0f</li> </ul> <pre><code>...\nvolumeMounts:\n- mountPath: \"/var/run/secrets/spiffe.io\"\nname: spiffe\nvolumes:\n- name: spiffe\ncsi:\ndriver: spiffe.csi.cert-manager.io\nreadOnly: true\n</code></pre> <p>SPIFFE \u6587\u6863\u53ef\u7528\u4e8e\u76f8\u4e92 TLS (mTLS)\u6216 Pod \u5728\u5176\u4fe1\u4efb\u57df\u5185\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002</p>"},{"location":"projects/csi-driver-spiffe/#_1","title":"\u7ec4\u4ef6","text":"<p>\u8be5\u9879\u76ee\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206;</p>"},{"location":"projects/csi-driver-spiffe/#csi-driver","title":"CSI Driver","text":"<p>The CSI driver runs as DaemonSet on the cluster which is responsible for generating, requesting, and mounting the certificate key pair to Pods on the node it manages. The CSI driver creates and manages a tmpfs directory which is used to create and mount Pod volumes from.</p> <p>When a Pod is created with the CSI volume configured, the driver will locally generate a private key, and create a cert-manager CertificateRequest in the same Namespace as the Pod.</p> <p>The driver uses CSI Token Request to both discover the Pod's identity to form the SPIFFE identity contained in the X.509 certificate signing request, as well as securely impersonate its ServiceAccount when creating the CertificateRequest.</p> <p>Once signed by the pre-configured target signer, the driver will mount the private key and signed certificate into the Pod's Volume to be made available as a Volume Mount. This certificate key pair is regularly renewed based on the expiry of the signed certificate.</p>"},{"location":"projects/csi-driver-spiffe/#approver","title":"Approver","text":"<p>A distinct cert-manager approver Deployment is responsible for managing the approval and denial condition of created CertificateRequests that target the configured SPIFFE Trust Domain signer. The approver ensures that requests have:</p> <ol> <li>the correct key type (ECDSA P-521);</li> <li>acceptable key usages (Key Encipherment, Digital Signature, Client Auth, Server Auth);</li> <li>the requested duration matches the enforced duration (default 1 hour);</li> <li>no SANs or other    identifiable attributes except a single URI SANs;</li> <li>the single URI SAN is the SPIFFE identity of the ServiceAccount who created    the CertificateRequest;</li> <li>the SPIFFE ID Trust Domain is the same as configured.</li> </ol> <p>If any of these checks do not pass, the CertificateRequest will be marked as Denied, else it will be marked as Approved. The approver will only manage CertificateRequests who request from the same IssuerRef that has been configured.</p>"},{"location":"projects/csi-driver-spiffe/#_2","title":"\u5b89\u88c5","text":"<p> Requires Kubernetes version <code>v1.21</code>+ or <code>v1.20</code> with the <code>--feature-gates=CSIServiceAccountToken=true</code> flag.</p> <p> Requires cert-manager <code>v1.3</code> or higher.</p> <ol> <li>cert-manager is required to be installed with    csi-driver-spiffe.</li> </ol> <p></p> <p>It is important that the default approver is disabled in cert-manager. If the default approver is not disabled in cert-manager, the csi-driver-spiffe approver will race with cert-manager and thus its policy enforcement becomes useless.</p> <pre><code>$ helm repo add jetstack https://charts.jetstack.io --force-update\n$ helm upgrade -i -n cert-manager cert-manager jetstack/cert-manager --set extraArgs={--controllers='*\\,-certificaterequests-approver'} --set installCRDs=true --create-namespace\n</code></pre> <p></p> <ol> <li>Install or configure a    ClusterIssuer to give    cert-manager the ability to sign against your Trust Domain. If a namespace    scoped Issuer is desired, then that Issuer must be created in every namespace    that Pods will mount volumes from.    You must use an Issuer type which is compatible with signing URI SAN    certificates and the private does not need to be available to the signer, for    example CA,    Vault,    Venafi,    AWS PCA,    Google CAS,    Small Step. Issuers such as    SelfSigned or    ACME will not work.</li> </ol> <p>An example demo    ClusterIssuer can    be found    here.    This Trust Domain's root CA is self-signed by cert-manager and private key    is stored in the cluster.</p> <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/cert-manager/csi-driver-spiffe/main/deploy/example/clusterissuer.yaml\n# We must also approve the CertificateRequest since we have disabled the default approver\n$ kubectl cert-manager approve -n cert-manager $(kubectl get cr -n cert-manager -ojsonpath='{.items[0].metadata.name}')\n</code></pre> <ol> <li> <p>Install csi-driver-spiffe into the cluster using the issuer we configured. We    must also configure the issuer resource type and name of the issuer we    configured so that the approver has    permissions to approve referencing CertificateRequests.</p> </li> <li> <p>Change signer name to match your issuer type.</p> </li> <li>Change name, kind, and group to your issuer.</li> </ol> <pre><code>$ helm upgrade -i -n cert-manager cert-manager-csi-driver-spiffe jetstack/cert-manager-csi-driver-spiffe --wait \\\n  --set \"app.logLevel=1\" \\\n  --set \"app.trustDomain=my.trust.domain\" \\\n  --set \"app.approver.signerName=clusterissuers.cert-manager.io/csi-driver-spiffe-ca\" \\\n  \\\n  --set \"app.issuer.name=csi-driver-spiffe-ca\" \\\n  --set \"app.issuer.kind=ClusterIssuer\" \\\n  --set \"app.issuer.group=cert-manager.io\"\n</code></pre>"},{"location":"projects/csi-driver-spiffe/#_3","title":"\u4f7f\u7528","text":"<p>Once the driver is successfully installed, Pods can begin to request and mount their key and SPIFFE certificate. Since the Pod's ServiceAccount is impersonated when creating CertificateRequests, every ServiceAccount must be given that permission which intends to use the volume.</p> <p>Example manifest with a dummy Deployment:</p> <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/cert-manager/csi-driver-spiffe/main/deploy/example/example-app.yaml\n\n$ kubectl exec -n sandbox $(kubectl get pod -n sandbox -l app=my-csi-app -o jsonpath='{.items[0].metadata.name}') -- cat /var/run/secrets/spiffe.io/tls.crt | openssl x509 --noout --text | grep Issuer:\n        Issuer: CN = csi-driver-spiffe-ca\n$ kubectl exec -n sandbox $(kubectl get pod -n sandbox -l app=my-csi-app -o jsonpath='{.items[0].metadata.name}') -- cat /var/run/secrets/spiffe.io/tls.crt | openssl x509 --noout --text | grep URI:\n                URI:spiffe://foo.bar/ns/sandbox/sa/example-app\n</code></pre>"},{"location":"projects/csi-driver-spiffe/#fs-group","title":"FS-Group","text":"<p>When running Pods with a specified user or group, the volume will not be readable by default due to Unix based file system permissions. The mounting volumes file group can be specified using the following volume attribute:</p> <pre><code>---\nsecurityContext:\nrunAsUser: 123\nrunAsGroup: 456\nvolumes:\n- name: spiffe\ncsi:\ndriver: spiffe.csi.cert-manager.io\nreadOnly: true\nvolumeAttributes:\nspiffe.csi.cert-manager.io/fs-group: \"456\"\n</code></pre> <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/cert-manager/csi-driver-spiffe/main/deploy/example/fs-group-app.yaml\n\n$ kubectl exec -n sandbox $(kubectl get pod -n sandbox -l app=my-csi-app-fs-group -o jsonpath='{.items[0].metadata.name}') -- cat /var/run/secrets/spiffe.io/tls.crt | openssl x509 --noout --text | grep URI:\n                URI:spiffe://foo.bar/ns/sandbox/sa/fs-group-app\n</code></pre>"},{"location":"projects/csi-driver-spiffe/#ca","title":"\u6839 CA \u5305","text":"<p>By default, the CSI driver will only mount the Pod's private key and signed certificate. csi-driver-spiffe can be optionally configured to also mount a statically defined CA bundle from a volume that will be written to all Pod volumes.</p> <p>If the CSI driver detects this bundle has changed (through overwrite, renewal, etc), the new bundle will be written to all existing volumes.</p> <p>The following example mounts the CA certificate used by the Trust Domain ClusterIssuer.</p> <pre><code>$ helm upgrade -i -n cert-manager cert-manager-csi-driver-spiffe jetstack/cert-manager-csi-driver-spiffe --wait \\\n  --set \"app.logLevel=1\" \\\n  --set \"app.trustDomain=my.trust.domain\" \\\n  --set \"app.approver.signerName=clusterissuers.cert-manager.io/csi-driver-spiffe-ca\" \\\n  \\\n  --set \"app.issuer.name=csi-driver-spiffe-ca\" \\\n  --set \"app.issuer.kind=ClusterIssuer\" \\\n  --set \"app.issuer.group=cert-manager.io\" \\\n  \\\n  --set \"app.driver.volumes[0].name=root-cas\" \\\n  --set \"app.driver.volumes[0].secret.secretName=csi-driver-spiffe-ca\" \\\n  --set \"app.driver.volumeMounts[0].name=root-cas\" \\\n  --set \"app.driver.volumeMounts[0].mountPath=/var/run/secrets/cert-manager-csi-driver-spiffe\" \\\n  --set \"app.driver.sourceCABundle=/var/run/secrets/cert-manager-csi-driver-spiffe/ca.crt\"\n$ kubectl rollout restart deployment -n sandbox my-csi-app\n$ kubectl exec -it -n sandbox $(kubectl get pod -n sandbox -l app=my-csi-app -o jsonpath='{.items[0].metadata.name}') -- ls /var/run/secrets/spiffe.io/\nca.crt   tls.crt  tls.key\n</code></pre>"},{"location":"projects/csi-driver/","title":"csi-driver","text":"<p>csi-driver \u662f\u4e00\u4e2a\u5bb9\u5668\u5b58\u50a8\u63a5\u53e3(CSI)\u9a71\u52a8\u63d2\u4ef6\uff0c\u7528\u4e8e Kubernetes \u4e0e cert-manager \u4e00\u8d77\u5de5\u4f5c\u3002 \u8fd9\u4e2a\u63d2\u4ef6\u7684\u76ee\u6807\u662f\u65e0\u7f1d\u5730\u8bf7\u6c42\u5e76\u5c06\u8bc1\u4e66\u5bc6\u94a5\u5bf9\u6302\u8f7d\u5230 pods\u3002 \u8fd9\u5bf9\u4e8e\u4fc3\u8fdb mTLS\uff0c\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4fdd\u62a4\u5177\u6709\u4fdd\u8bc1\u73b0\u6709\u8bc1\u4e66\u7684 pods \u7684\u8fde\u63a5\uff0c\u540c\u65f6\u5177\u6709\u8bc1\u4e66\u7ba1\u7406\u5668\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u662f\u6709\u7528\u7684\u3002</p>"},{"location":"projects/csi-driver/#csi-driver_1","title":"\u4e3a\u4ec0\u4e48\u662f CSI Driver?","text":"<ul> <li>Ensure private keys never leave the node and are never sent over the network.   All private keys are stored locally on the node.</li> <li>Unique key and certificate per application replica with a grantee to be   present on application run time.</li> <li>Reduce resource management overhead by defining certificate request spec   in-line of the Kubernetes Pod template.</li> <li>Automatic renewal of certificates based on expiry of each individual   certificate.</li> <li>Keys and certificates are destroyed during application termination.</li> <li>Scope for extending plugin behavior with visibility on each replica's   certificate request and termination.</li> </ul>"},{"location":"projects/csi-driver/#_1","title":"\u8981\u6c42\u53ca\u5b89\u88c5","text":"<p>This CSI driver plugin makes use of the 'CSI inline volume' feature - Alpha as of <code>v1.15</code> and beta in <code>v1.16</code>. Kubernetes versions <code>v1.16</code> and higher require no extra configuration however <code>v1.15</code> requires the following feature gate set:</p> <pre><code>--feature-gates=CSIInlineVolume=true\n</code></pre> <p>You must have a working installation of cert-manager present on the cluster. Instructions on how to install cert-manager can be found on cert-manager.io.</p> <p>To install the csi-driver, use helm install:</p> <pre><code>helm repo add jetstack https://charts.jetstack.io --force-update\nhelm upgrade -i -n cert-manager cert-manager-csi-driver jetstack/cert-manager-csi-driver --wait\n</code></pre> <p>Or apply the static manifests to your cluster:</p> <pre><code>helm repo add jetstack https://charts.jetstack.io --force-update\nhelm template jetstack/cert-manager-csi-driver | kubectl apply -n cert-manager -f -\n</code></pre> <p>You can verify the installation has completed correctly by checking the presence of the CSIDriver resource as well as a CSINode resource present for each node, referencing <code>csi.cert-manager.io</code>.</p> <pre><code>$ kubectl get csidrivers\nNAME                     CREATED AT\ncsi.cert-manager.io   2019-09-06T16:55:19Z\n\n$ kubectl get csinodes -o yaml\napiVersion: v1\nitems:\n- apiVersion: storage.k8s.io/v1beta1\n  kind: CSINode\n  metadata:\n    name: kind-control-plane\n    ownerReferences:\n    - apiVersion: v1\n      kind: Node\n      name: kind-control-plane\n...\n  spec:\n    drivers:\n    - name: csi.cert-manager.io\n      nodeID: kind-control-plane\n      topologyKeys: null\n...\n</code></pre> <p>The CSI driver is now installed and is ready to be used for pods in the cluster.</p>"},{"location":"projects/csi-driver/#_2","title":"\u8bf7\u6c42\u548c\u6302\u8f7d\u8bc1\u4e66","text":"<p>To request certificates from cert-manager, simply define a volume mount where the key and certificate will be written to, along with a volume with attributes that define the cert-manager request. The following is a dummy app that mounts a key certificate pair to <code>/tls</code> and has been signed by the <code>ca-issuer</code> with a DNS name valid for <code>my-service.sandbox.svc.cluster.local</code>.</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-csi-app\n  namespace: sandbox\n  labels:\n    app: my-csi-app\nspec:\n  containers:\n    - name: my-frontend\n      image: busybox\n      volumeMounts:\n      - mountPath: \"/tls\"\n        name: tls\n      command: [ \"sleep\", \"1000000\" ]\n  volumes:\n    - name: tls\n      csi:\n        driver: csi.cert-manager.io\n        volumeAttributes:\n              csi.cert-manager.io/issuer-name: ca-issuer\n              csi.cert-manager.io/dns-names: ${POD_NAME}.${POD_NAMESPACE}.svc.cluster.local\n</code></pre> <p>Once created, the CSI driver will generate a private key locally, request a certificate from cert-manager based on the given attributes, then store both locally to be mounted to the pod. The pod will remain in a pending state until this process has been completed.</p> <p>For more information on how to set up issuers for your cluster, refer to the cert-manager documentation here. Note it is not possible to use <code>SelfSigned</code> Issuers with the CSI Driver. In order for cert-manager to self sign a certificate, it needs access to the secret containing the private key that signed the certificate request to sign the end certificate. This secret is not used and so not available in the CSI driver use case.</p>"},{"location":"projects/csi-driver/#_3","title":"\u652f\u6301\u7684\u5377\u5c5e\u6027","text":"<p>The csi-driver driver aims to have complete feature parity with all possible values available through the cert-manager API however currently supports the following values;</p> Attribute Description Default Example <code>csi.cert-manager.io/issuer-name</code> The Issuer name to sign the certificate request. <code>ca-issuer</code> <code>csi.cert-manager.io/issuer-kind</code> The Issuer kind to sign the certificate request. <code>Issuer</code> <code>ClusterIssuer</code> <code>csi.cert-manager.io/issuer-group</code> The group name the Issuer belongs to. <code>cert-manager.io</code> <code>out.of.tree.foo</code> <code>csi.cert-manager.io/common-name</code> Certificate common name (supports variables). <code>my-cert.foo</code> <code>csi.cert-manager.io/dns-names</code> DNS names the certificate will be requested for. At least a DNS Name, IP or URI name must be present (supports variables). <code>a.b.foo.com,c.d.foo.com</code> <code>csi.cert-manager.io/ip-sans</code> IP addresses the certificate will be requested for. <code>192.0.0.1,192.0.0.2</code> <code>csi.cert-manager.io/uri-sans</code> URI names the certificate will be requested for (supports variables). <code>spiffe://foo.bar.cluster.local</code> <code>csi.cert-manager.io/duration</code> Requested duration the signed certificate will be valid for. <code>720h</code> <code>1880h</code> <code>csi.cert-manager.io/is-ca</code> Mark the certificate as a certificate authority. <code>false</code> <code>true</code> <code>csi.cert-manager.io/key-usages</code> Set the key usages on the certificate request. <code>digital signature,key encipherment</code> <code>server auth,client auth</code> <code>csi.cert-manager.io/key-encoding</code> Set the key encoding format (PKCS1 or PKCS8). <code>PKCS1</code> <code>PKCS8</code> <code>csi.cert-manager.io/certificate-file</code> File name to store the certificate file at. <code>tls.crt</code> <code>foo.crt</code> <code>csi.cert-manager.io/ca-file</code> File name to store the ca certificate file at. <code>ca.crt</code> <code>foo.ca</code> <code>csi.cert-manager.io/privatekey-file</code> File name to store the key file at. <code>tls.key</code> <code>foo.key</code> <code>csi.cert-manager.io/fs-group</code> Set the FS Group of written files. Should be paired with and match the value of the consuming container <code>runAsGroup</code>. <code>2000</code> <code>csi.cert-manager.io/renew-before</code> The time to renew the certificate before expiry. Defaults to a third of the requested duration. <code>$CERT_DURATION/3</code> <code>72h</code> <code>csi.cert-manager.io/reuse-private-key</code> Re-use the same private when when renewing certificates. <code>false</code> <code>true</code> <code>csi.cert-manager.io/pkcs12-enable</code> Enable writing the signed certificate chain and private key as a PKCS12 file. <code>true</code> <code>csi.cert-manager.io/pkcs12-filename</code> File location to write the PKCS12 file. Requires <code>csi.cert-manager.io/keystore-pkcs12-enable</code> be set to <code>true</code>. <code>keystore.p12</code> <code>tls.p12</code> <code>csi.cert-manager.io/pkcs12-password</code> Password used to encode the PKCS12 file. Required when PKCS12 is enabled (<code>csi.cert-manager.io/keystore-pkcs12-enable: true</code>). <code>my-password</code>"},{"location":"projects/csi-driver/#_4","title":"\u53d8\u91cf","text":"<p>The following attributes support variables that are evaluated when a request is made for the mounting Pod. These variables are useful for constructing requests with SANs that contain values from the mounting Pod.</p> <pre><code>`csi.cert-manager.io/common-name`\n`csi.cert-manager.io/dns-names`\n`csi.cert-manager.io/uri-sans`\n</code></pre> <p>Variables follow the go <code>os.Expand</code> structure, which is generally what you would expect on a UNIX shell. The CSI driver has access to the following variables:</p> <pre><code>${POD_NAME}\n${POD_NAMESPACE}\n${POD_UID}\n${SERVICE_ACCOUNT_NAME}\n</code></pre>"},{"location":"projects/csi-driver/#_5","title":"\u793a\u4f8b\u4f7f\u7528","text":"<pre><code>volumeAttributes:\ncsi.cert-manager.io/issuer-name: ca-issuer\ncsi.cert-manager.io/dns-names: \"${POD_NAME}.${POD_NAMESPACE}.svc.cluster.local\"\ncsi.cert-manager.io/uri-sans: \"spiffe://cluster.local/ns/${POD_NAMESPACE}/pod/${POD_NAME}/${POD_UID}\"\ncsi.cert-manager.io/common-name: \"${SERVICE_ACCOUNT_NAME}.${POD_NAMESPACE}\"\n</code></pre>"},{"location":"projects/csi-driver/#pod-serviceaccount","title":"\u4f7f\u7528\u6302\u8f7d Pod \u7684 ServiceAccount \u8bf7\u6c42\u8bc1\u4e66","text":"<p>If the flag <code>--use-token-request</code> is enabled on the csi-driver DaemonSet, the CertificateRequest resource will be created by the mounting Pod's ServiceAccount. This can be pared with approver-policy to enable advanced policy on a per ServiceAccount basis.</p> <p>Ensure to give permissions to Pod ServiceAccounts to create CertificateRequests with this flag enabled, i.e:</p> <pre><code># WARNING: This RBAC will enable any identiy in the cluster to create\n# CertificateRequests. This may or may not be problimatic based on your security\n# model. It is likely worth scoping the set of identities in the\n# `ClusterRoleBinding` `subjects` stanza.\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\nname: cert-manager-csi-driver-all-cr-create\nrules:\n- apiGroups: [\"cert-manager.io\"]\nresources: [\"certificaterequests\"]\nverbs: [\"create\"]\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\nname: cert-manager-csi-driver-all-cr-create\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: cert-manager-csi-driver-all-cr-create\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\nkind: Group\nname: system:authenticated\n</code></pre>"},{"location":"projects/istio-csr/","title":"istio-csr","text":"<p>istio-csr \u662f\u4e00\u4e2a\u4ee3\u7406\uff0c\u5141\u8bb8\u4f7f\u7528cert-manager\u4fdd\u62a4Istio\u5de5\u4f5c\u8d1f\u8f7d\u548c\u63a7\u5236\u5e73\u9762\u7ec4\u4ef6\u3002</p> <p>\u4fc3\u8fdb mTLS \u7684\u8bc1\u4e66(\u96c6\u7fa4\u95f4\u548c\u96c6\u7fa4\u5185)\u5c06\u901a\u8fc7\u8bc1\u4e66\u7ba1\u7406\u5668\u9881\u53d1\u8005\u7b7e\u7f72\u3001\u4ea4\u4ed8\u548c\u66f4\u65b0\u3002</p>"},{"location":"projects/istio-csr/#istio-csr_1","title":"istio-csr \u5165\u95e8\u6307\u5357","text":"<p>We have a guide for setting up istio-csr in a fresh kind cluster.</p> <p>Following the guide is the best way to see istio-csr in action.</p> <p>If you've already seen istio-csr in action or if you're experienced with running Istio and just want quick installation instructions, read on for more details.</p>"},{"location":"projects/istio-csr/#istio","title":"\u5e95\u5c42\u7ec6\u8282(\u9002\u7528\u4e8e\u6709\u7ecf\u9a8c\u7684 Istio \u7528\u6237)","text":"<p>\u26a0\ufe0f The getting started guide is a better place if you just want to try istio-csr out!</p> <p>Running istio-csr requires a few steps and preconditions in order:</p> <ol> <li>A cluster without Istio already installed</li> <li>cert-manager installed in the cluster</li> <li>An <code>Issuer</code> or <code>ClusterIssuer</code> which will be used to issue Istio certificates</li> <li>istio-csr installed (likely via helm)</li> <li>Istio installed with    some custom config required, e.g. using the example config from the repository.</li> </ol>"},{"location":"projects/istio-csr/#istio_1","title":"\u4e3a\u4ec0\u4e48\u81ea\u5b9a\u4e49 Istio \u5b89\u88c5\u6e05\u5355?","text":"<p>If you take a look at the contents of the example Istio install manifests there are a few custom configuration options which are important.</p> <p>Required changes include setting <code>ENABLE_CA_SERVER</code> to <code>false</code> and setting the <code>caAddress</code> from which Istio will request certificates; replacing the CA server is the whole point of istio-csr!</p> <p>Mounting and statically specifying the root CA is also an important recommended step. Without a manually specified root CA istio-csr defaults to trying to discover root CAs automatically, which could theoretically lead to a signer hijacking attack if for example a signer's token was stolen (such as the cert-manager controller's token).</p>"},{"location":"projects/istio-csr/#issuer-clusterissuer","title":"Issuer \u8fd8\u662f ClusterIssuer?","text":"<p>Unless you know you need a <code>ClusterIssuer</code> we'd recommend starting with an <code>Issuer</code>, since it should be easier to reason about the access controls for an Issuer; they're namespaced and so naturally a little more limited in scope.</p> <p>That said, if you view your entire Kubernetes cluster as being a trust domain itself, then a ClusterIssuer is the more natural fit. The best choice will depend on your specific situation.</p> <p>Our getting started guide uses an <code>Issuer</code>.</p>"},{"location":"projects/istio-csr/#_1","title":"\u54ea\u79cd\u53d1\u884c\u8005\u7c7b\u578b?","text":"<p>Whether you choose to use an <code>Issuer</code> or a <code>ClusterIssuer</code>, you'll also need to choose the type of issuer you want such as:</p> <ul> <li>CA</li> <li>Vault</li> <li>or an external issuer</li> </ul> <p>The key requirement is that arbitrary values can be placed into the <code>subjectAltName</code> (SAN) X.509 extension, since Istio places SPIFFE IDs there.</p> <p>That means that the ACME issuer will not work \u2014 publicly trusted certificates such as those issued by Let's Encrypt don't allow arbitrary entries in the SAN, for very good reasons.</p> <p>If you're already using HashiCorp Vault then the Vault issuer is an obvious choice. If you want to control your own PKI entirely, we'd recommend the CA issuer. The choice is ultimately yours.</p>"},{"location":"projects/istio-csr/#istio-istio-csr","title":"\u5728 Istio \u4e4b\u540e\u5b89\u88c5 istio-csr","text":"<p>This is unsupported because it's exceptionally difficult to do safely. It's likely that installing istio-csr after Istio isn't possible to do without downtime, since installing istio-csr second would require a time period where all Istio sidecars trust both the old Istio-managed CA and the new cert-manager controlled CA.</p>"},{"location":"projects/istio-csr/#istio-csr_2","title":"istio-csr \u5982\u4f55\u5de5\u4f5c?","text":"<p>istio-csr implements the gRPC Istio certificate service which authenticates, authorizes, and signs incoming certificate signing requests from Istio workloads, routing all certificate handling through cert-manager installed in the cluster.</p> <p>This seamlessly matches the behavior of istiod in a typical installation, while allowing certificate management through cert-manager.</p>"},{"location":"projects/trust-manager/","title":"trust-manager","text":""},{"location":"projects/trust-manager/#kubernetes","title":"\u5728 Kubernetes \u4e2d\u5206\u53d1\u4fe1\u4efb\u5305","text":"<p>trust-manager \u662f\u7528\u4e8e\u5728 Kubernetes \u96c6\u7fa4\u4e2d\u5206\u53d1\u4fe1\u4efb\u5305\u7684\u64cd\u4f5c\u7b26\u3002 trust-manager \u65e8\u5728\u8865\u5145cert-manager\uff0c\u4f7f\u670d\u52a1\u80fd\u591f\u4fe1\u4efb\u7531\u53d1\u884c\u8005\u7b7e\u7f72\u7684 X.509 \u8bc1\u4e66\uff0c\u4ee5\u53ca\u8bc1\u4e66\u7ba1\u7406\u5668\u53ef\u80fd\u6839\u672c\u4e0d\u77e5\u9053\u7684\u5916\u90e8 CAs\u3002</p>"},{"location":"projects/trust-manager/#_1","title":"\u4f7f\u7528","text":"<p>trust \u9644\u5e26\u4e86\u4e00\u4e2a\u5355\u4e00\u96c6\u7fa4\u8303\u56f4\u7684<code>Bundle</code>\u6e90\u3002 \u4e00\u4e2a<code>Bundle</code>\u8868\u793a\u4e00\u7ec4\u5e94\u8be5\u5728\u6574\u4e2a\u96c6\u7fa4\u4e2d\u5206\u5e03\u548c\u53ef\u7528\u7684\u6570\u636e\u3002 \u5bf9\u4e8e\u53ef\u4ee5\u5206\u53d1\u7684\u6570\u636e\u6ca1\u6709\u4efb\u4f55\u9650\u5236\u3002</p> <p>Bundle \u4ece\u4f4d\u4e8e\u4fe1\u4efb\u540d\u79f0\u7a7a\u95f4(\u4fe1\u4efb\u63a7\u5236\u5668\u90e8\u7f72\u5728\u5176\u4e2d)\u7684\u8bb8\u591a\u201c\u6e90\u201d\u6536\u96c6\u5e76\u8ffd\u52a0\u4fe1\u4efb\u6570\u636e\uff0c\u5e76\u5c06\u5b83\u4eec\u540c\u6b65\u5230\u6bcf\u4e2a\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684<code>target</code>\u3002</p> <p>\u5178\u578b\u7684 Bundle \u5982\u4e0b\u6240\u793a:</p> <pre><code>apiVersion: trust.cert-manager.io/v1alpha1\nkind: Bundle\nmetadata:\nname: my-org.com\nspec:\nsources:\n# A Secret in the trust namespace created via a cert-manager Certificate\n- secret:\nname: \"my-db-tls\"\nkey: \"ca.crt\"\n# A ConfigMap in the trust namespace\n- configMap:\nname: \"my-org.net\"\nkey: \"root-certs.pem\"\n# An In Line\n- inLine: |\n# my-org.com CA\n-----BEGIN CERTIFICATE-----\nMIIC5zCCAc+gAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl\n....\n0V3NCaQrXoh+3xrXgX/vMdijYLUSo/YPEWmo\n-----END CERTIFICATE-----\ntarget:\n# Data synced to the ConfigMap `my-org.com` at the key `root-certs.pem` in\n# every namespace that has the label \"linkerd.io/inject=enabled\".\nconfigMap:\nkey: \"root-certs.pem\"\nnamespaceSelector:\nmatchLabels:\nlinkerd.io/inject: \"enabled\"\n</code></pre> <p>Bundle \u76ee\u524d\u652f\u6301\u6e90\u7c7b\u578b<code>configMap</code>, <code>secret</code> \u548c <code>inLine</code>,\u76ee\u6807\u7c7b\u578b<code>configMap</code>\u3002</p>"},{"location":"projects/trust-manager/#_2","title":"\u540d\u79f0\u7a7a\u95f4\u9009\u62e9\u5668","text":"<p>\u76ee\u6807<code>namespaceSelector</code>\u53ef\u7528\u4e8e\u786e\u5b9a\u540c\u6b65\u5230\u54ea\u4e2a Namespaces \u76ee\u6807\uff0c\u652f\u6301\u5b57\u6bb5<code>matchLabels</code>\u3002 \u8bf7\u53c2\u9605\u8fd9\u91cc\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u4ee5\u53ca\u5982\u4f55\u914d\u7f6e\u6807\u7b7e\u9009\u62e9\u5668\u3002</p> <p>\u5982\u679c<code>namespaceSelector</code>\u4e3a\u7a7a\uff0c\u6346\u7ed1\u76ee\u6807\u5c06\u540c\u6b65\u5230\u6240\u6709\u547d\u540d\u7a7a\u95f4\u3002</p>"},{"location":"projects/trust-manager/#_3","title":"\u5b89\u88c5","text":"<p>\u9996\u5148\uff0c\u5c06cert-manager\u5b89\u88c5\u5230\u96c6\u7fa4\uff0c\u7136\u540e\u5b89\u88c5\u4fe1\u4efb\u64cd\u4f5c\u7b26\u3002 \u5efa\u8bae\u5728<code>cert-manager</code>\u547d\u540d\u7a7a\u95f4\u4e2d\u8fd0\u884c\u4fe1\u4efb\u64cd\u4f5c\u7b26\u3002</p> <pre><code>helm repo add jetstack https://charts.jetstack.io --force-update\nhelm upgrade -i -n cert-manager cert-manager jetstack/cert-manager --set installCRDs=true --wait --create-namespace\nhelm upgrade -i -n cert-manager trust-manager jetstack/trust-manager --wait\n</code></pre>"},{"location":"projects/trust-manager/#_4","title":"\u5feb\u901f\u5165\u95e8\u793a\u4f8b","text":"<pre><code>kubectl create -n cert-manager configmap source-1 --from-literal=cm-key=123\nkubectl create -n cert-manager secret generic source-2 --from-literal=sec-key=ABC\nkubectl apply -f - &lt;&lt;EOF\napiVersion: trust.cert-manager.io/v1alpha1\nkind: Bundle\nmetadata:\n  name: example-bundle\nspec:\n  sources:\n  - configMap:\n      name: \"source-1\"\n      key: \"cm-key\"\n  - secret:\n      name: \"source-2\"\n      key: \"sec-key\"\n  - inLine: |\n      hello world!\n  target:\n    configMap:\n      key: \"target-key\"\nEOF\n</code></pre> <pre><code>kubectl get bundle\nNAME             TARGET       SYNCED   REASON   AGE\nexample-bundle   target-key   True     Synced   5s\n</code></pre> <pre><code>kubectl get cm -A --field-selector=metadata.name=example-bundle\nNAMESPACE            NAME             DATA   AGE\ncert-manager         example-bundle   1      2m18s\ndefault              example-bundle   1      2m18s\nkube-node-lease      example-bundle   1      2m18s\nkube-public          example-bundle   1      2m18s\nkube-system          example-bundle   1      2m18s\nlocal-path-storage   example-bundle   1      2m18s\n</code></pre> <pre><code>kubectl get cm -n kube-system example-bundle -o jsonpath=\"{.data['target-key']}\"\n123\nABC\nhello world!\n</code></pre>"},{"location":"reference/","title":"\u53c2\u8003","text":"<p>\u672c\u8282\u5305\u542b\u53c2\u8003\u8d44\u6599\uff0c\u5305\u62ec TLS \u672f\u8bed\u3001API \u6587\u6863\u4ee5\u53ca\u6709\u5173 cert-manager \u7ec4\u4ef6\u7684\u547d\u4ee4\u884c\u6807\u5fd7\u7684\u4fe1\u606f\u3002</p> <ul> <li> <p>TLS \u672f\u8bed:   \u4e86\u89e3\u8bc1\u4e66\u7ba1\u7406\u5668\u6587\u6863\u4e2d\u4f7f\u7528\u7684 TLS \u672f\u8bed\uff0c\u5982<code>publicly trusted</code>, <code>self-signed</code>, <code>root</code>, <code>intermediate</code> \u548c <code>leaf</code> \u8bc1\u4e66\u3002</p> </li> <li> <p>\u7ec4\u4ef6/ Docker \u6620\u50cf:   \u4e86\u89e3\u8bc1\u4e66\u7ba1\u7406\u5668 Docker \u955c\u50cf\u7684\u547d\u4ee4\u884c\u6807\u5fd7:<code>controller</code>, <code>webhook</code>, <code>cainjector</code>, <code>acmesolver</code>\uff0c\u5b83\u4eec\u8fd0\u884c\u5728\u96c6\u7fa4\u7684\u5bb9\u5668\u4e2d\u3002</p> </li> <li> <p>API \u53c2\u8003:   \u4e86\u89e3\u8bc1\u4e66\u7ba1\u7406\u5668 API\uff0c\u5305\u62ec\u81ea\u5b9a\u4e49\u6e90\uff0c\u5982 Certificate, CertificateRequest, Issuer \u548c ClusterIssuer\u3002</p> </li> </ul>"},{"location":"reference/api-docs/","title":"API \u53c2\u8003","text":"<p>\u4e86\u89e3\u8bc1\u4e66\u7ba1\u7406\u5668 API\uff0c\u5305\u62ec\u81ea\u5b9a\u4e49\u8d44\u6e90\uff0c\u5982 Certificate, CertificateRequest, Issuer \u548c ClusterIssuer\u3002</p> <p>\u5305:</p> <ul> <li> acme.cert-manager.io/v1 </li> <li> cert-manager.io/v1 </li> <li> meta.cert-manager.io/v1 </li> <li> webhook.config.cert-manager.io/v1alpha1 </li> </ul>"},{"location":"reference/api-docs/#acme.cert-manager.io/v1","title":"acme.cert-manager.io/v1","text":"<p>\u5305v1\u662fAPI\u7684v1\u7248\u672c\u3002</p> <p>\u8d44\u6e90\u7c7b\u578b:</p> <ul> <li> Challenge </li> <li> Order </li> </ul> <p></p>"},{"location":"reference/api-docs/#challenge","title":"Challenge","text":"<p>Challenge\u662f\u4e00\u79cd\u8868\u793a\u4f7f\u7528ACME\u670d\u52a1\u5668\u7684Challenge\u8bf7\u6c42\u7684\u7c7b\u578b</p> Field Description <code>apiVersion</code>          string        <code>acme.cert-manager.io/v1</code> <code>kind</code>          string        <code>Challenge</code> <code>metadata</code> Kubernetes meta/v1.ObjectMeta          \u5173\u4e8e<code>\u5143\u6570\u636e</code>\u5b57\u6bb5\u7684\u5b57\u6bb5\uff0c\u8bf7\u53c2\u8003Kubernetes API\u6587\u6863\u3002        <code>spec</code> ChallengeSpec <code>url</code> string <p>\u6b64\u6311\u6218\u7684ACME\u6311\u6218\u8d44\u6e90\u7684URL\u3002\u8fd9\u53ef\u7528\u4e8e\u67e5\u627e\u5173\u4e8e\u6b64\u6311\u6218\u72b6\u6001\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</p> <code>authorizationURL</code> string <p>\u6307\u5411\u6b64\u6311\u6218\u6240\u5c5e\u7684ACME\u6388\u6743\u8d44\u6e90\u7684URL\u3002</p> <code>dnsName</code> string <p>dnsName\u662f\u8fd9\u4e2a\u6311\u6218\u7684\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982example.com\u3002\u5982\u679c\u8bf7\u6c42\u7684DNSName\u662f\u4e00\u4e2a\u2018\u901a\u914d\u7b26\u2019\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u975e\u901a\u914d\u7b26\u57df\uff0c\u4f8b\u5982<code>*.example.com</code>\uff0c\u5b83\u5fc5\u987b\u662f<code>example.com</code>\u3002</p> <code>wildcard</code> bool (Optional) <p>wildcard will be true if this challenge is for a wildcard identifier, for example \u2018*.example.com\u2019.</p> <code>type</code> ACMEChallengeType <p>The type of ACME challenge this resource represents. One of \u201cHTTP-01\u201d or \u201cDNS-01\u201d.</p> <code>token</code> string <p>The ACME challenge token for this challenge. This is the raw value returned from the ACME server.</p> <code>key</code> string <p>                 The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format:                 <code>&lt;private key JWK thumbprint&gt;.&lt;key from acme server for challenge&gt;</code>. For DNS01 challenges, this is the base64 encoded SHA256 sum of the                 <code>&lt;private key JWK thumbprint&gt;.&lt;key from acme server for challenge&gt;</code>                 text that must be set as the TXT record content.               </p> <code>solver</code> ACMEChallengeSolver <p>Contains the domain solving configuration that should be used to solve this challenge resource.</p> <code>issuerRef</code> ObjectReference <p>References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an \u2018ACME\u2019 Issuer, an error will be returned and the Challenge will be marked as failed.</p> <code>status</code> ChallengeStatus (Optional) <p></p>"},{"location":"reference/api-docs/#order","title":"Order","text":"<p>Order is a type to represent an Order with an ACME server</p> Field Description <code>apiVersion</code>          string        <code>acme.cert-manager.io/v1</code> <code>kind</code>          string        <code>Order</code> <code>metadata</code> Kubernetes meta/v1.ObjectMeta          \u5173\u4e8e<code>\u5143\u6570\u636e</code>\u5b57\u6bb5\u7684\u5b57\u6bb5\uff0c\u8bf7\u53c2\u8003Kubernetes API\u6587\u6863\u3002        <code>spec</code> OrderSpec <code>request</code> []byte <p>DER\u7f16\u7801\u4e2d\u7684\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u5b57\u8282\u3002\u8fd9\u5c06\u5728\u6700\u7ec8\u786e\u5b9a\u8ba2\u5355\u65f6\u4f7f\u7528\u3002\u6b64\u5b57\u6bb5\u5fc5\u987b\u6309\u987a\u5e8f\u8bbe\u7f6e\u3002</p> <code>issuerRef</code> ObjectReference <p>IssuerRef\u5f15\u7528\u4e00\u4e2a\u6b63\u786e\u914d\u7f6e\u7684acme\u7c7b\u578b\u9881\u53d1\u8005\uff0c\u8be5\u9881\u53d1\u8005\u5e94\u7528\u4e8e\u521b\u5efa\u6b64\u8ba2\u5355\u3002\u5982\u679c\u9881\u53d1\u8005\u4e0d\u5b58\u5728\uff0c\u5c06\u91cd\u8bd5\u5904\u7406\u3002\u5982\u679c\u53d1\u884c\u4eba\u4e0d\u662fACME\u2019\u53d1\u5e03\u8005\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff0c\u8ba2\u5355\u5c06\u88ab\u6807\u8bb0\u4e3a\u5931\u8d25\u3002</p> <code>commonName</code> string (Optional) <p>CommonName\u662f\u5728DER\u7f16\u7801\u7684CSR\u4e0a\u6307\u5b9a\u7684\u516c\u5171\u540d\u79f0\u3002\u5982\u679c\u6307\u5b9a\uff0c\u8be5\u503c\u4e5f\u5fc5\u987b\u51fa\u73b0\u5728<code>dnsNames</code>\u6216<code>ipAddresses</code>\u4e2d\u3002\u8be5\u5b57\u6bb5\u5fc5\u987b\u4e0eDER\u7f16\u7801\u7684CSR\u4e0a\u7684\u76f8\u5e94\u5b57\u6bb5\u5339\u914d\u3002</p> <code>dnsNames</code> []string (Optional) <p>DNSNames\u662f\u4e00\u4e2aDNS\u540d\u79f0\u5217\u8868\uff0c\u5e94\u8be5\u5305\u62ec\u5728\u8ba2\u5355\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\u3002\u8be5\u5b57\u6bb5\u5fc5\u987b\u4e0eDER\u7f16\u7801\u7684CSR\u4e0a\u7684\u76f8\u5e94\u5b57\u6bb5\u5339\u914d\u3002</p> <code>ipAddresses</code> []string (Optional) <p>IPAddresses\u662f\u4e00\u4e2aIP\u5730\u5740\u5217\u8868\uff0c\u5e94\u8be5\u5305\u62ec\u5728\u8ba2\u5355\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\u3002\u8be5\u5b57\u6bb5\u5fc5\u987b\u4e0eDER\u7f16\u7801\u7684CSR\u4e0a\u7684\u76f8\u5e94\u5b57\u6bb5\u5339\u914d\u3002</p> <code>duration</code> Kubernetes meta/v1.Duration (Optional) <p>\u6301\u7eed\u65f6\u95f4\u662f\u8bf7\u6c42\u8bc1\u4e66\u7684\u672a\u8fc7\u671f\u65e5\u671f\u7684\u6301\u7eed\u65f6\u95f4\u3002\u8fd9\u662f\u6839\u636eACME\u89c4\u8303\u5728\u8ba2\u5355\u521b\u5efa\u65f6\u8bbe\u7f6e\u7684\u3002</p> <code>status</code> OrderStatus (Optional) <p></p>"},{"location":"reference/api-docs/#acmeauthorization","title":"ACMEAuthorization","text":"<p> (Appears on: OrderStatus) </p> <p>ACMEAuthorization\u5305\u542b\u6388\u6743\u65f6\u4eceACME\u670d\u52a1\u5668\u8fd4\u56de\u7684\u6570\u636e\uff0c\u5fc5\u987b\u5b8c\u6210\u6388\u6743\u624d\u80fd\u5728ACME order\u8d44\u6e90\u4e0a\u9a8c\u8bc1DNS\u540d\u79f0\u3002</p> Field Description <code>url</code> string <p>URL\u662f\u5fc5\u987b\u5b8c\u6210\u7684\u6388\u6743\u7684URL</p> <code>identifier</code> string (Optional) <p>\u6807\u8bc6\u7b26\u662f\u4f5c\u4e3a\u6b64\u6388\u6743\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u9a8c\u8bc1\u7684DNS\u540d\u79f0</p> <code>wildcard</code> bool (Optional) <p> \u5982\u679c\u6b64\u6388\u6743\u7528\u4e8e\u901a\u914d\u7b26DNS\u540d\u79f0\uff0c\u5219\u901a\u914d\u7b26\u5c06\u4e3atrue\u3002 \u5982\u679c\u8fd9\u662f\u771f\u7684\uff0c\u6807\u8bc6\u7b26\u5c06\u662f\u975e\u901a\u914d\u7b26\u7248\u672c\u7684DNS\u540d\u79f0\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u2018*.example.com\u2019\u662f\u6b63\u5728\u9a8c\u8bc1\u7684DNS\u540d\u79f0\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u5c06\u662f\u2018true\u2019\u6807\u8bc6\u7b26\u2019\u5b57\u6bb5\u5c06\u662f\u2018example.com\u2019 </p> <code>initialState</code> State (Optional) <p>InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already \u2018valid\u2019, the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables \u2018authz reuse\u2019 (such as Let\u2019s Encrypt\u2019s production endpoint). If not set and \u2018identifier\u2019 is set, the state is assumed to be pending and a Challenge will be created.</p> <code>challenges</code> []ACMEChallenge (Optional) <p>Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.</p> <p></p>"},{"location":"reference/api-docs/#acmechallenge","title":"ACMEChallenge","text":"<p> (Appears on: ACMEAuthorization) </p> <p>Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.</p> Field Description <code>url</code> string <p>URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.</p> <code>token</code> string <p>Token is the token that must be presented for this challenge. This is used to compute the \u2018key\u2019 that must also be presented.</p> <code>type</code> string <p>Type is the type of challenge being offered, e.g. \u2018http-01\u2019, \u2018dns-01\u2019, \u2018tls-sni-01\u2019, etc. This is the raw value retrieved from the ACME server. Only \u2018http-01\u2019 and \u2018dns-01\u2019 are supported by cert-manager, other values will be ignored.</p> <p></p>"},{"location":"reference/api-docs/#acmechallengesolver","title":"ACMEChallengeSolver","text":"<p> (Appears on: ACMEIssuer, ChallengeSpec) </p> <p>An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.</p> Field Description <code>selector</code> CertificateDNSNameSelector (Optional) <p>Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the \u2018default\u2019 solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.</p> <code>http01</code> ACMEChallengeSolverHTTP01 (Optional) <p> Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. <code>*.example.com</code>) using the HTTP01 challenge mechanism. </p> <code>dns01</code> ACMEChallengeSolverDNS01 (Optional) <p>Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.</p> <p></p>"},{"location":"reference/api-docs/#acmechallengesolverdns01","title":"ACMEChallengeSolverDNS01","text":"<p> (Appears on: ACMEChallengeSolver) </p> <p>Used to configure a DNS01 challenge provider to be used when solving DNS01 challenges. Only one DNS provider may be configured per solver.</p> Field Description <code>cnameStrategy</code> CNAMEStrategy (Optional) <p>CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.</p> <code>akamai</code> ACMEIssuerDNS01ProviderAkamai (Optional) <p>Use the Akamai DNS zone management API to manage DNS01 challenge records.</p> <code>cloudDNS</code> ACMEIssuerDNS01ProviderCloudDNS (Optional) <p>Use the Google Cloud DNS API to manage DNS01 challenge records.</p> <code>cloudflare</code> ACMEIssuerDNS01ProviderCloudflare (Optional) <p>Use the Cloudflare API to manage DNS01 challenge records.</p> <code>route53</code> ACMEIssuerDNS01ProviderRoute53 (Optional) <p>Use the AWS Route53 API to manage DNS01 challenge records.</p> <code>azureDNS</code> ACMEIssuerDNS01ProviderAzureDNS (Optional) <p>Use the Microsoft Azure DNS API to manage DNS01 challenge records.</p> <code>digitalocean</code> ACMEIssuerDNS01ProviderDigitalOcean (Optional) <p>Use the DigitalOcean DNS API to manage DNS01 challenge records.</p> <code>acmeDNS</code> ACMEIssuerDNS01ProviderAcmeDNS (Optional) <p> Use the \u2018ACME DNS\u2019 (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records. </p> <code>rfc2136</code> ACMEIssuerDNS01ProviderRFC2136 (Optional) <p> Use RFC2136 (\u201cDynamic Updates in the Domain Name System\u201d) (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records. </p> <code>webhook</code> ACMEIssuerDNS01ProviderWebhook (Optional) <p>Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.</p> <p></p>"},{"location":"reference/api-docs/#acmechallengesolverhttp01","title":"ACMEChallengeSolverHTTP01","text":"<p> (Appears on: ACMEChallengeSolver) </p> <p>ACMEChallengeSolverHTTP01\u5305\u542b\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u5728Kubernetes\u96c6\u7fa4\u4e2d\u89e3\u51b3HTTP01\u6311\u6218\u7684\u914d\u7f6e\u3002\u8fd9\u901a\u5e38\u662f\u901a\u8fc7\u521b\u5efa\u2018routes\u2019\u7684\u4e00\u4e9b\u63cf\u8ff0\uff0c\u8fd9\u4e9b\u63cf\u8ff0\u914d\u7f6e\u5165\u53e3\u63a7\u5236\u5668\u5c06\u6d41\u91cf\u5f15\u5bfc\u5230\u6c42\u89e3\u5668pod\uff0c\u5b83\u8d1f\u8d23\u54cd\u5e94ACME\u670d\u52a1\u5668\u7684HTTP\u8bf7\u6c42\u3002Ingress / Gateway\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u4e2a\u3002</p> Field Description <code>ingress</code> ACMEChallengeSolverHTTP01Ingress (Optional) <p>\u57fa\u4e8e\u5165\u53e3\u7684HTTP01\u6311\u6218\u89e3\u51b3\u5668\u5c06\u901a\u8fc7\u521b\u5efa\u6216\u4fee\u6539\u5165\u53e3\u8d44\u6e90\u6765\u89e3\u51b3\u6311\u6218\uff0c\u4ee5\u4fbf\u8def\u7531\u2018/.well-known/acme-challenge/XYZ\u2019\u6311\u6218\u89e3\u51b3\u8005;\u7531cert-manager\u4e3a\u6bcf\u4e2a\u8981\u5b8c\u6210\u7684\u6311\u6218\u63d0\u4f9b\u7684pod\u3002</p> <code>gatewayHTTPRoute</code> ACMEChallengeSolverHTTP01GatewayHTTPRoute (Optional) <p>Gateway API\u662f\u4e00\u4e2asig-network\u793e\u533aAPI\uff0c\u7528\u4e8e\u5728Kubernetes\u4e2d\u5efa\u6a21\u670d\u52a1\u7f51\u7edc(https://gateway-api.sigs.k8s.io/)\u3002\u7f51\u5173\u6c42\u89e3\u5668\u5c06\u5728\u4e0e\u6311\u6218\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u521b\u5efa\u5e26\u6709\u6307\u5b9a\u6807\u7b7e\u7684HTTPRoutes\u3002\u8fd9\u4e2a\u89e3\u7b97\u5668\u662f\u5b9e\u9a8c\u6027\u7684\uff0c\u5b57\u6bb5/\u884c\u4e3a\u5728\u672a\u6765\u53ef\u80fd\u4f1a\u6539\u53d8\u3002</p> <p></p>"},{"location":"reference/api-docs/#acmechallengesolverhttp01gatewayhttproute","title":"ACMEChallengeSolverHTTP01GatewayHTTPRoute","text":"<p> (Appears on: ACMEChallengeSolverHTTP01) </p> <p>The ACMEChallengeSolverHTTP01GatewayHTTPRoute solver will create HTTPRoute objects for a Gateway class routing to an ACME challenge solver pod.</p> Field Description <code>serviceType</code> Kubernetes core/v1.ServiceType (Optional) <p>Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.</p> <code>labels</code> map[string]string (Optional) <p>Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.</p> <code>parentRefs</code> []sigs.k8s.io/gateway-api/apis/v1alpha2.ParentReference <p>           When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See:           https://gateway-api.sigs.k8s.io/v1alpha2/api-types/httproute/#attaching-to-gateways </p> <p></p>"},{"location":"reference/api-docs/#acmechallengesolverhttp01ingress","title":"ACMEChallengeSolverHTTP01Ingress","text":"<p> (Appears on: ACMEChallengeSolverHTTP01) </p> Field Description <code>serviceType</code> Kubernetes core/v1.ServiceType (Optional) <p>Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.</p> <code>class</code> string (Optional) <p>The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of \u2018class\u2019 or \u2018name\u2019 may be specified.</p> <code>name</code> string (Optional) <p>The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.</p> <code>podTemplate</code> ACMEChallengeSolverHTTP01IngressPodTemplate (Optional) <p>Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.</p> <code>ingressTemplate</code> ACMEChallengeSolverHTTP01IngressTemplate (Optional) <p>Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.</p> <p></p>"},{"location":"reference/api-docs/#acmechallengesolverhttp01ingressobjectmeta","title":"ACMEChallengeSolverHTTP01IngressObjectMeta","text":"<p> (Appears on: ACMEChallengeSolverHTTP01IngressTemplate) </p> Field Description <code>annotations</code> map[string]string (Optional) <p>Annotations that should be added to the created ACME HTTP01 solver ingress.</p> <code>labels</code> map[string]string (Optional) <p>Labels that should be added to the created ACME HTTP01 solver ingress.</p> <p></p>"},{"location":"reference/api-docs/#acmechallengesolverhttp01ingresspodobjectmeta","title":"ACMEChallengeSolverHTTP01IngressPodObjectMeta","text":"<p> (Appears on: ACMEChallengeSolverHTTP01IngressPodTemplate) </p> Field Description <code>annotations</code> map[string]string (Optional) <p>Annotations that should be added to the create ACME HTTP01 solver pods.</p> <code>labels</code> map[string]string (Optional) <p>Labels that should be added to the created ACME HTTP01 solver pods.</p> <p></p>"},{"location":"reference/api-docs/#acmechallengesolverhttp01ingresspodspec","title":"ACMEChallengeSolverHTTP01IngressPodSpec","text":"<p> (Appears on: ACMEChallengeSolverHTTP01IngressPodTemplate) </p> Field Description <code>nodeSelector</code> map[string]string (Optional) <p> NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node\u2019s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/ </p> <code>affinity</code> Kubernetes core/v1.Affinity (Optional) <p>If specified, the pod\u2019s scheduling constraints</p> <code>tolerations</code> []Kubernetes core/v1.Toleration (Optional) <p>If specified, the pod\u2019s tolerations.</p> <code>priorityClassName</code> string (Optional) <p>If specified, the pod\u2019s priorityClassName.</p> <code>serviceAccountName</code> string (Optional) <p>If specified, the pod\u2019s service account</p> <p></p>"},{"location":"reference/api-docs/#acmechallengesolverhttp01ingresspodtemplate","title":"ACMEChallengeSolverHTTP01IngressPodTemplate","text":"<p> (Appears on: ACMEChallengeSolverHTTP01Ingress) </p> Field Description <code>metadata</code> ACMEChallengeSolverHTTP01IngressPodObjectMeta (Optional) <p>ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the \u2018labels\u2019 and \u2018annotations\u2019 fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.</p> <code>spec</code> ACMEChallengeSolverHTTP01IngressPodSpec (Optional) <p>PodSpec defines overrides for the HTTP01 challenge solver pod. Only the \u2018priorityClassName\u2019, \u2018nodeSelector\u2019, \u2018affinity\u2019, \u2018serviceAccountName\u2019 and \u2018tolerations\u2019 fields are supported currently. All other fields will be ignored.</p> <code>nodeSelector</code> map[string]string (Optional) <p> NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node\u2019s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/ </p> <code>affinity</code> Kubernetes core/v1.Affinity (Optional) <p>If specified, the pod\u2019s scheduling constraints</p> <code>tolerations</code> []Kubernetes core/v1.Toleration (Optional) <p>If specified, the pod\u2019s tolerations.</p> <code>priorityClassName</code> string (Optional) <p>If specified, the pod\u2019s priorityClassName.</p> <code>serviceAccountName</code> string (Optional) <p>If specified, the pod\u2019s service account</p> <p></p>"},{"location":"reference/api-docs/#acmechallengesolverhttp01ingresstemplate","title":"ACMEChallengeSolverHTTP01IngressTemplate","text":"<p> (Appears on: ACMEChallengeSolverHTTP01Ingress) </p> Field Description <code>metadata</code> ACMEChallengeSolverHTTP01IngressObjectMeta (Optional) <p>ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the \u2018labels\u2019 and \u2018annotations\u2019 fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.</p> <p></p>"},{"location":"reference/api-docs/#acmechallengetype-string-alias","title":"ACMEChallengeType (<code>string</code> alias)","text":"<p> (Appears on: ChallengeSpec) </p> <p>The type of ACME challenge. Only HTTP-01 and DNS-01 are supported.</p> Value Description <p>\"DNS-01\"</p> <p> ACMEChallengeTypeDNS01 denotes a Challenge is of type dns-01 More info: https://letsencrypt.org/docs/challenge-types/#dns-01-challenge </p> <p>\"HTTP-01\"</p> <p> ACMEChallengeTypeHTTP01 denotes a Challenge is of type http-01 More info: https://letsencrypt.org/docs/challenge-types/#http-01-challenge </p> <p></p>"},{"location":"reference/api-docs/#acmeexternalaccountbinding","title":"ACMEExternalAccountBinding","text":"<p> (Appears on: ACMEIssuer) </p> <p>ACMEExternalAccountBinding is a reference to a CA external account of the ACME server.</p> Field Description <code>keyID</code> string <p>keyID is the ID of the CA key that the External Account is bound to.</p> <code>keySecretRef</code> SecretKeySelector <p> keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The <code>key</code> is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret must be un-padded, base64 URL encoded data. </p> <code>keyAlgorithm</code> HMACKeyAlgorithm (Optional) <p>Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.</p> <p></p>"},{"location":"reference/api-docs/#acmeissuer","title":"ACMEIssuer","text":"<p> (Appears on: IssuerConfig) </p> <p>ACMEIssuer contains the specification for an ACME issuer. This uses the RFC8555 specification to obtain certificates by completing \u2018challenges\u2019 to prove ownership of domain identifiers. Earlier draft versions of the ACME specification are not supported.</p> Field Description <code>email</code> string (Optional) <p>Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.</p> <code>server</code> string <p> Server is the URL used to access the ACME server\u2019s \u2018directory\u2019 endpoint. For example, for Let\u2019s Encrypt\u2019s staging endpoint, you would use: \u201chttps://acme-staging-v02.api.letsencrypt.org/directory\u201d. Only ACME v2 endpoints (i.e. RFC 8555) are supported. </p> <code>preferredChain</code> string (Optional) <p>PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let\u2019s Encrypt\u2019s DST crosssign you would use: \u201cDST Root CA X3\u201d or \u201cISRG Root X1\u201d for the newer Let\u2019s Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer\u2019s CN</p> <code>skipTLSVerify</code> bool (Optional) <p>Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.</p> <code>externalAccountBinding</code> ACMEExternalAccountBinding (Optional) <p>ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.</p> <code>privateKeySecretRef</code> SecretKeySelector <p> PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a <code>key</code> may be specified to select a specific entry within the named Secret resource. If <code>key</code> is not specified, a default of <code>tls.key</code> will be used. </p> <code>solvers</code> []ACMEChallengeSolver (Optional) <p> Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/ </p> <code>disableAccountKeyGeneration</code> bool (Optional) <p> Enables or disables generating a new ACME account key. If true, the Issuer resource will not request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false. </p> <code>enableDurationFeature</code> bool (Optional) <p>Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let\u2019s Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.</p> <p></p>"},{"location":"reference/api-docs/#acmeissuerdns01provideracmedns","title":"ACMEIssuerDNS01ProviderAcmeDNS","text":"<p> (Appears on: ACMEChallengeSolverDNS01) </p> <p>ACMEIssuerDNS01ProviderAcmeDNS is a structure containing the configuration for ACME-DNS servers</p> Field Description <code>host</code> string <code>accountSecretRef</code> SecretKeySelector <p></p>"},{"location":"reference/api-docs/#acmeissuerdns01providerakamai","title":"ACMEIssuerDNS01ProviderAkamai","text":"<p> (Appears on: ACMEChallengeSolverDNS01) </p> <p>ACMEIssuerDNS01ProviderAkamai is a structure containing the DNS configuration for Akamai DNS\u2014Zone Record Management API</p> Field Description <code>serviceConsumerDomain</code> string <code>clientTokenSecretRef</code> SecretKeySelector <code>clientSecretSecretRef</code> SecretKeySelector <code>accessTokenSecretRef</code> SecretKeySelector <p></p>"},{"location":"reference/api-docs/#acmeissuerdns01providerazuredns","title":"ACMEIssuerDNS01ProviderAzureDNS","text":"<p> (Appears on: ACMEChallengeSolverDNS01) </p> <p>ACMEIssuerDNS01ProviderAzureDNS is a structure containing the configuration for Azure DNS</p> Field Description <code>clientID</code> string (Optional) <p>if both this and ClientSecret are left unset MSI will be used</p> <code>clientSecretSecretRef</code> SecretKeySelector (Optional) <p>if both this and ClientID are left unset MSI will be used</p> <code>subscriptionID</code> string <p>ID of the Azure subscription</p> <code>tenantID</code> string (Optional) <p>when specifying ClientID and ClientSecret then this field is also needed</p> <code>resourceGroupName</code> string <p>resource group the DNS zone is located in</p> <code>hostedZoneName</code> string (Optional) <p>name of the DNS zone that should be used</p> <code>environment</code> AzureDNSEnvironment (Optional) <p>name of the Azure environment (default AzurePublicCloud)</p> <code>managedIdentity</code> AzureManagedIdentity (Optional) <p>managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID</p> <p></p>"},{"location":"reference/api-docs/#acmeissuerdns01providerclouddns","title":"ACMEIssuerDNS01ProviderCloudDNS","text":"<p> (Appears on: ACMEChallengeSolverDNS01) </p> <p>ACMEIssuerDNS01ProviderCloudDNS is a structure containing the DNS configuration for Google Cloud DNS</p> Field Description <code>serviceAccountSecretRef</code> SecretKeySelector (Optional) <code>project</code> string <code>hostedZoneName</code> string (Optional) <p>HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.</p> <p></p>"},{"location":"reference/api-docs/#acmeissuerdns01providercloudflare","title":"ACMEIssuerDNS01ProviderCloudflare","text":"<p> (Appears on: ACMEChallengeSolverDNS01) </p> <p> ACMEIssuerDNS01ProviderCloudflare is a structure containing the DNS configuration for Cloudflare. One of <code>apiKeySecretRef</code> or <code>apiTokenSecretRef</code> must be provided. </p> Field Description <code>email</code> string (Optional) <p>Email of the account, only required when using API key based authentication.</p> <code>apiKeySecretRef</code> SecretKeySelector (Optional) <p>API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.</p> <code>apiTokenSecretRef</code> SecretKeySelector (Optional) <p>API token used to authenticate with Cloudflare.</p> <p></p>"},{"location":"reference/api-docs/#acmeissuerdns01providerdigitalocean","title":"ACMEIssuerDNS01ProviderDigitalOcean","text":"<p> (Appears on: ACMEChallengeSolverDNS01) </p> <p>ACMEIssuerDNS01ProviderDigitalOcean is a structure containing the DNS configuration for DigitalOcean Domains</p> Field Description <code>tokenSecretRef</code> SecretKeySelector <p></p>"},{"location":"reference/api-docs/#acmeissuerdns01providerrfc2136","title":"ACMEIssuerDNS01ProviderRFC2136","text":"<p> (Appears on: ACMEChallengeSolverDNS01) </p> <p>ACMEIssuerDNS01ProviderRFC2136 is a structure containing the configuration for RFC2136 DNS</p> Field Description <code>nameserver</code> string <p>The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1])\u00a0; port is optional. This field is required.</p> <code>tsigSecretSecretRef</code> SecretKeySelector (Optional) <p> The name of the secret containing the TSIG value. If <code>tsigKeyName</code> is defined, this field is required. </p> <code>tsigKeyName</code> string (Optional) <p> The TSIG Key name configured in the DNS. If <code>tsigSecretSecretRef</code> is defined, this field is required. </p> <code>tsigAlgorithm</code> string (Optional) <p> The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when <code>tsigSecretSecretRef</code> and <code>tsigKeyName</code> are defined. Supported values are (case-insensitive): <code>HMACMD5</code> (default), <code>HMACSHA1</code>, <code>HMACSHA256</code> or <code>HMACSHA512</code>. </p> <p></p>"},{"location":"reference/api-docs/#acmeissuerdns01providerroute53","title":"ACMEIssuerDNS01ProviderRoute53","text":"<p> (Appears on: ACMEChallengeSolverDNS01) </p> <p>ACMEIssuerDNS01ProviderRoute53 is a structure containing the Route 53 configuration for AWS</p> Field Description <code>accessKeyID</code> string (Optional) <p> The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials </p> <code>accessKeyIDSecretRef</code> SecretKeySelector (Optional) <p> The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials </p> <code>secretAccessKeySecretRef</code> SecretKeySelector (Optional) <p> The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials </p> <code>role</code> string (Optional) <p>Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata</p> <code>hostedZoneID</code> string (Optional) <p>If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.</p> <code>region</code> string <p>Always set the region when using AccessKeyID and SecretAccessKey</p> <p></p>"},{"location":"reference/api-docs/#acmeissuerdns01providerwebhook","title":"ACMEIssuerDNS01ProviderWebhook","text":"<p> (Appears on: ACMEChallengeSolverDNS01) </p> <p>ACMEIssuerDNS01ProviderWebhook specifies configuration for a webhook DNS01 provider, including where to POST ChallengePayload resources.</p> Field Description <code>groupName</code> string <p>The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.</p> <code>solverName</code> string <p>The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. \u2018cloudflare\u2019.</p> <code>config</code> Kubernetes apiextensions/v1.JSON (Optional) <p>Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation\u2019s documentation.</p> <p></p>"},{"location":"reference/api-docs/#acmeissuerstatus","title":"ACMEIssuerStatus","text":"<p> (Appears on: IssuerStatus) </p> Field Description <code>uri</code> string (Optional) <p>URI is the unique account identifier, which can also be used to retrieve account details from the CA</p> <code>lastRegisteredEmail</code> string (Optional) <p>LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the Issuer</p> <p></p>"},{"location":"reference/api-docs/#azurednsenvironment-string-alias","title":"AzureDNSEnvironment (<code>string</code> alias)","text":"<p> (Appears on: ACMEIssuerDNS01ProviderAzureDNS) </p> Value Description <p>\"AzureChinaCloud\"</p> <p>\"AzureGermanCloud\"</p> <p>\"AzurePublicCloud\"</p> <p>\"AzureUSGovernmentCloud\"</p> <p></p>"},{"location":"reference/api-docs/#azuremanagedidentity","title":"AzureManagedIdentity","text":"<p> (Appears on: ACMEIssuerDNS01ProviderAzureDNS) </p> Field Description <code>clientID</code> string (Optional) <p>client ID of the managed identity, can not be used at the same time as resourceID</p> <code>resourceID</code> string (Optional) <p>resource ID of the managed identity, can not be used at the same time as clientID</p> <p></p>"},{"location":"reference/api-docs/#cnamestrategy-string-alias","title":"CNAMEStrategy (<code>string</code> alias)","text":"<p> (Appears on: ACMEChallengeSolverDNS01) </p> <p>CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones. By default, the None strategy will be applied (i.e. do not follow CNAMEs).</p> <p></p>"},{"location":"reference/api-docs/#certificatednsnameselector","title":"CertificateDNSNameSelector","text":"<p> (Appears on: ACMEChallengeSolver) </p> <p>CertificateDNSNameSelector selects certificates using a label selector, and can optionally select individual DNS names within those certificates. If both MatchLabels and DNSNames are empty, this selector will match all certificates and DNS names within them.</p> Field Description <code>matchLabels</code> map[string]string (Optional) <p>A label selector that is used to refine the set of certificate\u2019s that this challenge solver will apply to.</p> <code>dnsNames</code> []string (Optional) <p>List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.</p> <code>dnsZones</code> []string (Optional) <p>List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.</p> <p></p>"},{"location":"reference/api-docs/#challengespec","title":"ChallengeSpec","text":"<p> (Appears on: Challenge) </p> Field Description <code>url</code> string <p>The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.</p> <code>authorizationURL</code> string <p>The URL to the ACME Authorization resource that this challenge is a part of.</p> <code>dnsName</code> string <p> dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a \u2018wildcard\u2019, this field MUST be set to the non-wildcard domain, e.g. for <code>*.example.com</code>, it must be <code>example.com</code>. </p> <code>wildcard</code> bool (Optional) <p>wildcard will be true if this challenge is for a wildcard identifier, for example \u2018*.example.com\u2019.</p> <code>type</code> ACMEChallengeType <p>The type of ACME challenge this resource represents. One of \u201cHTTP-01\u201d or \u201cDNS-01\u201d.</p> <code>token</code> string <p>The ACME challenge token for this challenge. This is the raw value returned from the ACME server.</p> <code>key</code> string <p>           The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format:           <code>&lt;private key JWK thumbprint&gt;.&lt;key from acme server for challenge&gt;</code>. For DNS01 challenges, this is the base64 encoded SHA256 sum of the           <code>&lt;private key JWK thumbprint&gt;.&lt;key from acme server for challenge&gt;</code>           text that must be set as the TXT record content.         </p> <code>solver</code> ACMEChallengeSolver <p>Contains the domain solving configuration that should be used to solve this challenge resource.</p> <code>issuerRef</code> ObjectReference <p>References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an \u2018ACME\u2019 Issuer, an error will be returned and the Challenge will be marked as failed.</p> <p></p>"},{"location":"reference/api-docs/#challengestatus","title":"ChallengeStatus","text":"<p> (Appears on: Challenge) </p> Field Description <code>processing</code> bool (Optional) <p>Used to denote whether this challenge should be processed or not. This field will only be set to true by the \u2018scheduling\u2019 component. It will only be set to false by the \u2018challenges\u2019 controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.</p> <code>presented</code> bool (Optional) <p> presented will be set to true if the challenge values for this challenge are currently \u2018presented\u2019. This does not imply the self check is passing. Only that the values have been \u2018submitted\u2019 for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured). </p> <code>reason</code> string (Optional) <p>Contains human readable information on why the Challenge is in the current state.</p> <code>state</code> State (Optional) <p>Contains the current \u2018state\u2019 of the challenge. If not set, the state of the challenge is unknown.</p> <p></p>"},{"location":"reference/api-docs/#hmackeyalgorithm-string-alias","title":"HMACKeyAlgorithm (<code>string</code> alias)","text":"<p> (Appears on: ACMEExternalAccountBinding) </p> <p>HMACKeyAlgorithm is the name of a key algorithm used for HMAC encryption</p> Value Description <p>\"HS256\"</p> <p>\"HS384\"</p> <p>\"HS512\"</p> <p></p>"},{"location":"reference/api-docs/#orderspec","title":"OrderSpec","text":"<p> (Appears on: Order) </p> \u5b57\u6bb5 \u63cf\u8ff0 <code>request</code> []byte <p>DER\u7f16\u7801\u4e2d\u7684\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u5b57\u8282\u3002\u8fd9\u5c06\u5728\u6700\u7ec8\u786e\u5b9a\u8ba2\u5355\u65f6\u4f7f\u7528\u3002\u6b64\u5b57\u6bb5\u5fc5\u987b\u6309\u987a\u5e8f\u8bbe\u7f6e\u3002</p> <code>issuerRef</code> ObjectReference <p>IssuerRef\u5f15\u7528\u4e00\u4e2a\u6b63\u786e\u914d\u7f6e\u7684acme\u7c7b\u578b\u9881\u53d1\u8005\uff0c\u8be5\u9881\u53d1\u8005\u5e94\u7528\u4e8e\u521b\u5efa\u6b64\u8ba2\u5355\u3002\u5982\u679c\u9881\u53d1\u8005\u4e0d\u5b58\u5728\uff0c\u5c06\u91cd\u8bd5\u5904\u7406\u3002\u5982\u679c\u53d1\u884c\u4eba\u4e0d\u662fACME\u2019\u53d1\u5e03\u8005\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff0c\u8ba2\u5355\u5c06\u88ab\u6807\u8bb0\u4e3a\u5931\u8d25\u3002</p> <code>commonName</code> string (Optional) <p> CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in <code>dnsNames</code> or <code>ipAddresses</code>. This field must match the corresponding field on the DER encoded CSR. </p> <code>dnsNames</code> []string (Optional) <p>DNSNames\u662f\u4e00\u4e2aDNS\u540d\u79f0\u5217\u8868\uff0c\u5e94\u8be5\u5305\u62ec\u5728\u8ba2\u5355\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\u3002\u8be5\u5b57\u6bb5\u5fc5\u987b\u4e0eDER\u7f16\u7801\u7684CSR\u4e0a\u7684\u76f8\u5e94\u5b57\u6bb5\u5339\u914d\u3002</p> <code>ipAddresses</code> []string (Optional) <p>IPAddresses\u662f\u4e00\u4e2aIP\u5730\u5740\u5217\u8868\uff0c\u5e94\u8be5\u5305\u62ec\u5728\u8ba2\u5355\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\u3002\u8be5\u5b57\u6bb5\u5fc5\u987b\u4e0eDER\u7f16\u7801\u7684CSR\u4e0a\u7684\u76f8\u5e94\u5b57\u6bb5\u5339\u914d\u3002</p> <code>duration</code> Kubernetes meta/v1.Duration (Optional) <p>\u6301\u7eed\u65f6\u95f4\u662f\u8bf7\u6c42\u8bc1\u4e66\u7684\u672a\u8fc7\u671f\u65e5\u671f\u7684\u6301\u7eed\u65f6\u95f4\u3002\u8fd9\u662f\u6839\u636eACME\u89c4\u8303\u5728\u8ba2\u5355\u521b\u5efa\u65f6\u8bbe\u7f6e\u7684\u3002</p> <p></p>"},{"location":"reference/api-docs/#orderstatus","title":"OrderStatus","text":"<p> (Appears on: Order) </p> Field Description <code>url</code> string (Optional) <p>\u8be5\u547d\u4ee4\u7684\u7f51\u5740\u3002\u5728\u7b2c\u4e00\u6b21\u521b\u5efa\u8d44\u6e90\u65f6\uff0c\u521d\u59cb\u503c\u4e3a\u7a7a\u3002\u5f53Order\u7b2c\u4e00\u6b21\u88ab\u5904\u7406\u65f6\uff0cOrder\u63a7\u5236\u5668\u5c06\u586b\u5145\u6b64\u5b57\u6bb5\u3002\u8be5\u5b57\u6bb5\u5728\u521d\u59cb\u8bbe\u7f6e\u540e\u5c06\u662f\u4e0d\u53ef\u53d8\u7684\u3002</p> <code>finalizeURL</code> string (Optional) <p>\u8ba2\u5355\u7684FinalizeURL\u8fd9\u7528\u4e8e\u5728\u8ba2\u5355\u5b8c\u6210\u540e\u83b7\u53d6\u8be5\u8ba2\u5355\u7684\u8bc1\u4e66\u3002</p> <code>authorizations</code> []ACMEAuthorization (Optional) <p>\u6388\u6743\u5305\u542b\u4eceACME\u670d\u52a1\u5668\u8fd4\u56de\u7684\u5173\u4e8e\u5fc5\u987b\u5b8c\u6210\u54ea\u4e9b\u6388\u6743\u624d\u80fd\u9a8c\u8bc1\u8ba2\u5355\u4e0a\u6307\u5b9a\u7684DNS\u540d\u79f0\u7684\u6570\u636e\u3002</p> <code>certificate</code> []byte (Optional) <p>\u8bc1\u4e66\u662f\u6b64\u8ba2\u5355\u7684PEM\u7f16\u7801\u8bc1\u4e66\u7684\u526f\u672c\u3002\u6b64\u5b57\u6bb5\u5c06\u5728\u8ba2\u5355\u4e0eACME\u670d\u52a1\u5668\u6210\u529f\u5b8c\u6210\u540e\u586b\u5145\uff0c\u5e76\u4e14\u8ba2\u5355\u5df2\u8f6c\u6362\u4e3a\u2018valid\u2019\u72b6\u6001\u3002</p> <code>state</code> State (Optional) <p>State\u5305\u542b\u6b64Order\u8d44\u6e90\u7684\u5f53\u524d\u72b6\u6001\u3002\u56fd\u5bb6\u300a;success\u2019\u548c\u300a;expired\u2019\u300a;final\u2019</p> <code>reason</code> string (Optional) <p>Reason\u53ef\u9009\u5730\u63d0\u4f9b\u5173\u4e8e\u8ba2\u5355\u4e3a\u4f55\u5904\u4e8e\u5f53\u524d\u72b6\u6001\u7684\u66f4\u591a\u4fe1\u606f\u3002</p> <code>failureTime</code> Kubernetes meta/v1.Time (Optional) <p>FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.</p> <p></p>"},{"location":"reference/api-docs/#state-string-alias","title":"State (<code>string</code> alias)","text":"<p> (Appears on: ACMEAuthorization, ChallengeStatus, OrderStatus) </p> <p>     State represents the state of an ACME resource, such as an Order. The possible options here map to the corresponding values in the ACME specification. Full details of these values can be found here: https://tools.ietf.org/html/draft-ietf-acme-acme-15#section-7.1.6     Clients utilising this type must also gracefully handle unknown values, as the contents of this enumeration may be added to over time.   </p> Value Description <p>\"errored\"</p> <p>Errored signifies that the ACME resource has errored for some reason. This is a catch-all state, and is used for marking internal cert-manager errors such as validation failures. This is a final state.</p> <p>\"expired\"</p> <p>Expired signifies that an ACME resource has expired. If an Order is marked \u2018Expired\u2019, one of its validations may have expired or the Order itself. This is a final state.</p> <p>\"invalid\"</p> <p>Invalid signifies that an ACME resource is invalid for some reason. If an Order is marked \u2018invalid\u2019, one of its validations be have invalid for some reason. This is a final state.</p> <p>\"pending\"</p> <p>Pending signifies that an ACME resource is still pending and is not yet ready. If an Order is marked \u2018Pending\u2019, the validations for that Order are still in progress. This is a transient state.</p> <p>\"processing\"</p> <p>Processing signifies that an ACME resource is being processed by the server. If an Order is marked \u2018Processing\u2019, the validations for that Order are currently being processed. This is a transient state.</p> <p>\"ready\"</p> <p>Ready signifies that an ACME resource is in a ready state. If an order is \u2018ready\u2019, all of its challenges have been completed successfully and the order is ready to be finalized. Once finalized, it will transition to the Valid state. This is a transient state.</p> <p>\"\"</p> <p>Unknown is not a real state as part of the ACME spec. It is used to represent an unrecognised value.</p> <p>\"valid\"</p> <p>Valid signifies that an ACME resource is in a valid state. If an order is \u2018valid\u2019, it has been finalized with the ACME server and the certificate can be retrieved from the ACME server using the certificate URL stored in the Order\u2019s status subresource. This is a final state.</p>"},{"location":"reference/api-docs/#cert-manager.io/v1","title":"cert-manager.io/v1","text":"<p>Package v1 is the v1 version of the API.</p> <p>Resource Types:</p> <ul> <li> Certificate </li> <li> CertificateRequest </li> <li> ClusterIssuer </li> <li> Issuer </li> </ul> <p></p>"},{"location":"reference/api-docs/#certificate","title":"Certificate","text":"<p> A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in <code>spec.secretName</code>. </p> <p> The stored certificate will be renewed before it expires (as configured by <code>spec.renewBefore</code>). </p> Field Description <code>apiVersion</code>          string        <code>cert-manager.io/v1</code> <code>kind</code>          string        <code>Certificate</code> <code>metadata</code> Kubernetes meta/v1.ObjectMeta          Refer to the Kubernetes API documentation for the fields of the         <code>metadata</code> field.        <code>spec</code> CertificateSpec <p>Desired state of the Certificate resource.</p> <code>subject</code> X509Subject (Optional) <p> Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name). </p> <code>literalSubject</code> string (Optional) <p> LiteralSubject is an LDAP formatted string that represents the X.509 Subject field. Use this instead of the Subject field if you need to ensure the correct ordering of the RDN sequence, such as when issuing certs for LDAP authentication. See https://github.com/cert-manager/cert-manager/issues/3203, https://github.com/cert-manager/cert-manager/issues/4424. This field is alpha level and is only supported by cert-manager installations where LiteralCertificateSubject feature gate is enabled on both cert-manager controller and webhook. </p> <code>commonName</code> string (Optional) <p> CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4 </p> <code>duration</code> Kubernetes meta/v1.Duration (Optional) <p> The requested \u2018duration\u2019 (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2\u20443 through its duration or <code>renewBefore</code> period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration </p> <code>renewBefore</code> Kubernetes meta/v1.Duration (Optional) <p>                 How long before the currently issued certificate\u2019s expiry cert-manager should renew the certificate. The default is 2\u20443 of the issued certificate\u2019s duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration                 https://golang.org/pkg/time/#ParseDuration </p> <code>dnsNames</code> []string (Optional) <p>DNSNames is a list of DNS subjectAltNames to be set on the Certificate.</p> <code>ipAddresses</code> []string (Optional) <p>IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.</p> <code>uris</code> []string (Optional) <p>URIs is a list of URI subjectAltNames to be set on the Certificate.</p> <code>emailAddresses</code> []string (Optional) <p>EmailAddresses is a list of email subjectAltNames to be set on the Certificate.</p> <code>secretName</code> string <p>SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.</p> <code>secretTemplate</code> CertificateSecretTemplate (Optional) <p>SecretTemplate defines annotations and labels to be copied to the Certificate\u2019s Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate\u2019s Secret.</p> <code>keystores</code> CertificateKeystores (Optional) <p>                 Keystores configures additional keystore output formats stored in the                 <code>secretName</code> Secret resource.               </p> <code>issuerRef</code> ObjectReference <p> IssuerRef is a reference to the issuer for this certificate. If the <code>kind</code> field is not set, or set to <code>Issuer</code>, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the <code>kind</code> field is set to <code>ClusterIssuer</code>, a ClusterIssuer with the provided name will be used. The <code>name</code> field in this stanza is required at all times. </p> <code>isCA</code> bool (Optional) <p> IsCA will mark this Certificate as valid for certificate signing. This will automatically add the <code>cert sign</code> usage to the list of <code>usages</code>. </p> <code>usages</code> []KeyUsage (Optional) <p> Usages is the set of x509 usages that are requested for the certificate. Defaults to <code>digital signature</code> and <code>key encipherment</code> if not specified. </p> <code>privateKey</code> CertificatePrivateKey (Optional) <p>Options to control private keys used for the Certificate.</p> <code>encodeUsagesInRequest</code> bool (Optional) <p>EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest</p> <code>revisionHistoryLimit</code> int32 (Optional) <p> revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate\u2019s history. Each revision represents a single <code>CertificateRequest</code> created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of <code>1</code> or greater. If unset (<code>nil</code>), revisions will not be garbage collected. Default value is <code>nil</code>. </p> <code>additionalOutputFormats</code> []CertificateAdditionalOutputFormat (Optional) <p>                 AdditionalOutputFormats defines extra output formats of the private key and signed certificate chain to be written to this Certificate\u2019s target Secret. This is an Alpha Feature and is only enabled with the                 <code>--feature-gates=AdditionalCertificateOutputFormats=true</code> option on both the controller and webhook components.               </p> <code>status</code> CertificateStatus (Optional) <p>Status of the Certificate. This is set and managed automatically.</p> <p></p>"},{"location":"reference/api-docs/#certificaterequest","title":"CertificateRequest","text":"<p>A CertificateRequest is used to request a signed certificate from one of the configured issuers.</p> <p>     All fields within the CertificateRequest\u2019s <code>spec</code> are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its <code>status.state</code>     field.   </p> <p>A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.</p> Field Description <code>apiVersion</code>          string        <code>cert-manager.io/v1</code> <code>kind</code>          string        <code>CertificateRequest</code> <code>metadata</code> Kubernetes meta/v1.ObjectMeta          Refer to the Kubernetes API documentation for the fields of the         <code>metadata</code> field.        <code>spec</code> CertificateRequestSpec <p>Desired state of the CertificateRequest resource.</p> <code>duration</code> Kubernetes meta/v1.Duration (Optional) <p>The requested \u2018duration\u2019 (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.</p> <code>issuerRef</code> ObjectReference <p> IssuerRef is a reference to the issuer for this CertificateRequest. If the <code>kind</code> field is not set, or set to <code>Issuer</code>, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used. If the <code>kind</code> field is set to <code>ClusterIssuer</code>, a ClusterIssuer with the provided name will be used. The <code>name</code> field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to <code>cert-manager.io</code> if empty. </p> <code>request</code> []byte <p>The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.</p> <code>isCA</code> bool (Optional) <p> IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the <code>cert sign</code> usage to the list of <code>usages</code>. </p> <code>usages</code> []KeyUsage (Optional) <p> Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to <code>digital signature</code> and <code>key encipherment</code> if not specified. </p> <code>username</code> string (Optional) <p>Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.</p> <code>uid</code> string (Optional) <p>UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.</p> <code>groups</code> []string (Optional) <p>Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.</p> <code>extra</code> map[string][]string (Optional) <p>Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.</p> <code>status</code> CertificateRequestStatus (Optional) <p>Status of the CertificateRequest. This is set and managed automatically.</p> <p></p>"},{"location":"reference/api-docs/#clusterissuer","title":"ClusterIssuer","text":"<p> A ClusterIssuer represents a certificate issuing authority which can be referenced as part of <code>issuerRef</code> fields. It is similar to an Issuer, however it is cluster-scoped and therefore can be referenced by resources that exist in any namespace, not just the same namespace as the referent. </p> Field Description <code>apiVersion</code>          string        <code>cert-manager.io/v1</code> <code>kind</code>          string        <code>ClusterIssuer</code> <code>metadata</code> Kubernetes meta/v1.ObjectMeta          Refer to the Kubernetes API documentation for the fields of the         <code>metadata</code> field.        <code>spec</code> IssuerSpec <p>Desired state of the ClusterIssuer resource.</p> <code>IssuerConfig</code> IssuerConfig <p> (Members of <code>IssuerConfig</code> are embedded into this type.) </p> <code>status</code> IssuerStatus (Optional) <p>Status of the ClusterIssuer. This is set and managed automatically.</p> <p></p>"},{"location":"reference/api-docs/#issuer","title":"Issuer","text":"<p> An Issuer represents a certificate issuing authority which can be referenced as part of <code>issuerRef</code> fields. It is scoped to a single namespace and can therefore only be referenced by resources within the same namespace. </p> Field Description <code>apiVersion</code>          string        <code>cert-manager.io/v1</code> <code>kind</code>          string        <code>Issuer</code> <code>metadata</code> Kubernetes meta/v1.ObjectMeta          Refer to the Kubernetes API documentation for the fields of the         <code>metadata</code> field.        <code>spec</code> IssuerSpec <p>Desired state of the Issuer resource.</p> <code>IssuerConfig</code> IssuerConfig <p> (Members of <code>IssuerConfig</code> are embedded into this type.) </p> <code>status</code> IssuerStatus (Optional) <p>Status of the Issuer. This is set and managed automatically.</p> <p></p>"},{"location":"reference/api-docs/#caissuer","title":"CAIssuer","text":"<p> (Appears on: IssuerConfig) </p> Field Description <code>secretName</code> string <p>SecretName is the name of the secret used to sign Certificates issued by this Issuer.</p> <code>crlDistributionPoints</code> []string (Optional) <p>The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.</p> <code>ocspServers</code> []string (Optional) <p> The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be \u201chttp://ocsp.int-x3.letsencrypt.org\u201d. </p> <p></p>"},{"location":"reference/api-docs/#certificateadditionaloutputformat","title":"CertificateAdditionalOutputFormat","text":"<p> (Appears on: CertificateSpec) </p> <p>CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.</p> Field Description <code>type</code> CertificateOutputFormatType <p>Type is the name of the format type that should be written to the Certificate\u2019s target Secret.</p> <p></p>"},{"location":"reference/api-docs/#certificatecondition","title":"CertificateCondition","text":"<p> (Appears on: CertificateStatus) </p> <p>CertificateCondition contains condition information for an Certificate.</p> Field Description <code>type</code> CertificateConditionType <p> Type of the condition, known values are (<code>Ready</code>, <code>Issuing</code>). </p> <code>status</code> ConditionStatus <p> Status of the condition, one of (<code>True</code>, <code>False</code>, <code>Unknown</code>). </p> <code>lastTransitionTime</code> Kubernetes meta/v1.Time (Optional) <p>LastTransitionTime is the timestamp corresponding to the last status change of this condition.</p> <code>reason</code> string (Optional) <p>Reason is a brief machine readable explanation for the condition\u2019s last transition.</p> <code>message</code> string (Optional) <p>Message is a human readable description of the details of the last transition, complementing reason.</p> <code>observedGeneration</code> int64 (Optional) <p>If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.</p> <p></p>"},{"location":"reference/api-docs/#certificateconditiontype-string-alias","title":"CertificateConditionType (<code>string</code> alias)","text":"<p> (Appears on: CertificateCondition) </p> <p>CertificateConditionType represents an Certificate condition value.</p> Value Description <p>\"Issuing\"</p> <p>           A condition added to Certificate resources when an issuance is required. This condition will be automatically added and set to true if: * No keypair data exists in the target Secret * The data stored in the Secret cannot be decoded * The private key and certificate do not have matching public keys * If a CertificateRequest for the current revision exists and the certificate data stored in the Secret does not match the           <code>status.certificate</code> on the CertificateRequest. * If no CertificateRequest resource exists for the current revision, the options on the Certificate resource are compared against the x509 data in the Secret, similar to what\u2019s done in earlier versions. If there is a mismatch, an issuance is triggered. This condition may also be added by external API consumers to trigger a re-issuance manually for any other reason.         </p> <p>It will be removed by the \u2018issuing\u2019 controller upon completing issuance.</p> <p>\"Ready\"</p> <p>CertificateConditionReady indicates that a certificate is ready for use. This is defined as: - The target secret exists - The target secret contains a certificate that has not expired - The target secret contains a private key valid for the certificate - The commonName and dnsNames attributes match those specified on the Certificate</p> <p></p>"},{"location":"reference/api-docs/#certificatekeystores","title":"CertificateKeystores","text":"<p> (Appears on: CertificateSpec) </p> <p>CertificateKeystores configures additional keystore output formats to be created in the Certificate\u2019s output Secret.</p> Field Description <code>jks</code> JKSKeystore (Optional) <p>           JKS configures options for storing a JKS keystore in the           <code>spec.secretName</code> Secret resource.         </p> <code>pkcs12</code> PKCS12Keystore (Optional) <p>           PKCS12 configures options for storing a PKCS12 keystore in the           <code>spec.secretName</code> Secret resource.         </p> <p></p>"},{"location":"reference/api-docs/#certificateoutputformattype-string-alias","title":"CertificateOutputFormatType (<code>string</code> alias)","text":"<p> (Appears on: CertificateAdditionalOutputFormat) </p> <p>     CertificateOutputFormatType specifies which additional output formats should be written to the Certificate\u2019s target Secret. Allowed values are <code>DER</code> or <code>CombinedPEM</code>. When Type is set to <code>DER</code> an additional entry <code>key.der</code> will be written to the Secret, containing the binary format of the private key. When Type is set to <code>CombinedPEM</code> an additional entry <code>tls-combined.pem</code>     will be written to the Secret, containing the PEM formatted private key and signed certificate chain (tls.key + tls.crt concatenated).   </p> Value Description <p>\"CombinedPEM\"</p> <p>           CertificateOutputFormatCombinedPEM writes the Certificate\u2019s signed certificate chain and private key, in PEM format, to the           <code>tls-combined.pem</code> target Secret Data key. The value at this key will include the private key PEM document, followed by at least one new line character, followed by the chain of signed certificate PEM documents (<code>&lt;private key&gt; + \\n + &lt;signed certificate chain&gt;</code>).         </p> <p>\"DER\"</p> <p> CertificateOutputFormatDER writes the Certificate\u2019s private key in DER binary format to the <code>key.der</code> target Secret Data key. </p> <p></p>"},{"location":"reference/api-docs/#certificateprivatekey","title":"CertificatePrivateKey","text":"<p> (Appears on: CertificateSpec) </p> <p>CertificatePrivateKey contains configuration options for private keys used by the Certificate controller. This allows control of how private keys are rotated.</p> Field Description <code>rotationPolicy</code> PrivateKeyRotationPolicy (Optional) <p> RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target <code>spec.secretName</code>. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is \u2018Never\u2019 for backward compatibility. </p> <code>encoding</code> PrivateKeyEncoding (Optional) <p> The private key cryptography standards (PKCS) encoding for this certificate\u2019s private key to be encoded in. If provided, allowed values are <code>PKCS1</code> and <code>PKCS8</code> standing for PKCS#1 and PKCS#8, respectively. Defaults to <code>PKCS1</code> if not specified. </p> <code>algorithm</code> PrivateKeyAlgorithm (Optional) <p> Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either <code>RSA</code>,<code>Ed25519</code> or <code>ECDSA</code> If <code>algorithm</code> is specified and <code>size</code> is not provided, key size of 256 will be used for <code>ECDSA</code> key algorithm and key size of 2048 will be used for <code>RSA</code> key algorithm. key size is ignored when using the <code>Ed25519</code> key algorithm. </p> <code>size</code> int (Optional) <p> Size is the key bit size of the corresponding private key for this certificate. If <code>algorithm</code> is set to <code>RSA</code>, valid values are <code>2048</code>, <code>4096</code> or <code>8192</code>, and will default to <code>2048</code> if not specified. If <code>algorithm</code> is set to <code>ECDSA</code>, valid values are <code>256</code>, <code>384</code> or <code>521</code>, and will default to <code>256</code> if not specified. If <code>algorithm</code> is set to <code>Ed25519</code>, Size is ignored. No other values are allowed. </p> <p></p>"},{"location":"reference/api-docs/#certificaterequestcondition","title":"CertificateRequestCondition","text":"<p> (Appears on: CertificateRequestStatus) </p> <p>CertificateRequestCondition contains condition information for a CertificateRequest.</p> Field Description <code>type</code> CertificateRequestConditionType <p> Type of the condition, known values are (<code>Ready</code>, <code>InvalidRequest</code>,<code>Approved</code>, <code>Denied</code>). </p> <code>status</code> ConditionStatus <p> Status of the condition, one of (<code>True</code>, <code>False</code>, <code>Unknown</code>). </p> <code>lastTransitionTime</code> Kubernetes meta/v1.Time (Optional) <p>LastTransitionTime is the timestamp corresponding to the last status change of this condition.</p> <code>reason</code> string (Optional) <p>Reason is a brief machine readable explanation for the condition\u2019s last transition.</p> <code>message</code> string (Optional) <p>Message is a human readable description of the details of the last transition, complementing reason.</p> <p></p>"},{"location":"reference/api-docs/#certificaterequestconditiontype-string-alias","title":"CertificateRequestConditionType (<code>string</code> alias)","text":"<p> (Appears on: CertificateRequestCondition) </p> <p>CertificateRequestConditionType represents an Certificate condition value.</p> Value Description <p>\"Approved\"</p> <p>           CertificateRequestConditionApproved indicates that a certificate request is approved and ready for signing. Condition must never have a status of           <code>False</code>, and cannot be modified once set. Cannot be set alongside <code>Denied</code>.         </p> <p>\"Denied\"</p> <p>           CertificateRequestConditionDenied indicates that a certificate request is denied, and must never be signed. Condition must never have a status of           <code>False</code>, and cannot be modified once set. Cannot be set alongside <code>Approved</code>.         </p> <p>\"InvalidRequest\"</p> <p> CertificateRequestConditionInvalidRequest indicates that a certificate signer has refused to sign the request due to at least one of the input parameters being invalid. Additional information about why the request was rejected can be found in the <code>reason</code> and <code>message</code> fields. </p> <p>\"Ready\"</p> <p>CertificateRequestConditionReady indicates that a certificate is ready for use. This is defined as: - The target certificate exists in CertificateRequest.Status</p> <p></p>"},{"location":"reference/api-docs/#certificaterequestspec","title":"CertificateRequestSpec","text":"<p> (Appears on: CertificateRequest) </p> <p>CertificateRequestSpec defines the desired state of CertificateRequest</p> Field Description <code>duration</code> Kubernetes meta/v1.Duration (Optional) <p>The requested \u2018duration\u2019 (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.</p> <code>issuerRef</code> ObjectReference <p> IssuerRef is a reference to the issuer for this CertificateRequest. If the <code>kind</code> field is not set, or set to <code>Issuer</code>, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used. If the <code>kind</code> field is set to <code>ClusterIssuer</code>, a ClusterIssuer with the provided name will be used. The <code>name</code> field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to <code>cert-manager.io</code> if empty. </p> <code>request</code> []byte <p>The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.</p> <code>isCA</code> bool (Optional) <p> IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the <code>cert sign</code> usage to the list of <code>usages</code>. </p> <code>usages</code> []KeyUsage (Optional) <p> Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to <code>digital signature</code> and <code>key encipherment</code> if not specified. </p> <code>username</code> string (Optional) <p>Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.</p> <code>uid</code> string (Optional) <p>UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.</p> <code>groups</code> []string (Optional) <p>Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.</p> <code>extra</code> map[string][]string (Optional) <p>Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.</p> <p></p>"},{"location":"reference/api-docs/#certificaterequeststatus","title":"CertificateRequestStatus","text":"<p> (Appears on: CertificateRequest) </p> <p>CertificateRequestStatus defines the observed state of CertificateRequest and resulting signed certificate.</p> Field Description <code>conditions</code> []CertificateRequestCondition (Optional) <p> List of status conditions to indicate the status of a CertificateRequest. Known condition types are <code>Ready</code> and <code>InvalidRequest</code>. </p> <code>certificate</code> []byte (Optional) <p>           The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the           <code>conditions</code> field.         </p> <code>ca</code> []byte (Optional) <p>The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.</p> <code>failureTime</code> Kubernetes meta/v1.Time (Optional) <p>FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.</p> <p></p>"},{"location":"reference/api-docs/#certificatesecrettemplate","title":"CertificateSecretTemplate","text":"<p> (Appears on: CertificateSpec) </p> <p> CertificateSecretTemplate defines the default labels and annotations to be copied to the Kubernetes Secret resource named in <code>CertificateSpec.secretName</code>. </p> Field Description <code>annotations</code> map[string]string (Optional) <p>Annotations is a key value map to be copied to the target Kubernetes Secret.</p> <code>labels</code> map[string]string (Optional) <p>Labels is a key value map to be copied to the target Kubernetes Secret.</p> <p></p>"},{"location":"reference/api-docs/#certificatespec","title":"CertificateSpec","text":"<p> (Appears on: Certificate) </p> <p>CertificateSpec defines the desired state of Certificate. A valid Certificate requires at least one of a CommonName, DNSName, or URISAN to be valid.</p> Field Description <code>subject</code> X509Subject (Optional) <p> Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name). </p> <code>literalSubject</code> string (Optional) <p> LiteralSubject is an LDAP formatted string that represents the X.509 Subject field. Use this instead of the Subject field if you need to ensure the correct ordering of the RDN sequence, such as when issuing certs for LDAP authentication. See https://github.com/cert-manager/cert-manager/issues/3203, https://github.com/cert-manager/cert-manager/issues/4424. This field is alpha level and is only supported by cert-manager installations where LiteralCertificateSubject feature gate is enabled on both cert-manager controller and webhook. </p> <code>commonName</code> string (Optional) <p> CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4 </p> <code>duration</code> Kubernetes meta/v1.Duration (Optional) <p> The requested \u2018duration\u2019 (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2\u20443 through its duration or <code>renewBefore</code> period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration </p> <code>renewBefore</code> Kubernetes meta/v1.Duration (Optional) <p>           How long before the currently issued certificate\u2019s expiry cert-manager should renew the certificate. The default is 2\u20443 of the issued certificate\u2019s duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration           https://golang.org/pkg/time/#ParseDuration </p> <code>dnsNames</code> []string (Optional) <p>DNSNames is a list of DNS subjectAltNames to be set on the Certificate.</p> <code>ipAddresses</code> []string (Optional) <p>IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.</p> <code>uris</code> []string (Optional) <p>URIs is a list of URI subjectAltNames to be set on the Certificate.</p> <code>emailAddresses</code> []string (Optional) <p>EmailAddresses is a list of email subjectAltNames to be set on the Certificate.</p> <code>secretName</code> string <p>SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.</p> <code>secretTemplate</code> CertificateSecretTemplate (Optional) <p>SecretTemplate defines annotations and labels to be copied to the Certificate\u2019s Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate\u2019s Secret.</p> <code>keystores</code> CertificateKeystores (Optional) <p>           Keystores configures additional keystore output formats stored in the           <code>secretName</code> Secret resource.         </p> <code>issuerRef</code> ObjectReference <p> IssuerRef is a reference to the issuer for this certificate. If the <code>kind</code> field is not set, or set to <code>Issuer</code>, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the <code>kind</code> field is set to <code>ClusterIssuer</code>, a ClusterIssuer with the provided name will be used. The <code>name</code> field in this stanza is required at all times. </p> <code>isCA</code> bool (Optional) <p> IsCA will mark this Certificate as valid for certificate signing. This will automatically add the <code>cert sign</code> usage to the list of <code>usages</code>. </p> <code>usages</code> []KeyUsage (Optional) <p> Usages is the set of x509 usages that are requested for the certificate. Defaults to <code>digital signature</code> and <code>key encipherment</code> if not specified. </p> <code>privateKey</code> CertificatePrivateKey (Optional) <p>Options to control private keys used for the Certificate.</p> <code>encodeUsagesInRequest</code> bool (Optional) <p>EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest</p> <code>revisionHistoryLimit</code> int32 (Optional) <p> revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate\u2019s history. Each revision represents a single <code>CertificateRequest</code> created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of <code>1</code> or greater. If unset (<code>nil</code>), revisions will not be garbage collected. Default value is <code>nil</code>. </p> <code>additionalOutputFormats</code> []CertificateAdditionalOutputFormat (Optional) <p>           AdditionalOutputFormats defines extra output formats of the private key and signed certificate chain to be written to this Certificate\u2019s target Secret. This is an Alpha Feature and is only enabled with the           <code>--feature-gates=AdditionalCertificateOutputFormats=true</code> option on both the controller and webhook components.         </p> <p></p>"},{"location":"reference/api-docs/#certificatestatus","title":"CertificateStatus","text":"<p> (Appears on: Certificate) </p> <p>CertificateStatus defines the observed state of Certificate</p> Field Description <code>conditions</code> []CertificateCondition (Optional) <p> List of status conditions to indicate the status of certificates. Known condition types are <code>Ready</code> and <code>Issuing</code>. </p> <code>lastFailureTime</code> Kubernetes meta/v1.Time (Optional) <p>LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.</p> <code>notBefore</code> Kubernetes meta/v1.Time (Optional) <p>The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.</p> <code>notAfter</code> Kubernetes meta/v1.Time (Optional) <p> The expiration time of the certificate stored in the secret named by this resource in <code>spec.secretName</code>. </p> <code>renewalTime</code> Kubernetes meta/v1.Time (Optional) <p>RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.</p> <code>revision</code> int (Optional) <p>The current \u2018revision\u2019 of the certificate as issued.</p> <p>           When a CertificateRequest resource is created, it will have the           <code>cert-manager.io/certificate-revision</code> set to one greater than the current value of this field.         </p> <p>Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate.</p> <p>Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision\u2019s issuance by checking if the revision value in the annotation is greater than this field.</p> <code>nextPrivateKeySecretName</code> string (Optional) <p>           The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the           <code>Issuing</code> condition is set to <code>True</code>. It will automatically unset this field when the Issuing condition is not set or False.         </p> <code>failedIssuanceAttempts</code> int (Optional) <p>The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).</p> <p></p>"},{"location":"reference/api-docs/#genericissuer","title":"GenericIssuer","text":""},{"location":"reference/api-docs/#issuercondition","title":"IssuerCondition","text":"<p> (Appears on: IssuerStatus) </p> <p>IssuerCondition contains condition information for an Issuer.</p> Field Description <code>type</code> IssuerConditionType <p> Type of the condition, known values are (<code>Ready</code>). </p> <code>status</code> ConditionStatus <p> Status of the condition, one of (<code>True</code>, <code>False</code>, <code>Unknown</code>). </p> <code>lastTransitionTime</code> Kubernetes meta/v1.Time (Optional) <p>LastTransitionTime is the timestamp corresponding to the last status change of this condition.</p> <code>reason</code> string (Optional) <p>Reason is a brief machine readable explanation for the condition\u2019s last transition.</p> <code>message</code> string (Optional) <p>Message is a human readable description of the details of the last transition, complementing reason.</p> <code>observedGeneration</code> int64 (Optional) <p>If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.</p> <p></p>"},{"location":"reference/api-docs/#issuerconditiontype-string-alias","title":"IssuerConditionType (<code>string</code> alias)","text":"<p> (Appears on: IssuerCondition) </p> <p>IssuerConditionType represents an Issuer condition value.</p> Value Description <p>\"Ready\"</p> <p> IssuerConditionReady represents the fact that a given Issuer condition is in ready state and able to issue certificates. If the <code>status</code> of this condition is <code>False</code>, CertificateRequest controllers should prevent attempts to sign certificates. </p> <p></p>"},{"location":"reference/api-docs/#issuerconfig","title":"IssuerConfig","text":"<p> (Appears on: IssuerSpec) </p> <p>The configuration for the issuer. Only one of these can be set.</p> Field Description <code>acme</code> ACMEIssuer (Optional) <p>ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.</p> <code>ca</code> CAIssuer (Optional) <p>CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.</p> <code>vault</code> VaultIssuer (Optional) <p>Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.</p> <code>selfSigned</code> SelfSignedIssuer (Optional) <p>SelfSigned configures this issuer to \u2018self sign\u2019 certificates using the private key used to create the CertificateRequest object.</p> <code>venafi</code> VenafiIssuer (Optional) <p>Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.</p> <p></p>"},{"location":"reference/api-docs/#issuerspec","title":"IssuerSpec","text":"<p> (Appears on: ClusterIssuer, Issuer) </p> <p>IssuerSpec is the specification of an Issuer. This includes any configuration required for the issuer.</p> Field Description <code>IssuerConfig</code> IssuerConfig <p> (Members of <code>IssuerConfig</code> are embedded into this type.) </p> <p></p>"},{"location":"reference/api-docs/#issuerstatus","title":"IssuerStatus","text":"<p> (Appears on: ClusterIssuer, Issuer) </p> <p>IssuerStatus contains status information about an Issuer</p> Field Description <code>conditions</code> []IssuerCondition (Optional) <p> List of status conditions to indicate the status of a CertificateRequest. Known condition types are <code>Ready</code>. </p> <code>acme</code> ACMEIssuerStatus (Optional) <p>ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.</p> <p></p>"},{"location":"reference/api-docs/#jkskeystore","title":"JKSKeystore","text":"<p> (Appears on: CertificateKeystores) </p> <p>     JKS configures options for storing a JKS keystore in the <code>spec.secretName</code>     Secret resource.   </p> Field Description <code>create</code> bool <p> Create enables JKS keystore creation for the Certificate. If true, a file named <code>keystore.jks</code> will be created in the target Secret resource, encrypted using the password stored in <code>passwordSecretRef</code>. The keystore file will only be updated upon re-issuance. A file named <code>truststore.jks</code> will also be created in the target Secret resource, encrypted using the password stored in <code>passwordSecretRef</code> containing the issuing Certificate Authority </p> <code>passwordSecretRef</code> SecretKeySelector <p>PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.</p> <p></p>"},{"location":"reference/api-docs/#keyusage-string-alias","title":"KeyUsage (<code>string</code> alias)","text":"<p> (Appears on: CertificateRequestSpec, CertificateSpec) </p> <p>     KeyUsage specifies valid usage contexts for keys. See:     https://tools.ietf.org/html/rfc5280#section-4.2.1.3 https://tools.ietf.org/html/rfc5280#section-4.2.1.12 </p> <p>Valid KeyUsage values are as follows: \u201csigning\u201d, \u201cdigital signature\u201d, \u201ccontent commitment\u201d, \u201ckey encipherment\u201d, \u201ckey agreement\u201d, \u201cdata encipherment\u201d, \u201ccert sign\u201d, \u201ccrl sign\u201d, \u201cencipher only\u201d, \u201cdecipher only\u201d, \u201cany\u201d, \u201cserver auth\u201d, \u201cclient auth\u201d, \u201ccode signing\u201d, \u201cemail protection\u201d, \u201cs/mime\u201d, \u201cipsec end system\u201d, \u201cipsec tunnel\u201d, \u201cipsec user\u201d, \u201ctimestamping\u201d, \u201cocsp signing\u201d, \u201cmicrosoft sgc\u201d, \u201cnetscape sgc\u201d</p> Value Description <p>\"any\"</p> <p>\"crl sign\"</p> <p>\"cert sign\"</p> <p>\"client auth\"</p> <p>\"code signing\"</p> <p>\"content commitment\"</p> <p>\"data encipherment\"</p> <p>\"decipher only\"</p> <p>\"digital signature\"</p> <p>\"email protection\"</p> <p>\"encipher only\"</p> <p>\"ipsec end system\"</p> <p>\"ipsec tunnel\"</p> <p>\"ipsec user\"</p> <p>\"key agreement\"</p> <p>\"key encipherment\"</p> <p>\"microsoft sgc\"</p> <p>\"netscape sgc\"</p> <p>\"ocsp signing\"</p> <p>\"s/mime\"</p> <p>\"server auth\"</p> <p>\"signing\"</p> <p>\"timestamping\"</p> <p></p>"},{"location":"reference/api-docs/#pkcs12keystore","title":"PKCS12Keystore","text":"<p> (Appears on: CertificateKeystores) </p> <p>     PKCS12 configures options for storing a PKCS12 keystore in the     <code>spec.secretName</code> Secret resource.   </p> Field Description <code>create</code> bool <p> Create enables PKCS12 keystore creation for the Certificate. If true, a file named <code>keystore.p12</code> will be created in the target Secret resource, encrypted using the password stored in <code>passwordSecretRef</code>. The keystore file will only be updated upon re-issuance. A file named <code>truststore.p12</code> will also be created in the target Secret resource, encrypted using the password stored in <code>passwordSecretRef</code> containing the issuing Certificate Authority </p> <code>passwordSecretRef</code> SecretKeySelector <p>PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.</p> <p></p>"},{"location":"reference/api-docs/#privatekeyalgorithm-string-alias","title":"PrivateKeyAlgorithm (<code>string</code> alias)","text":"<p> (Appears on: CertificatePrivateKey) </p> Value Description <p>\"ECDSA\"</p> <p>Denotes the ECDSA private key type.</p> <p>\"Ed25519\"</p> <p>Denotes the Ed25519 private key type.</p> <p>\"RSA\"</p> <p>Denotes the RSA private key type.</p> <p></p>"},{"location":"reference/api-docs/#privatekeyencoding-string-alias","title":"PrivateKeyEncoding (<code>string</code> alias)","text":"<p> (Appears on: CertificatePrivateKey) </p> Value Description <p>\"PKCS1\"</p> <p> PKCS1 key encoding will produce PEM files that include the type of private key as part of the PEM header, e.g. <code>BEGIN RSA PRIVATE KEY</code>. If the keyAlgorithm is set to \u2018ECDSA\u2019, this will produce private keys that use the <code>BEGIN EC PRIVATE KEY</code> header. </p> <p>\"PKCS8\"</p> <p>           PKCS8 key encoding will produce PEM files with the <code>BEGIN PRIVATE KEY</code>           header. It encodes the keyAlgorithm of the private key as part of the DER encoded PEM block.         </p> <p></p>"},{"location":"reference/api-docs/#privatekeyrotationpolicy-string-alias","title":"PrivateKeyRotationPolicy (<code>string</code> alias)","text":"<p> (Appears on: CertificatePrivateKey) </p> <p>Denotes how private keys should be generated or sourced when a Certificate is being issued.</p> <p></p>"},{"location":"reference/api-docs/#selfsignedissuer","title":"SelfSignedIssuer","text":"<p> (Appears on: IssuerConfig) </p> <p>Configures an issuer to \u2018self sign\u2019 certificates using the private key used to create the CertificateRequest object.</p> Field Description <code>crlDistributionPoints</code> []string (Optional) <p>The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.</p> <p></p>"},{"location":"reference/api-docs/#vaultapprole","title":"VaultAppRole","text":"<p> (Appears on: VaultAuth) </p> <p>VaultAppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.</p> Field Description <code>path</code> string <p>Path where the App Role authentication backend is mounted in Vault, e.g: \u201capprole\u201d</p> <code>roleId</code> string <p>RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.</p> <code>secretRef</code> SecretKeySelector <p> Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The <code>key</code> field must be specified and denotes which entry within the Secret resource is used as the app role secret. </p> <p></p>"},{"location":"reference/api-docs/#vaultauth","title":"VaultAuth","text":"<p> (Appears on: VaultIssuer) </p> <p> Configuration used to authenticate with a Vault server. Only one of <code>tokenSecretRef</code>, <code>appRole</code> or <code>kubernetes</code> may be specified. </p> Field Description <code>tokenSecretRef</code> SecretKeySelector (Optional) <p>TokenSecretRef authenticates with Vault by presenting a token.</p> <code>appRole</code> VaultAppRole (Optional) <p>AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.</p> <code>kubernetes</code> VaultKubernetesAuth (Optional) <p>Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.</p> <p></p>"},{"location":"reference/api-docs/#vaultissuer","title":"VaultIssuer","text":"<p> (Appears on: IssuerConfig) </p> <p>Configures an issuer to sign certificates using a HashiCorp Vault PKI backend.</p> Field Description <code>auth</code> VaultAuth <p>Auth configures how cert-manager authenticates with the Vault server.</p> <code>server</code> string <p> Server is the connection address for the Vault server, e.g: \u201chttps://vault.example.com:8200\u201d. </p> <code>path</code> string <p> Path is the mount path of the Vault PKI backend\u2019s <code>sign</code> endpoint, e.g: \u201cmy_pki_mount/sign/my-role-name\u201d. </p> <code>namespace</code> string (Optional) <p> Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: \u201cns1\u201d More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces </p> <code>caBundle</code> []byte (Optional) <p>PEM-encoded CA bundle (base64-encoded) used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the cert-manager controller system root certificates are used to validate the TLS connection.</p> <code>caBundleSecretRef</code> SecretKeySelector (Optional) <p>CABundleSecretRef is a reference to a Secret which contains the CABundle which will be used when connecting to Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundleSecretRef nor CABundle are defined, the cert-manager controller system root certificates are used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to \u2018ca.crt\u2019.</p> <p></p>"},{"location":"reference/api-docs/#vaultkubernetesauth","title":"VaultKubernetesAuth","text":"<p> (Appears on: VaultAuth) </p> <p>Authenticate against Vault using a Kubernetes ServiceAccount token stored in a Secret.</p> Field Description <code>mountPath</code> string (Optional) <p> The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to <code>/v1/auth/foo</code>, will use the path <code>/v1/auth/foo/login</code> to authenticate with Vault. If unspecified, the default value \u201c/v1/auth/kubernetes\u201d will be used. </p> <code>secretRef</code> SecretKeySelector <p>The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of \u2018ambient credentials\u2019 is not supported.</p> <code>role</code> string <p>A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.</p> <p></p>"},{"location":"reference/api-docs/#venaficloud","title":"VenafiCloud","text":"<p> (Appears on: VenafiIssuer) </p> <p>VenafiCloud defines connection configuration details for Venafi Cloud</p> Field Description <code>url</code> string (Optional) <p> URL is the base URL for Venafi Cloud. Defaults to \u201chttps://api.venafi.cloud/v1\u201d. </p> <code>apiTokenSecretRef</code> SecretKeySelector <p>APITokenSecretRef is a secret key selector for the Venafi Cloud API token.</p> <p></p>"},{"location":"reference/api-docs/#venafiissuer","title":"VenafiIssuer","text":"<p> (Appears on: IssuerConfig) </p> <p>Configures an issuer to sign certificates using a Venafi TPP or Cloud policy zone.</p> Field Description <code>zone</code> string <p>Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.</p> <code>tpp</code> VenafiTPP (Optional) <p>TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.</p> <code>cloud</code> VenafiCloud (Optional) <p>Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.</p> <p></p>"},{"location":"reference/api-docs/#venafitpp","title":"VenafiTPP","text":"<p> (Appears on: VenafiIssuer) </p> <p>VenafiTPP defines connection configuration details for a Venafi TPP instance</p> Field Description <code>url</code> string <p> URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: \u201chttps://tpp.example.com/vedsdk\u201d. </p> <code>credentialsRef</code> LocalObjectReference <p>CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, \u2018username\u2019 and \u2018password\u2019.</p> <code>caBundle</code> []byte (Optional) <p>CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.</p> <p></p>"},{"location":"reference/api-docs/#x509subject","title":"X509Subject","text":"<p> (Appears on: CertificateSpec) </p> <p>X509Subject Full X509 name specification</p> Field Description <code>organizations</code> []string (Optional) <p>Organizations to be used on the Certificate.</p> <code>countries</code> []string (Optional) <p>Countries to be used on the Certificate.</p> <code>organizationalUnits</code> []string (Optional) <p>Organizational Units to be used on the Certificate.</p> <code>localities</code> []string (Optional) <p>Cities to be used on the Certificate.</p> <code>provinces</code> []string (Optional) <p>State/Provinces to be used on the Certificate.</p> <code>streetAddresses</code> []string (Optional) <p>Street addresses to be used on the Certificate.</p> <code>postalCodes</code> []string (Optional) <p>Postal codes to be used on the Certificate.</p> <code>serialNumber</code> string (Optional) <p>Serial number to be used on the Certificate.</p>"},{"location":"reference/api-docs/#meta.cert-manager.io/v1","title":"meta.cert-manager.io/v1","text":"<p>Package v1 contains meta types for cert-manager APIs</p> <p>Resource Types:</p> <p></p>"},{"location":"reference/api-docs/#conditionstatus-string-alias","title":"ConditionStatus (<code>string</code> alias)","text":"<p> (Appears on: CertificateCondition, CertificateRequestCondition, IssuerCondition) </p> <p>ConditionStatus represents a condition\u2019s status.</p> Value Description <p>\"False\"</p> <p>ConditionFalse represents the fact that a given condition is false</p> <p>\"True\"</p> <p>ConditionTrue represents the fact that a given condition is true</p> <p>\"Unknown\"</p> <p>ConditionUnknown represents the fact that a given condition is unknown</p> <p></p>"},{"location":"reference/api-docs/#localobjectreference","title":"LocalObjectReference","text":"<p> (Appears on: VenafiTPP, SecretKeySelector) </p> <p>A reference to an object in the same namespace as the referent. If the referent is a cluster-scoped resource (e.g. a ClusterIssuer), the reference instead refers to the resource with the given name in the configured \u2018cluster resource namespace\u2019, which is set as a flag on the controller component (and defaults to the namespace that cert-manager runs in).</p> Field Description <code>name</code> string <p> Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names </p> <p></p>"},{"location":"reference/api-docs/#objectreference","title":"ObjectReference","text":"<p> (Appears on: ChallengeSpec, OrderSpec, CertificateRequestSpec, CertificateSpec) </p> <p>ObjectReference is a reference to an object with a given name, kind and group.</p> Field Description <code>name</code> string <p>Name of the resource being referred to.</p> <code>kind</code> string (Optional) <p>Kind of the resource being referred to.</p> <code>group</code> string (Optional) <p>Group of the resource being referred to.</p> <p></p>"},{"location":"reference/api-docs/#secretkeyselector","title":"SecretKeySelector","text":"<p>   (Appears on: ACMEExternalAccountBinding, ACMEIssuer, ACMEIssuerDNS01ProviderAcmeDNS, ACMEIssuerDNS01ProviderAkamai, ACMEIssuerDNS01ProviderAzureDNS, ACMEIssuerDNS01ProviderCloudDNS, ACMEIssuerDNS01ProviderCloudflare, ACMEIssuerDNS01ProviderDigitalOcean, ACMEIssuerDNS01ProviderRFC2136,   ACMEIssuerDNS01ProviderRoute53, JKSKeystore, PKCS12Keystore, VaultAppRole, VaultAuth, VaultIssuer, VaultKubernetesAuth, VenafiCloud) </p> <p> A reference to a specific \u2018key\u2019 within a Secret resource. In some instances, <code>key</code> is a required field. </p> Field Description <code>LocalObjectReference</code> LocalObjectReference <p> (Members of <code>LocalObjectReference</code> are embedded into this type.) </p> <p>The name of the Secret resource being referred to.</p> <code>key</code> string (Optional) <p> The key of the entry in the Secret resource\u2019s <code>data</code> field to be used. Some instances of this field may be defaulted, in others it may be required. </p>"},{"location":"reference/api-docs/#webhook.config.cert-manager.io/v1alpha1","title":"webhook.config.cert-manager.io/v1alpha1","text":"<p>Package v1alpha1 is the v1alpha1 version of the webhook config API.</p> <p>Resource Types:</p> <p></p>"},{"location":"reference/api-docs/#dynamicservingconfig","title":"DynamicServingConfig","text":"<p> (Appears on: TLSConfig) </p> <p>DynamicServingConfig makes the webhook generate a CA and persist it into Secret resources. This CA will be used by all instances of the webhook for signing serving certificates.</p> Field Description <code>secretNamespace</code> string <p>Namespace of the Kubernetes Secret resource containing the TLS certificate used as a CA to sign dynamic serving certificates.</p> <code>secretName</code> string <p>Namespace of the Kubernetes Secret resource containing the TLS certificate used as a CA to sign dynamic serving certificates.</p> <code>dnsNames</code> []string <p>DNSNames that must be present on serving certificates signed by the CA.</p> <p></p>"},{"location":"reference/api-docs/#filesystemservingconfig","title":"FilesystemServingConfig","text":"<p> (Appears on: TLSConfig) </p> <p>FilesystemServingConfig enables using a certificate and private key found on the local filesystem. These files will be periodically polled in case they have changed, and dynamically reloaded.</p> Field Description <code>certFile</code> string <p>Path to a file containing TLS certificate &amp; chain to serve with</p> <code>keyFile</code> string <p>Path to a file containing a TLS private key to server with</p> <p></p>"},{"location":"reference/api-docs/#tlsconfig","title":"TLSConfig","text":"<p> (Appears on: WebhookConfiguration) </p> <p>TLSConfig configures how TLS certificates are sourced for serving. Only one of \u2018filesystem\u2019 or \u2018dynamic\u2019 may be specified.</p> Field Description <code>cipherSuites</code> []string <p> cipherSuites is the list of allowed cipher suites for the server. Values are from tls package constants (https://golang.org/pkg/crypto/tls/#pkg-constants). If not specified, the default for the Go version will be used and may change over time. </p> <code>minTLSVersion</code> string <p> minTLSVersion is the minimum TLS version supported. Values are from tls package constants (https://golang.org/pkg/crypto/tls/#pkg-constants). If not specified, the default for the Go version will be used and may change over time. </p> <code>filesystem</code> FilesystemServingConfig <p>Filesystem enables using a certificate and private key found on the local filesystem. These files will be periodically polled in case they have changed, and dynamically reloaded.</p> <code>dynamic</code> DynamicServingConfig <p>When Dynamic serving is enabled, the webhook will generate a CA used to sign webhook certificates and persist it into a Kubernetes Secret resource (for other replicas of the webhook to consume). It will then generate a certificate in-memory for itself using this CA to serve with. The CAs certificate can then be copied into the appropriate Validating, Mutating and Conversion webhook configuration objects (typically by cainjector).</p> <p></p>"},{"location":"reference/api-docs/#webhookconfiguration","title":"WebhookConfiguration","text":"Field Description <code>securePort</code> int <p>securePort is the port number to listen on for secure TLS connections from the kube-apiserver. Defaults to 6443.</p> <code>healthzPort</code> int <p>healthzPort is the port number to listen on (using plaintext HTTP) for healthz connections. Defaults to 6080.</p> <code>tlsConfig</code> TLSConfig <p>tlsConfig is used to configure the secure listener\u2019s TLS settings.</p> <code>kubeConfig</code> string <p>kubeConfig is the kubeconfig file used to connect to the Kubernetes apiserver. If not specified, the webhook will attempt to load the in-cluster-config.</p> <code>apiServerHost</code> string <p> apiServerHost is used to override the API server connection address. Deprecated: use <code>kubeConfig</code> instead. </p> <code>enablePprof</code> bool <p>enablePprof configures whether pprof is enabled.</p> <code>pprofAddress</code> string <p>pprofAddress configures the address on which /debug/pprof endpoint will be served if enabled. Defaults to \u2018localhost:6060\u2019.</p> <code>featureGates</code> map[string]bool (Optional) <p>featureGates is a map of feature names to bools that enable or disable experimental features. Default: nil</p> <p>  Generated with <code>gen-crd-api-reference-docs</code> on git commit <code>da3265115</code>.  </p>"},{"location":"reference/cmctl/","title":"cert-manager \u547d\u4ee4\u884c\u5de5\u5177 (cmctl)","text":"<p><code>cmctl</code>\u662f\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u5728\u96c6\u7fa4\u4e2d\u7ba1\u7406 cert-manager \u53ca\u5176\u6e90\u3002</p>"},{"location":"reference/cmctl/#_1","title":"\u5b89\u88c5","text":""},{"location":"reference/cmctl/#homebrew","title":"Homebrew","text":"<p>\u5728 Mac \u6216 Linux \u4e0a\uff0c\u5982\u679c\u4f60\u5b89\u88c5\u4e86Homebrew\uff0c\u4f60\u53ef\u4ee5\u5b89\u88c5 <code>cmctl</code>:</p> <pre><code>brew install cmctl\n</code></pre> <p>\u8fd9\u4e5f\u5c06\u5b89\u88c5 shell \u8865\u5168\u3002</p>"},{"location":"reference/cmctl/#_2","title":"\u624b\u52a8\u5b89\u88c5","text":"<p>\u4f60\u9700\u8981\u4f7f\u7528\u7684\u5e73\u53f0\u7684<code>cmctl.tar.gz</code>\u6587\u4ef6\uff0c\u8fd9\u4e9b\u53ef\u4ee5\u5728\u6211\u4eec\u7684GitHub \u53d1\u5e03 pag\u4e0a\u627e\u5230\u3002 \u4e3a\u4e86\u4f7f\u7528<code>cmctl</code>\uff0c\u4f60\u9700\u8981\u5728\u4f60\u7684<code>$PATH</code>\u4e2d\u7684<code>cmctl</code>\u540d\u79f0\u4e0b\u53ef\u4ee5\u8bbf\u95ee\u5b83\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 \u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff0c\u8fdb\u5165\u547d\u4ee4\u884c\u754c\u9762\u3002 \u66ff\u6362 OS \u548c ARCH \u4e0e\u4f60\u7684\u7cfb\u7edf\u7b49\u4ef7:</p> <pre><code>OS=$(go env GOOS); ARCH=$(go env GOARCH); curl -fsSL -o cmctl.tar.gz https://github.com/cert-manager/cert-manager/releases/latest/download/cmctl-$OS-$ARCH.tar.gz\ntar xzf cmctl.tar.gz\nsudo mv cmctl /usr/local/bin\n</code></pre> <p>\u60a8\u53ef\u4ee5\u8fd0\u884c<code>cmctl help</code>\u6765\u6d4b\u8bd5 CLI \u662f\u5426\u8bbe\u7f6e\u6b63\u786e:</p> <pre><code>$ cmctl help\ncmctl is a CLI tool manage and configure cert-manager resources for Kubernetes\nUsage: cmctl [command]\nAvailable Commands:\n  approve      Approve a CertificateRequest\n  check        Check cert-manager components\n  completion   Generate completion scripts for the cert-manager CLI\n  convert      Convert cert-manager config files between different API versions\n  create       Create cert-manager resources\n  deny         Deny a CertificateRequest\n  experimental Interact with experimental features\n  help         Help about any command\n  inspect      Get details on certificate related resources\n  renew        Mark a Certificate for manual renewal\n  status       Get details on current status of cert-manager resources\n  upgrade      Tools that assist in upgrading cert-manager\n  version      Print the cert-manager CLI version and the deployed cert-manager version\nFlags:\n  -h, --help                           help for cmctl\n      --log-flush-frequency duration   Maximum number of seconds between log flushes (default 5s)\nUse \"cmctl [command] --help\" for more information about a command.\n</code></pre> <p>\u8fd8\u6709\u4e00\u4e2alegacy kubectl \u63d2\u4ef6\uff0c \u4f46\u4e0d\u518d\u63a8\u8350\u4f7f\u7528\uff0c\u56e0\u4e3a\u72ec\u7acb\u7684<code>cmctl</code>\u4e8c\u8fdb\u5236\u6587\u4ef6\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u81ea\u52a8\u5b8c\u6210\u3002</p>"},{"location":"reference/cmctl/#_3","title":"\u547d\u4ee4","text":""},{"location":"reference/cmctl/#_4","title":"\u6279\u51c6\u548c\u62d2\u7edd\u8bc1\u4e66\u8bf7\u6c42","text":"<p>CertificateRequests can be approved or denied using their respective cmctl commands:</p> <p>Note: The internal cert-manager approver may automatically approve all CertificateRequests unless disabled with the flag on the cert-manager-controller <code>--controllers=*,-certificaterequests-approver</code></p> <pre><code>$ cmctl approve -n istio-system mesh-ca --reason \"pki-team\" --message \"this certificate is valid\"\nApproved CertificateRequest 'istio-system/mesh-ca'\n</code></pre> <pre><code>$ cmctl deny -n my-app my-app --reason \"example.com\" --message \"violates policy\"\nDenied CertificateRequest 'my-app/my-app'\n</code></pre>"},{"location":"reference/cmctl/#convert","title":"Convert","text":"<p><code>cmctl convert</code> can be used to convert cert-manager manifest files between different API versions. Both YAML and JSON formats are accepted. The command either takes a file name, directory path, or a URL as input. The contents is converted into the format of the latest API version known to cert-manager, or the one specified by <code>--output-version</code> flag.</p> <p>The default output will be printed to stdout in YAML format. One can use the option <code>-o</code> to change the output destination.</p> <p>For example, this will output <code>cert.yaml</code> in the latest API version:</p> <pre><code>cmctl convert -f cert.yaml\n</code></pre>"},{"location":"reference/cmctl/#create","title":"Create","text":"<p><code>cmctl create</code> can be used to create cert-manager resources manually. Sub-commands are available to create different resources:</p>"},{"location":"reference/cmctl/#certificaterequest","title":"CertificateRequest","text":"<p>To create a cert-manager CertificateRequest, use <code>cmctl create certificaterequest</code>. The command takes in the name of the CertificateRequest to be created, and creates a new CertificateRequest resource based on the YAML manifest of a Certificate resource as specified by <code>--from-certificate-file</code> flag, by generating a private key locally and creating a 'certificate signing request' to be submitted to a cert-manager Issuer. The private key will be written to a local file, where the default is <code>&lt;name_of_cr&gt;.key</code>, or it can be specified using the <code>--output-key-file</code> flag.</p> <p>If you wish to wait for the CertificateRequest to be signed and store the X.509 certificate in a file, you can set the <code>--fetch-certificate</code> flag. The default timeout when waiting for the issuance of the certificate is 5 minutes, but can be specified with the <code>--timeout</code> flag. The default name of the file storing the X.509 certificate is <code>&lt;name_of_cr&gt;.crt</code>, you can use the <code>--output-certificate-file</code> flag to specify otherwise.</p> <p>Note that the private key and the X.509 certificate are both written to file, and are not stored inside Kubernetes.</p> <p>For example this will create a CertificateRequest resource with the name \"my-cr\" based on the cert-manager Certificate described in <code>my-certificate.yaml</code> while storing the private key and X.509 certificate in <code>my-cr.key</code> and <code>my-cr.crt</code> respectively.</p> <pre><code>cmctl create certificaterequest my-cr --from-certificate-file my-certificate.yaml --fetch-certificate --timeout 20m\n</code></pre>"},{"location":"reference/cmctl/#renew","title":"Renew","text":"<p><code>cmctl</code> allows you to manually trigger a renewal of a specific certificate. This can be done either one certificate at a time, using label selectors (<code>-l app=example</code>), or with the <code>--all</code> flag:</p> <p>For example, you can renew the certificate <code>example-com-tls</code>:</p> <pre><code>$ kubectl get certificate\nNAME                       READY   SECRET               AGE\nexample-com-tls            True    example-com-tls      1d\n$ cmctl renew example-com-tls\nManually triggered issuance of Certificate default/example-com-tls\n$ kubectl get certificaterequest\nNAME                              READY   AGE\nexample-com-tls-tls-8rbv2         False    10s\n</code></pre> <p>You can also renew all certificates in a given namespace:</p> <pre><code>$ cmctl renew --namespace=app --all\n</code></pre> <p>The renew command allows several options to be specified:</p> <ul> <li><code>--all</code> renew all Certificates in the given Namespace, or all namespaces when combined with <code>--all-namespaces</code></li> <li><code>-A</code> or <code>--all-namespaces</code> mark Certificates across namespaces for renewal</li> <li><code>-l</code> <code>--selector</code> allows set a label query to filter on   as well as <code>kubectl</code> like global flags like <code>--context</code> and <code>--namespace</code>.</li> </ul>"},{"location":"reference/cmctl/#_5","title":"\u8eab\u4efd\u8bc1\u4e66","text":"<p><code>cmctl status certificate</code> outputs the details of the current status of a Certificate resource and related resources like CertificateRequest, Secret, Issuer, as well as Order and Challenges if it is a ACME Certificate. The command outputs information about the resources, including Conditions, Events and resource specific fields like Key Usages and Extended Key Usages of the Secret or Authorizations of the Order. This will be helpful for troubleshooting a Certificate.</p> <p>The command takes in one argument specifying the name of the Certificate resource and the namespace can be specified as usual with the <code>-n</code> or <code>--namespace</code> flag.</p> <p>This example queries the status of the Certificate named <code>my-certificate</code> in namespace <code>my-namespace</code>.</p> <pre><code>cmctl status certificate my-certificate -n my-namespace\n</code></pre>"},{"location":"reference/cmctl/#completion","title":"Completion","text":"<p><code>cmctl</code> supports auto-completion for both subcommands as well as suggestions for runtime objects.</p> <pre><code>$ cmctl approve -n &lt;TAB&gt; &lt;TAB&gt;\ndefault             kube-node-lease     kube-public         kube-system         local-path-storage\n</code></pre> <p>Completion can be installed for your environment by following the instructions for the shell you are using. It currently supports bash, fish, zsh, and powershell.</p> <pre><code>$ cmctl completion help\n</code></pre>"},{"location":"reference/cmctl/#experimental","title":"Experimental","text":"<p><code>cmctl x</code> has experimental sub-commands for operations which are currently under evaluation to be included into cert-manager proper. The behavior and interface of these commands are subject to change or removal in future releases.</p>"},{"location":"reference/cmctl/#create_1","title":"Create","text":"<p><code>cmctl x create</code> can be used to create cert-manager resources manually. Sub-commands are available to create different resources:</p>"},{"location":"reference/cmctl/#certificatesigningrequest","title":"CertificateSigningRequest","text":"<p>To create a CertificateSigningRequest, use</p> <pre><code>cmctl x create csr`\n</code></pre> <p>This command takes the name of the CertificateSigningRequest to be created, as well as a file containing a Certificate manifest (<code>-f, --from-certificate-file</code>). This command will generate a private key, based on the options of the Certificate, and write it to the local file <code>&lt;name&gt;.key</code>, or specified by <code>-k, --output-key-file</code>.</p> <pre><code>$ cmctl x create csr -f my-cert.yaml my-req\n</code></pre>   cert-manager **will not** automatically approve CertificateSigningRequests. If you are not running a custom approver in your cluster, you will likely need to manually approve the CertificateSigningRequest:  <pre><code>$ kubectl certificate approve &lt;name&gt;\n</code></pre> <p>This command can also wait for the CertificateSigningRequest to be signed using the flag <code>-w, --fetch-certificate</code>. Once signed it will write the resulting signed certificate to the local file <code>&lt;name&gt;.crt</code>, or specified by <code>-c, --output-certificate-file</code>.</p> <pre><code>$ cmctl x create csr -f my-cert.yaml my-req -w\n</code></pre>"},{"location":"reference/cmctl/#install","title":"Install","text":"<pre><code>cmctl x install\n</code></pre> <p>This command makes sure that the required <code>CustomResourceDefinitions</code> are installed together with the cert-manager, cainjector and webhook components. Under the hood, a procedure similar to the Helm install procedure is used.</p> <p>You can also use <code>cmctl x install</code> to customize the installation of cert-manager.</p> <p>The example below shows how to tune the cert-manager installation by overriding the default Helm values:</p> <pre><code>cmctl x install \\\n--set prometheus.enabled=false \\  # Example: disabling prometheus using a Helm parameter\n--set webhook.timeoutSeconds=4s   # Example: changing the wehbook timeout using a Helm parameter\n</code></pre> <p>You can find a full list of the install parameters on cert-manager's ArtifactHub page. These are the same parameters that are available when using the Helm chart. Once you have deployed cert-manager, you can verify the installation.</p> <p>The CLI also allows the user to output the templated manifest to <code>stdout</code>, instead of installing the manifest on the cluster.</p> <pre><code>cmctl x install --dry-run &gt; cert-manager.custom.yaml\n</code></pre>"},{"location":"reference/cmctl/#uninstall","title":"Uninstall","text":"<pre><code>cmctl x uninstall\n</code></pre> <p>This command uninstalls any Helm-managed release of cert-manager.</p> <p>The CRDs will be deleted if you installed cert-manager with the option <code>--set CRDs=true</code>.</p> <p>Most of the features supported by <code>helm uninstall</code> are also supported by this command.</p> <p>Some example uses:</p> <pre><code>cmctl x uninstall\n\ncmctl x uninstall --namespace my-cert-manager\n\ncmctl x uninstall --dry-run\n\ncmctl x uninstall --no-hooks\n</code></pre>"},{"location":"reference/cmctl/#upgrade","title":"Upgrade","text":"<p>Tools that assist in upgrading cert-manager</p> <pre><code>$ cmctl upgrade --help\n</code></pre>"},{"location":"reference/cmctl/#migrate-api-version","title":"Migrate API version","text":"<p>This command can be used to prepare a cert-manager installation that was created before cert-manager <code>v1</code> for upgrading to a cert-manager version <code>v1.6</code> or later. It ensures that any cert-manager custom resources that may have been stored in etcd at a deprecated API version get migrated to <code>v1</code>. See Migrating Deprecated API Resources for more context.</p> <pre><code>$ cmctl upgrade migrate-api-version --qps 5 --burst 10\n</code></pre>"},{"location":"reference/cmctl/#legacy-kubectl-plugin","title":"Legacy kubectl plugin","text":"<p>While the kubectl plugin is supported, it is recommended to use <code>cmctl</code> as this enables a better experience via tab auto-completion.</p> <p>To install the plugin you need the <code>kubectl-cert-manager.tar.gz</code> file for the platform you're using, these can be found on our GitHub releases page. In order to use the kubectl plugin you need its binary to be accessible under the name <code>kubectl-cert_manager</code> in your <code>$PATH</code>.</p> <p>You can run <code>kubectl cert-manager help</code> to test that the plugin is set up properly.</p>"},{"location":"reference/tls-terminology/","title":"TLS \u672f\u8bed","text":"<p>\u4e86\u89e3\u8bc1\u4e66\u7ba1\u7406\u5668\u6587\u6863\u4e2d\u4f7f\u7528\u7684 TLS \u672f\u8bed\uff0c\u5982\u201c\u516c\u5171\u4fe1\u4efb\u201d\u3001\u201c\u81ea\u7b7e\u540d\u201d\u3001\u201c\u6839\u201d\u3001\u201c\u4e2d\u95f4\u201d\u548c\u201c\u53f6\u201d \u8bc1\u4e66\u3002</p>"},{"location":"reference/tls-terminology/#_1","title":"\u6982\u8ff0","text":"<p>\u7531\u4e8e TLS \u88ab\u5982\u6b64\u5e7f\u6cdb\u5730\u90e8\u7f72\uff0c\u672f\u8bed\u6709\u65f6\u4f1a\u88ab\u6df7\u6dc6\uff0c\u6216\u8005\u88ab\u7528\u6765\u8868\u793a\u4e0d\u540c\u7684\u4e1c\u897f\uff0c\u800c\u73b0\u5b9e\u60c5\u51b5\u52a0\u4e0a TLS \u7684\u590d\u6742\u6027\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u8bef\u89e3\u548c\u6df7\u4e71\u3002</p> <p>\u4e3a\u4e86\u8fdb\u4e00\u6b65\u53c2\u8003\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u67e5\u770b\u4e00\u4e9b\u76f8\u5173\u7684 RFCs:</p> <ul> <li>RFC 5246: TLS 1.2</li> <li>RFC 8446: TLS 1.3</li> <li>RFC 5280: X.509</li> </ul>"},{"location":"reference/tls-terminology/#_2","title":"\u5b9a\u4e49","text":"\u201cpublicly trusted(\u516c\u5f00\u53ef\u4fe1\u7684)\u201d\u662f\u4ec0\u4e48\u610f\u601d? <p>\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0c\"publicly trusted\"\u8bc1\u4e66\u662f\u53ef\u4ee5\u5728Internet\u4e0a\u4f7f\u7528\u7684\u8bc1\u4e66\uff0c\u5e76\u671f\u671b\u5927\u591a\u6570\u6700\u65b0\u7684\u8ba1\u7b97\u673a\u80fd\u591f\u4f7f\u7528\u5176\u7cfb\u7edf\u4fe1\u4efb\u5b58\u50a8\u5e93\u5bf9\u5176\u8fdb\u884c\u9a8c\u8bc1\u3002</p> <p>\u76ee\u524d\u8fd8\u6ca1\u6709\u4e00\u4e2a\u5305\u542b\u201c\u516c\u5171\u4fe1\u4efb\u201d\u8bc1\u4e66\u7684\u6807\u51c6\u4fe1\u4efb\u5b58\u50a8\u5e93\uff0c\u4f46\u901a\u5e38\u5927\u591a\u6570\u5e38\u89c1\u7684\u4fe1\u4efb\u5b58\u50a8\u5e93\u90fd\u662f\u7c7b\u4f3c\u7684\u3002 \u4e00\u4e2a\u4f8b\u5b50\u662fMozilla\u7684CA\u8bc1\u4e66\u7a0b\u5e8f\u3002</p> \u201cself-signed(\u81ea\u7b7e\u540d)\u201d\u662f\u4ec0\u4e48\u610f\u601d?\u6211\u7684\u6838\u8bc1\u673a\u5173\u662f\u5426\u81ea\u884c\u7b7e\u7f72? <p>\u81ea\u7b7e\u540d\u7684\u610f\u601d\u5c31\u662f\u5b83\u6240\u8bf4\u7684;\u5982\u679c\u8bc1\u4e66\u662f\u7531\u81ea\u5df1\u7684\u79c1\u94a5\u7b7e\u7f72\u7684\uff0c\u5219\u8bc1\u4e66\u662f\u81ea\u7b7e\u540d\u7684\u3002</p> <p>\u7136\u800c\uff0c\u81ea\u7b7e\u540d\u662f\u4e00\u4e2a\u7ecf\u5e38\u88ab\u6df7\u6dc6\u7684\u672f\u8bed\uff0c\u7ecf\u5e38\u88ab\u8bef\u7528\u4e3a\u201c\u4e0d\u53d7\u516c\u4f17\u4fe1\u4efb\u201d\u7684\u610f\u601d\u3002 \u6211\u4eec\u503e\u5411\u4e8e\u4f7f\u7528\u50cf\u201c\u79c1\u6709PKI\u201d\u8fd9\u6837\u7684\u672f\u8bed\u6765\u8868\u793a\u7ec4\u7ec7\u53ef\u80fd\u62e5\u6709\u81ea\u5df1\u7684\u5185\u90e8CA\u8bc1\u4e66\u7684\u60c5\u51b5\uff0c\u8fd9\u4e9b\u8bc1\u4e66\u5728\u7ec4\u7ec7\u5916\u90e8\u4e0d\u53d7\u4fe1\u4efb\u3002</p> <p>\u4f8b\u5982\uff0c\u5728Mozilla\u7684CA\u8bc1\u4e66\u8ba1\u5212\u4e2d\u6709 \u591a \u4e2a\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u4f46\u6240\u6709\u8fd9\u4e9b\u8bc1\u4e66\u901a\u5e38\u90fd\u88ab\u63cf\u8ff0\u4e3a\u201c\u516c\u5171\u4fe1\u4efb\u201d\u3002</p> <p>\u53ea\u6709\u4f7f\u7528\u81ea\u5df1\u7684\u5bc6\u94a5\u7b7e\u540d\u7684\u8bc1\u4e66\u624d\u662f\u81ea\u7b7e\u540d\u7684\u3002</p> \u201c\u6839\u8bc1\u4e66\u201d\u3001\u201c\u4e2d\u95f4\u8bc1\u4e66\u201d\u548c\u201c\u53f6\u8bc1\u4e66\u201d\u4e4b\u95f4\u7684\u533a\u522b\u662f\u4ec0\u4e48? <p>\u8bc1\u4e66\u7ba1\u7406\u5668\u4f7f\u7528\u4ee5\u4e0b\u5b9a\u4e49:</p> <ol> <li> <p>Root Certificates(\u6839\u8bc1\u4e66)</p> <p>\u6839\u662f\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u51e0\u4e4e\u603b\u662f\u6807\u8bb0\u4e3aCA\u8bc1\u4e66\u3002 \u5728TLS\u63e1\u624b\u671f\u95f4\uff0c\u5b83\u4eec\u901a\u5e38\u4e0d\u4f1a\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\uff0c\u56e0\u4e3a\u9700\u8981\u663e\u5f0f\u5730\u4fe1\u4efb\u5b83\u4eec\u624d\u80fd\u8fdb\u884c\u9a8c\u8bc1\u3002</p> <p>\u6839\u6709\u65f6\u88ab\u5b9a\u4e49\u4e3a\u201c\u663e\u5f0f\u53d7\u4fe1\u4efb\u7684CA\u8bc1\u4e66\u201d - \u5b83\u53ef\u4ee5\u5305\u62ec\u975e\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\u3002 \u8bc1\u4e66\u7ba1\u7406\u5668\u4e0d\u4f7f\u7528\u6b64\u5b9a\u4e49\u3002</p> <p>\u66f4\u6539\u4fe1\u4efb\u5b58\u50a8\u4ee5\u5305\u542b\u65b0\u7684\u6839\u6216\u5220\u9664\u65e7\u7684\u6839\u662f\u4e00\u9879\u8270\u5de8\u7684\u4efb\u52a1\uff0c\u5bf9\u4e8e\u516c\u5171\u4fe1\u4efb\u7684\u6839\u53ef\u80fd\u9700\u8981\u51e0\u4e2a\u6708\u6216\u51e0\u5e74\u7684\u65f6\u95f4\u3002 \u56e0\u6b64\uff0c\u6839\u901a\u5e38\u5177\u6709\u5f88\u957f\u7684\u5bff\u547d\uff0c\u901a\u5e38\u5728\u51e0\u5341\u5e74\u5de6\u53f3\u3002</p> </li> <li> <p>Intermediate Certificates(\u4e2d\u95f4\u8bc1\u4e66)</p> <p>\u4e2d\u95f4\u8bc1\u4e66\u662f\u7531\u53e6\u4e00\u4e2aCA\u7b7e\u7f72\u7684CA\u8bc1\u4e66\u3002 \u5927\u591a\u6570\u4e2d\u95f4\u4f53\u5c06\u7531\u6839\u8bc1\u4e66\u7b7e\u540d\uff0c\u4f46\u662f\u53ef\u4ee5\u6784\u9020\u66f4\u957f\u7684\u94fe\uff0c\u5176\u4e2d\u4e00\u4e2a\u4e2d\u95f4\u4f53\u53ef\u4ee5\u7531\u53e6\u4e00\u4e2a\u4e2d\u95f4\u4f53\u7b7e\u540d\u3002</p> <p>\u9881\u53d1\u4e2d\u95f4\u8bc1\u4e66\u7684\u751f\u547d\u5468\u671f\u901a\u5e38\u6bd4\u7b7e\u7f72\u5b83\u4eec\u7684CA\u77ed\u5f97\u591a\u3002 \u5728Internet\u4e0a\uff0c\u4e2d\u95f4\u8bc1\u4e66\u7528\u4e8e\u7f51\u7edc\u8fde\u63a5\u7684\u673a\u5668\u4e0a\u8fdb\u884c\u65e5\u5e38\u9881\u53d1\uff0c\u56e0\u6b64\u9ad8\u4ef7\u503c\u7684\u6839\u8bc1\u4e66\u53ef\u4ee5\u5b8c\u5168\u79bb\u7ebf\u3002</p> <p>\u867d\u7136\u4e2d\u95f4\u8bc1\u4e66\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u5230\u4fe1\u4efb\u5b58\u50a8\u533a\u6765\u663e\u5f0f\u5730\u53d7\u4fe1\u4efb\uff0c\u4f46\u5b83\u4eec\u901a\u5e38\u662f\u901a\u8fc7\u201c\u904d\u5386\u201d\u94fe\u5e76\u9a8c\u8bc1\u7b7e\u540d\u6765\u9a8c\u8bc1\u7684\uff0c\u76f4\u5230\u627e\u5230\u663e\u5f0f\u5730\u53d7\u4fe1\u4efb\u7684\u81ea\u7b7e\u540d\u6839\u8bc1\u4e66\u3002</p> </li> <li> <p>Leaf Certificates(\u53f6\u8bc1\u4e66)</p> <p>\u53f6\u8bc1\u4e66\u901a\u5e38\u7528\u4e8e\u8868\u793a\u7279\u5b9a\u7684\u8eab\u4efd\uff0c\u800c\u4e0d\u662f\u7528\u4e8e\u7b7e\u7f72\u5176\u4ed6\u8bc1\u4e66\u3002 \u5728Internet\u4e0a\uff0c\u53f6\u8bc1\u4e66\u901a\u5e38\u6807\u8bc6\u4e00\u4e2a\u7279\u5b9a\u7684\u57df\uff0c\u4f8b\u5982\u201cexample.com\u201d\u3002</p> <p>\u53f6\u8bc1\u4e66\u5728\u8bc1\u4e66\u94fe\u4e2d\u9996\u5148\u53d1\u9001\uff0c\u5e76\u8868\u793a\u8be5\u8bc1\u4e66\u94fe\u7684\u672b\u7aef\u3002 \u5b83\u4eec\u5fc5\u987b\u4e0e\u521b\u5efa\u94fe\u6240\u9700\u7684\u4efb\u4f55\u4e2d\u95f4\u4ea7\u7269\u4e00\u8d77\u53d1\u9001\uff0c\u8be5\u94fe\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u53ef\u4fe1\u6839\u8bc1\u4e66\u7684\u7b7e\u540d\u8fdb\u884c\u9a8c\u8bc1\u3002</p> </li> </ol> ACME(\u81ea\u52a8\u8bc1\u4e66\u7ba1\u7406\u73af\u5883) <p>Automatic Certificate Management Environment</p> <p>\u81ea\u52a8\u8bc1\u4e66\u7ba1\u7406\u73af\u5883(ACME)\u534f\u8bae\u662f\u4e00\u79cd\u7528\u4e8e\u81ea\u52a8\u5316\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u4e0e\u5176\u7528\u6237\u670d\u52a1\u5668\u4e4b\u95f4\u4ea4\u4e92\u7684\u901a\u4fe1\u534f\u8bae\uff0c\u5141\u8bb8\u4ee5\u975e\u5e38\u4f4e\u7684\u6210\u672c\u81ea\u52a8\u5316\u90e8\u7f72\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\u3002 \u5b83\u662f\u7531\u4e92\u8054\u7f51\u5b89\u5168\u7814\u7a76\u5c0f\u7ec4(ISRG)\u4e3a\u4ed6\u4eec\u7684Let's Encrypt\u670d\u52a1\u8bbe\u8ba1\u7684\u3002</p> <p>\u8be5\u534f\u8bae\u57fa\u4e8e\u901a\u8fc7HTTPS\u4f20\u9012json\u683c\u5f0f\u7684\u6d88\u606f\uff0c\u5df2\u7531\u5176\u81ea\u5df1\u7684\u7279\u8bb8IETF\u5de5\u4f5c\u7ec4\u5728RFC 8555\u4e2d\u4f5c\u4e3a\u4e92\u8054\u7f51\u6807\u51c6\u53d1\u5e03\u3002</p> CA(\u8bc1\u4e66\u9881\u53d1\u673a\u6784) <p>Certificate authority</p> <p>\u5728\u5bc6\u7801\u5b66\u4e2d\uff0c\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u6216\u8bc1\u4e66\u9881\u53d1\u673a\u6784(CA)\u662f\u5b58\u50a8\u3001\u7b7e\u7f72\u548c\u9881\u53d1\u6570\u5b57\u8bc1\u4e66\u7684\u5b9e\u4f53\u3002 \u6570\u5b57\u8bc1\u4e66\u901a\u8fc7\u8bc1\u4e66\u7684\u6307\u5b9a\u4e3b\u9898\u8bc1\u660e\u516c\u94a5\u7684\u6240\u6709\u6743\u3002 \u8fd9\u5141\u8bb8\u5176\u4ed6\u4eba(\u4f9d\u8d56\u65b9)\u4f9d\u8d56\u7b7e\u540d\u6216\u5bf9\u4e0e\u8ba4\u8bc1\u516c\u94a5\u5bf9\u5e94\u7684\u79c1\u94a5\u6240\u505a\u7684\u65ad\u8a00\u3002 CA\u5145\u5f53\u53d7\u4fe1\u4efb\u7684\u7b2c\u4e09\u65b9\uff0c\u65e2\u53d7\u8bc1\u4e66\u7684\u4e3b\u4f53(\u6240\u6709\u8005)\u7684\u4fe1\u4efb\uff0c\u4e5f\u53d7\u4f9d\u8d56\u8bc1\u4e66\u7684\u4e00\u65b9\u7684\u4fe1\u4efb\u3002 \u8fd9\u4e9b\u8bc1\u4e66\u7684\u683c\u5f0f\u7531X.509\u6216EMV\u6807\u51c6\u6307\u5b9a\u3002</p> <p>\u8bc1\u4e66\u9881\u53d1\u673a\u6784\u7684\u4e00\u4e2a\u7279\u522b\u5e38\u89c1\u7684\u7528\u9014\u662f\u5bf9HTTPS(\u4e07\u7ef4\u7f51\u7684\u5b89\u5168\u6d4f\u89c8\u534f\u8bae)\u4e2d\u4f7f\u7528\u7684\u8bc1\u4e66\u8fdb\u884c\u7b7e\u540d\u3002 \u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u9014\u662f\u7531\u56fd\u5bb6\u653f\u5e9c\u53d1\u653e\u8eab\u4efd\u8bc1\uff0c\u7528\u4e8e\u7535\u5b50\u7b7e\u7f72\u6587\u4ef6\u3002</p>"},{"location":"release-notes/","title":"Release Notes","text":"<ul> <li><code>v1.10</code></li> <li><code>v1.9</code></li> <li><code>v1.8</code></li> <li><code>v1.7</code></li> <li><code>v1.6</code></li> <li><code>v1.5</code></li> <li><code>v1.4</code></li> <li><code>v1.3</code></li> <li><code>v1.2</code></li> <li><code>v1.1</code></li> <li><code>v1.0</code></li> <li><code>v0.16</code></li> <li><code>v0.15</code></li> <li><code>v0.14</code></li> <li><code>v0.13</code></li> <li><code>v0.12</code></li> <li><code>v0.11</code></li> <li><code>v0.10</code></li> <li><code>v0.9</code></li> <li><code>v0.8</code></li> <li><code>v0.7</code></li> <li><code>v0.6</code></li> <li><code>v0.5</code></li> <li><code>v0.4</code></li> <li><code>v0.3</code></li> <li><code>v0.2</code></li> <li><code>v0.1</code></li> </ul>"},{"location":"release-notes/release-notes-0.1/","title":"Release Notes","text":"<p>This is the first release of cert-manager. It is currently still not in a production ready state, and features are subject to change.</p> <p>Notable features:</p> <ul> <li>Automated certificate renewal</li> <li>ACME DNS01 challenge mechanism</li> <li>CloudDNS</li> <li>Route53</li> <li>CloudFlare</li> <li>ACME HTTP01 challenge mechanism</li> <li>Should be compatible with all ingress controllers following ingress spec (GCE &amp; NGINX tested)</li> <li>Simple CA based issuance</li> <li>Create an Issuer that references a Secret resource containing a signing key pair, and issue/renew certificates from that.</li> <li>Cluster-wide issuers (aka <code>ClusterIssuer</code>)</li> <li>Backed by CRDs</li> <li>Events logged to the Kubernetes API</li> <li>Status block utilized to store additional state about resources</li> </ul> <p>Please check the [README(https://github.com/jetstack-experimental/cert-manager) for a quick-start guide.</p> <p>We really value any feedback and contributions to the project. If you'd like to get involved, please open some issues, comment or pick something up and get started!</p>"},{"location":"release-notes/release-notes-0.10/","title":"Release Notes","text":"<p>The <code>v0.10</code> release comes quick on the heels of <code>v0.9</code>. It continues the work on the new <code>CertificateRequest</code> resource type, moving us towards a world where out-of-tree Issuer types are first class citizens.</p> <p>As a project, we're pushing towards a 'stable' API release and eventually, a <code>v1.0</code> release. This release, and the releases to follow over the coming months, lay the foundation for these milestones. Keep an eye on the releases page over the coming months for some exciting new developments!</p> <p>You can get started using the new <code>CertificateRequest</code> controllers by enabling the <code>CertificateRequestControllers</code> feature gate - all Issuer types are now supported, and your feedback is extremely valuable before we switch the new implementation to be the default in <code>v0.11</code>!</p> <p>We've also simplified the way we bootstrap TLS certificates for the 'webhook' component. Now, instead of creating an <code>Issuer</code> and <code>Certificate</code> resource for the webhook (requiring you to disable validation on the cert-manager namespace), we've implemented a dedicated <code>webhookbootstrap</code> controller which will manage TLS assets for the webhook.</p> <p>This release includes changes from:</p> <ul> <li><code>Alejandro Garrido Mota</code></li> <li><code>Alpha</code></li> <li><code>Hans Kristian Flaatten</code></li> <li><code>James Munnelly</code></li> <li><code>Jonas-Taha El Sesiy</code></li> <li><code>JoshVanL</code></li> <li><code>Marcello Romani</code></li> <li><code>Moritz Johner</code></li> <li><code>Nicolas Kowenski</code></li> <li><code>Olaf Klischat</code></li> <li><code>Vasilis Remmas</code></li> <li><code>stuart.warren</code></li> <li><code>zeeZ</code></li> </ul>"},{"location":"release-notes/release-notes-0.10/#notable-items","title":"Notable Items","text":""},{"location":"release-notes/release-notes-0.10/#all-issuer-types-now-supported-with-certificaterequests","title":"All Issuer types now supported with <code>CertificateRequests</code>","text":"<p>The <code>CertificateRequest</code> design proposal, first implemented in <code>v0.9</code>, changes the way we request certificates from <code>Issuers</code> in order to allow out-of-tree Issuer types. This required us to refactor and adapt our existing in-tree <code>Issuer</code> types to follow a similar pattern.</p> <p>The <code>v0.10</code> release finishes this refactoring so that all <code>Issuer</code> types now support the new format.</p> <p>As the feature is currently still in an 'alpha' state, you must set the <code>issuerRef.group</code> field on your Certificate resources to <code>certmanager.k8s.io</code>, as well as enabling the <code>CertificateRequestControllers</code> feature gate on the <code>controller</code> component of cert-manager.</p>"},{"location":"release-notes/release-notes-0.10/#simplified-webhook-tls-bootstrapping","title":"Simplified webhook TLS bootstrapping","text":"<p>In past releases, we've managed TLS for the webhook component by creating an internal self signed and CA issuer that is used to mint serving certificates for the apiserver to authenticate the webhook's identity.</p> <p>This introduced a number of complexities in our installation process and has caused trouble for users in the past.</p> <p>In order to simplify this process and to support running a CRD conversion webhook in future (to provide seamless migration between API versions), we've introduced a dedicated <code>webhookbootstrap</code> controller that relies on flags and Secret resources in order to configure TLS for the webhook.</p> <p>This will mean easier installation as well as future-proofing for our upcoming plans in future releases.</p>"},{"location":"release-notes/release-notes-0.10/#keyusages-on-certificate-resources","title":"<code>KeyUsages</code> on Certificate resources","text":"<p>In order to support a more diverse set of applications, including apps that require client-auth certificates, a new field <code>keyUsages</code> has been added which accepts a list of usages that must be present on a Certificate.</p> <p>These will be automatically added when certificates are issued, just like any other field on the Certificate.</p> <p>Thanks to Stuart Warren from Ocado for this change!</p>"},{"location":"release-notes/release-notes-0.10/#preparation-for-v1alpha2-and-beyond","title":"Preparation for <code>v1alpha2</code> and beyond","text":"<p>Over the last few releases, we've been making a number of significant changes to our API types (i.e. moving ACME configuration from Certificate resources onto the Issuer resource). This has involved deprecating some old API fields.</p> <p>In a future release, we'll be removing these deprecated fields altogether, requiring users to update their manifests to utilize the new way to specify configuration.</p> <p>A number of steps have been taken in our own code base to support this change, and in a future release, you'll be required to update all your manifests for this new format. Future API revisions (e.g. <code>v1beta1</code> and <code>v1</code>) will be automatically converted using a Kubernetes conversion webhook (available in beta from Kubernetes 1.15 onward).</p>"},{"location":"release-notes/release-notes-0.10/#action-required","title":"Action Required","text":"<p>No special actions are required as part of this release.</p>"},{"location":"release-notes/release-notes-0.10/#changelog","title":"Changelog","text":""},{"location":"release-notes/release-notes-0.10/#general","title":"General","text":"<ul> <li>Add <code>DisableDeprecatedACMECertificates</code> feature gate to disable the old deprecated ACME configuration format (#1923, <code>@munnerz</code>)</li> <li>chart: fix formatting of values table in <code>README.md</code> (#1936, <code>@Starefossen</code>)</li> <li>Add internal API version and implement machinery for defaulting &amp; conversion (#2002, <code>@munnerz</code>)</li> <li>Fix concurrent map write panic in certificates controller (#1980, <code>@munnerz</code>)</li> <li><code>cainjector</code>: allow injecting CAs directly from Secret resources (#1990, <code>@munnerz</code>)</li> <li>Mark <code>spec</code> and <code>status</code> as non-required fields in CRDs (#1957, <code>@munnerz</code>)</li> <li>Add ability to specify key usages and extended key usages in certificates (#1996, <code>@stuart-warren</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.10/#acme-issuer","title":"ACME Issuer","text":"<ul> <li>Add option to assume role in Route53 DNS01 provider (#1917, <code>@moolen</code>)</li> <li>Fix documentation for AzureDNS service principal creation (#1960, <code>@elsesiy</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.10/#webhook","title":"Webhook","text":"<ul> <li>Use dedicated controller for webhook TLS bootstrapping (#1993, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.10/#certificaterequest","title":"<code>CertificateRequest</code>","text":"<ul> <li>Add ACME <code>CertificateRequest</code> controller implementation (#1943, <code>@JoshVanL</code>)</li> <li>Add Vault <code>CertificateRequest</code> controller implementation (#1934, <code>@JoshVanL</code>)</li> <li>Add <code>SelfSigned</code> <code>CertificateRequest</code> controller implementation (#1906, <code>@JoshVanL</code>)</li> <li>Add Venafi <code>CertificateRequest</code> controller implementation (#1968, <code>@JoshVanL</code>)</li> <li>Don't validate <code>issuerRef.kind</code> field if <code>issuerRef.group</code>is set in order to support out-of-tree Issuer types (#1949, <code>@munnerz</code>)</li> <li>Adds <code>CertificateRequest</code> <code>FailureTime</code>. The Certificate controller will re-try failed <code>CertificateRequests</code> at least one hour after this failed time. (#1979, <code>@JoshVanL</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.10/#monitoring","title":"Monitoring","text":"<ul> <li>Added variable to specify custom namespace where to deploy <code>ServiceMonitor</code> resource (#1970, <code>@mogaal</code>)</li> <li>helm: fix labels and add Service for Prometheus <code>ServiceMonitor</code> (#1942, <code>@Starefossen</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.11/","title":"Release Notes","text":"<p>The <code>v0.11</code> release is a significant milestone for the cert-manager project, and is full of new features. We are making a number of changes to our CRDs in a backwards incompatible way, in preparation for moving into <code>v1beta1</code> and eventually <code>v1</code> in the coming releases:</p> <ul> <li>Renaming our API group from <code>certmanager.k8s.io</code> to <code>cert-manager.io</code></li> <li>Bumping the API version from <code>v1alpha1</code> to <code>v1alpha2</code></li> <li>Removing fields deprecated in <code>v0.8</code> (<code>certificate.spec.acme</code>,   <code>issuer.spec.http01</code> and <code>issuer.spec.dns01</code>)</li> <li>Renaming annotation prefixes on Ingress &amp; cert-manager resources to use the   new <code>cert-manager.io</code> prefix, and in some cases <code>acme.cert-manager.io</code></li> <li>Using the <code>status</code> subresource for submitting status updates to the API,   first introduced in Kubernetes 1.9.</li> <li>Tightening use of common name vs DNS name with ACME certificates</li> </ul> <p>We have also switched to using the new [<code>CertificateRequest</code>] based Certificate issuance implementation, first introduced in alpha in cert-manager <code>v0.9</code>.</p> <p>These changes enable exciting new integrations points in cert-manager, enabling new things like:</p> <ul> <li>External issuer types, such as the [Smallstep Step Issuer]</li> <li>Deeper integrations into Kubernetes, with an experimental [CSI driver] that   can be used to automatically mount signed certificates into pods</li> <li>Experimental integration with Istio, allowing you to utilize any of   cert-manager's configured issuer types/CAs with the [node agent]</li> <li>Retrieving certificates without giving cert-manager access to your private   keys</li> </ul> <p>This is a really exciting time for cert-manager, as these changes have been made possible by refining our past decisions around API types, and they will enable us to push ahead with many new features in the project.</p>"},{"location":"release-notes/release-notes-0.11/#important-information","title":"Important information","text":"<p>With all of these great changes, there is also work to do.</p> <p>The changes to our CRD resources mean that upgrading requires more manual intervention than in previous releases.</p> <p>It's recommended that you backup and completely uninstall cert-manager before re-installing the <code>v0.11</code> release.</p> <p>You will also need to manually update all your backed up cert-manager resource types to use the new <code>apiVersion</code> setting.</p> <p>A table of resources and their old and new <code>apiVersion</code>s:</p> Kind Old <code>apiVersion</code> New <code>apiVersion</code> <code>Certificate</code> <code>certmanager.k8s.io/v1alpha1</code> <code>cert-manager.io/v1alpha2</code> <code>Issuer</code> <code>certmanager.k8s.io/v1alpha1</code> <code>cert-manager.io/v1alpha2</code> <code>ClusterIssuer</code> <code>certmanager.k8s.io/v1alpha1</code> <code>cert-manager.io/v1alpha2</code> <code>CertificateRequest</code> <code>certmanager.k8s.io/v1alpha1</code> <code>cert-manager.io/v1alpha2</code> <code>Order</code> <code>certmanager.k8s.io/v1alpha1</code> <code>acme.cert-manager.io/v1alpha2</code> <code>Challenge</code> <code>certmanager.k8s.io/v1alpha1</code> <code>acme.cert-manager.io/v1alpha2</code> <p>You must also make sure to update all references to cert-manager in annotations to their new prefix:</p> Annotation Affected resources New annotation <code>certmanager.k8s.io/acme-http01-edit-in-place</code> <code>Ingress</code> <code>acme.cert-manager.io/http01-edit-in-place</code> <code>certmanager.k8s.io/acme-http01-ingress-class</code> <code>Ingress</code> <code>acme.cert-manager.io/http01-ingress-class</code> <code>certmanager.k8s.io/issuer</code> <code>Ingress</code> <code>cert-manager.io/issuer</code> <code>certmanager.k8s.io/cluster-issuer</code> <code>Ingress</code> <code>cert-manager.io/cluster-issuer</code> <code>certmanager.k8s.io/acme-challenge-type</code> <code>Ingress</code> REMOVED <code>certmanager.k8s.io/acme-dns01-provider</code> <code>Ingress</code> REMOVED <code>certmanager.k8s.io/alt-names</code> <code>Ingress, Secret</code> <code>cert-manager.io/alt-names</code> <code>certmanager.k8s.io/ip-sans</code> <code>Ingress, Secret</code> <code>cert-manager.io/ip-sans</code> <code>certmanager.k8s.io/common-name</code> <code>Ingress, Secret</code> <code>cert-manager.io/common-name</code> <code>certmanager.k8s.io/issuer-name</code> <code>Ingress, Secret</code> <code>cert-manager.io/issuer-name</code> <code>Ingress, Secret</code> <code>cert-manager.io/issuer-kind</code> <code>Ingress, Secret</code> <code>cert-manager.io/issuer-group</code> <code>Ingress, Secret</code> <code>cert-manager.io/uri-sans</code> <code>Certificate</code> <code>cert-manager.io/issue-temporary-certificate</code> <code>CertificateRequest</code> <code>cert-manager.io/private-key-secret-name</code> <code>certmanager.k8s.io/certificate-name</code> <code>CertificateRequest, Secret</code> <code>cert-manager.io/certificate-name</code>"},{"location":"release-notes/release-notes-0.11/#contributors","title":"Contributors","text":"<p>This release has seen code contributions from a number of people in the community:</p> <ul> <li><code>Adam Kunicki</code></li> <li><code>Alpha</code></li> <li><code>Brian Hong</code></li> <li><code>Dan Farrell</code></li> <li><code>Dig-Doug</code></li> <li><code>Galo Navarro</code></li> <li><code>Ingo Gottwald</code></li> <li><code>James Munnelly</code></li> <li><code>JoshVanL</code></li> <li><code>Kevin Lefevre</code></li> <li><code>Lachlan Cooper</code></li> <li><code>Michel Blankleder</code></li> <li><code>Toni Menzel</code></li> <li><code>Wellington F Silva</code></li> <li><code>Woz</code></li> <li><code>dulltz</code></li> </ul> <p>As always, a big thank you to those opening issues, replying to issues and helping out in the Slack channel. As well as working in other projects to help users secure services running on Kubernetes.</p>"},{"location":"release-notes/release-notes-0.11/#notable-changes","title":"Notable changes","text":""},{"location":"release-notes/release-notes-0.11/#renamed-api-group","title":"Renamed API group","text":"<p>Due to new policies in the upstream Kubernetes project, we have renamed the API group from <code>certmanager.k8s.io</code> to <code>cert-manager.io</code>.</p> <p>This is a breaking change to our API surface as mentioned above, but it is a long time coming. The original <code>k8s.io</code> suffix was used when the project first started as there was not official guidance or information on how <code>ThirdPartyResources</code> should be structured. Now that this area of the Kubernetes project has evolved further, we're retrospectively changing this to conform with the new requirements.</p>"},{"location":"release-notes/release-notes-0.11/#moving-to-v1alpha2","title":"Moving to <code>v1alpha2</code>","text":"<p>When cert-manager first started, we defined our APIs based on what we thought made sense for end-users.</p> <p>Over time, through gathering feedback and monitoring the way users are actually using cert-manager, we've identified some issues with our original API design.</p> <p>As part of the project moving towards <code>v1</code>, we've identified certain areas of our APIs that are not fit for purpose.</p> <p>In order to begin the process of moving towards <code>v1</code>, we first deprecated a number of fields in our <code>v1alpha1</code> API. We've now dropped these API fields in <code>v1alpha2</code>, in preparation for declaring this new API as <code>v1beta1</code> in the coming releases.</p>"},{"location":"release-notes/release-notes-0.11/#new-certificaterequest-resource-type","title":"New <code>CertificateRequest</code> resource type","text":"<p>The activation of <code>CertificateRequest</code> controllers are no longer behind a feature and are now instead enabled by default. This means that when requesting certificates using the <code>Certificate</code> resource the <code>CertificateRequest</code> resource will be used as the default and only way to honor the request. The addition of this resource introduces the ability for much greater extension points to cert-manager, notably out-of-tree issuers, Istio integrations, and experimental tooling such as a CSI driver. You can read more about the motivation and design of this resource in the enhancement document.</p> <p>This change should cause no disruption to how end users interact with cert-manager, with the exception of debugging now requiring this resource to be inspected also.</p>"},{"location":"release-notes/release-notes-0.11/#support-for-out-of-tree-issuer-types","title":"Support for out-of-tree issuer types","text":"<p>With the graduation of the <code>CertificateRequest</code> resource, cert-manager now supports out-of-tree issuers by default and treats them the same as any other core issuer. This process is facilitated by the addition of the <code>group</code> field on issuer references inside your <code>Certificate</code> and <code>CertificateRequest</code> resources.</p> <p>If you're interested in implementing your own out-of-tree issuer, or if there is a provider you would like see implemented, feel free to reach out either through a GitHub issue or send us a message in the #cert-manager channel on Kubernetes Slack!</p>"},{"location":"release-notes/release-notes-0.11/#new-fields-on-certificate-resources","title":"New fields on Certificate resources","text":"<p>This release includes a new field <code>URISANs</code> on the <code>Certificate</code> resource. With this, you can specify unique resource identifier URLs as subject alternative names on your certificates. This addition unblocks development for an Istio integration where mTLS can be configured using cert-manager as the backend and in turn opens up all cert-manager issuer types as valid certificate providers in your Istio PKI.</p>"},{"location":"release-notes/release-notes-0.11/#improved-acme-order-controller-design","title":"Improved ACME Order controller design","text":"<p>Some users may have noticed issues with the 'Order' resource not automatically detecting changes to their configure 'solvers' on their Issuer resources.</p> <p>In <code>v0.11</code>, we've rewritten the ACME Order handling code to:</p> <p>1) better handle updates to Issuers during an Order 2) improve ACME API usage - we now cache more information about the ACME Order    process in the Kubernetes API, which allows us to act more reliably and    without causing excessive requests to the ACME server.</p>"},{"location":"release-notes/release-notes-0.11/#no-longer-generating-temporary-certificates-by-default","title":"No longer generating 'temporary certificates' by default","text":"<p>Previously, we have issued a temporary certificate when a <code>Certificate</code> resource targeting an ACME issuer has been created. This would later be overridden once the real signed certificate has been issued. The reason for this behavior was to facilitate compatibility with <code>ingress-gce</code> however, many users have had trouble with this in the past and has led to lots of confusion - namely where applications would need restarting to take on the signed certificate rather than the temporary.</p> <p>In this release, no temporary certificates will be created unless explicitly requested. This can be done using the annotation <code>\"cert-manager.io/issue-temporary-certificate\": \"true</code> on <code>Certifcate</code> resources.</p> <p>We've additionally changed the behavior of ingress-shim to now add this new annotation to <code>Certificate</code> resources if <code>\"acme.cert-manager.io/http01-edit-in-place\"</code> is present on the Ingress resource.</p>"},{"location":"release-notes/release-notes-0.11/#changelog","title":"Changelog","text":""},{"location":"release-notes/release-notes-0.11/#action-required","title":"Action Required","text":"<ul> <li>Rename <code>certmanager.k8s.io</code> API group to <code>cert-manager.io</code> (#2096, <code>@munnerz</code>)</li> <li>Move Order and Challenge resources to the <code>acme.cert-manager.io</code> API group (#2093, <code>@munnerz</code>)</li> <li>Move <code>v1alpha1</code> API to <code>v1alpha2</code> (#2087, <code>@munnerz</code>)</li> <li>Allow controlling whether temporary certificates are issued using a new annotation <code>certmanager.k8s.io/issue-temporary-certificate</code>   on Certificate resources. Previously, when an ACME certificate was requested, a temporary certificate would be issued in order   to improve compatibility with <code>ingress-gce</code>. ingress-shim has been updated to automatically set this annotation on managed Certificate   resources when using the 'edit-in-place' annotation, but users that have manually created their Certificate resources will need to   manually add the new annotation to their Certificate resources. (#2089, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.11/#other-notable-changes","title":"Other Notable Changes","text":"<ul> <li>Change the default leader election namespace to <code>kube-system</code> instead of the same namespace as the cert-manager pod, to avoid multiple copies of cert-manager accidentally being run at once (#2155, <code>@munnerz</code>)</li> <li>Adds <code>URISANs</code> field to <code>Certificate.Spec</code> resource. (#2085, <code>@JoshVanL</code>)</li> <li>Move status to a CRD Subresource (#2097, <code>@JoshVanL</code>)</li> <li>Enables supporting out of tree issuers with ingress annotations (#2105, <code>@JoshVanL</code>)</li> <li>Bump Kubernetes dependencies to 1.16.0 (#2095, <code>@munnerz</code>)</li> <li>Adds Certificate conformance suite (#2034, <code>@JoshVanL</code>)</li> <li>Build using Go 1.13.1 (#2114, <code>@munnerz</code>)</li> <li>Adds Kubernetes authentication type for Vault Issue (#2040, <code>@JoshVanL</code>)</li> <li>Service account annotation support in Helm chart (#2086, <code>@serialx</code>)</li> <li>Update AWS Go SDK to 1.24.1 to support IAM Roles for Service Accounts (#2083, <code>@serialx</code>)</li> <li>Remove deprecated API fields and functionality (#2082, <code>@munnerz</code>)</li> <li>Update <code>hack/ci/run-dev-kind.sh</code> script to use the right path of cert-manager charts. (#2074, <code>@srvaroa</code>)</li> <li>Simplify, improve and rewrite the <code>acmeorders</code> controller (#2041, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.12/","title":"Release Notes","text":"<p>The <code>v0.12.0</code> release is finally ready! After a KubeCon-induced delay, this version focuses on usability, user experience, bug-fixes and documentation.</p> <p>A big notable feature in this release is the new <code>cert-manager.io</code> website - this has been a long time coming, but we hope that the information on this site should more clearly walk new and experienced users alike through the tool, and with it the rewrite into Markdown (with Hugo) should make external contributions easier!</p> <p>The rest of the notable features below are all focused on usability, and as such, the upgrade process from <code>v0.11</code> should be nice and easy :holiday:.</p> <p>We'll be doing an in-depth walk-through of this release and what's planned for for the next release during the next community call on Wednesday 4th December! For more details on joining and getting involved, see the community section.</p>"},{"location":"release-notes/release-notes-0.12/#contributors","title":"Contributors","text":"<p>This release has seen code contributions from a number of people in the community:</p> <ul> <li><code>Adrian Mouat</code></li> <li><code>Benjamin P. Jung</code></li> <li><code>Bouke van der Bijl</code></li> <li><code>Christian Groschupp</code></li> <li><code>Christophe Courtaut</code></li> <li><code>Eric Bailey</code></li> <li><code>Harold Drost</code></li> <li><code>Ingo Gottwald</code></li> <li><code>James Munnelly</code></li> <li><code>JayatiGoyal</code></li> <li><code>Joshua Van Leeuwen</code></li> <li><code>Krishna Durai</code></li> <li><code>Luca Berneking</code></li> <li><code>Matevz Mihalic</code></li> <li><code>Max Goltzsche</code></li> <li><code>Nick Parker</code></li> <li><code>Nils Cant</code></li> <li><code>Nolan Reisbeck</code></li> <li><code>Pierre Dorbais</code></li> <li><code>Sam Cogan</code></li> <li><code>Thomas</code></li> <li><code>chenjun.cj</code></li> <li><code>ismail BASKIN</code></li> <li><code>walter.goulet</code></li> </ul> <p>As always, a big thank you to those opening issues, replying to issues and helping out in the Slack channel. As well as working in other projects to help users secure services running on Kubernetes.</p>"},{"location":"release-notes/release-notes-0.12/#notable-changes","title":"Notable changes","text":""},{"location":"release-notes/release-notes-0.12/#new-website","title":"New website","text":"<p>We have launched a new website to better showcase cert-manager, which can be found at <code>cert-manager.io</code>.</p> <p>With this new site, we have also significantly restructured and rewritten the documentation for the site in order to flow better, and hopefully inform users more on the inner-workings of cert-manager whilst still making on-boarding to the project easy.</p> <p>Whilst this is the first launch of the new website, there is still lots to do! If you have any feedback, ideas or expertise to improve the site, please open an issue or make a contribution over in the new cert-manager/website repository.</p>"},{"location":"release-notes/release-notes-0.12/#multi-architecture-images","title":"Multi-architecture images","text":"<p>If you run a non-homogeneous or alt-architecture cluster (i.e. <code>arm</code> or <code>arm64</code>) then you may have run into issues when deploying cert-manager.</p> <p>For almost a year now, we have published Docker images built for these architectures, but due to limitations in <code>quay.io</code>, using these images has required changing deployment manifests and passing additional flags to different cert-manager components.</p> <p>As of <code>v0.12</code>, we make use of <code>Docker Image Manifests v2.2</code>, which means that you will no longer have to make any changes to the deployment manifests in order to deploy cert-manager into your cluster!</p> <p>This is a big usability win for users of non-<code>amd64</code> systems, and a big +1 for usability!</p>"},{"location":"release-notes/release-notes-0.12/#making-it-easier-to-debug-failing-acme-challenges","title":"Making it easier to debug failing ACME challenges","text":"<p>During the ACME authorization flow, a number of issues can arise such as misconfigured DNS records or ingress controllers.</p> <p>This release makes it simpler to identify these issues when they occur, providing additional debugging information through the user of <code>kubectl describe challenge &lt;name-of-failing-challenge&gt;</code>.</p> <p>Whilst this is a small addition, it vastly improves the user experience for first time users who may have configuration issues with their DNS records or cert-manager installation, another win for usability!</p>"},{"location":"release-notes/release-notes-0.12/#simplifying-the-webhook-component","title":"Simplifying the webhook component","text":"<p>For those of you upgrading from older versions of cert-manager, you may already be aware of some of the deployment issues with the 'webhook' component in cert-manager.</p> <p>In previous releases, this component relied on the creation of an <code>APIService</code> resource in order for the Kubernetes apiserver to utilize the webhook and provide additional validation for our <code>CustomResourceDefinition</code> types.</p> <p>An <code>APIService</code> is a powerful resource, however, due to its nature, can cause certain core operations (such as garbage collection) to not function if the webhook becomes unavailable at any point, which can in turn cause cascading failures in your Kubernetes cluster in the worst of cases.</p> <p>In <code>v0.12</code>, we have rewritten this component almost entirely, and we no longer make use of the <code>APIService</code> resource in order to expose it.</p> <p>This should mean deploying the webhook is far easier, and far less likely to cause cluster-wide issues.</p> <p>We have also extended the webhook to support 'API conversions' for our CRD types. Whilst we don't currently make use of this functionality, when we release the <code>v1beta1</code> we will make use of it, at which point the webhook will be a required component in clusters running Kubernetes 1.15 or greater.</p>"},{"location":"release-notes/release-notes-0.12/#changelog","title":"Changelog","text":""},{"location":"release-notes/release-notes-0.12/#action-required","title":"Action Required","text":"<ul> <li>ACTION REQUIRED   Users who have previously set the Kubernetes Auth Mount Path will need to update their manifests to include the entire mount path. The <code>/login</code> endpoint is added for you.</li> </ul> <p>Changes the Vault Kubernetes Auth Path to require the entire mount path. <code>/login</code> is added to all mount paths when authenticating.   The default auth path has now changed from <code>kubernetes</code> to <code>/v1/auth/kubernetes</code> (#2349, <code>@JoshVanL</code>)</p>"},{"location":"release-notes/release-notes-0.12/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fixes issues with Pod Security Policies that prevented pods from running when Pod Security Policy is enabled in Kubernetes (#2234, <code>@sam-cogan</code>)</li> <li>Fix issue causing certificates not to be issued when running with <code>OwnerReferencesPermissionEnforcement</code> admission controller enabled (#2325, <code>@CoaxVex</code>)</li> <li>Fix bug causing SIGTERM and SIGINT signals to not be respected whilst the controller is performing leader election (#2236, <code>@munnerz</code>)</li> <li>Fix setting <code>ownerReference</code> on Challenge resources created by Orders controller (#2324, <code>@CoaxVex</code>)</li> <li>Allow <code>CloudDNS</code> resolvers to be validated correctly without <code>serviceAccountSecretRef</code> to allow ambient permissions to be used. (#2250, <code>@baelish</code>)</li> <li>Add missing <code>apiVersion</code> to <code>Chart.yaml</code> (#2270, <code>@yurrriq</code>)</li> <li>Perform API resource validation of the 'status' subresource on cert-manager resources (#2283, <code>@munnerz</code>)</li> <li>Fix outdated documentation for solver configuration in <code>Issuers</code> and <code>ClusterIssuers</code> (#2210, <code>@nickbp</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.12/#other-notable-changes","title":"Other Notable Changes","text":"<ul> <li>Explicitly define <code>containerPort</code> protocol in helm chart (#2405, <code>@bouk</code>)</li> <li>Allow permissive acceptance for matching Certificates with Secrets that are using legacy annotations to reduce non-required certificate reissue. (#2400, <code>@JoshVanL</code>)</li> <li>Add API token authentication option to CloudFlare issuer (#2170, <code>@matevzmihalic</code>)</li> <li>Bump Kubernetes client library dependencies to 1.16.3 (#2290, <code>@munnerz</code>)</li> <li>Build using go 1.13.4 (#2366, <code>@munnerz</code>)</li> <li>Mark <code>certificaterequest.spec.csr</code> field as required in OpenAPI schema (#2368, <code>@munnerz</code>)</li> <li>Add <code>serverAuth</code> extended key usage to Certificates by default (#2351, <code>@JoshVanL</code>)</li> <li>Surface more information about ACME authorization failures on Challenge resources (#2261, <code>@munnerz</code>)</li> <li>Add documentation for the webhook (#2252, <code>@cgroschupp</code>)</li> <li>Add support for API resource conversion to the webhook. NOTE: this feature is not currently utilized by cert-manager (#2001, <code>@munnerz</code>)</li> <li>Remove nested <code>cainjector</code> sub chart and include it in main chart (#2285, <code>@munnerz</code>)</li> <li>Change the default webhook listen address to 10250 for better compatibility with GKE private clusters (#2278, <code>@munnerz</code>)</li> <li>Bump Helm &amp; Tiller version used during end-to-end tests to 2.15.1 (#2275, <code>@munnerz</code>)</li> <li>Make <code>spec.csr</code>, <code>status.url</code>, <code>status.finalizeURL</code>, <code>status.certificate</code>, <code>status.authorizations</code>, <code>status.authorizations[].url</code>, <code>status.authorizations[].identifier</code>, <code>status.authorizations[].wildcard</code>, <code>status.authorizations[].challenges</code>, <code>status.authorizations[].challenges[].url</code>, <code>status.authorizations[].challenges[].type</code>, <code>status.authorizations[].challenges[].token</code> fields on Order resources immutable (#2219, <code>@munnerz</code>)</li> <li>No longer use architecture specific <code>acmesolver</code> images (#2242, <code>@munnerz</code>)</li> <li>enable cert-manager using <code>--kubeconfig</code> to connect API Server with <code>kubeconfig</code> file (#2224, <code>@answer1991</code>)</li> <li>Publish multi-architecture docker manifest lists (#2230, <code>@munnerz</code>)</li> <li>Make <code>order.status.authorizations[].wildcard</code> field a <code>*bool</code> (#2225, <code>@munnerz</code>)</li> <li>Kubernetes APIServer dry-run is supported. (#2206, <code>@ismailbaskin</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.13/","title":"Release Notes","text":"<p>The <code>v0.13</code> contains a number of important bug-fixes and a few notable feature additions. It is a minor, incremental update over <code>v0.12</code> and does not require any special upgrade steps.</p>"},{"location":"release-notes/release-notes-0.13/#acme-external-account-binding-support","title":"ACME External Account Binding support","text":"<p>Users that wish to use cert-manager with ACME servers other than Let's Encrypt may have found themselves unable to register an account due to the lack of (EAB) 'External Account Binding' support. This allows an ACME server to validate that a user is somehow associated with some other entity, like an account in the CAs customer management system.</p> <p>With EAB support, it's now possible to specify additional parameters (<code>spec.acme.externalAccountBinding</code>) on your ACME Issuer resource and utilize cert-manager with your preferred ACME provider.</p>"},{"location":"release-notes/release-notes-0.13/#support-for-full-set-of-x509-subject-parameters","title":"Support for full set of X.509 'subject' parameters","text":"<p>In this release, support for the full range of 'subject' parameters as per the X.509 specification has been added. This means you can set fields like <code>organizationalUnit</code>, <code>provinces</code>, <code>serialNumber</code>, <code>country</code>, and all other standard X.509 subject fields.</p> <p>A big thanks to <code>@mathianasj</code> for this addition!</p>"},{"location":"release-notes/release-notes-0.13/#invalidrequest-status-condition-for-certificaterequest-resources","title":"<code>InvalidRequest</code> status condition for <code>CertificateRequest</code> resources","text":"<p>For the growing ecosystem of developers creating their own 'external issuer types' for cert-manager, we have added support for a new 'status condition' type <code>InvalidRequest</code> - this can be used to signal from your signer/issuer to cert-manager that the parameters that the user has requested on the X.509 CSR are 'invalid' and the CSR should not be retried.</p> <p>This prevents users expending API quotas and making requests that will never succeed.</p>"},{"location":"release-notes/release-notes-0.13/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix invalid service account name used in RBAC resources when manually specifying a service account name (#2509, <code>@castlemilk</code>)</li> <li>fixed a bug that in certain cases could cause HTTP01 ingress <code>serviceName</code> fields to be incorrectly set (#2460, <code>@greywolve</code>)</li> <li>Fix bug causing ever-increasing CPU usage in webhook component (#2467, <code>@munnerz</code>)</li> <li>Fix bug causing temporary certificates to overwrite previously issued certificates when adding a new <code>dnsName</code> to an existing Certificate resource (#2469, <code>@munnerz</code>)</li> <li>Fix <code>certmanager_certificate_expiration_timestamp_seconds</code> metric recording (#2416, <code>@munnerz</code>)</li> <li>Fixes <code>ClusterIssuers</code> not finding the secret when the secret is in a different namespace than the certificate request using the Venafi issuer type (#2520, <code>@mathianasj</code>)</li> <li>Fixes generation if invalid certificate name the the 52nd character in a domain name is a symbol. (#2516, <code>@meyskens</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.13/#other-notable-changes","title":"Other Notable Changes","text":"<ul> <li>Adds <code>InvalidRequest</code> condition type to <code>CertificateRequest</code>, signaling to not retry the request. (#2508, <code>@JoshVanL</code>)</li> <li>Add volume and volume mounts field to cert-manager helm chart (#2504, <code>@joshuastern</code>)</li> <li>Add support for additional X.509 'subject' fields (#2518, <code>@mathianasj</code>)</li> <li>Bump <code>k8s.io/*</code> dependencies to Kubernetes 1.17.0 (#2452, <code>@munnerz</code>)</li> <li>It is now possible to disable <code>AppArmor</code> when Pod Security Policies are used. (#2489, <code>@czunker</code>)</li> <li>Support for arbitrary <code>securityContext</code> parameters (#2455, <code>@nefischer</code>)</li> <li>Remove misleading 'error decoding X.509 certificate' message (#2470, <code>@munnerz</code>)</li> <li>Remove IP address validation on <code>dns01-recursive-nameservers</code> to allow domain names (#2428, <code>@haines</code>)</li> <li>Optional <code>webhook.securityContext</code> and <code>cainjector.securityContext</code> chart parameters to specify pods security context. (#2449, <code>@nefischer</code>)</li> <li>webhook: register HTTP handlers for <code>pprof</code> debug endpoints (#2450, <code>@munnerz</code>)</li> <li>Adds support for chart configurable parameters  <code>deploymentAnnotations</code>, <code>webhook.deploymentAnnotations</code> and <code>cainjector.deploymentAnnotations</code> (#2447, <code>@nefischer</code>)</li> <li>Adds ACME external account binding support (#2392, <code>@JoshVanL</code>)</li> <li>Fix false-y values in helm chart to mitigate <code>kubernetes/kubernetes#66450</code> (#2383, <code>@colek42</code>)</li> <li>Explicitly define <code>containerPort</code> protocol in helm chart (#2405, <code>@bouk</code>)</li> <li>Switch to using upstream <code>golang.org/x/crypto/acme</code> ACME client library (#2422, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.14/","title":"Release Notes","text":"<p>The <code>v0.14</code> release has a few focus areas:</p> <ul> <li>Improving the deployment/installation process</li> <li>Improving the release process</li> <li><code>CustomResourceDefinition</code> conversion</li> <li>Support for older Kubernetes and OpenShift versions</li> <li>Experimental 'bundle' output format for Certificates</li> </ul> <p>As usual, please read the upgrade notes before upgrading.</p>"},{"location":"release-notes/release-notes-0.14/#webhook-changes","title":"Webhook changes","text":"<p>The webhook component is now required. The webhook will be automatically enabled by the <code>v0.14</code> manifests, so no additional action is required.</p> <p>If you have issues running the webhook in your environment, we'd like to hear from you! We are aware of issues relating to firewall rules from the Kubernetes API server to the webhook pod(s) - we would like to gather together a corpus of configuration snippets that can be used to ensure the webhook is successfully deployed in these environments too.</p> <p>This change is required in order to support the upcoming changes to our API versions, as we introduce <code>v1alpha3</code>, <code>v1beta1</code> and <code>v1</code> over the coming months!</p>"},{"location":"release-notes/release-notes-0.14/#improving-our-deployment-and-release-process","title":"Improving our deployment and release process","text":"<p>After reports of various issues installing on older Kubernetes and OpenShift versions, we've taken some time to revise our installation manifests.</p> <p>There are now two 'variants' to choose from, 'standard' and the 'legacy', with a simple way to know which to use:</p> Environment Variant to use Kubernetes 1.15+ <code>cert-manager.yaml</code> OpenShift 4 <code>cert-manager.yaml</code> Kubernetes 1.11-1.14 <code>cert-manager-legacy.yaml</code> OpenShift 3.11 <code>cert-manager-legacy.yaml</code> <p>Please be sure to read the upgrade guide for more information on how to upgrade from a previous release.</p>"},{"location":"release-notes/release-notes-0.14/#customresourcedefinition-conversion-webhook-v1alpha3-api-version","title":"<code>CustomResourceDefinition</code> conversion webhook + <code>v1alpha3</code> API version","text":"<p>As part of the effort to mature our API, we are releasing the <code>v1alpha3</code> API version. This contains a number of small changes, notably moving some fields to the <code>subject</code> stanza on the Certificate resource to be more consistent with how certain options are specified.</p> <p>With this we have enabled the 'conversion webhook', which enables API clients to utilize both the <code>v1alpha2</code> and <code>v1alpha3</code> APIs simultaneously, similar to other core resources in Kubernetes.</p> <p>Thanks to this conversion webhook, this upgrade and future upgrades after it should be seamless. The ability to make these kinds of changes to our API will enable the <code>v1beta1</code> API version to be released in a seamless manner in an upcoming release too.</p> <p>More information on the webhook can be found in the concepts section.</p>"},{"location":"release-notes/release-notes-0.14/#support-for-kubernetes-111-and-openshift-311","title":"Support for Kubernetes 1.11 and OpenShift 3.11","text":"<p>We've had a number of users who are using OpenShift 3.11 &amp; Kubernetes 1.11 reach out requesting support with installation. In this release, we've expanded the range of Kubernetes versions we support to once again include 1.11, as well as adding support for OpenShift 3.11.</p> <p>A big thanks to <code>@meyskens</code> for putting this together!</p>"},{"location":"release-notes/release-notes-0.14/#experimental-bundle-format-support-jks-and-pkcs12","title":"Experimental 'bundle format' support (JKS and PKCS#12)","text":"<p>One of our top feature requests has been for support for JKS and PKCS#12 bundle files as an output from Certificate resources.</p> <p>In this release, we've added experimental support for both of these bundle formats. This can currently only be configured globally with flags provided to the <code>cert-manager</code> pod (<code>--experimental-issue-jks</code> and <code>--experimental-issue-pkcs12</code>). The password used for this bundle must also be configured using the flags <code>--experimental-jks-password</code> and <code>--experimental-pkcs12-keystore-password</code> respectively.</p> <p>In the next release, we are aiming to provide native support for these bundle format types as part of the Certificate resource configuration. We have added these flags now in order to gather feedback on the way this feature works, and help guide how this feature should work in future.</p>"},{"location":"release-notes/release-notes-0.14/#extended-support-for-venafi-features","title":"Extended support for Venafi features","text":"<p>Users of the Venafi issuer often need to set custom metadata on their certificate requests in order to better associate each request with different business areas, or in order to validate &amp; authorize whether a request should be signed.</p> <p>In this release, we've added support for setting custom metadata by adding the <code>venafi.cert-manager.io/custom-fields</code> annotation on <code>Certificate</code> and <code>CertificateRequest</code> resources. If using the Venafi TPP integration, version 19.2 or greater is required.</p>"},{"location":"release-notes/release-notes-0.14/#urgent-upgrade-notes","title":"Urgent Upgrade Notes","text":""},{"location":"release-notes/release-notes-0.14/#no-really-you-must-read-this-before-you-upgrade","title":"(No, really, you MUST read this before you upgrade)","text":"<ul> <li>Update Deployment selector to follow Helm chart best practices. This will require deleting the three cert-manager Deployment resources before upgrading. (#2654, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.14/#changes-by-kind","title":"Changes by Kind","text":""},{"location":"release-notes/release-notes-0.14/#feature","title":"Feature","text":"<ul> <li>Add <code>--experimental-issue-jks</code> flag to enable JKS bundle generation in generated Secret resources. This flag will be replaced with native support for JKS bundles in future and is currently an experimental feature. If enabled, the <code>--experimental-jks-password</code> flag must also be set to the password used to encrypt JKS bundles. (#2647, <code>@munnerz</code>)</li> <li>Add <code>--experimental-issue-pkcs12</code> flag to enable PKCS12 bundle generation in generated Secret resources. This flag will be replaced with native support for PKCS12 bundles in future and is currently an experimental feature. If enabled, the <code>--experimental-pkcs12-keystore-password</code> flag must also be set to the password used to encrypt PKCS12 bundles. (#2643, <code>@munnerz</code>)</li> <li>Add <code>venafi.cert-manager.io/custom-fields</code> annotation for Venafi custom fields (#2573, <code>@meyskens</code>)</li> <li>Add <code>emailSANs</code> field to Certificate resource (#2597, <code>@meyskens</code>)</li> <li>Added <code>--tls-cipher-suites</code> command line flag to the webhook binary with sensible defaults (#2562, <code>@willthames</code>)</li> <li>Build OpenShift 3.11 compatible CRDs (#2609, <code>@meyskens</code>)</li> <li>Enable CRD conversion webhook and begin serving <code>v1alpha3</code> (#2563, <code>@munnerz</code>)</li> <li>Improve startup time for webhook pod. (#2574, <code>@JoshVanL</code>)</li> <li>Replace <code>00-crds.yaml</code> file with a manifest file published as part of the release (#2665, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.14/#other-bug-cleanup-or-flake","title":"Other (Bug, Cleanup or Flake)","text":"<ul> <li>Bump <code>Venafi/vcert</code> dependency to support custom fields in Venafi TPP 19.2 (#2663, <code>@munnerz</code>)</li> <li>Fix <code>GroupVersionKind</code> set on <code>OwnerReference</code> of resources created by HTTP01 challenge solver, causing HTTP01 validations to fail on OpenShift 4 (#2546, <code>@munnerz</code>)</li> <li>Fix Venafi Cloud URL field being marked required (#2568, <code>@munnerz</code>)</li> <li>Fix bug in ingress-shim causing Certificate resources to be rapidly updated if multiple <code>spec.tls[].hosts</code> entries refer to the same Secret name but a different set of hosts (#2611, <code>@munnerz</code>)</li> <li>Fix bug that could cause certificates to be incorrectly issued with an invalid public key (#2539, <code>@munnerz</code>)</li> <li>Fix <code>cainjector.enabled=False</code> override being ignored by the Helm Chart (#2544, <code>@gtaylor</code>)</li> <li>Include license header in manifests attached to GitHub releases (#2684, <code>@munnerz</code>)</li> <li>Make the webhook <code>RoleBinding</code> the leader election namespace instead of hard-coded <code>kube-system</code> (#2621, <code>@travisghansen</code>)</li> <li>Replace <code>openshift</code> and <code>no-webhook</code> manifest variants with a \"legacy\" variant (#2648, <code>@meyskens</code>)</li> <li>Truncate message display if HTTP01 self check fails (#2613, <code>@munnerz</code>)</li> <li>Upgrade to Go 1.14 (#2656, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.14/#other-changes","title":"Other Changes","text":"<ul> <li>Add <code>//build/release-tars</code> targets for generating release artifacts (#2556, <code>@munnerz</code>)</li> <li>Improve local testing and development environment setup code (#2534, <code>@munnerz</code>)</li> <li>Remove <code>isOpenShift</code> from Helm chart (#2642, <code>@meyskens</code>)</li> <li>Remove <code>webhook.enabled</code> variable in Helm chart as the webhook now is a required component (#2649, <code>@meyskens</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.15/","title":"Release Notes","text":"<p>The <code>v0.15</code> release has a few focus areas:</p> <ul> <li>Experimental new Certificate controller design</li> <li>New <code>installCRDs</code> option in the Helm chart</li> <li>Support for Red Hat's Operator Lifecycle Manager for easier deployment in OpenShift environments</li> <li>Improved deployment process for webhook component</li> <li>General Availability of JKS and PKCS#12 keystore support</li> <li>kubectl cert-manager CLI plugin allowing manual renewal and API version conversion</li> </ul> <p>As usual, please read the upgrade notes before upgrading.</p>"},{"location":"release-notes/release-notes-0.15/#experimental-controllers","title":"Experimental controllers","text":"<p>The Certificate controller is one of the most commonly used controllers in the project. It represents the 'full lifecycle' of an X.509 private key and certificate, including private key management and renewal.</p> <p>As the project is maturing, more requirements around this controller are starting to become apparent in order to implement feature requests such as private key rotation, JKS/PKCS#12 keystores and manual certificate renewal triggering.</p> <p>This new controller aims to facilitate the above features, as well as make it easier to develop individual areas of the controller over time and continue to make improvements.</p> <p>For more information on this we invite you to read our design document.</p>"},{"location":"release-notes/release-notes-0.15/#using-the-experimental-controllers","title":"Using the experimental controllers","text":"<p>We are looking for feedback on the use of these new controllers in different environments.  If you are able to run these in your cluster and report any issues you're seeing that would be very helpful to the further development of the project.</p> <p>The experimental controllers are currently feature gated and disabled by default. You can enable these by the following steps, in the Helm values set:</p> <pre><code>featureGates: \"ExperimentalCertificateControllers=true\"\n</code></pre> <p>If you're using the static manifests you need to edit the cert-manager Deployment using <code>kubectl -n cert-manager edit deploy cert-manager</code> and edit the <code>args</code> to include <code>--feature-gates=ExperimentalCertificateControllers=true</code>:</p> <pre><code>      containers:\n- args:\n- --v=2\n- --cluster-resource-namespace=$(POD_NAMESPACE)\n- --leader-election-namespace=kube-system\n- --feature-gates=ExperimentalCertificateControllers=true\n</code></pre>"},{"location":"release-notes/release-notes-0.15/#helm-chart-installcrds-option","title":"Helm chart <code>installCRDs</code> option","text":"<p>It's been a long-standing feature request to bundle our CRD resources as part of our Helm chart, to make it easier for users installing with Helm to manage the lifecycle of the CRDs we create.</p> <p>To facilitate this, and to help resolve common deployment issues, we have added a new <code>installCRDs</code> option to the Helm chart which will mean the CRD resources will be managed by your regular Helm installation.</p> <p>This feature is disabled by default, and can be enabled either in your <code>values.yaml</code> file or as a flag with <code>helm install --set installCRDs=true</code>.</p>"},{"location":"release-notes/release-notes-0.15/#support-for-openshifts-operator-lifecycle-manager","title":"Support for OpenShift's Operator Lifecycle Manager","text":"<p>cert-manager can now be deployed as a Red Hat Certified OpenShift Operator. This is done using the cert-manager operator. More information on this can be found on the OpenShift Installation page.</p>"},{"location":"release-notes/release-notes-0.15/#improved-deployment-of-the-webhook","title":"Improved deployment of the webhook","text":"<p>In order to improve start up time of the webhook pod, as well as improved reliability and operability, cert-manager <code>v0.15</code> includes a new <code>DynamicAuthority</code> structure in the webhook that is used to manage the CA used to secure the webhook.</p> <p>Instances of the webhook will keep this CA up to date and use it to generate serving certificates which are used to secure incoming connections.</p> <p>This means that the cert-manager-controller component is no longer required to be running in order for webhook startup to succeed. This also means that users should no longer see long start up times for this pod unless there is a genuine issue/error that needs resolving.</p>"},{"location":"release-notes/release-notes-0.15/#general-availability-of-jks-and-pkcs12-keystores","title":"General Availability of JKS and PKCS#12 keystores","text":"<p><code>v0.14</code> added experimental 'bundle format' support for JKS and PKCS#12. In <code>v0.15</code> the <code>keystore</code> got added to the Certificate spec which makes cert-manager add an additional keystore in your Certificate's Secret resource. No additional feature gates need to be set anymore.</p> <pre><code>apiVersion: cert-manager.io/v1alpha2\nkind: Certificate\nmetadata:\nname: crt\nspec:\nsecretName: crt-secret\ndnsNames:\n- foo.example.com\n- bar.example.com\nissuerRef:\nname: letsencrypt-prod\nkeystores:\njks:\ncreate: true\npasswordSecretRef: # Password used to encrypt the keystore\nkey: password-key\nname: jks-password-secret\npkcs12:\ncreate: true\npasswordSecretRef: # Password used to encrypt the keystore\nkey: password-key\nname: pkcs12-password-secret\n</code></pre> <p>For JKS this adds the files: <code>keystore.jks</code> and <code>truststore.jks</code> to the target <code>spec.secretName</code>. For PKCS#12, it adds the file <code>keystore.p12</code>.</p>"},{"location":"release-notes/release-notes-0.15/#kubectl-cert-manager-tool","title":"kubectl cert-manager tool","text":"<p>kubectl cert-manager is a kubectl plugin that assists with controlling cert-manager inside your Kubernetes cluster. The kubectl cert-manager binary can be downloaded from the GitHub release page. In <code>v0.15</code> the use is currently limited to the <code>convert</code> and <code>renew</code> commands.</p> <p><code>kubectl cert-manager renew</code> can be used to manually trigger renewal of your certificates. This required the <code>ExperimentalCertificateControllers</code> feature gate to be set.</p> <p><code>kubectl cert-manager convert</code> can be used to convert cert-manager config files between different API versions if your cluster does not support the conversion webhook (i.e. running the 'legacy' release) or if you want to upgrade all your local cert-manager configuration files.</p>"},{"location":"release-notes/release-notes-0.16/","title":"Release Notes","text":"<p>The <code>v0.16</code> release has a few focus areas:</p> <ul> <li>Enable the new certificate controller for all users</li> <li><code>kubectl cert-manager create certificaterequest</code> for signing local certificates</li> <li><code>v1beta1</code> API</li> </ul> <p>As usual, please read the upgrade notes before upgrading.</p>"},{"location":"release-notes/release-notes-0.16/#new-certificate-controller","title":"New certificate controller","text":"<p>The Certificate controller is one of the most commonly used controllers in the project. It represents the 'full lifecycle' of an X.509 private key and certificate, including private key management and renewal.</p> <p>In <code>v0.15</code> we added the new certificate controllers under a feature gate to allow users to test these and gather feedback. Thanks to everyone testing these and reporting issues we were able to fix issues and improve the controller. In <code>v0.16</code> this controller is now the default one in cert-manager.</p> <p>For more information on this, we invite you to read our design document.</p>"},{"location":"release-notes/release-notes-0.16/#kubectl-cert-manager-tool-for-signing-certificates","title":"kubectl cert-manager tool for signing certificates","text":"<p>cert-manager <code>v0.15</code> included a kubectl plugin that allows users to interact with cert-manager. In this release we have added a new sub-command to the cert-manager CLI which allows users to sign certificates on their computer or inside a container.</p> <p>The <code>kubectl cert-manager create certificaterequest</code> command creates a new CertificateRequest resource based on the YAML manifest of a Certificate resource as specified by <code>--from-certificate-file</code> flag.</p> <p>For example this will create a CertificateRequest resource with the name \"my-cr\" based on the Certificate described in <code>my-certificate.yaml</code> while storing the private key and X.509 certificate in <code>my-cr.key</code> and <code>my-cr.crt</code> respectively.</p> <pre><code>$ kubectl cert-manager create certificaterequest my-cr --from-certificate-file my-certificate.yaml --fetch-certificate --timeout 20m\n</code></pre> <p>More information can be found on our kubectl plugin page.</p>"},{"location":"release-notes/release-notes-0.16/#v1beta1-api","title":"<code>v1beta1</code> API","text":"<p>We are soon reaching cert-manager <code>v1.0</code> and the new <code>v1beta1</code> API is our first step towards a stable <code>v1</code> API. The biggest change users may notice is the improved API documentation. We took the time to review and update all the user-facing APIs. You can view the updated API documentation online, or use <code>kubectl explain</code> after installing this version of cert-manager. <code>v1beta1</code> does not contain many big changes, this version is focused on streamlining field names and general clean up of the API in preparation for the release of the <code>v1</code> release.</p> <p>These are the changes made (for reference, our conversion will take care of everything for you):</p> <p>Certificate:</p> <ul> <li><code>keyAlgorithm</code> is now named <code>algorithm</code> under the <code>privateKey</code> property</li> <li><code>keyEncoding</code> is now named <code>encoding</code> under the <code>privateKey</code> property</li> <li><code>keySize</code> is now named <code>size</code> under the <code>privateKey</code> property</li> <li>Encoding values <code>PKCS1</code> and <code>PKCS8</code> are now uppercase</li> </ul> <p>CertificateRequest:</p> <ul> <li>The field <code>csr</code> is now <code>request</code></li> </ul> <p>Issuer:</p> <ul> <li>DNS01 providers with DNS in their name now are uppercase <code>DNS</code>, these are: <code>cloudDNS</code> <code>azureDNS</code> and <code>acmeDNS</code></li> </ul> <p>ACME Order:</p> <ul> <li>The field <code>csr</code> is now <code>request</code></li> </ul> <p>ACME Challenge:</p> <ul> <li>The field <code>authzURL</code> is now <code>authorizationURL</code></li> <li>Challenge types <code>HTTP-01</code> and <code>DNS-01</code> are now all uppercase</li> <li>Unsupported challenge types (<code>TLS-ALPN-01</code>, <code>TLS-SNI-01</code>, <code>TLS-SNI-02</code> and others) are not generated by cert-manager any longer</li> </ul> <p>If you're using Kubernetes 1.15 or higher, conversion webhooks will allow you seamlessly interact with <code>v1alpha2</code>, <code>v1alpha3</code> and <code>v1beta1</code> API versions at the same time. This allows you to use the new API version without having to modify or redeploy your older resources. Users of the <code>legacy</code> version of cert-manager will still only have the <code>v1alpha2</code> API.</p>"},{"location":"release-notes/release-notes-0.16/#kubectl-cert-manager-convert-tool","title":"<code>kubectl cert-manager convert</code> tool","text":"<p>To assist you updating your manifest files on disk (for example in your infrastructure Git repo) we offer <code>v1beta1</code> support in <code>kubectl cert-manager</code>. The <code>kubectl cert-manager convert</code> command will be able to convert your manifest files to <code>v1beta1</code> using:</p> <pre><code>$ kubectl cert-manager convert --output-version cert-manager.io/v1beta1 cert.yaml\n</code></pre> <p>More information can be found on our kubectl plugin page.</p>"},{"location":"release-notes/release-notes-0.2/","title":"Release Notes","text":""},{"location":"release-notes/release-notes-0.2/#changelog-since-v010","title":"Changelog since <code>v0.1.0</code>","text":""},{"location":"release-notes/release-notes-0.2/#action-required","title":"Action Required","text":"<ul> <li>Move to <code>jetstack</code> organization. Action required: this will require updating your existing deployments to point to the new image repository, as new tags will not be pushed to the old <code>jetstackexperimental/cert-manager-controller</code> repository. A helm upgrade should take care of this. (#145, <code>@munnerz</code>)</li> <li>Set the Kubernetes secret type to TLS. Action required: this will cause renewals of existing certificates to fail. You must delete certificates that have been previously produced by cert-manager else cert-manager may enter a renewal loop when saving the new certificates. Alternatively, you may specify a new secret to store your certificate in and manually update your ingress resource/applications to reference the new secret. (#172, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.2/#other-notable-changes","title":"Other notable changes","text":"<ul> <li>No longer support <code>ClusterIssuer</code> resources when cert-manager is running with --namespace flag set (#179, <code>@munnerz</code>)</li> <li>Overcome 'registration already exists for provider key' errors in ACME provider by auto-detecting lost ACME registration URIs (#171, <code>@munnerz</code>)</li> <li>Fix checking for invalid data in issuer secrets (#170, <code>@munnerz</code>)</li> <li>Fix bug in ACME HTTP01 solver causing self-check to return true before paths have propagated (#166, <code>@munnerz</code>)</li> <li>Fix panic if the secret named in an ACME issuer exists but contains invalid data (or no data) (#165, <code>@munnerz</code>)</li> <li>Ensure 5 consecutive HTTP01 self-checks pass before issuing ACME certificate (#156, <code>@munnerz</code>)</li> <li>Fix race condition in ACME HTTP01 solver when validating multiple domains (#155, <code>@munnerz</code>)</li> <li>Consistently use <code>glog</code> throughout (#126, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.3/","title":"Highlights","text":"<p>This is a big feature filled release of cert-manager, and the first since moving to a more frequent release model.</p> <p>There's been a huge uptick in community contributions to the project, and this release comprises the combined effort of 38 code contributors and hundreds of users reporting issues, feature requests and bug reports!</p> <p>There's quite a few big headline points, so we'll get straight in:</p>"},{"location":"release-notes/release-notes-0.3/#acmev2-and-lets-encrypt-wildcard-certificates","title":"ACMEv2 and Let's Encrypt wildcard certificates","text":"<p>This release of cert-manager brings the long-awaited ACMEv2 support, and with it, Let's Encrypt wildcard certificates!</p> <p>This allows you to request certificates for wildcard domains, e.g. <code>*.example.com</code>, which can be used to secure many different subdomains of your domain!</p> <p>The introduction of ACMEv2 is a breaking change. Please read the notes below in the Action Required section for details on how to handle your existing ACME Issuers whilst upgrading from <code>v0.2.x</code>.</p>"},{"location":"release-notes/release-notes-0.3/#alpha-support-for-hashicorp-vault","title":"Alpha support for HashiCorp Vault","text":"<p>This release introduces initial support for HashiCorp Vault as an <code>Issuer</code> backend! Initially, this includes support for authenticating via AppRole and static token.</p> <p>The support for this <code>Issuer</code> is classed as 'alpha' - feedback is invaluable at this stage of development, so we are getting it out there in a tagged release to gather usage info.</p> <p>More information on configuring a Vault Issuer can be found in the Vault Issuer docs.</p>"},{"location":"release-notes/release-notes-0.3/#readthedocsio-documentation-site","title":"<code>readthedocs.io</code> documentation site","text":"<p>Whilst this note applies to the <code>v0.2.x</code> release series also, it is worth noting.</p> <p>We have now moved to <code>readthedocs.io</code> and reStructuredText for our documentation. This should hopefully make it easier for external collaborators to make quick edits to our documentation, and should provide more structure.</p> <p>We'd like to take the time to thank all those that have opened issues or opened pull requests against our documentation - it's a difficult thing to get right, but it's imperative our documentation is clear for new users adopting the project.</p>"},{"location":"release-notes/release-notes-0.3/#new-acme-dns01-providers","title":"New ACME DNS01 providers","text":"<p>When cert-manager was first released, only CloudDNS and CloudFlare DNS01 providers were supported when solving ACME challenges.</p> <p>As new users, each using their own DNS providers, have adopted the project; there has been a flurry of contributions adding support for the variety of providers out there.</p> <p>With this release, we support the following DNS providers when solving ACME DNS01 challenges:</p> <ul> <li>Akamai FastDNS (#322, <code>@twz123</code>)</li> <li>Amazon Route53</li> <li>Azure DNS (#246, <code>@mwieczorek</code>)</li> <li>CloudFlare</li> <li>Google CloudDNS There are pull requests in flight to add support for:</li> <li>DNSPod (#486, <code>@hemslo</code>)</li> <li>DNSimple (#483, <code>@marc-sensenich</code>)</li> <li>DigitalOcean (#345, <code>@dl00</code>)</li> <li>INWX (#336, <code>@steigr</code>)</li> <li>RFC2136 (#245, <code>@simonfuhrer</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.3/#changelog","title":"Changelog","text":""},{"location":"release-notes/release-notes-0.3/#action-required","title":"Action Required","text":"<p>Please check the 'upgrading from 0.2 to 0.3' guide in the Administrative Tasks section of the docs here before upgrading.</p> <ul> <li> <p>Supporting resources for <code>ClusterIssuers</code> (e.g. signing CA certificates, or ACME account private keys) will now be stored in the same namespace as cert-manager, instead of <code>kube-system</code> in previous versions (#329, <code>@munnerz</code>):   Action required: you will need to ensure to properly manually migrate these referenced resources across into the deployment namespace of cert-manager, else cert-manager may not be able to find account private keys or signing CA certificates.</p> </li> <li> <p>Use <code>ConfigMaps</code> for leader election (#327, <code>@mikebryant</code>):</p> </li> <li> <p>Action required: Before upgrading, scale the cert-manager Deployment to 0, to avoid two controllers attempting to operate on the same resources</p> </li> <li> <p>Remove support for ACMEv1 in favor of ACMEv2 (#309, <code>@munnerz</code>):   Action required: As this release drops support for ACMEv1, all Issuer resources that use ACMEv1 endpoints (e.g. existing Let's Encrypt Issuers) will need updating to use equivalent ACMEv2 endpoints. (TODO: link to docs guide)</p> </li> <li> <p>Remove <code>ingress-shim</code> and link it into cert-manager itself (#502, <code>@munnerz</code>)  Action required: You must change your 'helm install' command to use the new <code>--ingressShim.defaultIssuerName</code>, <code>--ingressShim.defaultIssuerKind</code> options when upgrading as <code>--ingressShim.extraArgs</code> has been removed.</p> </li> <li> <p>Add <code>certmanager.k8s.io/acme-http01-edit-in-place</code> annotation and change ingress-shim to set <code>ingressClass</code> on ACME Certificate resources by default. (#493, <code>@munnerz</code>)  Action required: This is a potentially breaking change for users of ingress controllers that map a single IP address to a single Ingress resource, such as the GCE ingress controller. These users will need to add the following annotation to their ingress: <code>certmanager.k8s.io/acme-http01-edit-in-place: \"true\"</code>.</p> </li> </ul>"},{"location":"release-notes/release-notes-0.3/#other-notable-changes","title":"Other notable changes","text":""},{"location":"release-notes/release-notes-0.3/#acme-issuer","title":"ACME Issuer","text":"<ul> <li>Add ACME DNS01 provider for Akamai FastDNS (#322, <code>@twz123</code>)</li> <li>Add a meaningful user agent to the ACME client to help diagnosing abusive traffic patterns (#422, <code>@jsha</code>)</li> <li>Issuers using the AWS Route53 solver may attempt to find credentials using the environment, EC2 IAM Role, and other sources available to the cert-manager controller. This behavior is on by default for cluster issuers and off by default for issuers. This behavior may be enabled or disabled for all issuers or cluster issuers using the --issuer-ambient-credentials and <code>--cluster-issuer-ambient-credentials</code> flags on the cert-manager controller. (#363, <code>@euank</code>)</li> <li>Add limits to HTTP01 validation pod (#408, <code>@kragniz</code>)</li> <li>The ACME DNS01 solver now trims excess whitespace from AWS credentials (#391, <code>@euank</code>)</li> <li>ACME DNS01 challenge mechanism for Azure DNS (#246, <code>@mwieczorek</code>)</li> <li>Fix panic when ACME server returns an error other than HTTP Status Conflict during registration (#237, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.3/#ca-issuer","title":"CA Issuer","text":"<ul> <li>Add the Key Encipherment purpose to CA Issuer generated certificates (#488, <code>@bradleybluebean</code>)</li> <li>Bundle CA certificate with issued certificates (#317, <code>@radhus</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.3/#vault-issuer","title":"Vault Issuer","text":"<ul> <li>Add experimental support for HashiCorp Vault issuers (#292, <code>@vdesjardins</code>)</li> <li>ingress-shim</li> <li>ingress-shim now reconfigures certificates (#386, <code>@kragniz</code>)</li> <li>ingress-shim will only sync Ingress resources with <code>kubernetes.io/tls-acme</code> annotation if the value of that annotation is true. (#325, <code>@wmedlar</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.3/#docs","title":"Docs","text":"<ul> <li>Rewrite documentation and publish on <code>readthedocs</code> (#428, <code>@munnerz</code>)</li> <li>Document the minimum necessary permissions for using cert-manager with Route53 (#359, <code>@wmedlar</code>)</li> <li>Improve deployment documentation (#264, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.3/#helm","title":"Helm","text":"<ul> <li>Add <code>clusterResourceNamespace</code> option to Helm chart (#547, <code>@munnerz</code>)</li> <li>Enhance Helm chart in-line with best practices (#229, <code>@unguiculus</code>):</li> <li>Add support for node affinity and tolerations in Helm chart (#350, <code>@kiall</code>)</li> <li>Add <code>podAnnotations</code> to Helm chart (#387, <code>@etiennetremel</code>)</li> <li>Add Certificate CRD short names <code>cert</code> and <code>certs</code>. This is configurable in the Helm Chart with <code>certificateResourceShortNames</code>. (#312, <code>@Mikulas</code>)</li> <li>Remove default resource requests in Helm chart. Improve post-deployment informational messages. (#290, <code>@munnerz</code>)</li> <li>End-to-end testing now covers the helm chart for cert-manager on Kubernetes 1.7-1.9 (#216, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.3/#other","title":"Other","text":"<ul> <li>Produce a single static manifest instead of a directory when generating deployment manifests (#574, <code>@munnerz</code>)</li> <li>Use cert-manager deployment namespace by default for leader election (#548, <code>@munnerz</code>)</li> <li>Removed --namespace flag (#433, <code>@kragniz</code>)</li> <li>Run cert-manager container as a non root user (#415, <code>@tettaji</code>)</li> <li>TLS secrets are now annotated with information about the certificate (#388, <code>@kragniz</code>)</li> <li>The static deployment manifests now automatically deploy into the 'cert-manager' namespace by default (#330, <code>@munnerz</code>)</li> <li>Rename Event types to be prefixed 'Err' instead of 'Error' for brevity (#332, <code>@munnerz</code>)</li> <li>Clearer event logging when issuing a certificate for the first time (#331, <code>@munnerz</code>)</li> <li>Provide static deployment manifests as an alternative to a Helm chart based deployment (#276, <code>@munnerz</code>)</li> <li>Update existing secrets instead of replacing in order to preserve annotations/labels (#221, <code>@munnerz</code>)</li> <li>Update to Go 1.9 (#200, <code>@euank</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.3/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fix a race condition in the package responsible for scheduling renewals (#218, <code>@munnerz</code>)</li> <li>Fix a bug that caused ACME certificates to not be automatically renewed (#215, <code>@munnerz</code>)</li> <li>Fix a bug in checking certificate validity and improve validation of <code>dnsNames</code> and <code>commonName</code> (#183, <code>@munnerz</code>)</li> <li>Fix bugs when checking validity of certificate resources (#184, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.4/","title":"Release Notes","text":"<p>This is the next feature release of cert-manager, containing a number of additions that have been in the works for a while now.</p> <p>As you will notice from the release notes below, we are seeing a lot more community contributions to the project which is brilliant! smile</p> <p>A massive thank you to everyone involved in making this release a reality.</p> <p>We have moved to a more regular minor-release schedule, and aim to cut new feature releases monthly. That means the next minor release (<code>v0.5</code>) is scheduled for around the 11th August.</p>"},{"location":"release-notes/release-notes-0.4/#highlights","title":"Highlights","text":""},{"location":"release-notes/release-notes-0.4/#resource-validation-for-issuers-clusterissuers-and-certificates","title":"Resource validation for <code>Issuers</code>, <code>ClusterIssuers</code> and <code>Certificates</code>","text":"<p>A common pain point for users has been around submitting invalid resources to the API, which cannot be handled or processed.</p> <p>Other Kubernetes API types handle this well by applying 'validation' before the resource is persisted or operated upon, and up until now we have not supported this.</p> <p>When submitting your resources to the Kubernetes apiserver, they will now be validated and if invalid, cert-manager will inform you of why and how they are invalid and suspend processing of that resource.</p> <p>In the next release, this validation will be turned into a <code>ValidatingWebhookConfiguration</code> which will allow us to prevent these resources being persisted into the API in the first place, similar to all other Kubernetes resource types.</p> <p>Due to some limitations with the current release of Helm, we have been unable to support this webhook operation mode in the <code>v0.4</code> release of cert-manager. However, releasing validation this way allows us to pilot the new validation rules we have in place and it allows you to get started with it immediately!</p>"},{"location":"release-notes/release-notes-0.4/#added-reference-documentation-for-api-types","title":"Added reference documentation for API types","text":"<p>Regularly, users ask us \"what can I specify on my resources\". In the past, we have had to recommend users check out our source code (namely <code>types.go</code>) in order to find out what can and cannot be specified.</p> <p>Digging through source code is no longer required! As part of our documentation publishing process, we now generate reference API documentation (similar to the upstream Kubernetes project!). This is available under the 'Reference documentation -&gt; API documentation' section of our docs site!</p>"},{"location":"release-notes/release-notes-0.4/#better-support-for-split-horizon-dns-environments-with-acme-dns01-challenges","title":"Better support for 'split horizon' DNS environments with ACME DNS01 challenges","text":"<p>A number of users have noticed that when running cert-manager with DNS01 challenges in split-horizon DNS environments (using the ACME issuer), the self check stage of the validation process failed as the 'internal' DNS resolvers were used to check for challenge record propagation.</p> <p>We have added a new flag, <code>--dns01-self-check-nameservers</code>, that allows users to specify custom recursive DNS servers to use for performing DNS01 self checks.</p> <p>In these environments, this flag can be set to some external nameserver list that will be used for DNS01 resolution, e.g. 8.8.8.8:53,8.8.4.4:53.</p>"},{"location":"release-notes/release-notes-0.4/#self-signed-issuers","title":"Self-signed Issuers","text":"<p>We recently merged support for 'self signed' issuers. This allows users to create the basis for a completely cert-manager managed PKI by 'self signing' certificates.</p> <p>This can be useful when debugging, or once cert-manager also supports setting the <code>isCA</code> bit on a Certificate, for creating a self signed root CA!</p> <p>Read up on how to get started with this new issuer type in the documentation.</p>"},{"location":"release-notes/release-notes-0.4/#changelog","title":"Changelog","text":""},{"location":"release-notes/release-notes-0.4/#action-required","title":"Action Required","text":"<ul> <li>Check the acme issuer has the 'HTTP01' challenge type configured if in use. (#629, <code>@groner</code>) ACME HTTP01 validation is no longer attempted using an <code>Issuer</code>/<code>ClusterIssuer</code> with no ACME HTTP01 configuration. Note that the minimal <code>http01: {}</code> configuration IS sufficient.</li> </ul> <p>If you rely on ACME HTTP01 validation, you should check your issuers to make sure HTTP01 validation is explicitly enabled as in previous release, this was not verified!</p>"},{"location":"release-notes/release-notes-0.4/#other-notable-changes","title":"Other notable changes","text":""},{"location":"release-notes/release-notes-0.4/#acme-issuer","title":"ACME Issuer","text":"<ul> <li>Add <code>--dns01-nameservers</code> flag for setting nameservers for DNS01 check (#710, <code>@kragniz</code>)</li> <li>Fix bugs affecting eTLD and CNAMEs during DNS zone resolution (#582, <code>@ThatWasBrilliant</code>)</li> <li>Run <code>acmesolver</code> container as non-root user (#585, <code>@klausenbusk</code>)</li> <li>Support for ACME HTTP01 validations when using <code>istio-ingress</code> with a mTLS enabled mesh (#622, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.4/#vault-issuer","title":"Vault Issuer","text":"<ul> <li>Configurable Vault AppRole authentication path using the attribute is <code>spec.vault.auth.authPath</code> in the issuer. (#612, <code>@vdesjardins</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.4/#self-signed-issuer","title":"Self-signed Issuer","text":"<ul> <li>Add 'self signed' Issuer type (#637, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.4/#docs","title":"Docs","text":"<ul> <li>Add reference documentation for API types (#644, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.4/#helm","title":"Helm","text":"<ul> <li>Added configuration variables to set <code>http_proxy</code>, <code>https_proxy</code> and <code>no_proxy</code> environment variables in Helm chart. (#680, <code>@fllaca</code>)</li> <li>added option to set additional environment variable values to the Helm chart (#556, <code>@nazarewk</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.4/#other","title":"Other","text":"<ul> <li>Add <code>certmanager.k8s.io/certificate-name</code> label to secrets. (#719, <code>@kragniz</code>)</li> <li>Add resource validation at start of sync loops, and mark resources as not Ready when invalid (#682, <code>@munnerz</code>)</li> <li>To disable <code>ingress-shim</code>, you can now set this flag: <code>--controllers=issuers,clusterissuers,certificates</code> (#717, <code>@kragniz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.5/","title":"Highlights","text":""},{"location":"release-notes/release-notes-0.5/#resource-validation-webhook","title":"Resource validation webhook","text":"<p>Following the <code>v0.4.0</code> release, we have now added a 'validating webhook' for our API resources. This will help prevent invalid configurations being submitted to the API server.</p> <p>This feature is disabled by default.</p> <p>Information on enabling the new webhook component can be found in the Resource Validation Webhook document.</p>"},{"location":"release-notes/release-notes-0.5/#new-certificate-options","title":"New Certificate options","text":"<p>A number of new fields have been added to the Certificate resource type:</p> <ul> <li><code>keyAlgorithm</code> - support alternative private key algorithms (e.g. RSA or ECDSA) for generated certificates.</li> <li><code>keySize</code> - allow specifying an alternative key bit size</li> <li><code>isCA</code> - allows generating certificates with the 'signing' usage set</li> <li><code>organization</code> - allows specifying values for the 'O' field of Certificates (for supported providers)</li> </ul> <p>New fields like this make cert-manager more useful for applications beyond just securing Ingress, as well as allowing users to continue meeting their security requirements for X.509 certificates.</p>"},{"location":"release-notes/release-notes-0.5/#new-acme-dns-providers","title":"New ACME DNS providers","text":"<p>This release includes two new DNS provides for the ACME Issuer:</p> <ul> <li>ACMEDNS</li> <li>RFC2136 These additions should help more users begin using cert-manager with their chosen DNS provider, without having to delegate to an alternate provider that is supported</li> </ul>"},{"location":"release-notes/release-notes-0.5/#changelog","title":"Changelog","text":""},{"location":"release-notes/release-notes-0.5/#general","title":"General","text":"<ul> <li>Add <code>renew-before-expiry-duration</code> option to configure how long before expiration a certificate should be attempted to be renewed (#801, <code>@munnerz</code>)</li> <li>Add validation webhooks for API types (#478, <code>@munnerz</code>)</li> <li>Add extended issuer specific validation to certificates at runtime (#761, <code>@kragniz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.5/#api-changes","title":"API changes","text":"<ul> <li>Adds new fields: <code>keyAlgorithm</code>, <code>keySize</code> onto <code>CertificateSpec</code> to allow specifying algorithm (RSA, ECDSA) and key size to use when generating TLS keys (#722, <code>@badie</code>)</li> <li>Add <code>isCA</code> field to Certificates (#658, <code>@munnerz</code>)</li> <li>Add \"organization\" field to certificate objects (#838, <code>@Queuecumber</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.5/#ca-issuer","title":"CA Issuer","text":"<ul> <li>Don't bundle the CA certificate when using the self signed issuer (#811, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.5/#acme","title":"ACME","text":"<ul> <li>Fix issue that could cause Certificates to fail renewal (#800, <code>@munnerz</code>)</li> <li>Add ACMEDNS as a DNS01 provider (#787, <code>@Queuecumber</code>)</li> <li>Fix panic from <code>acmedns.go</code> constructor failure (#858, <code>@jjo</code>)</li> <li>Fix CloudFlare provider failing on cleanup if no record is found (#849, <code>@frankh</code>)</li> <li>Fixed Route53 cleanup errors for already deleted records. (#746, <code>@euank</code>)</li> <li>Add support for delegating DNS01 challenges using CNAME records. (#670, <code>@gurvindersingh</code>)</li> <li>Fix a race that could cause ACME orders to fail despite them being in a 'valid' state (#764, <code>@munnerz</code>)</li> <li>Fix cleanup of Google Cloud DNS hosted zone for DNS01 challenge records (#754, <code>@kragniz</code>)</li> <li>Fix issue causing existing Ingresses to not be cleaned up properly after HTTP01 challenges in some cases (#831, <code>@munnerz</code>)</li> <li>Allow metadata server authentication for Google Cloud DNS (#664, <code>@rpahli</code>)</li> <li>Add RFC2136 DNS Provider (#661, <code>@splashx</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.6/","title":"Release Notes","text":"<p>The long-awaited <code>v0.6</code> release is here! This release includes a huge number of improvements, bug fixes and new features.</p> <p>We've made a big focus on the ACME implementation, as well as improving the general user-experience when requesting certificates.</p> <p>We've exposed new X.509 certificate fields via the Certificate resource type, as well as improving support for these options across all Issuer types.</p> <p>As of the <code>v0.6</code> release being cut, we've also reached a huge 99 code contributors! This is incredible to see, and we're thankful to all those who have contributed in all forms over the last couple of years!</p> <p>Read on to get some of the highlights, as well as the full list of note-worthy changes below!</p>"},{"location":"release-notes/release-notes-0.6/#highlights","title":"Highlights","text":""},{"location":"release-notes/release-notes-0.6/#introducing-acme-order-and-challenge-crds","title":"Introducing ACME 'Order' and 'Challenge' CRDs","text":"<p>This release of cert-manager refactors how ACME certificates are handled significantly.</p> <p>This should result in:</p> <p>Fewer API calls to ACME servers - information about orders and challenges is now stored within the Kubernetes API Better behavior with regards to rate limits A cleaner surface for debugging issues - we can now provide more context and information through the Events API as well as the 'status' field on our API types This is largely an internal change, but with far reaching benefits. For more details, check out the details in the pull request (#788).</p> <p>We are keen to hear feedback on this new design, so please create issues including the /area provider-acme text in order to report feedback/problems.</p>"},{"location":"release-notes/release-notes-0.6/#improved-handling-of-acme-rate-limits","title":"Improved handling of ACME rate limits","text":"<p>After extensive testing, we've found in the most extreme cases a 100 times reduction in ACME API client calls.</p> <p>This is a massive difference, and helps reduce the load that instances of cert-manager put on services like Let's Encrypt.</p> <p>As a result, we strongly recommend all users upgrade to the <code>v0.6</code> release as soon as possible!</p>"},{"location":"release-notes/release-notes-0.6/#prometheus-metrics-for-the-acme-client","title":"Prometheus metrics for the ACME client","text":"<p>In order to support the API client testing above, we've also added support for Prometheus metrics into our ACME client.</p> <p>This means you can now start instrumenting cert-manager's own usage of ACME APIs, in order to detect issues and understand behavior before it becomes a problem.</p> <p>The metrics are broken down by path, status code and a number of other labels.</p>"},{"location":"release-notes/release-notes-0.6/#validating-resource-webhook-enabled-by-default","title":"Validating resource webhook enabled by default","text":"<p>In order to provide a better experience out of the box, we've now enabled the validating webhook component by default.</p> <p>This means that when you submit resources to the API server, they will be checked for misconfiguration before they are persisted to the API, meaning configuration errors are surfaced immediately, and in some cases alongside steps that can be taken to remediate the errors.</p>"},{"location":"release-notes/release-notes-0.6/#ecdsa-keys-supported-for-acme-certificates","title":"ECDSA keys supported for ACME certificates","text":"<p>It's now possible to create ECDSA private keys when issuing certificates from ACME servers. You can configure the key type and key size using <code>certificate.spec.keyAlgorithm</code> and <code>certificate.spec.keySize</code> respectively.</p>"},{"location":"release-notes/release-notes-0.6/#scalability-improvements","title":"Scalability improvements","text":"<p>As part of our validation for this release, we've been able to test cert-manager in larger deployment configurations.</p> <p>This includes running with an ACME issuer with 6,000+ domain names, showing that our client usage remains sensible and cert-manager itself does not begin to strain.</p> <p>Off the back of this scale testing, we've also got numerous scale-related improvements lined up for the next minor release, <code>v0.7</code>.</p>"},{"location":"release-notes/release-notes-0.6/#action-required","title":"Action Required","text":"<p>There is only one PR that changes previous behavior in this release.</p> <p>Between <code>v0.4.0</code> and <code>v0.5.0</code>, we introduced support for following CNAME records when presenting DNS01 challenges. This inadvertently broke DNS01 challenge solving when a user used a CNAME record at the route of their DNS zone (i.e. on Route53 when using an Amazon ELB).</p> <p>This change reverts the default behavior to support this kind of setup without additional changes, and instead introduces a new <code>cnameStrategy</code> field on ACME Issuer resources. You can set this field to Follow to restore the behavior introduced in <code>v0.5.0</code>.</p> <p>This note only affects the ACME Issuer type.</p>"},{"location":"release-notes/release-notes-0.6/#changelog","title":"Changelog","text":""},{"location":"release-notes/release-notes-0.6/#general","title":"General","text":"<ul> <li>Bump Go version to 1.11 (#1050, <code>@munnerz</code>)</li> <li>Removed the Git commit hash from the version string in non canary builds (#997) (#1021, <code>@Nalum</code>)</li> <li>Include <code>ca.crt</code> in created secrets for Issuers that support it (Vault, CA and <code>SelfSigned</code>) (#848, <code>@Queuecumber</code>)</li> <li>Added RBAC permissions for user facing roles to access Certificates and Issuers. (#902, <code>@fuel-wlightning</code>)</li> <li>Add <code>global.priorityClassName</code> option to Helm chart (#1190, <code>@Art3mK</code>)</li> <li>Add <code>--namespace</code> option to limit scope to a single namespace (#1188, <code>@kragniz</code>)</li> <li>Print more useful information about Certificate, Order and Challenge resources when running <code>kubectl get</code> (#1194, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.6/#acme-issuer","title":"ACME Issuer","text":"<ul> <li>Introduce ACME 'Order' and 'Challenge' resource types &amp; re-implement ACME Issuer to be completely driven by CRDs (#788, <code>@munnerz</code>)</li> <li>ACTION REQUIRED: Fix ACME issues relating to wildcard CNAME records and add a <code>cnameStrategy</code> field to the ACME Issuer DNS01 provider configuration (#1136, <code>@munnerz</code>)</li> <li>Added <code>certmanager.k8s.io/acme-http01-ingress-class</code> annotation to ingress-shim (#1006, <code>@kinolaev</code>)</li> <li>Make HTTP01 solver <code>serviceType</code> configurable, so one can use <code>ClusterIP</code> instead of the previously hard coded type <code>NodePort</code>. <code>NodePort</code> still remains as default. (#924, <code>@arnisoph</code>)</li> <li>Revised Cert Issuer Docs for DNS01 challenge and added a doc for AzureDNS (#915, <code>@damienwebdev</code>)</li> <li>Make HTTP01 solver pod resource request/limits configurable (#923, <code>@arnisoph</code>)</li> <li>Allow ECDSA keys for ACME certificates (#937, <code>@acoshift</code>)</li> <li>RFC2136 provider: fixes a minor bug where DNS01 nameserver key has value with no port (#908, <code>@splashx</code>)</li> <li>Add ACME HTTP client Prometheus metrics (#1226, <code>@munnerz</code>)</li> <li>Reduce usage of ACME <code>new-acct</code> endpoint (#1227, <code>@munnerz</code>)</li> <li>Disable TLS verification when self-checking (#1221, <code>@DanielMorsing</code>)</li> <li>Adds new flag <code>--dns01-recursive-nameservers-only=[true|false]</code> that defaults to false. When true, cert-manager will only ever query the configured DNS resolvers to perform the ACME DNS01 self check. This is useful in DNS constrained environments, where access to authoritative nameservers is restricted. Enabling this option could cause the DNS01 self check to take longer due to caching performed by the recursive nameservers. (#1184, <code>@tlmiller</code>)</li> <li>Retain Challenge resources when an Order has entered a failed state to make debugging easier (#1197, <code>@munnerz</code>)</li> <li>Increase back-off time between ACME order attempts on failure from 5 minutes to 1 hour (#1195, <code>@munnerz</code>)</li> <li>Add 'reason' field when an order/challenge gets marked invalid (#1192, <code>@DanielMorsing</code>)</li> <li>Add DigitalOcean DNS Provider (#972, <code>@aslafy-z</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.6/#ca-issuer","title":"CA Issuer","text":"<ul> <li>Update CA Issuer status condition usage (#961, <code>@munnerz</code>)</li> <li>It is now possible to include a certificate chain in the secret for the CA Issuer. This will then be propagated to generated certificates. (#1077, <code>@mikebryant</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.6/#vault-issuer","title":"Vault Issuer","text":"<ul> <li>A new field <code>caBundle</code> added to the Vault Issuer configures a CA certificate used to validate the connection to the Vault Server. (#911, <code>@vdesjardins</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.6/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Increase time between retries for failing <code>Issuers</code> and <code>ClusterIssuers</code> (#981, <code>@munnerz</code>)</li> <li>Fix concurrent map write race condition in ACME solver (#1033, <code>@munnerz</code>)</li> <li>Fix bug when updating ACME server URL on an existing Issuer resource (#1230, <code>@munnerz</code>)</li> <li>Fix issuing a certificate into a preexisting secret resource (#1217, <code>@munnerz</code>)</li> <li>Fix affinity and tolerations declaration (#1209, <code>@GuillaumeSmaha</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.7/","title":"Release Notes","text":""},{"location":"release-notes/release-notes-0.7/#action-required","title":"Action Required","text":"<p>The Helm chart <code>rbac.create</code> option has moved to be <code>global.rbac.create</code>. Users of the Helm chart will need to update their install overrides to use the new format.</p> <p>The Helm chart has now moved to be hosted on <code>charts.jetstack.io</code>, and exposed via the Helm Hub. This allows us to make and test changes to the Helm chart more easily, and better manage versions.</p>"},{"location":"release-notes/release-notes-0.7/#highlights","title":"Highlights","text":""},{"location":"release-notes/release-notes-0.7/#venafi-issuer-type","title":"Venafi Issuer type","text":"<p>This release introduces a new issuer type for Venafi Cloud and Venafi Trust Protection Platform.</p> <p>The Venafi adapter will be built out over the coming months to improve the integration and expose more of the Venafi platform's advanced functionality.</p>"},{"location":"release-notes/release-notes-0.7/#new-cainjector-controller","title":"New <code>cainjector</code> controller","text":"<p>This release introduces support for injecting CA bundles into Kubernetes <code>{Validating,Mutating}WebhookConfiguration</code> &amp; APIService resources.</p> <p>You can utilize the new controller by adding the <code>certmanager.k8s.io/inject-ca-from</code> annotation to your webhook and APIService resources.</p> <p>This was needed in order to improve our own deployment of the 'webhook' component as part of this release.</p>"},{"location":"release-notes/release-notes-0.7/#improved-webhook-deployment","title":"Improved webhook deployment","text":"<p>The <code>v0.6</code> release utilized an additional ca-sync CronJob resource that allowed us to secure the webhook component automatically using cert-manager itself.</p> <p>Thanks to the new <code>cainjector</code> controller described above, we have now removed this CronJob altogether in favor of using the far more reliable controller.</p>"},{"location":"release-notes/release-notes-0.7/#experimental-arm-support","title":"Experimental ARM support","text":"<p>Support for ARM was adding as part of this release (#1212). We do not currently have automated testing using ARM platforms, so this feature is still marked experimental.</p> <p>To utilize the new ARM support, you'll need to update your manifests and append the architecture to the image name (i.e. <code>quay.io/jetstack/cert-manager-controller-arm64:v0.7.0</code>).</p>"},{"location":"release-notes/release-notes-0.7/#easier-debugging-of-failing-acme-challenges","title":"Easier debugging of failing ACME challenges","text":"<p>The introduction of the Challenge resource in the last release has allowed us to provide better means for debugging failures.</p> <p>In the <code>v0.7.0 release</code>, if a self check or ACME validation is failing for some reason, this information will be displayed when running <code>kubectl get</code> and <code>kubectl describe</code>.</p>"},{"location":"release-notes/release-notes-0.7/#changelog-since-v060","title":"Changelog since <code>v0.6.0</code>","text":"<ul> <li>Add Venafi Cloud &amp; TPP issuer type (#1250, <code>@munnerz</code>)</li> <li><code>cainjector</code>: add support for injecting apiserver CA (#1420, <code>@munnerz</code>)</li> <li>Generate temporary self signed certificate whilst waiting for issuer to issue certificate (#1392, <code>@munnerz</code>)</li> <li>Added kubeprod as an alternative way to deploy cert-manager to the documentation (#1421, <code>@arapulido</code>)</li> <li>Use new <code>cainjector</code> controller for webhook APIService resource (#1415, <code>@munnerz</code>)</li> <li>Adds a controller for injecting CA data into webhooks and APIServices (#1398, <code>@DirectXMan12</code>)</li> <li>Bump Kubernetes dependencies to <code>v1.13</code> (#1268, <code>@munnerz</code>)</li> <li>Use <code>charts.jetstack.io</code> instead of the <code>helm/charts</code> repository to publish Helm chart (#1377, <code>@munnerz</code>)</li> <li>Recreate dead solver pods during self-check (#1388, <code>@DanielMorsing</code>)</li> <li>Improve RFC2136 DNS01 provider documentation (#944, <code>@briantopping</code>)</li> <li>Add more information to Google CloudDNS guide (#1295, <code>@wwwil</code>)</li> <li>Add validation schema to CRD resources (#1322, <code>@munnerz</code>)</li> <li>Fire additional events when syncing ACME certificates fails (#1327, <code>@munnerz</code>)</li> <li>Publish ARM32 and ARM64 images for all cert-manager components (#1212, <code>@munnerz</code>)</li> <li>Extend ACME self check to check CAA records (#1325, <code>@DanielMorsing</code>)</li> <li>Bump Kubernetes <code>apimachinery</code> dependencies to <code>v1.10.12</code> (#1344, <code>@munnerz</code>)</li> <li>Increase <code>acmesolver</code> default CPU resource limit to <code>100m</code> (#1335, <code>@munnerz</code>)</li> <li>Fix potential race when updating secret resource (#1318, <code>@munnerz</code>)</li> <li>Fix bug causing certificates to be re-issued endlessly in certain edge cases (#1280, <code>@munnerz</code>)</li> <li>Fix bug when specify certificate <code>keyAlgorithm</code> without an explicit <code>keySize</code> (#1309, <code>@munnerz</code>)</li> <li>Bump Go version to 1.11.5 (#1304, <code>@munnerz</code>)</li> <li>Fix typo in <code>SelfSigned</code> Issuer in webhook deployment manifests (#1294, <code>@munnerz</code>)</li> <li>Add IP Address in CSR (#1128, <code>@lrolaz</code>)</li> <li>Allow to use PKCS#8 encoded private keys in CA issuers. (#1191, <code>@chr-fritz</code>)</li> <li>Add webhook troubleshooting guide (#1288, <code>@munnerz</code>)</li> <li>Overhaul documentation and add additional content (#1279, <code>@munnerz</code>)</li> <li>Increase X.509 certificate duration from 90 days to 1 year for webhook component certificates (#1276, <code>@munnerz</code>)</li> <li>Fix bug where <code>--dns01-recursive-nameservers</code> flag was not respected when looking up the zone to update for a DNS01 challenge (#1266, <code>@munnerz</code>)</li> <li>Reuse acme clients to limit use of nonce/directory/accounts endpoints (#1265, <code>@DanielMorsing</code>)</li> <li>Surface self-check errors in challenge resource (#1244, <code>@DanielMorsing</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.8/","title":"Release Notes","text":"<p>Following on from the <code>v0.7.x</code> releases and a series of prerelease candidates, cert-manager <code>v0.8.0</code> is available at last!</p> <p>This release packs in a tonne of stability improvements, as well as a whole load of new features grinning</p> <p>As part of this release, we're updating our API format in order to better support the 1.0 release, which we hope to reach within the next few months. This has been accomplished in a backwards-compatible for now, to make the upgrade process easier, especially for users that manage large numbers of certificate resources.</p> <p>As well as the new release, we've also finally created a project logo! For those of you who are attending KubeCon EU, we'll be handing out stickers at the Jetstack booth from tomorrow onward!</p>"},{"location":"release-notes/release-notes-0.8/#action-required","title":"Action required","text":"<p>The deployment manifests have now moved from being a part of our GitHub repository and are now published alongside each image tag. Please double check the installation guide for more information on where the manifests can now be found. This change does not affect the Helm chart!</p>"},{"location":"release-notes/release-notes-0.8/#new-acme-configuration-format","title":"New ACME configuration format","text":"<p>As part of stabilizing our API surface, we've made a change to the way you configure your ACME based certificates.</p> <p>Instead of Certificate resources containing an extra <code>certificate.spec.acme</code> field, which is only relevant for ACME certificates, the configuration has now moved over to the Issuer resource instead. More details on this change can be found in the upgrade notes.</p>"},{"location":"release-notes/release-notes-0.8/#openshift-installation-instructions","title":"OpenShift installation instructions","text":"<p>In order to make it easier for users to run cert-manager on platforms other than Kubernetes, we've improved our OpenShift support, including an official installation guide for users of OpenShift.</p> <p>If you use OpenShift in your organization, check out the getting started section for more information on how to get up and running!</p>"},{"location":"release-notes/release-notes-0.8/#webhook-based-acme-dns01-solver","title":"Webhook based ACME DNS01 solver","text":"<p>Over the last year and a half, we've had more than 15 pull requests to add new ACME DNS01 providers to our codebase. It's been brilliant to see such vibrant community involvement, however it's become infeasible for us to continue to accept, test and maintain such a rapidly growing matrix of providers.</p> <p>As a result, we've put together a new 'webhook' DNS01 solver type. This allows you to create and install your own DNS01 providers without having to make changes in cert-manager itself.</p> <p>You can see an example repository to get started building your own over in the cert-manager-webhook-example repo on GitHub.</p> <p>This is a new and experimental feature, however we're excited to see the community move to this new model of extending cert-manager.</p>"},{"location":"release-notes/release-notes-0.8/#switch-to-structured-logging","title":"Switch to structured logging","text":"<p>As the project has grown, we've also increased the verbosity and frequency of our log messages. Over time, this has become difficult to manage and work with, and so with the <code>v0.8</code> release we have begun the process of switching over our code base to structured logging.</p> <p>This should make it far easier to index, search and grep through log messages that cert-manager emits.</p> <p>Your feedback here is really valuable, so please open issues and comment on Slack if you have any issues!</p>"},{"location":"release-notes/release-notes-0.8/#changelog","title":"Changelog","text":"<ul> <li>make email address an optional field in ACME issuers (#1483, <code>@DanielMorsing</code>)</li> <li>Fix bug when handling resources that have <code>lastTransitionTime</code> set to null (#1628, <code>@munnerz</code>)</li> <li>Allow OpenShift to install cert-manager chart (#1395, <code>@JGodin-C2C</code>)</li> <li>Update documentation for new 'solvers' field (#1623, <code>@munnerz</code>)</li> <li>Fix issue where ingress-shim would not clear old configuration when migrating to the new 'solvers' field (#1620, <code>@munnerz</code>)</li> <li>Add new <code>issuer.spec.acme.solvers</code> field that replaces <code>certificate.spec.acme</code> in order to make all certificate resources portable between issuer types. The previously syntax is still supported to allow easy migration to the new configuration format. (#1450, <code>@munnerz</code>)</li> <li>Fixes <code>additionalPrinterColumn</code> formatting for Certificate resources (#1616, <code>@munnerz</code>)</li> <li>Fix update loop in certificates controller and add additional debug logging (#1602, <code>@munnerz</code>)</li> <li>Automatically retry expired Challenge resources (#1603, <code>@munnerz</code>)</li> <li>Build under MacOS. (#1601, <code>@michaelfig</code>)</li> <li>Disable the CAA check by default, and introduce a new <code>--feature-gates=ValidateCAA=true</code> option to enable it (#1585, <code>@munnerz</code>)</li> <li>Improve error handling when ACME challenges fail to Present or CleanUp (#1597, <code>@munnerz</code>)</li> <li>Add static label for solver identification to allow usage of custom service (#1575, <code>@christianhuening</code>)</li> <li>Fix issues running the <code>cainjector</code> controller on Kubernetes 1.9 (#1579, <code>@munnerz</code>)</li> <li>Fix upgrade bug where <code>lastTransitionTime</code> may be set to nil, rendering cert-manager inoperable without manual intervention (#1576, <code>@munnerz</code>)</li> <li>Add webhook based DNS01 provider (#1563, <code>@munnerz</code>)</li> <li>Add DNS01 provider conformance test suite (#1562, <code>@munnerz</code>)</li> <li>fix typo in the deployment template (#1546, <code>@cpanato</code>)</li> <li>Automatically generate LICENSES file (#1549, <code>@munnerz</code>)</li> <li>Switch to go modules for dependency management (#1523, <code>@munnerz</code>)</li> <li>Bump to use Go 1.12 (#1429, <code>@munnerz</code>)</li> <li>use authoritative nameservers for CAA checks (#1521, <code>@DanielMorsing</code>)</li> <li>Update certificate if issuer changes (#1512, <code>@lentzi90</code>)</li> <li>also whitelist IPv6 (#1497, <code>@mdonoughe</code>)</li> <li>Set default <code>acmesolver</code> image based on arch (#1494, <code>@lentzi90</code>)</li> <li>Improve logging in ACME HTTP01 solver (#1474, <code>@munnerz</code>)</li> <li>Run metrics server on cert-manager instances that have not been elected as leader (#1482, <code>@kragniz</code>)</li> <li>Switch to structured logging using <code>logr</code> (#1409, <code>@munnerz</code>)</li> <li>fixing the quick-start documentation to use the new helm chart repo <code>charts.jetstack.io</code> (#1468, <code>@BradErz</code>)</li> <li>Removes need for <code>hostedZoneName</code> to be specified. Uses discovered DNS zone name instead. (#1466, <code>@logicfox</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.9/","title":"Release Notes","text":"<p>The <code>v0.9</code> release is one of our biggest yet, packed with new features and bug fixes!</p> <p>The introduction of the new <code>CertificateRequest</code> resource type is significant as it is a step towards where we want to be for 1.0, defining an API specification for Certificates and allowing anyone to implement their own issuers and CAs as first class citizens.</p> <p>This release includes changes from:</p> <ul> <li><code>Aaron Gershman</code></li> <li><code>Aled James</code></li> <li><code>Artem Yarmoluk</code></li> <li><code>Carlos Panato</code></li> <li><code>Chris Abiad</code></li> <li><code>Christopher Abiad</code></li> <li><code>Crystal-Chun</code></li> <li><code>Dan</code></li> <li><code>Dobes Vandermeer</code></li> <li><code>Hans Kristian Flaatten</code></li> <li><code>Hays Clark</code></li> <li><code>Ivan Wallis</code></li> <li><code>James Munnelly</code></li> <li><code>Joshua Van Leeuwen</code></li> <li><code>Kevin Woo</code></li> <li><code>Lachlan Cooper</code></li> <li><code>Louis Taylor</code></li> <li><code>Michael Cristina</code></li> <li><code>Michael Tsang</code></li> <li><code>PirateBread</code></li> <li><code>Qiu Yu</code></li> <li><code>Sergej Nikolaev</code></li> <li><code>Solly Ross</code></li> <li><code>Stefan Kolb</code></li> <li><code>Steven Tobias</code></li> <li><code>Stuart Hu</code></li> <li><code>Till Wiese</code></li> <li><code>kfoozminus</code></li> </ul>"},{"location":"release-notes/release-notes-0.9/#notable-items","title":"Notable Items","text":""},{"location":"release-notes/release-notes-0.9/#new-certificaterequest-resource","title":"New <code>CertificateRequest</code> Resource","text":"<p>A new resource has been introduced - <code>CertificateRequest</code> - that is used to request certificates using a raw X.509 certificate signing request. This resource is not typically used by humans but rather by other controllers or services. For example, the <code>Certificate</code> controller will now create a <code>CertificateRequest</code> resource to resolve its own Spec.</p> <p>Controllers to resolve <code>CertificateRequest</code>s are currently disabled by default and enabled via the feature gate <code>CertificateRequestControllers</code>. This feature is currently in Alpha and only the CA issuer has been implemented.</p> <p>This resource is going to enable out of tree, external issuer controllers to resolve requests. Other issuer implementations and details on how to develop an out of tree issuer will follow in later releases. You can read more on the motivations and road map in the enhancement proposal or how this resource is used in the docs.</p>"},{"location":"release-notes/release-notes-0.9/#dns-zones-support-for-acme-challenge-solver-selector","title":"DNS Zones support for ACME challenge solver selector","text":"<p>A list of DNS zones can now be added to the ACME challenge solver selector.  The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying <code>sys.example.com</code> will be selected over one specifying <code>example.com</code> for the domain <code>www.sys.example.com</code>. If multiple solvers match with the same <code>dnsZones</code> value, the solver with the most matching labels in <code>matchLabels</code> will be selected. If neither has more matches, the solver defined earlier in the list will be selected.</p>"},{"location":"release-notes/release-notes-0.9/#certificate-readiness-prometheus-metrics","title":"Certificate Readiness Prometheus Metrics","text":"<p>Cert-manager now exposes Prometheus metrics on Certificate ready statuses as <code>certmanager_certificate_ready_status</code>. This is useful for monitoring Certificate resources to ensure they have a <code>Ready=True</code> status.</p>"},{"location":"release-notes/release-notes-0.9/#prometheus-operator-servicemonitor","title":"Prometheus Operator <code>ServiceMonitor</code>","text":"<p>Support has been added to include a Prometheus <code>ServiceMonitor</code> for cert-manager in the helm chart. This enables monitoring of cert-manager when in conjunction with the Prometheus Operator. This is disabled by default but can be enabled via the helm configuration.</p>"},{"location":"release-notes/release-notes-0.9/#acmev2-post-as-get","title":"ACMEv2 POST-as-GET","text":"<p>We have now switched to use the new POST-as-GET feature that was introduced into the latest version of the ACME spec a few months ago.</p> <p>If you are running your own ACME server, please ensure it supports POST-as-GET as we no longer supported the old behavior.</p>"},{"location":"release-notes/release-notes-0.9/#acme-issuer-solver-pod-template","title":"ACME Issuer Solver Pod Template","text":"<p>The ACME Solver Pod Spec now exposes a template that can be used to change metadata about that pod. Currently, a template will expose labels, annotations, node selector, tolerations, and affinity. This is useful when running cert-manager in multi-arch clusters, or when you run workloads across different types of nodes and need to restrict where the <code>acmesolver</code> pod runs.</p>"},{"location":"release-notes/release-notes-0.9/#action-required","title":"Action Required","text":""},{"location":"release-notes/release-notes-0.9/#length-limit-for-common-names","title":"Length limit for Common Names","text":"<p>Common names with a character length of over 63 will be rejected during validation. This is due to the upper limit being detailed in RFC 5280.</p>"},{"location":"release-notes/release-notes-0.9/#distroless-cert-manager-base-images","title":"Distroless Cert-Manager Base Images","text":"<p>For each container, cert-manager ships with the base image <code>gcr.io/distroless/static</code> which is a minimal image that includes no binaries. Users who want to debug from within the cert-manager pod will need to attach an additional container with their debug utilities to the pod's namespace.</p>"},{"location":"release-notes/release-notes-0.9/#csrs-in-order-resources-now-pem-encoded","title":"CSRs in Order Resources now PEM Encoded","text":"<p>CSRs in Order resources have previously been incorrectly DER encoded due to an error in implementation. This has now been corrected to PEM encoding. Current orders that were created with a previous version of cert-manager will fail to validate and so will be recreated. This should resume the order normally.</p>"},{"location":"release-notes/release-notes-0.9/#changelog","title":"Changelog","text":""},{"location":"release-notes/release-notes-0.9/#general","title":"General","text":"<ul> <li>Reduce cert-manager's RBAC permissions (#1658, <code>@munnerz</code>)</li> <li>commented-out <code>extraArg</code> for <code>enable-certificate-owner-ref</code> (#1828, <code>@aegershman</code>)</li> <li>Validate that Certificates in a namespace have unique <code>secretName</code> (#1689, <code>@cheukwing</code>)</li> <li>Feature addition: Support for PKCS#8 keys. (#1308, <code>@Crystal-Chun</code>)</li> <li>Add the removal of certificates when no longer required by the owner ingress (#1705, <code>@cheukwing</code>)</li> <li>Fix bug causing ECDSA certificates to be issued using 2048 bit RSA private keys (#1757, <code>@munnerz</code>)</li> <li>Updated the labels in the helm charts to use the newer ones. (#1769, <code>@cpanato</code>)</li> <li>Allow disabling issuing temporary certificates with feature flag <code>--feature-gates=IssueTemporaryCertificate=false</code> (#1764, <code>@gordonbondon</code>)</li> <li>Switch to using Distroless for base images (#1663, <code>@munnerz</code>)</li> <li>Limit length for <code>CommonName</code> to 63 bytes (#1818, <code>@cheukwing</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.9/#acme-issuer","title":"ACME Issuer","text":"<ul> <li>Properly encode the CSR field on Order resources as PEM data instead of DER (#1884, <code>@munnerz</code>)</li> <li>Fire informational Event if an ACME solver cannot be chosen for a domain on an Order (#1856, <code>@munnerz</code>)</li> <li>Fix bug with auto-generated Order names being longer than 63 characters (#1765, <code>@cheukwing</code>)</li> <li>Fix a panic when a misconfigured Issuer is used for HTTP01 challenge solving (#1758, <code>@munnerz</code>)</li> <li>Fix a bug where the logic to select a solver would always return the last solver and may return the wrong kind of solver for the challenge that it returned. (#1717, <code>@dobesv</code>)</li> <li>Fix indentation on ACME setup examples (#1785, <code>@lachlancooper</code>)</li> <li>Fix a the logic to select the most specific solver from an issuer if multiple matched (#1715, <code>@dobesv</code>)</li> <li>Adds support for <code>nodeSelector</code> and <code>tolerations</code> in <code>podTemplate.spec</code> (#1803, <code>@cheukwing</code>)</li> <li>support azure non-public regions (#1830, <code>@stuarthu</code>)</li> <li>Fix issue causing challenge controller to attempt to list Secrets across all namespaces even when --namespace is specified (#1849, <code>@munnerz</code>)</li> <li>Adds the handling of updates to the <code>spec.acme.email</code> field in Issuers (#1763, <code>@cheukwing</code>)</li> <li>Fix issue with private managed-zone being picked in CloudDNS (#1704, <code>@cheukwing</code>)</li> <li>Expose pod template for the ACME issuer solver pod (#1749, <code>@JoshVanL</code>)</li> <li>Ingress skips updating Certificate resource if already exists and not owned (#1670, <code>@cheukwing</code>)</li> <li>Add support for ACMEv2 POST-as-GET (#1648, <code>@munnerz</code>)</li> <li>Fix incorrect handling of <code>issuewild</code> tag when verifying CAA (#1777, <code>@cheukwing</code>)</li> <li>Add support for selecting ACME challenge solver to use by specifying <code>dnsZones</code> in the selector (#1806, <code>@munnerz</code>)</li> <li>Use proxy environment variables in self-check request (#1850, <code>@kinolaev</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.9/#venafi-issuer","title":"Venafi Issuer","text":"<ul> <li>Venafi: use vCert <code>v4.1.0</code> (#1827, <code>@munnerz</code>)</li> <li>Bump Venafi vCert dependency to latest version (#1754, <code>@munnerz</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.9/#webhook","title":"Webhook","text":"<ul> <li><code>cert-manager-webhook</code> secret exists in cert-manager namespace (#1791, <code>@jetstack-bot</code>)</li> <li>Support CRD conversion webhooks in the CA injector controller. (#1505, <code>@DirectXMan12</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.9/#ca-issuer","title":"CA Issuer","text":"<ul> <li>Adds CSR signing to CA issuer (#1835, <code>@JoshVanL</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.9/#certificaterequest","title":"<code>CertificateRequest</code>","text":"<ul> <li>Adds <code>CertificateRequest</code> resource (#1789, <code>@JoshVanL</code>)</li> <li>Adds CA issuer controller to resolve <code>CertificateRequests</code> where CA is the issuer reference (#1836, <code>@JoshVanL</code>)</li> <li>Adds Sign interface to Issuers (#1807, <code>@JoshVanL</code>)</li> <li>Adds <code>group</code> to <code>issuerRef</code> in <code>CertificateRequest</code> resources to distinguish resource ownership of incoming <code>CertificateRequests</code> so enabling full external issuer support.  (#1860, <code>@JoshVanL</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.9/#documentation","title":"Documentation","text":"<ul> <li>Adds Design and Proposals page to website docs (#1876, <code>@JoshVanL</code>)</li> <li>Adds <code>CertificateRequest</code> proposal (#1866, <code>@JoshVanL</code>)</li> </ul>"},{"location":"release-notes/release-notes-0.9/#monitoring","title":"Monitoring","text":"<ul> <li>Prometheus metrics for deleted Certificates are cleaned up (#1681, <code>@cheukwing</code>)</li> <li>Adds <code>ControllerSyncCallCount</code> Prometheus metric to count sync calls from each controller (#1692, <code>@cheukwing</code>)</li> <li>Add support for Prometheus Operator <code>ServiceMonitor</code> object in Helm Chart (#1761, <code>@Starefossen</code>)</li> <li>Add Prometheus metrics for tracking Certificate readiness (#1811, <code>@cheukwing</code>)</li> </ul>"},{"location":"release-notes/release-notes-1.0/","title":"Release Notes","text":"<p>With cert-manager <code>v1.0</code> we're putting a seal of trust on 3 years of development on the cert-manager project. In these 3 years cert-manager has grown in functionality and stability, but mostly in the community. Today we see many people using cert-manager to secure their Kubernetes clusters, as well as cert-manager being integrated into many other parts in the ecosystem. In the past 16 releases many bugs got fixed, and things that needed to be broken were broken. Several iterations on the API improved the user experience. We solved 1500 GitHub Issues with even more PRs by 253 contributors.</p> <p>With releasing <code>v1.0</code> we're officially making a statement that cert-manager is a mature project now. We will also be making a compatibility promise with our <code>v1</code> API.</p> <p>A big thank you to everyone who helped to build cert-manager in the past 3 years! Let <code>v1.0</code> be the first of many big achievements!</p> <p>The <code>v1.0</code> release is a stability release with a few focus areas:</p> <ul> <li><code>v1</code> API</li> <li><code>kubectl cert-manager status</code> command to help with investigating issues</li> <li>Using new and stable Kubernetes APIs</li> <li>Improved logging</li> <li>ACME improvements</li> </ul> <p>As usual, please read the upgrade notes before upgrading.</p>"},{"location":"release-notes/release-notes-1.0/#v1-api","title":"<code>v1</code> API","text":"<p>In <code>v0.16</code> we introduced the <code>v1beta1</code> API. This brought some structural changes as well as better documentation of the API fields. In <code>v1.0</code> we build on this with the <code>v1</code> API. This API is our first \"stable\" API version, while our others were well used we had to already provide some compatibility guarantees with the <code>v1</code> API we promise compatibility for the API for years to come.</p> <p>These are the changes made (for reference, our conversion will take care of everything for you):</p> <p>Certificate:</p> <ul> <li><code>emailSANs</code> is now named <code>emailAddresses</code></li> <li><code>uriSANs</code> is now named <code>uris</code></li> </ul> <p>This change makes these 2 SANs consistent with the other SANs as well as the Go API. Dropping the term SAN from our API.</p>"},{"location":"release-notes/release-notes-1.0/#upgrading","title":"Upgrading","text":"<p>If you're using Kubernetes 1.16 or higher, conversion webhooks will allow you seamlessly interact with <code>v1alpha2</code>, <code>v1alpha3</code>, <code>v1beta1</code> and <code>v1</code> API versions at the same time. This allows you to use the new API version without having to modify or redeploy your older resources. We highly recommend upgrading your manifests to the <code>v1</code> API as older versions will soon be deprecated.</p> <p>Users of the <code>legacy</code> version of cert-manager will still only have the <code>v1</code> API, migration steps can be found in the upgrade notes.</p>"},{"location":"release-notes/release-notes-1.0/#kubectl-cert-manager-status-command","title":"<code>kubectl cert-manager status</code> command","text":"<p>With the new improvements to our <code>kubectl</code> plugin it is easier to investigate issues with certificates not being issued. <code>kubectl cert-manager status</code> now displays a lot more information about what has been going on with your certificate and in which stage of issuance it currently is in.</p> <p>Once the plugin is installed, you can run <code>kubectl cert-manager status certificate &lt;name-of-cert&gt;</code>. That will then look for the Certificate with the name <code>&lt;name-of-cert&gt;</code> and any related resources like CertificateRequest, Secret, Issuer, as well as Order and Challenges if it is a ACME Certificate. The command outputs information about the resources, including Conditions, Events and resource specific fields like Key Usages and Extended Key Usages of the Secret or Authorizations of the Order.</p> <p>For example while debugging a not ready certificate:</p> <pre><code>$ kubectl cert-manager status certificate acme-certificate\n\nName: acme-certificate\nNamespace: default\nCreated at: 2020-08-21T16:44:13+02:00\nConditions:\n  Ready: False, Reason: DoesNotExist, Message: Issuing certificate as Secret does not exist\n  Issuing: True, Reason: DoesNotExist, Message: Issuing certificate as Secret does not exist\nDNS Names:\n- example.com\nEvents:\n  Type    Reason     Age   From          Message\n  ----    ------     ----  ----          -------\n  Normal  Issuing    18m   cert-manager  Issuing certificate as Secret does not exist\n  Normal  Generated  18m   cert-manager  Stored new private key in temporary Secret resource \"acme-certificate-tr8b2\"\n  Normal  Requested  18m   cert-manager  Created new CertificateRequest resource \"acme-certificate-qp5dm\"\nIssuer:\n  Name: acme-issuer\n  Kind: Issuer\n  Conditions:\n    Ready: True, Reason: ACMEAccountRegistered, Message: The ACME account was registered with the ACME server\nerror when finding Secret \"acme-tls\": secrets \"acme-tls\" not found\nNot Before: &lt;none&gt;\nNot After: &lt;none&gt;\nRenewal Time: &lt;none&gt;\nCertificateRequest:\n  Name: acme-certificate-qp5dm\n  Namespace: default\n  Conditions:\n    Ready: False, Reason: Pending, Message: Waiting on certificate issuance from order default/acme-certificate-qp5dm-1319513028: \"pending\"\n  Events:\n    Type    Reason        Age   From          Message\n    ----    ------        ----  ----          -------\n    Normal  OrderCreated  18m   cert-manager  Created Order resource default/acme-certificate-qp5dm-1319513028\nOrder:\n  Name: acme-certificate-qp5dm-1319513028\n  State: pending, Reason:\n  Authorizations:\n    URL: https://acme-staging-v02.api.letsencrypt.org/acme/authz-v3/97777571, Identifier: example.com, Initial State: pending, Wildcard: false\nChallenges:\n- Name: acme-certificate-qp5dm-1319513028-1825664779, Type: DNS-01, Token: J-lOZ39yNDQLZTtP_ZyrYojDqjutMAJOxCL1AkOEZWw, Key: U_W3gGV2KWgIUonlO2me3rvvEOTrfTb-L5s0V1TJMCw, State: pending, Reason: error getting clouddns service account: secret \"clouddns-accoun\" not found, Processing: true, Presented: false\n</code></pre> <p>The command also can help looking into what is inside an issued certificate. This example looks at an issuer Let's Encrypt certificate in detail:</p> <pre><code>$ kubectl cert-manager status certificate example\nName: example\n[...]\nSecret:\n  Name: example\n  Issuer Country: US\n  Issuer Organisation: Let's Encrypt\n  Issuer Common Name: Let's Encrypt Authority X3\n  Key Usage: Digital Signature, Key Encipherment\n  Extended Key Usages: Server Authentication, Client Authentication\n  Public Key Algorithm: RSA\n  Signature Algorithm: SHA256-RSA\n  Subject Key ID: 65081d98a9870764590829b88c53240571997862\n  Authority Key ID: a84a6a63047dddbae6d139b7a64565eff3a8eca1\n  Serial Number: 0462ffaa887ea17797e0057ca81d7ba2a6fb\n  Events:  &lt;none&gt;\nNot Before: 2020-06-02T04:29:56+02:00\nNot After: 2020-08-31T04:29:56+02:00\nRenewal Time: 2020-08-01T04:29:56+02:00\n[...]\n</code></pre>"},{"location":"release-notes/release-notes-1.0/#using-new-and-stable-kubernetes-apis","title":"Using new and stable Kubernetes APIs","text":"<p>cert-manager has been an early adopter of the Kubernetes CRDs. That and us supporting Kubernetes versions as for back as <code>v1.11</code> made us use the now deprecated <code>apiextensions.k8s.io/v1beta1</code> for our CRDs and <code>admissionregistration.k8s.io/v1beta1</code> for our webhooks. These are now deprecated and to be removed in Kubernetes <code>v1.22</code>. In <code>v1.0</code> we now offer full support for <code>apiextensions.k8s.io/v1</code> and <code>admissionregistration.k8s.io/v1</code> for Kubernetes <code>v1.16</code> (where this got added) and above. For users of Kubernetes <code>v1.15</code> we keep offering support for the <code>v1beta1</code> Kubernetes APIs in our legacy version.</p>"},{"location":"release-notes/release-notes-1.0/#improved-logging","title":"Improved logging","text":"<p>For this release we upgraded our logging library to <code>klog/v2</code> analog to Kubernetes <code>v1.19</code>. We also reviewed every log we write to assign it an appropriate log level.</p> <p>We followed the (Kubernetes logging guidelines)[https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/logging.md]. To come up with 5 log levels ranging from <code>Error</code> (level 0) which only prints important errors to <code>Trace</code> (level 5) which can help you to know exactly what is gong on. With this change we reduced the number of logs when you don't need to have a debugging trace while running cert-manager.</p> <p>Tip: My default cert-manager runs on level 2 (Info), you can set this using <code>global.logLevel</code> in the Helm chart.</p> <p>Note: Looking at the logs while troubleshooting cert-manager should be last resort behavior, for more info check out our troubleshooting guide</p>"},{"location":"release-notes/release-notes-1.0/#acme-improvements","title":"ACME improvements","text":"<p>The most used use case of cert-manager is probably to issue certificates from Let's Encrypt using ACME. In <code>v1.0</code> we took took feedback from the community to add two small but important improvements to our ACME issuer.</p>"},{"location":"release-notes/release-notes-1.0/#disable-account-key-generation","title":"Disable Account Key Generation","text":"<p>If you deploy ACME issuer certs on a large scale you probably want to re-use your ACME account across multiple clusters so your rate limit exceptions get applied everywhere. While this was already possible in cert-manager by copying over the secret referenced in <code>privateKeySecretRef</code>. However this process was quite error prone as cert-manager was trying to be helpful and was happy to create a new account key for you if one was not found. This is why we added <code>disableAccountKeyGeneration</code> to safe guard you against this behavior, if set to true it will not create a key and warn you if no account key was given to it.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt\nspec:\nacme:\nprivateKeySecretRef:\nname: example-issuer-account-key\ndisableAccountKeyGeneration: false\n</code></pre>"},{"location":"release-notes/release-notes-1.0/#preferred-chain","title":"Preferred Chain","text":"<p>On September 29th Let's Encrypt will change over to using its own <code>ISRG Root</code> CA. This will replace the cross-signed certificates by <code>Identrust</code>. This change over needs no changes to your cert-manager configuration, any renewed or new certificates issued after this date will use the new CA root.</p> <p>Let's encrypt currently already signs certificates using this CA and offers them as \"alternative certificate chain\" via ACME. In this release cert-manager adds support for accessing these alternative chains in the issuer config. The new <code>preferredChain</code> option will allow you to specify a CA's common name for the certificate to be issued by. If there is a certificate available matching that request it will present you that certificate. Note that this is a Preferred option, if none is found matching the request it will give you the default certificate as before. This makes sure you still get your certificate renewed once the alternative chain gets removed on the ACME issuer side.</p> <p>You can already today get certificates from the <code>ISRG Root</code> by using:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt\nspec:\nacme:\nserver: https://acme-v02.api.letsencrypt.org/directory\npreferredChain: \"ISRG Root X1\"\n</code></pre> <p>If you prefer to keep the <code>IdenTrust</code> chain you can do that by setting the option to <code>DST Root CA X3</code>:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt\nspec:\nacme:\nserver: https://acme-v02.api.letsencrypt.org/directory\npreferredChain: \"DST Root CA X3\"\n</code></pre> <p>Note that this Root CA is expiring soon, Let's Encrypt will keep this certificate chain active until September 29 2021.</p>"},{"location":"release-notes/release-notes-1.1/","title":"Release Notes","text":"<p>The <code>v1.1</code> release is our first release in the <code>v1</code> series with a few focus areas:</p> <ul> <li>New features and fixes in the ACME Issuer</li> <li>Improved Venafi TPP Authentication</li> </ul> <p>We also want to thank several new contributors to the project for their PRs!</p> <ul> <li><code>alrs</code></li> <li><code>raphink</code></li> <li><code>renan</code></li> <li><code>sharmaansh21</code></li> <li><code>supriya-premkumar</code></li> </ul> <p>All help is very appreciated and very welcome!</p> <p>Interested in knowing what will happen in the next releases of cert-manager? Go check out our road map!</p> <p>As usual, please read the upgrade notes before upgrading.</p>"},{"location":"release-notes/release-notes-1.1/#acme-improvements","title":"ACME Improvements","text":"<p>The ACME issuer is the most used cert-manager issuer. While most use it to talk to Let's Encrypt we are seeing a growing number of new ACME endpoints by certificate authorities, PKI software exposing ACME endpoints and even ACME proxies to allow ACME being used to talk to other APIs. In this release we focused on adding new features into the ACME issuer to make even more possible!</p>"},{"location":"release-notes/release-notes-1.1/#ip-addresses","title":"IP Addresses","text":"<p>In RFC8738 the support for IP Address validation was added to the ACME spec. This allows cert-manager to use HTTP-01 validation to get certificates for the IP(s) of your ingress controller. This can be done using the <code>ipAddresses</code> field of the Certificate resource.</p> <p>Note: Let's Encrypt has announced plans to support this soon!</p>"},{"location":"release-notes/release-notes-1.1/#duration","title":"Duration","text":"<p>cert-manager now allows you to request certificates with a certain validity period from an ACME issuer. This allows you to get shorter or longer lived certificates from ACME solutions such as Step-CA. You can enable this by setting <code>enableDurationFeature</code> to <code>true</code> in the ACME Issuer configuration. Be careful, if your ACME issuer does not support this feature it is allowed by the ACME spec to hard fail the Order causing your certificate renewal or creation to stop.</p> <p>Note: Let's Encrypt has announced intention to look into the possibilities of implementing this.</p>"},{"location":"release-notes/release-notes-1.1/#error-handling","title":"Error handling","text":"<p>We improved the recognition and handling of errors given by the ACME server. We are now able to quickly retry transient errors and surface any fatal errors faster in the Kubernetes events and logs. This allows you to get more insight into any rate limiting or other errors your ACME issuer provides us.</p>"},{"location":"release-notes/release-notes-1.1/#improvements-for-venafi-tpp-authentication","title":"Improvements for Venafi TPP Authentication","text":"<p>It is now possible to use a long lived access-token for authentication when configuring Venafi TPP <code>Issuer</code> and <code>ClusterIssuer</code> types. This authentication mechanism is supported by <code>Venafi TPP &gt;= 19.2</code>.</p>"},{"location":"release-notes/release-notes-1.10/","title":"Release 1.10","text":"<p>Release 1.10 adds a variety of quality-of-life fixes and features including improvements to the test suite.</p> <p>The latest version is <code>v1.10.1</code>.</p>"},{"location":"release-notes/release-notes-1.10/#breaking-changes-you-must-read-this-before-you-upgrade","title":"Breaking Changes (You MUST read this before you upgrade!)","text":""},{"location":"release-notes/release-notes-1.10/#container-name-changes","title":"Container Name Changes","text":"<p>This change is only relevant if you install cert-manager using Helm or the static manifest files. <code>v1.10.0</code> changes the names of containers in pods created by cert-manager.</p> <p>The names are changed to better reflect what they do; for example, the container in the controller pod had its name changed from <code>cert-manager</code> to <code>cert-manager-controller</code>, and the webhook pod had its container name changed from <code>cert-manager</code> to <code>cert-manager-webhook</code>.</p> <p>This change could cause a break if you:</p> <ol> <li>Use Helm or the static manifests, and</li> <li>Have scripts, tools or tasks which rely on the names of the cert-manager containers being static</li> </ol> <p>If both of these are true, you may need to update your automation before you upgrade.</p>"},{"location":"release-notes/release-notes-1.10/#on-openshift-the-cert-manager-pods-may-fail-until-you-modify-security-context-constraints","title":"On OpenShift the cert-manager Pods may fail until you modify Security Context Constraints","text":"<p>In cert-manager 1.10 the secure computing (seccomp) profile for all the Pods is set to <code>RuntimeDefault</code>. (See cert-manager pull request 5259.) The <code>securityContext</code> fields of the Pod are set as follows: <pre><code>...\n# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\nsecurityContext:\nseccompProfile:\ntype: RuntimeDefault\n...\n</code></pre></p> <p>On some versions and configurations of OpenShift this can cause the Pod to be rejected by the Security Context Constraints admission webhook.</p>"},{"location":"release-notes/release-notes-1.10/#on-openshift-v47-v48-v49-and-v410-you-may-need-to-modify-security-context-constraints-to-allow-cert-manager-pods-to-be-deployed","title":"On OpenShift <code>v4.7</code>, <code>v4.8</code>, <code>v4.9</code> and <code>v4.10</code> you may need to modify Security Context Constraints to allow cert-manager Pods to be deployed","text":"<p>In OpenShift <code>v4.7</code>, <code>v4.8</code>, <code>v4.9</code> and <code>v4.10</code>, the default SecurityContextConstraint is called \"restricted\", and it forbids Pods that have the <code>RuntimeDefault</code> seccomp profile. If you deploy cert-manager on these versions of OpenShift you may see the following error condition on the cert-manager Deployments:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\n# ...\nstatus:\nconditions:\n# ...\n- lastTransitionTime: \"2022-11-01T09:41:41Z\"\nlastUpdateTime: \"2022-11-01T09:41:41Z\"\nmessage: 'pods \"cert-manager-84bc577876-qzbnf\" is forbidden: unable to validate\nagainst any security context constraint: [pod.metadata.annotations.seccomp.security.alpha.kubernetes.io/pod:\nForbidden: seccomp may not be set pod.metadata.annotations.container.seccomp.security.alpha.kubernetes.io/cert-manager-controller:\nForbidden: seccomp may not be set provider \"anyuid\": Forbidden: not usable by\nuser or serviceaccount provider \"nonroot\": Forbidden: not usable by user or\nserviceaccount provider \"hostmount-anyuid\": Forbidden: not usable by user or\nserviceaccount provider \"machine-api-termination-handler\": Forbidden: not usable\nby user or serviceaccount provider \"hostnetwork\": Forbidden: not usable by user\nor serviceaccount provider \"hostaccess\": Forbidden: not usable by user or serviceaccount\nprovider \"privileged\": Forbidden: not usable by user or serviceaccount]'\nreason: FailedCreate\nstatus: \"True\"\ntype: ReplicaFailure\n# ...\n</code></pre> <p>The work around is to copy the \"restricted\" SecurityContextConstraint resource and then modify it to allow Pods with <code>RuntimeDefault</code> seccomp profile. Then use <code>oc adm policy add-scc-to-user</code> to create a Role and a RoleBinding that allows all the cert-manager ServiceAccounts to use that SecurityContextConstraint.</p> <p>\ud83d\udcd6 Read Enabling the default seccomp profile for all pods to learn more about this process.</p>"},{"location":"release-notes/release-notes-1.10/#on-openshift-v411-you-may-need-to-modify-security-context-constraints-to-allow-cert-manager-pods-to-be-deployed","title":"On OpenShift <code>v4.11</code> you may need to modify Security Context Constraints to allow cert-manager Pods to be deployed","text":"<p>In OpenShift <code>v4.11</code>, there is a new SecurityContextConstraint called <code>restricted-v2</code>, which permits Pods that have the <code>RuntimeDefault</code> seccomp profile and this will used for the cert-manager Pods by default, allowing the Pods to be created.</p> <p>But if you have upgraded OpenShift from a previous version, the old <code>restricted</code> SecurityContextConstraint may still be used and you will have to make changes to the RoleBindings in order to make it the default for all Pods.</p> <p>\ud83d\udcd6 Read Pod security admission in the OpenShift <code>v4.11</code> release notes to learn more about the changes to the default security context constraints in <code>v4.11</code>.</p> <p>\ud83d\udcd6 Read Default security context constraints in the OpenShift <code>v4.11</code> documentation to learn about the characteristics of the default Security Context Constraints in OpenShift.</p>"},{"location":"release-notes/release-notes-1.10/#when-using-the-olm-packages-for-operatorhub-on-openshift-v47-you-may-need-to-modify-security-context-constraints-to-allow-the-cert-manager-acme-http01-pod-to-be-deployed","title":"When using the OLM packages for OperatorHub on OpenShift <code>&gt;= v4.7</code>, you may need to modify Security Context Constraints to allow the cert-manager ACME HTTP01 Pod to be deployed","text":"<p>In the cert-manager OLM packages for RedHat OpenShift OperatorHub, the <code>seccompProfile</code> field in the Deployment resource has been removed, and this should allow you to install it on OpenShift <code>v4.7</code>, <code>v4.8</code>, <code>v4.9</code>, <code>v4.10</code>, and <code>v4.11</code> without any extra configuration.</p> <p>But if you are using the ACME Issuer with the HTTP01 solver, cert-manager will deploy a short lived Pod that uses the <code>RuntimDefault</code> seccomp profile which may be denied because of the existing Security Context Constraints.</p> <p>\ud83d\udcd6 Read Enabling the default seccomp profile for all pods to learn how to configure your system to allow Pods that use the <code>RuntimeDefault</code> seccomp profile.</p>"},{"location":"release-notes/release-notes-1.10/#v1101-changes-since-v1100","title":"<code>v1.10.1</code>: Changes since <code>v1.10.0</code>","text":""},{"location":"release-notes/release-notes-1.10/#bug-or-regression","title":"Bug or Regression","text":"<ul> <li>The Venafi Issuer now supports TLS 1.2 renegotiation, so that it can connect to TPP servers where the <code>vedauth</code> API endpoints are configured to accept client certificates.   (Note: This does not mean that the Venafi Issuer supports client certificate authentication).   (#5576, @wallrj)</li> <li>Upgrade to latest go patch release   (#5560, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.10/#v1100-changes-since-v191","title":"<code>v1.10.0</code>: Changes since <code>v1.9.1</code>","text":""},{"location":"release-notes/release-notes-1.10/#feature","title":"Feature","text":"<ul> <li>Add <code>issuer_name</code>, <code>issuer_kind</code> and <code>issuer_group</code> labels to <code>certificate_expiration_timestamp_seconds</code>, <code>certmanager_certificate_renewal_timestamp_seconds</code> and <code>certmanager_certificate_ready_status</code> metrics (#5461, @dkulchinsky)</li> <li>Add make targets for running scans with trivy against locally built containers (#5358, @SgtCoDFish)</li> <li>CertificateRequests: requests that use the SelfSigned Issuer will be re-reconciled when the target private key Secret has been informed <code>cert-manager.io/private-key-secret-name</code>. This resolves an issue whereby a request would never be signed when the target Secret was not created or was misconfigured before the request. (#5336, @JoshVanL)</li> <li>CertificateSigningRequests: requests that use the SelfSigned Issuer will be re-reconciled when the target private key Secret has been informed <code>experimental.cert-manager.io/private-key-secret-name</code>. This resolves an issue whereby a request would never be signed when the target Secret was not created or was misconfigured before the request.   CertificateSigningRequests will also now no-longer be marked as failed when the target private key Secret is malformed- now only firing an event. When the Secret data is resolved, the request will attempt issuance. (#5379, @JoshVanL)</li> <li>Upgraded Gateway API to v0.5.0 (#5376, @inteon)</li> <li>Add caBundleSecretRef to the Vault Issuer to allow referencing the Vault CA Bundle with a Secret. Cannot be used in conjunction with the in-line caBundle field. (#5387, @Tolsto)</li> <li>The feature to create certificate requests with the name being a function of certificate name and revision has been introduced under the feature flag \"StableCertificateRequestName\" and it is disabled by default. This helps to prevent the error \"multiple CertificateRequests were found for the 'next' revision...\". (#5487, @sathyanarays)</li> <li>Helm: Added a new parameter <code>commonLabels</code> which gives you the capability to add the same label on all the resource deployed by the chart. (#5208, @thib-mary)</li> </ul>"},{"location":"release-notes/release-notes-1.10/#bug-or-regression_1","title":"Bug or Regression","text":"<ul> <li>CertificateSigningRequest: no longer mark a request as failed when using the SelfSigned issuer, and the Secret referenced in <code>experimental.cert-manager.io/private-key-secret-name</code> doesn't exist. (#5323, @JoshVanL)</li> <li>DNS Route53: Remove incorrect validation which rejects solvers that don't define either a <code>accessKeyID</code> or <code>secretAccessKeyID</code>. (#5339, @JoshVanL)</li> <li>Enhanced securityContext for PSS/restricted compliance. (#5259, @joebowbeer)</li> <li>Fix issue where CertificateRequests marked as InvalidRequest did not properly trigger issuance failure handling leading to 'stuck' requests (#5366, @munnerz)</li> <li><code>cmctl</code> and <code>kubectl cert-manager</code> now report their actual versions instead of \"canary\", fixing issue #5020 (#5022, @maelvls)</li> </ul>"},{"location":"release-notes/release-notes-1.10/#other","title":"Other","text":"<ul> <li>Avoid hard-coding release namespace in helm chart (#5163, @james-callahan)</li> <li>Bump cert-manager's version of Go to <code>1.19</code> (#5466, @lucacome)</li> <li>Remove <code>.bazel</code> and <code>.bzl</code> files from cert-manager now that bazel has been fully replaced (#5340, @SgtCoDFish)</li> <li>Updates Kubernetes libraries to <code>v0.25.2</code>. (#5456, @lucacome)</li> <li>Add annotations for ServiceMonitor in helm chart (#5401, @sathieu)</li> <li>Helm: Add NetworkPolicy support (#5417, @mjudeikis)</li> <li>To help troubleshooting, make the container names unique.   BREAKING: this change will break scripts/ CI that depend on <code>cert-manager</code> being the container name. (#5410, @rgl)</li> </ul>"},{"location":"release-notes/release-notes-1.2/","title":"Release Notes","text":"<p>\u26a0\ufe0f cert-manager <code>v1.2</code> release drops support for Kubernetes versions below <code>v1.16</code>. This allows new features to be introduced whilst keeping the project maintainable. \u26a0\ufe0f</p> <p>This release adds new features for several issuers and fixes several bugs. </p> <p>Please read the upgrade notes before upgrading.</p> <p>Aside from that, there have been numerous bug fixes and features summarized below. </p>"},{"location":"release-notes/release-notes-1.2/#deprecated-features-and-breaking-changes","title":"Deprecated Features and Breaking Changes","text":"<ol> <li> <p>The <code>--renew-before-expiration-duration</code> flag of the cert-manager controller-manager has been deprecated. Please set the <code>Certificate.Spec.RenewBefore</code> field instead. This flag will be removed in the next release.</p> </li> <li> <p>As Kubernetes <code>v1.16</code> is now the earliest supported version, The <code>legacy</code> manifests have now been removed. You can read more here.</p> </li> <li> <p>The <code>User-Agent</code> request header has been changed from <code>jetstack-cert-manager/&lt;version&gt;</code> to <code>cert-manager/&lt;version&gt;</code>. This may affect functionality if you rely on an a User-Agent allowlist in a corporate environment.</p> </li> </ol>"},{"location":"release-notes/release-notes-1.2/#copyright-and-ownership","title":"Copyright and Ownership","text":"<ul> <li> <p>As this is the first release prepared after the acceptance of cert-manager into the CNCF sandbox, the copyright strings have been changed to remove references to Jetstack.</p> </li> <li> <p>The <code>User-Agent</code> request header has changed from <code>jetstack-cert-manager/&lt;version&gt;</code> to <code>cert-manager/&lt;version&gt;</code>.</p> </li> </ul>"},{"location":"release-notes/release-notes-1.2/#new-features","title":"New Features","text":""},{"location":"release-notes/release-notes-1.2/#additional-options-for-cert-manager-controllers","title":"Additional options for cert-manager controllers","text":"<ul> <li> <p>The cert-manager controller can now be configured to expose profiling information using the new <code>--enable-profiling</code> flag.</p> </li> <li> <p>cainjector leader election leases are now customizable using the new flags <code>--leader-election-lease-duration</code>, <code>--leader-election-renew-deadline</code> and <code>--leader-election-retry-period</code>.</p> </li> </ul>"},{"location":"release-notes/release-notes-1.2/#usability-improvements","title":"Usability improvements","text":"<ul> <li>cert-manager can now create Java KeyStores that are compatible with Java 8 or greater. A file named <code>keystore.jks</code> will be added to the secret specified in the <code>Certificate.spec.secretName</code> encrypted with the password specified in the <code>Certificate.spec.jks.passwordSecretRef</code> secret.</li> </ul> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: jks-example\nspec:\nsecretName: jks-keystore\njks:\ncreate: true\npasswordSecretRef:\nname: supersecret\nkey: password\n</code></pre> <ul> <li> <p>ingress-shim now supports the new <code>cert-manager.io/usages</code> annotation for specifying custom key usages. If this isn't set, it defaults to <code>digital signature,key encipherment</code>, but a comma separated list of any valid usages can be specified.</p> </li> <li> <p>ingress-shim now also checks for <code>cert-manager.io/duration</code> and <code>cert-manager.io/renew-before</code> annotations and uses those values to set the <code>Certificate.Spec.Duration</code> and <code>Certificate.Spec.RenewBefore</code> fields.</p> </li> </ul>"},{"location":"release-notes/release-notes-1.2/#issuer-improvements","title":"Issuer Improvements","text":"<ul> <li> <p>The Vault issuer now stores the root CA in <code>ca.crt</code> rather than the issuing CA, moving the chain into <code>tls.crt</code>.</p> </li> <li> <p>The Venafi issuer now sets the <code>ca.crt</code> field of the secret.</p> </li> <li> <p>A list of OCSP server URLs can now be set on certificates issued by the CA issuer using the <code>Issuer.spec.ca.ocspServers</code> field.</p> </li> </ul>"},{"location":"release-notes/release-notes-1.2/#cli-user-experience","title":"CLI User Experience","text":"<ul> <li> <p>The cert-manager <code>kubectl</code> plugin can now show you information about certificates in your cluster:     <pre><code>kubectl cert-manager inspect secret my-crt --namespace my-namespace\n</code></pre></p> </li> <li> <p>cert-manager CRDs have been given categories so now they appear in <code>kubectl get cert-manager</code> and <code>kubectl get cert-manager-acme</code>.</p> </li> </ul>"},{"location":"release-notes/release-notes-1.2/#acme","title":"ACME","text":"<ul> <li>The ACME spec allows for a <code>NotAfter</code> date, which is supported by Step CA but not Let's Encrypt. This is gated behind a boolean on <code>Issuer.spec.acme.enableDurationFeature</code>. When enabled, cert-manager will pass through the requested Duration to the ACME server.</li> </ul>"},{"location":"release-notes/release-notes-1.2/#bug-fixes","title":"Bug Fixes","text":"<ul> <li> <p>The AWS Route53 DNS01 challenge now uses exponential backoff on failure.</p> </li> <li> <p>Ingress validation rules have been relaxed to allow for Certificates to be created/updated for valid Ingress TLS entries even if the same Ingress contains some invalid TLS entries.</p> </li> <li> <p>OpenAPI validation has relaxed in the helm chart to work around a type conversion bug that prevented users from upgrading cert-manager with <code>helm upgrade</code></p> </li> </ul>"},{"location":"release-notes/release-notes-1.3/","title":"Patch Release <code>v1.3.1</code>","text":""},{"location":"release-notes/release-notes-1.3/#bug-and-security-fixes","title":"Bug and Security Fixes","text":"<ul> <li>A Helm upgrade bug was   fixed, you should now   able to upgrade from cert-manager 1.2 to 1.3 when <code>--set installCRDs=true</code> is   used. This issue was due to a Helm   bug with the   <code>minimum</code> field on the CRDs.</li> </ul>"},{"location":"release-notes/release-notes-1.3/#final-release-v130","title":"Final Release <code>v1.3.0</code>","text":"<p>The 1.3 release prepares for the implementation of certificate issuance policies and adoption of the upstream Kubernetes CSR API. It also improves interoperability with HashiCorp Vault Enterprise. A slew of bugs have also been squashed.</p> <p>Special thanks to the external contributors who contributed to this release:</p> <ul> <li>@teejaded</li> <li>@7opf</li> <li>@yann-soubeyrand</li> <li>@Kirill-Garbar</li> <li>@joshuastern</li> <li>@lalitadithya</li> <li>@johejo</li> <li>@alrs</li> <li>@jsoref</li> <li>@RinkiyaKeDad</li> <li>@jonathansp</li> <li>@OmairK</li> <li>@justinkillen</li> </ul> <p>Please read the upgrade notes before upgrading.</p> <p>As always, the full change log is available on the GitHub release.</p>"},{"location":"release-notes/release-notes-1.3/#deprecated-features-and-breaking-changes","title":"Deprecated Features and Breaking Changes","text":""},{"location":"release-notes/release-notes-1.3/#venafi-cloud-issuer","title":"Venafi Cloud Issuer","text":"<p>This release updates the Venafi Cloud Issuer to use <code>OutagePREDICT</code> instead of <code>DevOpsACCELERATE</code>.</p> <p>The only impact to Venafi Cloud users is the change in zone syntax. The zone is now <code>&lt;Application Name&gt;\\&lt;Issuing Template Alias&gt;</code> (e.g. <code>My Application\\My CIT</code>).</p>"},{"location":"release-notes/release-notes-1.3/#cert-manager-controller","title":"cert-manager controller","text":"<p>The <code>--renew-before-expiration-duration</code> flag has been removed from the cert-manager controller, having been deprecated in the previous release.</p>"},{"location":"release-notes/release-notes-1.3/#cert-manager-crds","title":"cert-manager CRDs","text":"<p><code>CertificateRequests</code> are now immutable - the <code>spec</code> and <code>metadata.annotations</code> fields cannot be changed after creation. They were always designed to be immutable but this behavior is now enforced by the cert-manager webhook.</p>"},{"location":"release-notes/release-notes-1.3/#new-features","title":"New Features","text":""},{"location":"release-notes/release-notes-1.3/#policy-support-preparation","title":"Policy Support Preparation","text":"<ul> <li>The design documentation for Certificate Identity is now available.</li> <li><code>CertificateRequests</code> now have identity fields mirroring the upstream Kubernetes CSR object.</li> <li><code>CertificateRequests</code> are now immutable.</li> <li><code>CertificateRequests</code> now have an Approval condition type, with <code>Approved</code> and <code>Denied</code> reasons.</li> <li>The cert-manager controller currently always approves any <code>CertificateRequest</code>.</li> <li>Added <code>kubectl cert-manager [approve|deny]</code> commands to the kubectl plugin.</li> </ul>"},{"location":"release-notes/release-notes-1.3/#cert-manager-crds_1","title":"cert-manager CRDs","text":"<ul> <li><code>CertificateRequests</code> now support the <code>revisionHistoryLimit</code> field to limit the amount of retained history. The default is unlimited (<code>nil</code>).</li> </ul>"},{"location":"release-notes/release-notes-1.3/#vault-enterprise","title":"Vault Enterprise","text":"<ul> <li>cert-manager now sends the <code>X-VAULT-NAMESPACE</code> header for the <code>requestTokenWithAppRoleRef</code> API call.</li> </ul>"},{"location":"release-notes/release-notes-1.3/#bug-fixes","title":"Bug Fixes","text":""},{"location":"release-notes/release-notes-1.3/#cert-manager-controller_1","title":"cert-manager Controller","text":"<ul> <li>Fixed an issue which could cause multiple <code>CertificateRequests</code> to be created in a short time for a single <code>Certificate</code> resource.</li> <li>Certificate Readiness controller only updates a certificate's status if something has changed.</li> </ul>"},{"location":"release-notes/release-notes-1.3/#selfsigned-issuer","title":"SelfSigned Issuer","text":"<ul> <li>The issuer now warns if you request a certificate with an empty subject DN - creating a certificate that is in violation of RFC 5280. Some applications will reject such certificates as invalid, such as Java's <code>keytool</code>.</li> </ul>"},{"location":"release-notes/release-notes-1.3/#helm-chart","title":"Helm Chart","text":"<ul> <li>The <code>targetPort</code> used by the Prometheus service monitor is now correctly set from helm values.</li> <li>The correct permissions are added to the aggregate <code>edit</code> role.</li> </ul>"},{"location":"release-notes/release-notes-1.3/#other-changes","title":"Other Changes","text":""},{"location":"release-notes/release-notes-1.3/#repository-hygiene","title":"Repository Hygiene","text":"<ul> <li><code>SECURITY.md</code> now contains information on how to report security issues.</li> <li>The language of <code>CONTRIBUTING.md</code> has been updated to match existing copyright notices.</li> </ul>"},{"location":"release-notes/release-notes-1.3/#tooling","title":"Tooling","text":"<ul> <li>cert-manager now can be built with go 1.16 on Apple Silicon.</li> <li>Docker images targets have been added to the Makefile.</li> <li>Bazel <code>v3.5.0</code> is required to build locally and to run tests.</li> </ul>"},{"location":"release-notes/release-notes-1.4/","title":"Final Release <code>v1.4.0</code>","text":"<p>Special thanks to the external contributors who contributed to this release:</p> <ul> <li>@andreas-p</li> <li>@erikgb</li> <li>@eddiehoffman</li> <li>@inteon</li> <li>@anton-johansson</li> <li>@edglynes</li> <li>@jandersen-plaid</li> <li>@foosinn</li> <li>@jsoref</li> <li>@clatour</li> <li>@tamalsaha</li> </ul>"},{"location":"release-notes/release-notes-1.4/#deprecated-features-and-breaking-changes","title":"Deprecated Features and Breaking Changes","text":""},{"location":"release-notes/release-notes-1.4/#removal-of-the-cert-manager-operator-package-on-red-hat-marketplace","title":"Removal of the cert-manager operator package on Red Hat Marketplace","text":"<p>Since cert-manager <code>v0.15</code> there has been a package for cert-manager on Red Hat Marketplace, but this has now been removed because it was not maintained and was found to be unreliable: #4055 #3732 #436</p> <p>It is replaced by a new package which is generated via the Community Operators Repository, and which is therefore available on OperatorHub.io, OpenShift Container Platform and OKD.</p> <p>Please uninstall the existing cert-manager package and re-install by following the OLM Installation Documentation.</p>"},{"location":"release-notes/release-notes-1.4/#upgrading-cert-manager-crds-and-stored-versions-of-cert-manager-custom-resources","title":"Upgrading cert-manager CRDs and stored versions of cert-manager custom resources","text":"<p>We have deprecated the following cert-manager APIs:</p> <ul> <li><code>cert-manager.io/v1alpha2</code></li> <li><code>cert-manager.io/v1alpha3</code></li> <li><code>cert-manager.io/v1beta1</code></li> <li><code>acme.cert-manager.io/v1alpha2</code></li> <li><code>acme.cert-manager.io/v1alpha3</code></li> <li><code>acme.cert-manager.io/v1beta1</code></li> </ul> <p>These APIs will be removed in cert-manager 1.6.</p>   \u26d4\ufe0f  If you are upgrading cert-manager on a cluster which has previously had cert-manager &lt; `v1.0.0`, you will need to ensure that all cert-manager custom resources are stored in `etcd` at `v1` version and that cert-manager CRDs do not reference the deprecated APIs **by the time you upgrade to `v1.6`**.  This is explained in more detail in the [Upgrading existing cert-manager resources](../installation/upgrading/remove-deprecated-apis.md#upgrading-existing-cert-manager-resources) page.   <p>This change was made in the cert-manager PR #4021.</p>"},{"location":"release-notes/release-notes-1.4/#helm-chart-securitycontext-defaults-to-non-root","title":"Helm chart: <code>securityContext</code> defaults to non-root","text":"<p>The Helm chart now follows the current Pod hardening best practices as defined by the Kyverno <code>pod-security restricted</code> policy.</p> <p>To pass the validation, the controller, webhook, and cainjector Pods are now running as non-root:</p> <pre><code>apiVersion: v1\nkind: Pod\nspec:\nsecurityContext:\nrunAsNonRoot: true\n</code></pre>   \u26d4\ufe0f  If you are using custom containers that run as root with the Helm chart, you will need to set this back to `false`.   <p>Implemented in the cert-manager PR #4036.</p>"},{"location":"release-notes/release-notes-1.4/#ca-vault-and-venafi-issuer-handling-of-cacrt-and-tlscrt","title":"CA, Vault and Venafi issuer handling of <code>ca.crt</code> and <code>tls.crt</code>","text":"<p>The CA, Vault, and Venafi issuer now produce a <code>tls.crt</code> that is de-duplicated, in the correct order (leaf at the top, issuing certificate at the bottom) and verified (i.e. each signature can be verified).</p> <p>The CA issuer now produces a <code>ca.crt</code> that contains the \"most\" root CA that cert-manager is aware of. <code>ca.crt</code> may thus not be the actual self-signed root CA, since cert-manager may not be aware of it.</p> <p>Fixed in the cert-manager PRs #3982, #3983, and #3985.</p>   \u26d4\ufe0f  You may need to adjust systems that consume the `ca.crt` from Secrets managed by cert-manager with the CA issuer."},{"location":"release-notes/release-notes-1.4/#vault-renewal-bug","title":"Vault renewal bug","text":"<p>The renewal behavior has changed when a Certificate has a <code>duration</code> value of more than 90 days and <code>renewBefore</code> has not been set.</p> <p>Previously, the Certificate was renewed 30 days before expiry; now, the renewal happens \u2154 through the duration.</p> <p>This change was necessary to fix a bug where users of the Vault issuer would see a clash between the default renewal duration of 30 days and the duration of certificates issued by the Vault PKI.</p>   \u26d4\ufe0f  If you were relying on the default renewal happening 30 days before expiry, we would advise setting `renewBefore` to 30 days (`720h`) to keep the old behavior.   <p>Fixed in the cert-manager PR #4092.</p>"},{"location":"release-notes/release-notes-1.4/#new-features","title":"New Features","text":""},{"location":"release-notes/release-notes-1.4/#experimental-support-for-kubernetes-certificatesigningrequests","title":"Experimental Support for Kubernetes CertificateSigningRequests","text":"<p>It is now possible to use the built-in Kubernetes CertificateSigningRequest resources with cert-manager. The CA Issuer is currently the only supported issuer. The feature is experimental and can be enabled by adding a flag to the cert-manager controller. For example, with Helm:</p> <pre><code>helm install cert-manager jetstack/cert-manager \\\n--set extraArgs=\"{--feature-gates=ExperimentalCertificateSigningRequestControllers=true}\"\n</code></pre> <p>Note that you will still need to manually approve the CSR object before cert-manager can sign the CSR.</p> <p>The documentation is available on the the Kubernetes CSR usage page.</p> <p>Implemented in cert-manager PR #4064.</p>"},{"location":"release-notes/release-notes-1.4/#helm-chart-webhook-externally-accessible-for-bare-metal","title":"Helm chart: webhook externally accessible for bare-metal","text":"<p>In some Kubernetes setups, the apiserver is not able to talk to <code>kube-dns</code> (i.e., when Kubernetes is running on bare-metal with no special <code>resolv.conf</code>).</p> <p>To work around that, the cert-manager webhook can now be configured to be accessible from outside of the cluster. For example, in <code>values.yaml</code>:</p> <pre><code># values.yaml\nwebhook:\nserviceType: LoadBalancer\nloadBalancerIP: 198.51.100.20\nurl:\nhost: 198.51.100.20\n</code></pre> <p>Implemented in cert-manager PRs #3876, #3932.</p>"},{"location":"release-notes/release-notes-1.4/#helm-chart-service-labels","title":"Helm chart: Service labels","text":"<p>The cert-manager controller Service now supports custom labels using the top-level field in <code>values.yaml</code>:</p> <pre><code># values.yaml\nserviceLabels:\napp: armada-api\n</code></pre> <p>This may be useful in conjunction with Prometheus' <code>labelmap</code>. For example, with the following sample Prometheus configuration:</p> <pre><code># prometheus.yaml\n- action: labelmap\nregex: __meta_kubernetes_service_label_(.+)\n</code></pre> <p>With the above example, the source label <code>__meta_kubernetes_service_label_app='armada-api'</code> becomes the new label <code>app='armada-api'</code> when metrics related to this Service are scraped.</p> <p>Implemented in the cert-manager PR #4009.</p>"},{"location":"release-notes/release-notes-1.4/#akamai-dns01-solver","title":"Akamai DNS01 solver","text":"<p>The Akamai DNS01 solver has been [updated][4007] to use the v2 of the <code>OPEN EdgeGrid</code> Go package.</p>"},{"location":"release-notes/release-notes-1.4/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>The RFC2136   issuer is now able to handle DNS01 challenges that map to multiple <code>TXT</code>   records. This lets you create Let's Encrypt certificates using RFC2136 with   multiple DNS names. Fixed in the cert-manager PR #3622.</li> <li>The comparison function <code>PublicKeysEqual</code> is now correct for public keys.   Fixed in PR #3914.</li> <li>The ACME issuer now works correctly with Certificates that have a long name   (52 characters or more). These Certificates would not get renewed due to   non-unique Order names being generated. Fixed in the cert-manager PR   #3866.</li> <li>Orders that are used with a misbehaving ACME server should not get stuck   anymore. By misbehaving, we mean an ACME server that would validate the   authorizations before having set the status of the order to \"ready\". Fixed in   the cert-manager PR #3805.</li> <li>The internal issuers now set the condition <code>Ready=False</code> with the reason   <code>RequestDenied</code> when a CertificateRequest has been <code>Denied</code>. This is to keep   the same behavior where a terminal state of a CertificateRequest should have a   <code>Ready</code> condition. Fixed in the cert-manager PR #3878.</li> </ul>"},{"location":"release-notes/release-notes-1.4/#other-changes","title":"Other Changes","text":"<ul> <li> <p>The cert-manager controller now uses the <code>configmapsleases</code> resource instead   of the <code>configmaps</code> one for leader election. The only noticeable difference is   that a new <code>Lease</code> object is now being created in the leader election   namespace. Implemented in the cert-manager PR #4016.</p> </li> <li> <p>The <code>keyAlgorithm</code> for the ACME Issuer is now deprecated, and the EAB MAC   algorithm is now hard-coded to <code>HS256</code>.</p> <p><pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nspec:\nacme:\nexternalAccountBinding:\nkeyAlgorithm: HS256      # DEPRECATED.\n</code></pre> Previously, we used to have a fork of <code>golang/crypto</code> which allowed us to set the EAB MAC algorithm. We now use the upstream version of <code>golang/crypto</code> where the EAB MAC algorithm is hard-coded to HS256.</p> <p>This change were implemented in the cert-manager PRs #3877 and #3936.</p> </li> <li> <p>If you happen to look at the cert-manager controller logs, you may see this   new message about optimistic locking:</p> <pre><code>I0419 controller.go:158] msg=\"re-queuing item due to optimistic locking on resource\" error=\"Operation cannot be fulfilled on certificates.cert-manager.io   sauron-adverts-evo-app-tls: the object has been modified; please apply your changes to the latest version and try again\"\n</code></pre> <p>This message, shown at the <code>info</code> level, replaces the <code>error</code> level message that showed previously:</p> <pre><code>E0419 controller.go:158] msg=\"re-queuing item due to error processing\" error=\"Operation cannot be fulfilled on certificates.cert-manager.io sauron-adverts-evo-app-tls: the   object has been modified; please apply your changes to the latest version and try again\"\n</code></pre> <p>The goal is to prevent users from thinking that the optimistic locking mechanism has to do with their issues, when in reality it mostly isn't and is the normal operation mode for Kubernetes controllers.</p> <p>Fixed in the cert-manager PR #3794.</p> </li> <li> <p>The <code>util.UsageContentCommittment</code> (which contained a spelling mistake) was   deprecated in favor of <code>util.UsageContentCommitment</code>. The only people impacted   by this deprecation are the the people importing the Go package   <code>github.com/jetstack/cert-manager/pkg/api/util</code>.</p> </li> <li> <p>The webhook now panics when it is not able to register the API schemes.   Previously, the webhook would silently skip the error and start.</p> </li> <li> <p>A couple of legacy functions in <code>test/e2e/util</code> package have been removed.   These functions can be found in the <code>test/unit/gen</code> package.</p> </li> <li> <p>The Kubernetes Go dependencies have been updated from <code>v0.19.0</code> to <code>v0.21.0</code>.</p> </li> <li> <p>When waiting for DNS propagating, the ACME DNS01 self-check now returns a   better message when an unexpected DNS response code is received, such as   <code>SERVFAIL</code>.</p> <p>Before: <pre><code>Could not find the start of authority\n</code></pre></p> <p>After: <pre><code>Could not find the SOA record in the DNS tree\nfor the domain '_acme-challenge.foo.example.com'\nusing nameservers [8.8.8.8, 8.8.4.4]\n</code></pre></p> <p>In addition to the above, you will get a new message when the DNS returns an unexpected response code:</p> <pre><code>When querying the SOA record for the domain\n'_acme-challenge.foo.example.com' using nameservers\n[8.8.8.8, 8.8.4.4], rcode was expected to be 'NOERROR'\nor 'NXDOMAIN', but got 'SERVFAIL'\n</code></pre> <p>Fixed in the cert-manager PR #3906.</p> </li> <li> <p>The <code>distroless/static</code> base image was updated to the latest version as of   2021-05-20.</p> </li> </ul>"},{"location":"release-notes/release-notes-1.4/#honorable-mentions","title":"Honorable mentions","text":"<p>Tim Ramlot (@inteon) has done a fantastic job at adding the Istio <code>VirtualService</code> support for HTTP01 challenges in #3724. It took an immense effort to have this PR ready and merged for the 1.4 release.</p> <p>After a lot of thinking, we have decided that trying to support every custom resource for every proxy could not be done in-tree due to the Go dependency weight that each integration adds. Jake Sanders proposed an out-of-tree approach that will be worked on as part of cert-manager 1.5.</p>"},{"location":"release-notes/release-notes-1.5/","title":"Release 1.5","text":""},{"location":"release-notes/release-notes-1.5/#v155","title":"v1.5.5","text":""},{"location":"release-notes/release-notes-1.5/#changelog-since-v154","title":"Changelog since v1.5.4","text":"<p>In 1.5.5, we have reverted a change that caused a regression in the ACME Issuer. Before 1.5.4, the Ingress created by cert-manager while solving an HTTP-01 challenge contained the <code>kubernetes.io/ingress.class</code> annotation:</p> <p><pre><code>apiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\nannotations:\nkubernetes.io/ingress.class: istio # The `class` present on the Issuer.\n</code></pre> In 1.5.4, the Ingress does not contain the annotation anymore. Instead, cert-manager uses the <code>ingressClassName</code> field:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nspec:\ningressClassName: istio # \ud83d\udd25 Breaking change!\n</code></pre> <p>This broke many users that either don't use an Ingress controller that supports the field (such as ingress-gce and Azure AGIC), as well as people who did not need to create an IngressClass previously (such as with Istio and Traefik).</p> <p>The regression is present in cert-manager 1.5.4, 1.6.0, 1.6.1. It is only present on Kubernetes 1.19+ and only appears when using an Issuer or ClusterIssuer with an ACME HTTP-01 solver configured.</p> <p>In 1.5.5, we have restored the original behavior which is to use the annotation. We will also backport this fix to 1.5.5 and 1.6.2, allowing people to upgrade safely.</p> <p>Most people won't have any trouble upgrading from a version that contains the regression to 1.7.0, 1.6.2 or 1.5.5. If you are using Gloo, Contour, Skipper, or kube-ingress-aws-controller, you shouldn't have any issues. If you use the default \"class\" (e.g., <code>istio</code> for Istio) for Traefik, Istio, Ambassador, or ingress-nginx, then these should also continue to work without issue.</p> <p>If you are using Traefik, Istio, Ambassador, or ingress-nginx and you are using a non-default value for the class (e.g., <code>istio-internal</code>), or if you experience any issues with your HTTP-01 challenges please read the notes on Ingress v1 compatibility.</p>"},{"location":"release-notes/release-notes-1.5/#bug-or-regression","title":"Bug or Regression","text":"<ul> <li>Fixed a regression where cert-manager was creating Ingresses using the field <code>ingressClassName</code> instead of the annotation <code>kubernetes.io/ingress.class</code>. More details about this regression are available in the 1.7 release notes. (#4783, @maelvls)</li> </ul>"},{"location":"release-notes/release-notes-1.5/#other-cleanup-or-flake","title":"Other (Cleanup or Flake)","text":"<ul> <li>cert-manager now does one call to the ACME API instead of two when an Order fails. This belongs to the effort towards mitigating the high load that cert-manager deployments have on the Let's Encrypt API (#4618, @irbekrm)</li> </ul>"},{"location":"release-notes/release-notes-1.5/#v154","title":"v1.5.4","text":""},{"location":"release-notes/release-notes-1.5/#changelog-since-v153","title":"Changelog since v1.5.3","text":""},{"location":"release-notes/release-notes-1.5/#bug-or-regression_1","title":"Bug or Regression","text":"<ul> <li>Fixed a bug that caused cert-manager to panic when the Vault Issuer failed to reach the health endpoint. (#4476, @JoshVanL)</li> <li>Helm chart: the post-install hook <code>startupapicheck</code> is now compatible with the PodSecurityPolicy resource. (#4432, @ndegory)</li> <li>Helm chart: the post-install hook <code>startupapicheck</code> now deletes any post-install hook resources left after a previous failed install allowing <code>helm install</code> to be re-run after a failed attempt. (#4435, @wallrj)</li> </ul>"},{"location":"release-notes/release-notes-1.5/#other-cleanup-or-flake_1","title":"Other (Cleanup or Flake)","text":"<ul> <li>Update cert-manager base image versions (#4479, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.5/#v153","title":"v1.5.3","text":""},{"location":"release-notes/release-notes-1.5/#changelog-since-v152","title":"Changelog since v1.5.2","text":""},{"location":"release-notes/release-notes-1.5/#bug-or-regression_2","title":"Bug or Regression","text":"<ul> <li>Fix a bug where a Certificate may not get renewed when the issued Certificate has a one-second skew between <code>notBefore</code> and <code>notAfter</code> and <code>spec.duration</code> is not used. This one-second skew can be observed on certificates issued with Let's Encrypt and caused a mismatch in time precision between the time stored in <code>status.renewalTime</code> and the time internally computed by cert-manager. (#4403, @irbekrm). Thanks to @mfmbarros for help with debugging the issue!</li> </ul>"},{"location":"release-notes/release-notes-1.5/#v152","title":"v1.5.2","text":""},{"location":"release-notes/release-notes-1.5/#changelog-since-v151","title":"Changelog since v1.5.1","text":""},{"location":"release-notes/release-notes-1.5/#bug-or-regression_3","title":"Bug or Regression","text":"<ul> <li>Fix a regression introduced in v1.5.0 where the Ingress created for solving HTTP-01 challenges was created with <code>pathType: Exact</code> instead of <code>pathType: ImplementationSpecific</code>. (#4385, @jakexks)</li> <li>Fixed the HTTP-01 solver creating ClusterIP instead of NodePort services by default. (#4394, @jakexks)</li> <li>Helm chart and static manifest: the pointless <code>status</code> field is now stripped from the CRD manifests. (#4387, @irbekrm)</li> </ul>"},{"location":"release-notes/release-notes-1.5/#v151","title":"v1.5.1","text":"<p>The CRDs for the cert-manager v1beta1 API were mistakenly changed in cert-manager v1.5.0. If you installed the CRDs for v1.5.0, you should upgrade your CRDs to v1.5.1.</p> <p>The only affected API version is v1beta1, so if you're using the latest version - v1 - you won't be affected by the CRD changes. It's worth upgrading to v1 in any case, since v1alpha2, v1alpha3 and v1beta1 are all deprecated and will be removed in a future release.</p>"},{"location":"release-notes/release-notes-1.5/#changelog-since-v150","title":"Changelog since v1.5.0","text":""},{"location":"release-notes/release-notes-1.5/#bug-or-regression_4","title":"Bug or Regression","text":"<ul> <li>Fix <code>v1beta1</code> CRDs which were accidentally changed in cert-manager v1.5.0 (#4355, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.5/#v150","title":"v1.5.0","text":""},{"location":"release-notes/release-notes-1.5/#major-themes","title":"Major Themes","text":""},{"location":"release-notes/release-notes-1.5/#api-deprecation","title":"API Deprecation","text":"<p>The recent Kubernetes 1.22 release has removed a number of deprecated APIs. You can read the official blog post Kubernetes API and Feature Removals In 1.22 to learn more about it. If you intend to upgrade to Kubernetes 1.22, you must upgrade to cert-manager 1.5.</p> <p>To keep compatibility with older Kubernetes versions (down to 1.16), cert-manager 1.5 is now compatible with both Ingress <code>v1</code> and <code>v1beta1</code>. cert-manager will default to using <code>v1</code> Ingress, and fall back to <code>v1beta1</code> when <code>v1</code> is not available.</p> <p>Please read the Ingress class compatibility notes to see if your Ingress controller has any known issues.</p> <p>Additionally, the cert-manager API versions <code>v1alpha2</code>, <code>v1alpha3</code> and <code>v1beta1</code> are now deprecated, and will be removed in cert-manager 1.7. Please change all your YAML manifests that use a deprecated API version to use <code>cert-manager.io/v1</code> instead, and re-apply them.</p> <p>These deprecation changes have been implemented in the cert-manager PRs #4225 and #4172.</p>"},{"location":"release-notes/release-notes-1.5/#experimental-features","title":"Experimental Features","text":"<p>Features that we are currently working on are included in cert-manager releases but disabled by default, as they are likely to change in future. If any of them look interesting to you, please try them out and report bugs or quirks in a GitHub Issue.</p>"},{"location":"release-notes/release-notes-1.5/#gateway-api","title":"Gateway API","text":"<p>We have seen many requests from users to support different ways of routing HTTP traffic into their clusters for solving ACME HTTP-01 challenges. As the cloud-native ecosystem has so many different ingress implementations, we searched for a solution that would avoid having to add individual support for every kind of virtual service to the cert-manager API, and settled on the sig-network Gateway API.</p> <p>The Gateway API project aims to provide a universal API for modeling service networking in Kubernetes, and while it is still in its alpha stages is already gaining wide adoption. By supporting the Gateway API HTTPRoute resource, we hope that anyone using Ambassador, Contour, Gloo, HAProxy, Istio, Kong or Traefik will be able to solve HTTP-01 challenges, with more implementations coming in future.</p> <p>To go along with the HTTPRoute resource support, we have also added a gateway-shim controller that will allow users to annotate their Gateway resources to get a cert-manager Certificate automatically created, similar to the current ingress-shim functionality.</p> <p>Implemented in the cert-manager PRs #4276 and #4158.</p>"},{"location":"release-notes/release-notes-1.5/#certificatesigningrequests","title":"CertificateSigningRequests","text":"<p>CertificateSigningRequest is a built-in Kubernetes resource that was originally aimed at requesting X.509 client certificates and serving certificates for Kubernetes components such as kubelet.</p> <p>We have seen a rising interest in using the CertificateSigningRequest (CSR) resource as a way to provision workload certificates in service meshes such as Istio and its Istio Custom CA Integration using Kubernetes CSR. For that purpose, the CSR resource needs to be integrated with existing signers such as HashiCorp Vault or Venafi TPP.</p> <p>Back in cert-manager 1.4, the CA Issuer became the first built-in cert-manager issuer to support signing CertificateSigningRequest resources. In 1.5, we extended the support to all existing Issuers.</p> <p>The support for signing CSR resources is still experimental and requires to be explicitly enabled. If you are interested, please take a look at the Kubernetes CertificateSigningRequest documentation on the cert-manager website.</p> <p>To help you try the CSR support, you may want to try a new command that was added to the kubectl plugin. It allows you to create a CSR resource out of a cert-manager Certificate manifest:</p> <pre><code>kubectl cert-manager x create certificatesigningrequest example-csr certificate.yaml\n</code></pre> <p>Finally, we decided to remove the annotation <code>experimental.cert-manager.io/ca</code> that was added to the CertificateSigningRequest resource after being signed by cert-manager. This annotation was introduced in cert-manager 1.4 and will no longer be set on CertificateSigningRequest resources. We removed this annotation due to a technical limitation related to the fact that Kubernetes resources have a status subresource that is separate from the main resource.</p> <p>The above features were implemented in the cert-manager PRs #4112, #4100, #4103, #4108, #4106, and #4143</p>"},{"location":"release-notes/release-notes-1.5/#user-experience","title":"User Experience","text":""},{"location":"release-notes/release-notes-1.5/#kubectl-plugin","title":"kubectl plugin","text":"<p>cert-manager comes with a kubectl plugin, <code>kubectl cert-manager</code>, that comes in handy for checking the status of your cert-manager Certificate resources.</p> <p>In 1.5, a new experimental command for installing cert-manager has been added. Under the hood, it uses the cert-manager Helm chart. This means that all helm templating options are also supported by this install command:</p> <pre><code>kubectl cert-manager x install \\\n--set prometheus.enabled=false \\  # Example: disabling prometheus using a Helm parameter\n--set webhook.timeoutSeconds=4s   # Example: changing the wehbook timeout using a Helm parameter\n</code></pre> <p>An interesting feature that comes when using with this new <code>install</code> command is that it installs the CRDs in a way that prevents <code>helm uninstall</code> from deleting the CRDs while uninstalling cert-manager.</p> <p>The plugin is now capable of determining when your cert-manager deployment is ready to be used:</p> <pre><code>kubectl cert-manager check api\n</code></pre> <p>The plugin also learned how to discover the version of cert-manager running on your cluster, similar to <code>kubectl version</code>:</p> <pre><code>kubectl cert-manager version\n</code></pre> <p>To install the plugin, check out the Kubectl plugin page on the cert-manager website.</p> <p>These features were implemented by Tim in the cert-manager PRs #4226, #4205, and #4138.</p>"},{"location":"release-notes/release-notes-1.5/#helm-chart","title":"Helm chart","text":"<p>While installing cert-manager using Helm, you might have noticed that the <code>--wait</code> flag does not wait until cert-manager is fully functional.</p> <p>With 1.5, the <code>--wait</code> flag now works as you would expect. The Helm chart now comes with a small startup job that waits until the cert-manager API becomes ready.</p> <p>Implemented in the cert-manager PR #4234 by Tim.</p>"},{"location":"release-notes/release-notes-1.5/#labels-and-annotations-on-generated-secret-and-certificaterequest-resources","title":"Labels and annotations on generated Secret and CertificateRequest resources","text":"<p>cert-manager now allows you to add custom annotations and labels to the Secret containing the TLS key pair using the new Certificate field <code>secretTemplate</code>. This is useful when using third-party solutions such as kubed to copy Secret resources to multiple namespaces. The <code>secretTemplate</code> is synced to the Secret when the Certificate is created or renewed.</p> <p>Here is an example of Certificate using the <code>secretTemplate</code> field:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nspec:\nsecretTemplate:\nannotations:\nmy-secret-annotation: \"foo\"\nlabels:\nmy-secret-label: bar\n</code></pre> <p>Note that labels and annotations can only be added or replaced, but not removed. Removing any labels or annotations from the template or removing the template itself will have no effect.</p> <p>Along with the ability to set your own annotations and labels on Secret resources created by cert-manager, you can also tell cert-manager which annotations should be copied from Certificate resources to the generated CertificateRequest resources. By default, cert-manager will skip copying the annotations with the following prefixes:</p> <ul> <li><code>kubectl.kubernetes.io/</code>,</li> <li><code>fluxcd.io</code>,</li> <li><code>argocd.argoproj.io</code>.</li> </ul> <p>If you wish to keep the old behavior and allow all annotations to be copied, you can pass the flag <code>--copied-annotations=*</code> to the cert-manager controller.</p> <p>Implemented in the cert-manager PRs #3828 and #4251.</p>"},{"location":"release-notes/release-notes-1.5/#community","title":"Community","text":"<p>This is the first time that cert-manager participated in Google Summer of Code. Congratulations to Arsh and Tim for completing their GSoC projects! We hope you both continue to contribute in future.</p> <p>Thanks again to all open-source contributors with commits in this release:</p> <ul> <li>alrs</li> <li>annerajb</li> <li>Dean-Coakley</li> <li>francescsanjuanmrf</li> <li>inteon</li> <li>jonathansp</li> <li>kit837</li> <li>longkai</li> <li>mozz-lx</li> <li>RinkiyaKeDad</li> <li>tamalsaha</li> <li>thiscantbeserious</li> <li>ulrichgi</li> <li>wpjunior</li> </ul> <p>Also thanks to coderanger for helping people out on the Slack <code>#cert-manager</code> channel; it's a huge help and much appreciated.</p>"},{"location":"release-notes/release-notes-1.5/#new-features","title":"New Features","text":"<ul> <li>cert-manager now supports using Ed25519 private keys and signatures for   Certificates. Implemented in the cert-manager PR   #4079.</li> <li>cert-manager now emits an event when a CertificateSigningRequest resource has   not yet been approved. Without this event, the user would never know that   cert-manager is waiting for the approval of the CertificateSigningRequest   resource. Implemented in the cert-manager PR   #4229.</li> <li>cert-manager now only supports the version <code>v1</code> of the <code>AdmissionReviewVersion</code>   and <code>ConversionReviewVersion</code> resources, both available since Kubernetes 1.16.   The <code>v1beta1</code> version is no longer supported by cert-manager. This change was   implemented in the cert-manager PRs   #4254 and   #4253.</li> <li>cert-manager now restarts more quickly by clearing the leader election before   shutting down. Also, upon shutdown, the controller loops now cleanly stop,   which allows all in-flight reconciliation functions to finish before exiting.   Implemented in the cert-manager PR   #4243.</li> <li>Metrics: a new metric, named <code>clock_time_seconds</code> was added; this metric   allows for monitoring systems that do not have a built-in time function (e.g.   DataDog) to calculate the number of seconds until a certificate expires by   subtracting this metric from the existing <code>certificate_expiration_timestamp</code>   metrics. Implemented in the cert-manager PR   #4105.</li> <li>Helm chart: the Prometheus scraping service port now has a name. Implemented   in the cert-manager PR   #4072.</li> <li>Helm chart: you can now configure the labels for the cert-manager-webhook   service using the Helm value <code>webhook.serviceLabels</code>. Implemented in the   cert-manager PR #4260.</li> </ul>"},{"location":"release-notes/release-notes-1.5/#bug-or-regression_5","title":"Bug or Regression","text":"<ul> <li>Security: cert-manager now times out after 10 second when performing the   self-check while solving HTTP-01 challenges. Fixed in the cert-manager PR   #4311.</li> <li>Cloudflare: Refactored DNS01 challenge to use API for finding the nearest Zone   (fixing potential DNS issues)   (#4147,   @thiscantbeserious)</li> <li>Fix a bug where failed CertificateRequest resources were not retried   (#4130,   @irbekrm)</li> <li>Fix a regression that would lead to a Certificate becoming \"Failed\" when the   issued X.509 certificate's subject DN would be equal to the issuer's subject   DN. Fixed in the cert-manager PR   #4237.</li> <li>Fix a regression where the <code>tls.crt</code> certificate chain would unexpectedly not   contain an intermediate CA certificate when no root CA is available in the CA   chain returned by the issuer. This bug affected the Vault Issuer, Venafi   Issuer and CA Issuer. This bug was fixed in the cert-manager PR   #4261.</li> <li>Fix a goroutine leak that was causing the controller's memory usage to grow   with time. Fixed in the cert-manager PR   #4233.</li> <li>Fix a race condition introduced in cert-manager 0.15 that would crash   cert-manager for clusters with a large number of certificates. Fixed in the   cert-manager PR #4231.</li> <li>Fix a bug where the default renewal duration of certificate, set to 30 days,   would clash with the duration of certificates issued by the Vault Issuer. All   Certificate resources are now renewed \u2154 through the duration unless a custom   renew period is specified by setting <code>renewBefore</code> on the Certificate. Fixed   in the cert-manager PR   #4092.</li> <li>The cert-manager binaries, including the kubectl plugin, now exit with the   correct exit code on SIGINT (Ctrl+C) and SIGTERM events. More specifically,   when one of these events is caught, cert-manager will exit with the code 128 +   signal number. Fixed in   #4230.</li> <li>The static manifests available on the GitHub Releases page now contain a   version label <code>app.kubernetes.io/version: v1.5.0</code>. We also removed the   Helm-specific labels from the static manifests. Fixed in the cert-manager PR   #4190.</li> </ul>"},{"location":"release-notes/release-notes-1.5/#other-cleanup-or-flake_2","title":"Other (Cleanup or Flake)","text":"<ul> <li>A conformance end-to-end testing suite was added for the   CertificateSigningRequest resources   (#4101).</li> <li>Reduce binary sizes from 74MB down to 49MB by adding the Go ldflag <code>-w</code>   (#4181).</li> </ul>"},{"location":"release-notes/release-notes-1.6/","title":"Release 1.6","text":""},{"location":"release-notes/release-notes-1.6/#v163","title":"v1.6.3","text":""},{"location":"release-notes/release-notes-1.6/#changes-since-162","title":"Changes since 1.6.2","text":""},{"location":"release-notes/release-notes-1.6/#bug-or-regression","title":"Bug or Regression","text":"<ul> <li>Bumps the version of Go used to build the cert-manager binaries to 1.17.8, to fix a slew of CVEs (none of which were likely to be exploited) (#4975, @vhosakot)</li> <li>Fixes an expired hardcoded certificate which broke unit tests (#4977, @SgtCoDFish, @jakexks)</li> </ul>"},{"location":"release-notes/release-notes-1.6/#v162","title":"v1.6.2","text":"<p>In 1.6.2, we reverted a change that caused a regression in the ACME Issuer. In 1.6.0 and 1.6.1, the Ingress created by cert-manager while solving an HTTP-01 challenge contained the <code>kubernetes.io/ingress.class</code> annotation:</p> <pre><code>apiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\nannotations:\nkubernetes.io/ingress.class: istio # The `class` present on the Issuer.\n</code></pre> <p>After 1.5, the Ingress does not contain the annotation anymore. Instead, cert-manager uses the <code>ingressClassName</code> field:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nspec:\ningressClassName: istio # \ud83d\udd25 Breaking change!\n</code></pre> <p>This broke many users that either don't use an Ingress controller that supports the field (such as ingress-gce and Azure AGIC), as well as people who did not need to create an IngressClass previously (such as with Istio and Traefik).</p> <p>The regression is present in cert-manager 1.5.4, 1.6.0, and 1.6.1. It is only present on Kubernetes 1.19+ and only appears when using an Issuer or ClusterIssuer with an ACME HTTP-01 solver configured.</p> <p>In 1.6.2, we restored the original behavior which is to use the annotation. This patch is also available in 1.5.5 and in 1.7.0.</p> <p>Most people won't have any trouble upgrading from 1.6.0 or 1.6.1 to 1.6.2. If you are using Gloo, Contour, Skipper, or kube-ingress-aws-controller, you shouldn't have any issues. If you use the default \"class\" (e.g., <code>istio</code> for Istio) for Traefik, Istio, Ambassador, or ingress-nginx, then these should also continue to work without issue.</p> <p>If you are using Traefik, Istio, Ambassador, or ingress-nginx and you are using a non-default value for the class (e.g., <code>istio-internal</code>), or if you experience any issues with your HTTP-01 challenges please read the notes on Ingress v1 compatibility.</p>"},{"location":"release-notes/release-notes-1.6/#changelog-since-v161","title":"Changelog since v1.6.1","text":""},{"location":"release-notes/release-notes-1.6/#bug-or-regression_1","title":"Bug or Regression","text":"<ul> <li>The HTTP-01 ACME solver now uses the <code>kubernetes.io/ingress.class</code> annotation instead of the <code>spec.ingressClassName</code> in created Ingress resources. (#4785, @maelvls)</li> </ul>"},{"location":"release-notes/release-notes-1.6/#other-cleanup-or-flake","title":"Other (Cleanup or Flake)","text":"<ul> <li>cert-manager now does one call to the ACME API instead of two when an Order fails. This fix is part of the effort towards mitigating the high load that cert-manager deployments have on the Let's Encrypt API (#4619, @irbekrm)</li> <li>Bump base images to latest versions (#4707, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.6/#v161","title":"v1.6.1","text":""},{"location":"release-notes/release-notes-1.6/#changelog-since-v160","title":"Changelog since v1.6.0","text":""},{"location":"release-notes/release-notes-1.6/#bug-or-regression_2","title":"Bug or Regression","text":"<ul> <li>Fixes an issue in <code>cmctl</code> that prevented displaying the Order resource with cert-manager 1.6 when running <code>cmctl status certificate</code>. (#4572, @maelvls)</li> <li>Update to latest version of keystore-go to address a backwards incompatible change introduced in v1.6.0 (#4564, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.6/#v160","title":"v1.6.0","text":""},{"location":"release-notes/release-notes-1.6/#breaking-changes-you-must-read-this-before-you-upgrade","title":"Breaking Changes (You MUST read this before you upgrade!)","text":""},{"location":"release-notes/release-notes-1.6/#legacy-cert-manager-api-versions-are-no-longer-served","title":"Legacy cert-manager API versions are no-longer served","text":"<p>Following their deprecation in version 1.4, the cert-manager API versions <code>v1alpha2, v1alpha3, and v1beta1</code> are no longer served.</p> <p>This means if your deployment manifests contain any of these API versions, you will not be able to deploy them after upgrading. Our new <code>cmctl</code> utility or old <code>kubectl cert-manager</code> plugin can convert old manifests to <code>v1</code> for you.</p>   \u26d4\ufe0f  If you are upgrading cert-manager on a cluster which has previously had cert-manager &lt; `v1.0.0`, you will need to ensure that all cert-manager custom resources are stored in `etcd` at `v1` version and that cert-manager CRDs do not reference the deprecated APIs **before you upgrade to `v1.6`**.  This is explained in more detail in the [Upgrading existing cert-manager resources](../installation/upgrading/remove-deprecated-apis.md#upgrading-existing-cert-manager-resources) page."},{"location":"release-notes/release-notes-1.6/#jks-keystore-minimum-password-length","title":"JKS Keystore Minimum Password Length","text":"<p>\u2139\ufe0f This no longer applies as it was fixed in <code>v1.6.1</code>, but will remain here for informational purposes. If you haven't upgraded cert-manager to <code>v1.6.0</code> from any <code>v1.5</code> release, we recommend upgrading straight to the latest version, skipping <code>v1.6.0</code>.</p> <p>In cert-manager <code>v1.6.0</code> JKS Keystores had a minimum password length of 6 characters, as an unintended side effect of upgrading keystore-go from <code>v2</code> to <code>v4</code>. If you are using a shorter password, certificates would have failed to renew, and the only observable error was in the cert-manager logs. This was fixed in cert-manager <code>v1.6.1</code>.</p>"},{"location":"release-notes/release-notes-1.6/#major-themes","title":"Major Themes","text":""},{"location":"release-notes/release-notes-1.6/#command-line-tool-user-experience","title":"Command-line tool User Experience","text":"<p>The cert-manager kubectl plugin has been redesigned as a standalone utility: <code>cmctl</code></p> <p>While the kubectl plugin functionality remains intact, using <code>cmctl</code> allows for full tab completion.</p>"},{"location":"release-notes/release-notes-1.6/#supply-chain-security","title":"Supply Chain Security","text":"<p>As part of the wider ecosystem's push for greater supply chain security we are aiming to achieve SLSA 3 by the 1.7 release date. cert-manager 1.6 has achieved the requirements for SLSA 2 when installed via helm. Our helm chart's signature can be verified with the cert-manager maintainers' public key published on our website.</p> <p>Our container images will be signed using sigstore's cosign as soon as our OCI registry supports it.</p>"},{"location":"release-notes/release-notes-1.6/#tool-chain-updates","title":"Tool Chain Updates","text":"<p>cert-manager is now built with go 1.17 (#4478, @irbekrm) and can now be compiled on Apple Silicon (#4485, @munnerz).</p>"},{"location":"release-notes/release-notes-1.6/#changelog-since-v150","title":"Changelog since v1.5.0","text":""},{"location":"release-notes/release-notes-1.6/#feature","title":"Feature","text":"<ul> <li>Add Certificate <code>RenewBefore</code> Prometheus metrics (#4419, @artificial-aidan)</li> <li>Add option to specify managed identity id when using Azure DNS DNS01 solver (#4332, @tomasfreund)</li> <li>Add support for building &amp; developing on M1 macs (#4485, @munnerz)</li> <li>Adds release targets for both <code>cmctl</code> as well as <code>kubectl-cert_manager</code> (#4523, @JoshVanL)</li> <li>Allow setting Helm chart service annotations (#3639, @treydock)</li> <li>CLI: Adds <code>cmctl completion</code> command for generating shell completion scripts for Bash, ZSH, Fish, and PowerShell (#4408, @JoshVanL)</li> <li>CLI: Adds support for auto-completion on runtime objects (Namespaces, CertificateRequests, Certificates etc.) (#4409, @JoshVanL)</li> <li>CLI: Only expose Kubernetes related flags on commands that use them (#4407, @JoshVanL)</li> <li>Enable configuring CLI command name and registering completion sub-command at build time. (#4522, @JoshVanL)</li> </ul>"},{"location":"release-notes/release-notes-1.6/#bug-or-regression_3","title":"Bug or Regression","text":"<ul> <li>Fix a bug in the Vault client that led to a panic after a request to Vault health endpoint failed. (#4456, @JoshVanL)</li> <li>Fix CRDs which were accidentally changed in cert-manager <code>v1.5.0</code> (#4353, @SgtCoDFish)</li> <li>Fix a regression in Ingress <code>PathType</code> introduced in <code>v1.5.0</code> (#4373, @jakexks)</li> <li>Fixed the HTTP-01 solver creating <code>ClusterIP</code> instead of <code>NodePort</code> services by default. (#4393, @jakexks)</li> <li>Fix a bug where a Certificate may not get renewed when the issued Certificate has a one-second skew between <code>notBefore</code> and <code>notAfter</code> and <code>spec.duration</code> is not used. This one-second skew can be observed on certificates issued with Let's Encrypt and caused a mismatch in time precision between the time stored in <code>status.renewalTime</code> and the time internally computed by cert-manager. (#4399, @irbekrm)</li> <li>Helm chart: the post-install hook <code>startupapicheck</code> is now compatible with PodSecurityPolicy. (#4364, @ndegory)</li> <li>Helm chart: the post-install hook <code>startupapicheck</code> now deletes any post-install hook resources left after a previous failed install allowing <code>helm install</code> to be re-run after a failed attempt. (#4433, @wallrj)</li> <li>The defaults for leader election parameters are now consistent across cert-manager and cainjector. (#4359, @johanfleury)</li> <li>Use <code>GetAuthorization</code> instead of <code>GetChallenge</code> when querying the current state of an ACME challenge. (#4430, @JoshVanL)</li> </ul>"},{"location":"release-notes/release-notes-1.6/#other-cleanup-or-flake_1","title":"Other (Cleanup or Flake)","text":"<ul> <li>Adds middleware logging back to ACME client for debugging (#4429, @JoshVanL)</li> <li>Deprecation: The API versions: <code>v1alpha2</code>, <code>v1alpha3</code>, and <code>v1beta1</code>, are no longer served in cert-manager 1.6 and will be removed in cert-manager 1.7. (#4482, @wallrj)</li> <li>Expose error messages (e.g., invalid access token) from the Cloudflare API to users; allow live testing using Cloudflare API token (not just key). (#4465, @andrewmwhite)</li> <li>Fix manually specified <code>PKCS#10</code> CSR and X.509 Certificate version numbers (although these were ignored in practice) (#4392, @SgtCoDFish)</li> <li>Improves logging for 'owner not found' errors for <code>CertificateRequest</code>s owning <code>Order</code>s. (#4369, @irbekrm)</li> <li>Refactor: move from <code>io/ioutil</code> to <code>io</code> and <code>os</code> package (#4402, @Juneezee)</li> <li>Helm chart and static manifest: the pointless <code>status</code> field is now stripped from the CRD manifests. (#4379, @irbekrm)</li> <li>Update cert-manager base image versions (#4474, @SgtCoDFish)</li> <li>cert-manager now uses Go 1.17. (#4478, @irbekrm)</li> </ul>"},{"location":"release-notes/release-notes-1.7/","title":"Release 1.7","text":""},{"location":"release-notes/release-notes-1.7/#v173","title":"v1.7.3","text":"<p>v1.7.3 is in effect a bug fix release which increases some hard-coded timeouts which were preventing the use of certain ACME issuers which sometimes had slower response times. This is known to include ZeroSSL and Sectigo.</p> <p>These issues were reported by many users, who we listed and thanked on the GitHub release.</p>"},{"location":"release-notes/release-notes-1.7/#changes-since-v172","title":"Changes since v1.7.2","text":""},{"location":"release-notes/release-notes-1.7/#bug","title":"Bug","text":"<ul> <li>Increase timeouts for <code>Issuer</code> and <code>ClusterIssuer</code> controllers to 2 minutes and increase ACME client HTTP timeouts to 90 seconds, in order to enable the use of slower ACME issuers which take a long time to process certain requests. (#5232, @JoooostB @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.7/#other-cleanup","title":"Other (Cleanup)","text":"<ul> <li>Bumps go to 1.17.11 and bumps base images to latest distroless images (#5234, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.7/#v172","title":"v1.7.2","text":""},{"location":"release-notes/release-notes-1.7/#changes-since-171","title":"Changes since 1.7.1","text":""},{"location":"release-notes/release-notes-1.7/#bug-or-regression","title":"Bug or Regression","text":"<ul> <li>Bumps the version of Go used to build the cert-manager binaries to 1.17.8, to fix a slew of CVEs (none of which were likely to be exploited) (#4976, @vhosakot)</li> <li>Fixes an expired hardcoded certificate which broke unit tests (#4978, @SgtCoDFish, @jakexks)</li> </ul>"},{"location":"release-notes/release-notes-1.7/#v171","title":"v1.7.1","text":""},{"location":"release-notes/release-notes-1.7/#changes-since-v170","title":"Changes since v1.7.0","text":""},{"location":"release-notes/release-notes-1.7/#bug-or-regression_1","title":"Bug or Regression","text":"<ul> <li>Fix: The alpha feature Certificate's <code>additionalOutputFormats</code> is now correctly validated at admission time, and no longer only validated if the <code>privateKey</code> field of the Certificate is set. The Webhook component now contains a separate feature set.   <code>AdditionalCertificateOutputFormats</code> feature gate (disabled by default) has been added to the webhook. This gate is required to be enabled on both the controller and webhook components in order to make use of the Certificate's <code>additionalOutputFormat</code> feature. (#4816, @JoshVanL)</li> </ul>"},{"location":"release-notes/release-notes-1.7/#v170","title":"v1.7.0","text":""},{"location":"release-notes/release-notes-1.7/#breaking-changes-you-must-read-this-before-you-upgrade","title":"Breaking Changes (You MUST read this before you upgrade!)","text":""},{"location":"release-notes/release-notes-1.7/#removal-of-deprecated-apis","title":"Removal of Deprecated APIs","text":"<p>\u26a0 Following their deprecation in version 1.4, the cert-manager API versions v1alpha2, v1alpha3, and v1beta1 have been removed. You must ensure that all cert-manager custom resources are stored in etcd at version v1 and that all cert-manager <code>CustomResourceDefinition</code>s have only v1 as the stored version before upgrading.</p> <p>Since release 1.7, <code>cmctl</code> can automatically migrate any deprecated API resources. Please [download <code>cmctl-v1.7.1</code>] and read Migrating Deprecated API Resources for full instructions.</p>"},{"location":"release-notes/release-notes-1.7/#ingress-class-semantics","title":"Ingress Class Semantics","text":"<p>In 1.7, we have reverted a change that caused a regression in the ACME Issuer. Before v1.5.4, the Ingress created by cert-manager while solving an HTTP-01 challenge contained the <code>kubernetes.io/ingress.class</code> annotation:</p> <p><pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nannotations:\nkubernetes.io/ingress.class: istio # The `class` present on the Issuer.\n</code></pre> Since v1.5.4, the Ingress does not contain the annotation anymore. Instead, cert-manager uses the <code>ingressClassName</code> field:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nspec:\ningressClassName: istio # \ud83d\udd25 Breaking change!\n</code></pre> <p>This broke many users that either don't use an Ingress controller that supports the field (such as ingress-gce and Azure AGIC), as well as people who did not need to create an IngressClass previously (such as with Istio and Traefik).</p> <p>The regression is present in cert-manager v1.5.4, 1.6.0, and 1.6.1. It is only present on Kubernetes 1.19+ and only appears when using an Issuer or ClusterIssuer with an ACME HTTP-01 solver configured.</p> <p>In 1.7, we have restored the original behavior which is to use the annotation. We also backported this fix to 1.5.5 and 1.6.2, allowing people to upgrade safely.</p> <p>Most people won't have any trouble upgrading from a version that contains the regression to 1.7.0, 1.6.2 or 1.5.5. If you are using Gloo, Contour, Skipper, or kube-ingress-aws-controller, you shouldn't have any issues. If you use the default \"class\" (e.g., <code>istio</code> for Istio) for Traefik, Istio, Ambassador, or ingress-nginx, then these should also continue to work without issue.</p> <p>If you are using Traefik, Istio, Ambassador, or ingress-nginx and you are using a non-default value for the class (e.g., <code>istio-internal</code>), or if you experience any issues with your HTTP-01 challenges please read the notes on Ingress v1 compatibility.</p>"},{"location":"release-notes/release-notes-1.7/#upgrading-with-server-side-apply","title":"Upgrading with Server Side Apply","text":"<p>As part of the work to remove deprecated APIs cert-manager <code>CustomResourceDefinition</code>s no longer require a conversion webhook. The related change in cert-manager <code>CustomResourceDefinition</code> specs results in invalid <code>CustomResourceDefinition</code> configurations for users who are upgrading to cert-manager 1.7 using <code>kubectl apply --server-side=true -f &lt;manifests&gt;</code>. This can be solved either by performing the upgrade with client side apply or by manually patching the managed fields of cert-manager <code>CustomResourceDefinitions</code>:</p> <p><pre><code>crds=(\"certificaterequests.cert-manager.io\" \"certificates.cert-manager.io\" \"challenges.acme.cert-manager.io\" \"clusterissuers.cert-manager.io\" \"issuers.cert-manager.io\" \"orders.acme.cert-manager.io\")\nfor crd in \"${crds[@]}\"; do\nmanager_index=\"$(kubectl get crd \"${crd}\" --show-managed-fields --output json | jq -r '.metadata.managedFields | map(.manager == \"cainjector\") | index(true)')\"\nkubectl patch crd \"${crd}\" --type=json -p=\"[{\\\"op\\\": \\\"remove\\\", \\\"path\\\": \\\"/metadata/managedFields/${manager_index}\\\"}]\"\ndone\n</code></pre> Thanks to @stevehipwell for the above patch commands.</p> <p>See the original GitHub issue <code>cert-manager#4831</code></p>"},{"location":"release-notes/release-notes-1.7/#major-themes","title":"Major Themes","text":""},{"location":"release-notes/release-notes-1.7/#removal-of-deprecated-apis_1","title":"Removal of Deprecated APIs","text":"<p>In 1.7 the cert-manager API versions v1alpha2, v1alpha3, and v1beta1, that were deprecated in 1.4, have been removed from the custom resource definitions (CRDs). As a result, you will notice that the YAML manifest files are much smaller.</p> <p>In this release we have added a new sub-command to the cert-manager CLI (<code>cmctl upgrade migrate-api-version</code>), which you SHOULD run BEFORE upgrading cert-manager to 1.7. Please read [Removing Deprecated API Resources] for full instructions.</p>"},{"location":"release-notes/release-notes-1.7/#additional-certificate-output-formats","title":"Additional Certificate Output Formats","text":"<p><code>additionalOutputFormats</code> is a field on the Certificate <code>spec</code> that allows specifying additional supplementary formats of issued certificates and their private key. There are currently two supported additional output formats: <code>CombinedPEM</code> (the PEM-encoded private key followed by the certificate chain) and <code>DER</code> (the DER-encoded private key only). Any combination of output formats can be requested for the same certificate. Read Additional Certificate Output Formats for more details and thanks to @seuf for getting this across the line!</p>"},{"location":"release-notes/release-notes-1.7/#server-side-apply","title":"Server-Side Apply","text":"<p>This is the first version of cert-manager which relies on Server-Side Apply. We use it to properly manage the annotations and labels on TLS secrets. For this reason cert-manager 1.7 requires at least Kubernetes 1.18 (see Supported Releases for further compatibility details).</p>"},{"location":"release-notes/release-notes-1.7/#configuration-files","title":"Configuration Files","text":"<p>In this release we introduce a new configuration file for the cert-manager-webhook. Instead of configuring the webhook using command line flags, you can now modify the webhook Deployment to mount a ConfigMap containing a configuration file. Read the WebhookConfiguration Schema for more information.</p> <p>In future releases we will introduce configuration files for the other cert-manager components: the controller and the cainjector.</p>"},{"location":"release-notes/release-notes-1.7/#developing-cert-manager-without-bazel","title":"Developing cert-manager Without Bazel","text":"<p>In a future release, we'll remove the use of <code>bazel</code> for building and testing cert-manager, with the aim of making it as easy as possible for anyone to contribute and to get involved with the cert-manager project.</p> <p>The work is ongoing, but for now we've ensured that cert-manager 1.7 can be built with <code>go build</code>, and that all unit tests can be run with <code>go test ./cmd/... ./internal/... ./pkg/...</code>.</p>"},{"location":"release-notes/release-notes-1.7/#community","title":"Community","text":"<p>Thanks again to all open-source contributors with commits in this release, including:</p> <ul> <li>@Adphi</li> <li>@devholic</li> <li>@johnwchadwick</li> <li>@jsoref</li> <li>@jwenz723</li> <li>@seuf</li> <li>@thirdeyenick</li> </ul> <p>And thanks as usual to coderanger for helping people out on the [<code>#cert-manager</code> Slack channel]; it's a huge help and much appreciated.</p>"},{"location":"release-notes/release-notes-1.7/#changelog-since-v160","title":"Changelog since v1.6.0","text":""},{"location":"release-notes/release-notes-1.7/#feature","title":"Feature","text":"<ul> <li>Add <code>--acme-http01-solver-nameservers</code> flag to enable custom nameservers usage for ACME HTT01 challenges propagation checks. (#4287, @Adphi)</li> <li>Add <code>cmctl upgrade migrate-api-version</code> to ensure all CRD resources are stored at 'v1' prior to upgrading to v1.7 onwards (#4711, @munnerz)</li> <li>Add goimports verification step for CI (#4710, @SgtCoDFish)</li> <li>Add support for loading webhook flags/options from a WebhookConfiguration file on disk (#4546, @munnerz)</li> <li>Added <code>additionalOutputFormats</code> parameter to allow <code>DER</code> (binary) and <code>CombinedPEM</code> (key + cert bundle) formats. (#4598, @seuf)</li> <li>Added a makefile based build workflow which doesn't depend on bazel (#4554, @SgtCoDFish)</li> <li>Added a new Helm chart parameter <code>prometheus.servicemonitor.honorLabels</code>, which sets the <code>honor_labels</code> field  of the Prometheus scrape config. (#4608, @thirdeyenick)</li> <li>Breaking change: pprof now runs by default on <code>localhost:6060</code> on the webhook and the controller, but only if explicitly enabled. Pprof can now be enabled also for cainjector. All three components have <code>--enable-profiling</code>, <code>--profiler-address</code> CLI flags to configure profiling. Thanks to @bitscuit for help with this! (#4550, @irbekrm)</li> <li>Certificate Secrets are now managed by the APPLY API call, rather than UPDATE/CREATE. The issuing controller actively reconciles Certificate SecretTemplate's against corresponding Secrets, garbage collecting and correcting key/value changes. (#4638, @JoshVanL)</li> </ul>"},{"location":"release-notes/release-notes-1.7/#bug-or-regression_2","title":"Bug or Regression","text":"<ul> <li>Ensures 1 hour backoff between errored calls for new ACME Orders. (#4616, @irbekrm)</li> <li>Fix unexpected exit when multiple DNS providers are passed to <code>RunWebhookServer</code> (#4702, @devholic)</li> <li>Fixed a bug that can cause <code>cmctl version</code> to erroneously display the wrong webhook pod versions when older failed pods are present. (#4615, @johnwchadwick)</li> <li>Fixes a bug where a previous failed CertificateRequest was picked up during the next issuance. Thanks to @MattiasGees for raising the issue and help with debugging! (#4688, @irbekrm)</li> <li>Fixes an issue in <code>cmctl</code> that prevented displaying the Order resource with cert-manager 1.6 when running <code>cmctl status certificate</code>. (#4569, @maelvls)</li> <li>Improve checksum validation in makefile based tool installation (#4680, @SgtCoDFish)</li> <li>The HTTP-01 ACME solver now uses the <code>kubernetes.io/ingress.class</code> annotation instead of the <code>spec.ingressClassName</code> in created Ingress resources. (#4762, @jakexks)</li> <li>The <code>cmctl experimental install</code> command now uses the cert-manager namespace. This fixes a bug which was introduced in release 1.6 that caused cert-manager to be installed in the default namespace. (#4763, @wallrj)</li> <li>Fixed a bug in the way the Helm chart handles service annotations on the controller and webhook services. (#4329, @jwenz723)</li> <li>Update to latest version of keystore-go to address a backwards incompatible change introduced in v1.6.0 (#4563, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.7/#other-cleanup-or-flake","title":"Other (Cleanup or Flake)","text":"<ul> <li>Adds <code>clock_time_seconds_gauge</code> metric which returns the current clock time, based on seconds since 1970/01/01 UTC (#4640, @JoshVanL)</li> <li>Adds an automated script for cert-manager developers to update versions of kind used for development and testing. (#4574, @SgtCoDFish)</li> <li>Breaking change: removes the deprecated <code>dns01-self-check-nameservers</code> flag. Use <code>--dns01-recursive-nameservers</code> instead. (#4551, @irbekrm)</li> <li>Bump kind image versions (#4593, @SgtCoDFish)</li> <li>Clean up: Remove <code>v1beta1</code> form the webhook's <code>admissionReviewVersions</code> as cert-manager no longer supports v1.16 (#4639, @JoshVanL)</li> <li>Cleanup: Pipe feature gate flag to the e2e binary. Test against shared Feature Gate map for feature enabled and whether they should be tested against. (#4703, @JoshVanL)</li> <li>Ensures that in cases where an attempt to finalize an already finalized order is made, the originally issued certificate is used (instead of erroring and creating a new ACME order) (#4697, @irbekrm)</li> <li>No longer log an error when a Certificate is deleted during normal operation. (#4637, @JoshVanL)</li> <li>Removed deprecated API versions from the cert-manager CRDs (#4635, @wallrj)</li> <li>Update distroless base images for cert-manager (#4706, @SgtCoDFish)</li> <li>Upgrade Kubernetes dependencies to v0.23.1 (#4675, @munnerz)</li> </ul>"},{"location":"release-notes/release-notes-1.8/","title":"Release 1.8","text":""},{"location":"release-notes/release-notes-1.8/#v182","title":"v1.8.2","text":"<p>v1.8.2 is in effect a bug fix release which increases some hard-coded timeouts which were preventing the use of certain ACME issuers which sometimes had slower response times. This is known to include ZeroSSL and Sectigo.</p> <p>These issues were reported by many users, who we listed and thanked on the GitHub release.</p>"},{"location":"release-notes/release-notes-1.8/#changes-since-v181","title":"Changes since v1.8.1","text":""},{"location":"release-notes/release-notes-1.8/#bug","title":"Bug","text":"<ul> <li>Increase timeouts for <code>Issuer</code> and <code>ClusterIssuer</code> controllers to 2 minutes and increase ACME client HTTP timeouts to 90 seconds, in order to enable the use of slower ACME issuers which take a long time to process certain requests. (#5231, @JoooostB @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.8/#other-cleanup-or-flake","title":"Other (Cleanup or Flake)","text":"<ul> <li>Bump distroless base images to latest versions (#5235, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.8/#v181","title":"v1.8.1","text":"<p>v1.8.1 is a patch release rebuilding cert-manager 1.8 using the latest version of Go, and reverting a previous commit which had negatively affected some GitOps workflows.</p>"},{"location":"release-notes/release-notes-1.8/#changes-since-v180","title":"Changes since v1.8.0","text":""},{"location":"release-notes/release-notes-1.8/#bug_1","title":"Bug","text":"<ul> <li>Reverts a check for Prometheus APIs before creating cert-manager <code>ServiceMonitor</code>s which broke users' GitOps flows (#5204)</li> </ul>"},{"location":"release-notes/release-notes-1.8/#cleanup","title":"Cleanup","text":"<ul> <li>Bumps the version of Go used to build the cert-manager binaries to 1.17.11 which fixes a few CVEs (although we don't think that any of those CVEs were likely to be exploited in cert-manager) (#5203, @irbekrm)</li> </ul>"},{"location":"release-notes/release-notes-1.8/#v180","title":"v1.8.0","text":"<p>cert-manager 1.8 includes wider support for Kubernetes server-side-apply, a new build and development experience based around <code>Makefile</code>s rather than Bazel, and a range of other improvements, tweaks and bug fixes.</p> <p>Version 1.8 also marks our first release in which the Go import path for cert-manager is that of the repo's new home:</p> <p><code>github.com/cert-manager/cert-manager</code></p>"},{"location":"release-notes/release-notes-1.8/#breaking-changes-you-must-read-this-before-you-upgrade","title":"Breaking Changes (You MUST read this before you upgrade!)","text":""},{"location":"release-notes/release-notes-1.8/#validation-of-the-rotationpolicy-field","title":"Validation of the <code>rotationPolicy</code> field","text":"<p>The field <code>spec.privateKey.rotationPolicy</code> on Certificate resources is now validated. Valid options are Never and Always. If you are using a GitOps flow and one of your YAML manifests contains a Certificate with an invalid value, you will need to update it with a valid value to prevent your GitOps tool from failing on the new validation. Please follow the instructions listed on the page Upgrading from v1.7 to v1.8. (#4913, @jahrlin)</p>"},{"location":"release-notes/release-notes-1.8/#what-happens-if-i-upgrade-to-180-without-doing-the-above-steps","title":"What happens if I upgrade to 1.8.0 without doing the above steps?","text":"<p>After upgrading to 1.8.0, when updating existing Certificate objects that have an incorrect value for <code>rotationPolicy</code>, Kubernetes clients such as kubectl, Helm, or ArgoCD will start showing the following message:</p> <pre><code>Certificate.cert-manager.io \"my-cert\" is invalid: spec.privateKey.rotationPolicy: Unsupported value: \"Foo\": supported values: \"Never\", \"Always\".\n</code></pre>"},{"location":"release-notes/release-notes-1.8/#why-was-this-change-necessary","title":"Why was this change necessary?","text":"<p>Previously, when the value of the <code>rotationPolicy</code> field was set to an incorrect value, you would not know since no event or condition would be visible on the Certificate itself. The only way to know that something was wrong was to dig into the cert-manager-controller logs and see the message \"Certificate with unknown <code>certificate.spec.privateKey.rotationPolicy</code> value\":</p> <pre><code>I0329 12:43:13.325771       1 keymanager_controller.go:176] cert-manager/certificates-key-manager \"msg\"=\"Certificate with unknown certificate.spec.privateKey.rotationPolicy value\" \"key\"=\"default/my-cert\" \"rotation_policy\"=\"Foo\"\n</code></pre> <p>This change was implemented in #4913.</p>"},{"location":"release-notes/release-notes-1.8/#changed-container-layouts","title":"Changed Container Layouts","text":"<p>This only affects you if you're modifying cert-manager containers in some way, such as adding init scripts or otherwise changing how the binaries inside the containers are called.</p> <p>Bazel has a unique way of creating containers, which places the actual binary at a long unusual path. For the v1.7.0 cert-manager-webhook container for example, the binary is placed at <code>/app/cmd/webhook/webhook.runfiles/com_github_jetstack_cert_manager/cmd/webhook/webhook_/webhook</code> and <code>/app/cmd/webhook/webhook</code> is provided as a symlink to the binary.</p> <p>This is simplified in our new build system; we only place a single binary at <code>/app/cmd/webhook/webhook</code> and the old path disappears. This applies to all cert-manager containers.</p> <p>We also removed the \"LICENSES\" file from the containers and replaced it with a link to the cert-manager repo.</p>"},{"location":"release-notes/release-notes-1.8/#exe-extension-on-windows","title":"<code>.exe</code> Extension on Windows","text":"<p>We package <code>cmctl</code> and <code>kubectl_cert-manager</code> for Windows on <code>amd64</code> platforms, but previously the binaries had the same names as the binaries on other platforms, e.g. <code>cmctl</code> with no file extension.</p> <p>In 1.8.0 and later, the binaries now have a <code>.exe</code> extension since this is standard practice on Windows. This could affect you if you're calling the binary in a Powershell script, for example.</p> <p>We've also now added zip-compressed versions of the <code>cmctl</code> and <code>kubectl_cert-manager</code> binaries on Windows, since <code>.tar.gz</code> is less common on Windows.</p>"},{"location":"release-notes/release-notes-1.8/#changed-import-path","title":"Changed Import Path","text":"<p>This will only affect you if you're writing code in Go which imports cert-manager as a module, which we generally recommend against doing in most cases.</p> <p>All versions of cert-manager prior to v1.8.0 used a Go import path corresponding to the old cert-manager repository, <code>github.com/jetstack/cert-manager</code>.</p> <p>v1.8.0 marks the first release in which the import path changes to the new location, <code>github.com/cert-manager/cert-manager</code>.</p> <p>We have a guide for Importing cert-manager in Go on cert-manager.io with all the details, including details on why we don't recommend importing cert-manager as a module if that's avoidable.</p>"},{"location":"release-notes/release-notes-1.8/#major-themes","title":"Major Themes","text":""},{"location":"release-notes/release-notes-1.8/#server-side-apply","title":"Server-Side Apply","text":"<p>cert-manager v1.8.0 adds initial support for Kubernetes Server-Side Apply, which became stable in Kubernetes 1.22. This support is behind a feature gate for now, and is only supported by cert-manager on Kubernetes 1.22 and later.</p> <p>Server-Side Apply helps to ensure that changes to resources are made in a managed way, and aims to prevent certain classes of bugs. Notably, it should eliminate conflicts when multiple controllers try to apply status changes to a single resource. You'll likely have seen messages relating to this kind of conflict in logs before, e.g.:</p> <pre><code>I0119 12:34:56.000000       1 controller.go:161] cert-manager/controller/certificaterequests-issuer-acme \"msg\"=\"re-queuing item due to optimistic locking on resource\" \"key\"=\"my-namespace/my-cr\" \"error\"=\"Operation cannot be fulfilled on certificaterequests.cert-manager.io \\\"my-cr\\\": the object has been modified; please apply your changes to the latest version and try again\"\n</code></pre> <p>These conflicts aren't usually actually a problem which will block the issuance of a certificate, but they can delay things as they cause extra reconcile loops. Server-side apply cleans things up, which should mean less noise in logs and fewer pointless reconcile loops.</p> <p>If you want to test it out, you can enable alpha-level cert-manager Server-Side Apply support through the <code>--feature-gates</code> controller flag.</p>"},{"location":"release-notes/release-notes-1.8/#from-bazel-to-make","title":"From Bazel to Make","text":"<p>A common theme when someone tries to make a change to cert-manager for the first time is that they ask for help with navigating Bazel, which cert-manager used as its build tool. Helping people with Bazel isn't easy; it's an incredibly powerful tool, but that power also brings a lot of complications which can seriously get in the way of being able to make even simple changes to the code base. Even developers who are familiar with contributing to open source projects in Go can find it daunting to make changes thanks to Bazel.</p> <p>The problem isn't limited to open-source contributors; many of cert-manager's maintainers also struggle with configuring and changing Bazel, too.</p> <p>cert-manager 1.8 is the first release which is built and tested using a newly written <code>make</code>-based build system. We believe that this new build system should make it much simpler to understand and change the commands which are being run behind the scenes to build and test cert-manager. In time, we'll fully document the new build system, ensure it's at full feature-parity with Bazel and then remove all references to Bazel across the codebase.</p> <p>A neat side effect of this change is that our build times have significantly improved. Bazel took around 14 minutes to build every cert-manager artifact for every platform during a release, while the new <code>make</code> build system can do the same (and more) in under 5 minutes.</p>"},{"location":"release-notes/release-notes-1.8/#exponential-backoff-after-a-failed-issuance","title":"Exponential backoff after a failed issuance","text":"<p>cert-manager v1.8.0 introduces exponential backoff after failed certificate issuance.</p> <p>Previously, a failed issuance was retried every hour which \u2014 especially in larger cert-manager installations \u2014 could cause rate limits to be hit as well as overwhelm external services. Failed attempts are now retried with a binary exponential backoff starting with <code>1h</code> then <code>2h</code>, <code>4h</code> up to a maximum of <code>32h</code>. As part of the new backoff behavior, a new <code>failedIssuanceAttempts</code> field was added to the <code>Certificate</code> spec to track the number of currently failed issuances.</p> <p>The <code>cmctl renew</code> command command can still be used to force <code>Certificate</code> renewal immediately.</p> <p>We're also considering reducing the initial backoff from 1 hour. If you have a use case where this would be useful please do comment on our tracking issue.</p>"},{"location":"release-notes/release-notes-1.8/#changelog-since-v170","title":"Changelog since v1.7.0","text":""},{"location":"release-notes/release-notes-1.8/#feature","title":"Feature","text":"<ul> <li>ACTION REQUIRED: The field <code>spec.privateKey.rotationPolicy</code> on Certificate resources is now validated. Valid options are Never and Always. If you are using a GitOps flow and one of your YAML manifests contains a Certificate with an invalid value, you will need to update it with a valid value to prevent your GitOps tool from failing on the new validation. (#4913, @jahrlin)</li> <li>Build: add make targets for running unit and integration tests, as part of the Bazel replacement. (#4865, @SgtCoDFish)</li> <li>Build: add make targets for running the end-to-end tests, as part of the Bazel replacement. (#4914, @maelvls)</li> <li>cert-manager now supports the field <code>spec.expirationSeconds</code> on Kubernetes CertificateSigningRequest resources. Using this field requires Kubernetes 1.22. You can still use the annotation <code>experimental.cert-manager.io/request-duration</code> to request a duration. (#4957, @enj)</li> <li>cert-manager now properly updates the content of the data keys <code>tls-combined.pem</code> and <code>key.der</code> on Secret resources that are associated to Certificate resources that use the field <code>additionalOutputFormats</code>. The field <code>additionalOutputFormat</code> is an alpha feature and can be enabled by passing the flag <code>--feature-gates=AdditionalCertificateOutputFormats=true</code> to the cert-manager controller. (#4813, @JoshVanL)</li> <li>ClusterRoles aggregation to user-facing admin/edit/view ClusterRoles can be optionally turned off (#4937, @illrill)</li> <li>ACTION REQUIRED: Server-Side Apply: the feature gate <code>ServerSideApply=true</code> now configures the <code>ingress-shim</code> and <code>gateway-shim</code> controllers to use Kubernetes Server-Side Apply on Certificate resources. When upgrading to cert-manager 1.8 with <code>ServerSideApply=true</code>, do make sure there are no Challenge resources currently in the cluster. If there are some, you will need to manually delete them once they are in 'valid' state as cert-manager post-1.8 with the Server-Side Apply feature is not able to clean up Challenge resources created pre-1.8. (#4811, @JoshVanL)</li> <li>Server-Side Apply: the feature gate <code>ServerSideApply=true</code> configures the <code>certificaterequests-*</code> controllers to use Kubernetes Server-Side Apply on CertificateRequest resources. (#4792, @JoshVanL)</li> <li>Server-Side Apply: the feature gate <code>ServerSideApply=true</code> configures the <code>certificates-*</code> controllers to use Kubernetes Server-Side Apply on Certificate resources. (#4777, @JoshVanL)</li> <li>Server-Side Apply: the feature gate <code>ServerSideApply=true</code> configures the CertificateSigningRequest controllers to use Kubernetes Server-Side Apply on CertificateSigningRequest resources. (#4798, @JoshVanL)</li> <li>Server-Side Apply: the feature gate <code>ServerSideApply=true</code> configures the <code>issuers</code> and <code>clusterissuers</code> controllers to use Kubernetes Server-Side Apply on Issuer and ClusterIssuer resources. (#4794, @JoshVanL)</li> <li>Server-Side Apply: the feature gate <code>ServerSideApply=true</code> configures the <code>orders</code> controller to use Kubernetes Server-Side Apply on Order resources. (#4799, @JoshVanL)</li> <li>The annotation <code>experimental.cert-manager.io/request-duration</code> now has a minimum value of 600 seconds. This annotation This change ensures compatibility with the Kubernetes resource CertificateSigningRequest, which requires a minimum of 600 seconds on the field <code>spec.expirationSeconds</code>. (#4973, @irbekrm)</li> <li>The annotation <code>ingress.kubernetes.io/whitelist-source-range</code> used by the Ingress shim when creating Ingress resources can now be overridden by setting the field <code>ingressTemplate</code> on the Issuer and ClusterIssuer. (#4789, @tasharnvb)</li> <li>The experimental Gateway API support now uses the v1alpha2 CRDs. (#4791, @jakexks)</li> <li>The user-agent used by cert-manager in its Kubernetes API clients and ACME clients now takes the form <code>cert-manager-&lt;component name&gt;/&lt;version&gt; (&lt;os&gt;/&lt;arch&gt;) cert-manager/&lt;git commit&gt;</code>. Another change is the addition of specific field managers strings; previously, all the controllers had the same field manager <code>cert-manager</code>. Now, each controller has its own field manager string of the form <code>cert-manager-&lt;controller name&gt;</code>. (#4773, @JoshVanL)</li> <li>You can now uninstall cert-manager using the command <code>cmctl experimental uninstall</code>. (#4897, @jahrlin)</li> <li>You can now use an external issuer resource as the default issuer when using the Ingress shim feature. The default issuer can be set using the flags <code>--default-issuer-group</code>, <code>--default-issuer-kind</code>, and <code>--default-issuer-name</code>. (#4833, @jakexks)</li> </ul>"},{"location":"release-notes/release-notes-1.8/#design","title":"Design","text":"<ul> <li>ACTION REQUIRED: The import path for cert-manager has been updated to <code>github.com/cert-manager/cert-manager</code>. If you import cert-manager as a go module (which isn't currently recommended), you'll need to update the module import path in your code to import cert-manager 1.8 or later. (#4587, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.8/#bug-or-regression","title":"Bug or Regression","text":"<ul> <li>ACTION REQUIRED: The field <code>additionalOutputFormats</code>, which is available as an alpha feature on Certificate resources, is now correctly validated. Previously, it would only get validated when the <code>privateKey</code> field was set on the Certificate. If you are using the <code>additionalOutputFormats</code> field, you will want to add the feature gate <code>AdditionalCertificateOutputFormats</code> to both the webhook and the controller. Previously, you only needed to set <code>AdditionalCertificateOutputFormats</code> on the controller. If the feature gate is missing on either the controller or the webhook, you won't be able to use the <code>additionalOutputFormat</code> field. (#4814, @JoshVanL)</li> <li>The Go version used to build the cert-manager binaries has been bumped to 1.17.8 to fix a slew of CVEs (none of which were likely to be exploited). (#4970, @vhosakot)</li> <li>Helm: the default nodeSelector is now <code>kubernetes.io/os: linux</code>. If this label isn't present on any nodes in the cluster, the <code>nodeSelector</code> will need to be overwritten, or that label added to some nodes. (#3605, @mikebryant)</li> <li>Use multivalue records instead of simple records for the AWS Route53 ACME DNS challenge solver, to allow for multiple challenges for the same domain at the same time (#4793, @fvlaicu)</li> </ul>"},{"location":"release-notes/release-notes-1.8/#other-cleanup-or-flake_1","title":"Other (Cleanup or Flake)","text":"<ul> <li>Aggregated admin and edit roles will now include permissions to update certificates' status, which will allow namespace admins and editors to run the <code>cmctl renew</code> command in their namespaces. (#4955, @andreadecorte)</li> <li>Cleanup: No longer log an error when cert-manager encounters a conflict in the secrets manager, in favor of always force applying. (#4815, @JoshVanL)</li> <li>Failed certificate issuances are now retried with an exponential backoff where the backoff periods are <code>1h</code>, <code>2h</code>, <code>4h</code>, <code>8h</code>, <code>16h</code>, <code>32h</code>. A new field <code>failedIssuanceAttempts</code> is now set by cert-manager on the Certificate status. This field keeps track of consecutive failed issuances. The backoff period gets reset after a successful issuance. Like before, updating a field on a failed Certificate (such as <code>spec.dnsNames</code>) or running the command <code>cmctl renew</code> continues to trigger a re-issuance. (#4772, @irbekrm)</li> <li>When starting up, cert-manager now solely relies on Lease objects to perform the leader election. Previously, cert-manager supported both ConfigMap and Lease objects for leader election. Existing ConfigMap resources used for leader election will remain and will need deleting manually. A side effect of this is that you cannot upgrade to v1.8.0 from cert-manager 1.3 (although upgrading multiple versions at a time was never supported). (#4935, @davidsbond)</li> <li>Helm: you can now set custom labels on the ServiceAccount resources using the values <code>serviceAccount.labels</code>, <code>cainjector.serviceAccount.labels</code>, <code>webhook.serviceAccount.labels</code>, and <code>startupapicheck.serviceAccount.labels</code>. (#4932, @4molybdenum2)</li> </ul>"},{"location":"release-notes/release-notes-1.8/#uncategorized","title":"Uncategorized","text":"<ul> <li>Introducing a new metric <code>controller_sync_error_count</code> counting the number of errors during sync() of a controller. (#4987, @jayme-github)</li> <li>When creating an acmesolver pod, cert-manager now sets <code>allowPrivilegeEscalation</code> to <code>false</code> by default. The Helm chart now also sets <code>securityContext.allowPrivilegeEscalation</code> to <code>false</code> by default for the controller, cainjector, and webhook pods as well as for the startupapicheck job. (#4953, @ajvn)</li> </ul>"},{"location":"release-notes/release-notes-1.9/","title":"Release 1.9","text":""},{"location":"release-notes/release-notes-1.9/#v192","title":"<code>v1.9.2</code>","text":"<p>cert-manager <code>v1.9.2</code> is a bug fix release which fixes an issue where CertificateRequests marked as InvalidRequest did not properly trigger issuance failure handling leading to 'stuck' requests, and a problem which prevented the Venafi Issuer from connecting to TPP servers where the <code>vedauth</code> API endpoints were configured to accept client certificates. It is also compiled with a newer version of Go 1.18 (<code>v1.18.8</code>) which fixes some vulnerabilities in the Go standard library.</p>"},{"location":"release-notes/release-notes-1.9/#changes-since-v191","title":"Changes since <code>v1.9.1</code>","text":""},{"location":"release-notes/release-notes-1.9/#bug-or-regression","title":"Bug or Regression","text":"<ul> <li>Fix issue where CertificateRequests marked as InvalidRequest did not properly trigger issuance failure handling leading to 'stuck' requests.   (#5371, @munnerz )</li> <li>The Venafi Issuer now supports TLS 1.2 renegotiation, so that it can connect to TPP servers where the <code>vedauth</code> API endpoints are configured to accept client certificates. (Note: This does not mean that the Venafi Issuer supports client certificate authentication).   (#5577, @wallrj)</li> <li>Upgrade to latest go patch release.   (#5561, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.9/#v191","title":"v1.9.1","text":"<p>cert-manager v1.9.1 is a bug fix release which removes an incorrect check in the Route53 DNS solver. This accidental change prevented the use of credentials derived from instance metadata or AWS pod metadata.</p>"},{"location":"release-notes/release-notes-1.9/#changes-since-v190","title":"Changes since v1.9.0","text":""},{"location":"release-notes/release-notes-1.9/#bug-or-regression_1","title":"Bug or Regression","text":"<ul> <li>DNS Route53: Remove incorrect validation which rejects solvers that don't define either a <code>accessKeyID</code> or <code>secretAccessKeyID</code>. (#5341, @jetstack-bot)</li> </ul>"},{"location":"release-notes/release-notes-1.9/#v190","title":"v1.9.0","text":"<p>cert-manager v1.9.0 adds alpha support for using cert-manager <code>Certificate</code>s in scenarios where the ordering of the Relative Distinguished Names (RDN) sequence that constitutes an X.509 certificate's subject needs to be preserved; improves the ability to configure the <code>Certificate</code> created via ingress-shim using annotations on the <code>Ingress</code> resource; introduces various changes/improvements in contributor flow; and finishes the  new make-based contributor workflow.</p>"},{"location":"release-notes/release-notes-1.9/#major-themes","title":"Major Themes","text":""},{"location":"release-notes/release-notes-1.9/#literal-certificate-subjects","title":"Literal Certificate Subjects","text":"<p>cert-manager's <code>Certificate</code> allows users to configure the subject fields of the X.509 certificate via <code>spec.subject</code> and <code>spec.commonName</code> fields. The X.509 spec states that the subject is an (ordered) sequence of Relative Distinguished Names (RDN).</p> <p>cert-manager does not strictly abide by this spec when encoding the subject fields from the <code>Certificate</code> spec. For example, the order of the RDN sequence may not be preserved. This is because cert-manager uses Go's libraries for X.509 certificates, and the Go libraries don't preserve ordering.</p> <p>For the vast majority of users this does not matter, but there are specific cases that require defining the exact ordered RDN sequence. For example, if the certificate is used for LDAP authentication and the RDN sequence represents a location in LDAP directory tree. See <code>cert-manager#3203</code>.</p> <p>For these use cases, a new alpha <code>LiteralSubject</code> field has been added to the <code>Certificate</code> spec where users can pass a literal RDN sequence:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: test\nspec:\nsecretName: test\nliteralSubject: \"C=US,O=myOrg,CN=someName\"\n</code></pre> <p>To use this field, the alpha feature gate <code>LiteralCertificateSubject</code> needs to be enabled on both the cert-manager controller and webhook. Bear in mind that <code>spec.literalSubject</code> is mutually exclusive with <code>spec.commonName</code> and <code>spec.subject</code>.</p> <p>This feature is aimed at the specific scenario where an exact RDN sequence needs to be defined. We do not intend to deprecate the existing <code>spec.subject</code> and <code>spec.commonName</code> fields and we recommend that folks keep using those fields in all other cases; they're simpler, have better validation and are more obvious to read and change.</p>"},{"location":"release-notes/release-notes-1.9/#ingress-shim-certificate-configuration","title":"ingress-shim <code>Certificate</code> Configuration","text":"<p>cert-manager 1.9 adds the ability to configure an ingress-shim <code>Certificate</code>'s <code>spec.revisionHistoryLimit</code> and <code>spec.privateKey</code> via annotations on the <code>Ingress</code> resource.</p> <p>This should allow folks to configure ingress-shim <code>Certificate</code>s according to best practices (i.e by setting <code>Certificate</code>'s <code>spec.privateKey.rotationPolicy</code> to <code>Always</code>).</p> <p>In the future we would like to design a better mechanism to configure these <code>Certificate</code>s. We advise caution when using <code>Ingress</code> annotations as there is no validation of the annotations at <code>Ingress</code> creation time.</p>"},{"location":"release-notes/release-notes-1.9/#contribution-workflow","title":"Contribution Workflow","text":"<p>Over the past couple of months there have been a number of discussions in regards to contributor experience and project health, partially triggered by the awesome community discussions in cert-manager's KubeCon booth and also by the work done to move cert-manager to CNCF's incubating stage.</p> <p>For example, we've clarified our feature policy and discussed the process of building cert-manager's roadmap. If you're interested in these topics, we're happy to chat about them!</p>"},{"location":"release-notes/release-notes-1.9/#make-workflow","title":"<code>make</code> Workflow","text":"<p>cert-manager 1.8 introduced a new <code>make</code> based workflow alongside the existing Bazel workflow. The work to improve the <code>make</code> workflow was continued in 1.9 and our contributor documentation has been redefined to use <code>make</code> commands. This should make building and testing cert-manager easier with faster build and test times, easier debugging and less complexity.</p> <p>As part of this, Bazel has now been fully deprecated for building and testing cert-manager.</p> <p>As usual, we welcome any feedback in regards to further improving contributor experience.</p>"},{"location":"release-notes/release-notes-1.9/#changes-since-v180","title":"Changes since v1.8.0","text":""},{"location":"release-notes/release-notes-1.9/#feature","title":"Feature","text":"<ul> <li>Added support for pulling both AWS access key IDs and secret keys from Kubernetes secrets (#5194, @Compy)</li> <li>Adds <code>make clean-all</code> for starting a fresh development environment and <code>make which-go</code> for getting go version information when developing cert-manager (#5118, @SgtCoDFish)</li> <li>Adds <code>make upload-release</code> target for publishing cert-manager releases to GCS, simplifying the cert-manager release process simpler and making it easier to change (#5205, @SgtCoDFish)</li> <li>Adds a new alpha Prometheus summary vector metric <code>certmanager_http_venafi_client_request_duration_seconds</code> which allows tracking the latency of Venafi API calls. The metric is labelled by the type of API call. Example PromQL query: <code>certmanager_http_venafi_client_request_duration_seconds{api_call=\"request_certificate\"}</code> will show the average latency of calls to the Venafi certificate request endpoint (#5053, @irbekrm)</li> <li>Adds more verbose logging info for certificate renewal in the DynamicSource webhook to include <code>DNSNames</code> (#5142, @AcidLeroy)</li> <li>Adds new LICENSES format and ability to verify and update licenses through make (#5243, @SgtCoDFish)</li> <li>Adds private key Ingress annotations to set private key properties for Certificate (#5239, @oGi4i)</li> <li>Adds the <code>cert-manager.io/revision-history-limit</code> annotation for Ingress resources, to limit the number of CertificateRequests which are kept for a Certificate (#5221, @oGi4i)</li> <li>Adds the <code>literalSubject</code> field for Certificate resources. This is an alpha feature, enabled by passing the flag <code>--feature-gates=LiteralCertificateSubject=true</code> to the cert-manager controller and webhook. <code>literalSubject</code> allows fine-grained control of the subject a certificate should have when issued and is intended for power-users with specific use cases in mind (#5002, @spockz)</li> <li>Change default build dir from <code>bin</code> to <code>_bin</code>, which plays better with certain tools which might treat <code>bin</code> as just another source directory (#5130, @SgtCoDFish)</li> <li>Helm: Adds a new <code>namespace</code> parameter which allows users to override the namespace in which resources will be created. This also allows users to set the namespace of the chart when using cert-manager as a sub chart. (#5141, @andrewgkew)</li> <li>Helm: Allow for users to not auto-mount service account tokens see also <code>k/k#57601</code> (#5016, @sveba)</li> <li>Use multiple retries when provisioning tools using <code>curl</code>, to reduce flakes in tests and development environments (#5272, @SgtCoDFish)</li> </ul>"},{"location":"release-notes/release-notes-1.9/#bug-or-regression_2","title":"Bug or Regression","text":"<ul> <li>CertificateRequests controllers must wait for the core secrets informer to be synced (#5224, @rodrigorfk)</li> <li>Ensure that <code>make release-artifacts</code> only builds unsigned artifacts as intended (#5181, @SgtCoDFish)</li> <li>Ensure the startupapicheck is only scheduled on Linux nodes in the helm chart (#5136, @craigminihan)</li> <li>Fixed a bug where the Venafi Issuer would not verify its access token (TPP) or API key (Cloud) before becoming ready. Venafi Issuers now remotely verify the access token or API key (#5212, @jahrlin)</li> <li>Fixed release artifact archives generated by Make so that a leading <code>./</code> is stripped from paths. This ensures that behavior is the same as v1.7 and earlier (#5050, @jahrlin)</li> <li>Increase timeouts for <code>Issuer</code> and <code>ClusterIssuer</code> controllers to 2 minutes and increase ACME client HTTP timeouts to 90 seconds, in order to enable the use of slower ACME issuers which take a long time to process certain requests. (#5226, @SgtCoDFish)</li> <li>Increases Venafi Issuer timeout for retrieving a certificate increased to 60 seconds, up from 10. This gives TPP instances longer to complete their workflows and make the certificate available before cert-manager times out and re-queues the request. (#5247, @hawksight)</li> <li>Remove <code>pkg/util/coverage</code> which broke compatibility with go 1.18; thanks @davidsbond for finding the issue! (#5032, @SgtCoDFish)</li> <li><code>cmctl</code> and <code>kubectl cert-manager</code> now report their actual versions instead of \"canary\", fixing issue #5020 (#5286, @jetstack-bot)</li> </ul>"},{"location":"release-notes/release-notes-1.9/#other-cleanup-or-flake","title":"Other (Cleanup or Flake)","text":"<ul> <li>Adds <code>make update-all</code> as a convenience target to run before raising a PR (#5251, @SgtCoDFish)</li> <li>Adds make targets for updating and verifying CRDs and codegen (#5242, @SgtCoDFish)</li> <li>Bump cert-manager's version of Go to 1.18 (#5152, @lucacome)</li> <li>Bumps distroless base images to their latest versions (#5222, @irbekrm)</li> <li>CertificateSigningRequest: no longer mark a request as failed when using the SelfSigned issuer, and the Secret referenced in <code>experimental.cert-manager.io/private-key-secret-name</code> doesn't exist. (#5332, @jetstack-bot)</li> <li>Only require python for the one test we have which needs it, rather than requiring it globally (#5245, @SgtCoDFish)</li> <li>Remove deprecated field <code>securityContext.enabled</code> from helm chart (#4721, @Dean-Coakley)</li> <li>Removes support for <code>networking/v1beta</code> Ingresses in ingress-shim. (#5250, @irbekrm)</li> <li>Reverts additional check for <code>ServiceMonitor</code> (#5202, @irbekrm)</li> <li>Updates Kubernetes libraries to <code>v0.24.2</code>. (#5097, @lucacome)</li> <li>Updates warning message that is thrown if issuance fails because private key does not match spec, but private key regeneration is disabled. See https://github.com/cert-manager/cert-manager/pull/5199. (#5199, @irbekrm)</li> </ul>"},{"location":"troubleshooting/","title":"\u6545\u969c\u6392\u9664","text":"<p>\u5728\u672c\u8282\u4e2d\uff0c\u60a8\u5c06\u5b66\u4e60\u6545\u969c\u6392\u9664\u6280\u672f\uff0c\u8fd9\u4e9b\u6280\u672f\u5c06\u5e2e\u52a9\u60a8\u5728\u8bc1\u4e66\u9881\u53d1\u6216\u66f4\u65b0\u5931\u8d25\u65f6\u67e5\u627e\u6839\u672c\u539f\u56e0\u3002</p> <p>\u672c\u8282\u8fd8\u5305\u62ec\u4ee5\u4e0b\u6307\u5357:</p> <ul> <li>\u89e3\u51b3 ACME / Let's Encrypt \u8bc1\u4e66\u95ee\u9898: \u4e86\u89e3\u6709\u5173 ACME \u53d1\u5e03\u7a0b\u5e8f\u5982\u4f55\u5de5\u4f5c\u4ee5\u53ca\u5982\u4f55\u8bca\u65ad\u95ee\u9898\u7684\u66f4\u591a\u4fe1\u606f\u3002</li> <li>\u89e3\u51b3 Webhook \u7684\u95ee\u9898: \u5b66\u4e60\u5982\u4f55\u4f7f\u7528 cert-manager webhook \u8bca\u65ad\u95ee\u9898\u3002</li> </ul>"},{"location":"troubleshooting/#_2","title":"\u6982\u8ff0","text":"<p>\u5f53\u5bf9 cert-manager \u8fdb\u884c\u6545\u969c\u6392\u9664\u65f6\uff0c\u60a8\u6700\u597d\u7684\u670b\u53cb\u662f<code>kubectl describe</code>\uff0c\u8fd9\u5c06\u4e3a\u60a8\u63d0\u4f9b\u6709\u5173\u6e90\u4ee5\u53ca\u6700\u8fd1\u4e8b\u4ef6\u7684\u4fe1\u606f\u3002 \u4e0d\u5efa\u8bae\u4f7f\u7528\u65e5\u5fd7\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u65e5\u5fd7\u76f8\u5f53\u5197\u957f\uff0c\u53ea\u6709\u5728\u4ee5\u4e0b\u6b65\u9aa4\u4e0d\u80fd\u63d0\u4f9b\u5e2e\u52a9\u65f6\u624d\u5e94\u8be5\u67e5\u770b\u3002</p> <p>cert-manager \u7531\u591a\u4e2a\u4f4d\u4e8e Kubernetes \u96c6\u7fa4\u4e2d\u7684\u81ea\u5b9a\u4e49\u6e90\u7ec4\u6210\uff0c\u8fd9\u4e9b\u6e90\u94fe\u63a5\u5728\u4e00\u8d77\uff0c\u901a\u5e38\u662f\u7531\u5f7c\u6b64\u521b\u5efa\u7684\u3002 \u5f53\u8fd9\u6837\u7684\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u5b83\u5c06\u53cd\u6620\u5728 Kubernetes \u4e8b\u4ef6\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528<code>kubectl get event</code>\u770b\u5230\u8fd9\u4e9b\u6bcf\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u6216\u8005\u5728\u67e5\u770b\u5355\u4e2a\u6e90\u65f6\uff0c\u5728<code>kubectl describe</code>\u7684\u8f93\u51fa\u4e2d\u770b\u5230\u8fd9\u4e9b\u3002</p>"},{"location":"troubleshooting/#_3","title":"\u89e3\u51b3\u8bc1\u4e66\u8bf7\u6c42\u5931\u8d25\u7684\u95ee\u9898","text":"<p>\u5728\u8bf7\u6c42\u8bc1\u4e66\u65f6\u6d89\u53ca\u5230\u51e0\u4e2a\u6e90\u3002</p> <pre><code>  (  +---------+  )\n  (  | Ingress |  ) Optional                                              ACME Only!\n  (  +---------+  )\n         |                                                     |\n         |   +-------------+      +--------------------+       |  +-------+       +-----------+\n         |-&gt; | Certificate |----&gt; | CertificateRequest | ----&gt; |  | Order | ----&gt; | Challenge |\n             +-------------+      +--------------------+       |  +-------+       +-----------+\n                                                               |\n</code></pre> <p>\u8bc1\u4e66\u7ba1\u7406\u5668\u6d41\u90fd\u59cb\u4e8e\u4e00\u4e2a<code>Certificate</code>\u6e90\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u521b\u5efa\u8fd9\u4e2a\u6e90\uff0c\u5982\u679c\u4f60\u6709\u6b63\u786e\u7684\u6ce8\u91ca\u8bbe\u7f6e\uff0c\u4f60\u7684 Ingress \u6e90\u4f1a\u4e3a\u4f60\u505a\u8fd9\u4ef6\u4e8b\u3002</p>"},{"location":"troubleshooting/#1-certificate","title":"1. \u68c0\u67e5 Certificate \u6e90","text":"<p>\u9996\u5148\uff0c\u6211\u4eec\u5fc5\u987b\u68c0\u67e5\u662f\u5426\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u521b\u5efa\u4e86<code>Certificate</code>\u6e90\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>kubectl get certificate</code>\u6765\u83b7\u5f97\u8fd9\u4e9b\u3002</p> <pre><code>$ kubectl get certificate\nNAME                READY   AGE\nexample-com-tls     False   1h\n</code></pre> <p>\u5982\u679c\u6ca1\u6709\uff0c\u5e76\u4e14\u60a8\u8ba1\u5212\u4f7f\u7528ingress-shim:\u8bf7\u68c0\u67e5ingress \u6545\u969c\u6392\u9664\u6307\u5357\u4e2d\u7684\u5165 ingress \u6ce8\u91ca\u3002 \u5982\u679c\u60a8\u6ca1\u6709\u4f7f\u7528 ingress-shim:\u8bf7\u68c0\u67e5\u521b\u5efa\u8bc1\u4e66\u547d\u4ee4\u7684\u8f93\u51fa\u3002</p> <p>\u5982\u679c\u4f60\u770b\u5230\u4e00\u4e2a\u5c31\u7eea\u72b6\u6001\u4e3a<code>False</code>\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528<code>kubectl describe certificate</code>\u83b7\u5f97\u66f4\u591a\u4fe1\u606f\uff0c\u5982\u679c\u72b6\u6001\u4e3a<code>True</code>\uff0c\u8fd9\u610f\u5473\u7740\u8bc1\u4e66\u7ba1\u7406\u5668\u5df2\u7ecf\u6210\u529f\u9881\u53d1\u4e86\u8bc1\u4e66\u3002</p> <pre><code>$ kubectl describe certificate &lt;certificate-name&gt;\n[...]\nStatus:\n  Conditions:\n    Last Transition Time:        2020-05-15T21:45:22Z\n    Message:                     Issuing certificate as Secret does not exist\n    Reason:                      DoesNotExist\n    Status:                      False\n    Type:                        Ready\n  Next Private Key Secret Name:  example-tls-wtlww\nEvents:\n  Type    Reason     Age   From          Message\n  ----    ------     ----  ----          -------\n  Normal  Issuing    105s  cert-manager  Issuing certificate as Secret does not exist\n  Normal  Generated  105s  cert-manager  Stored new private key in temporary Secret resource \"example-tls-wtlww\"\n  Normal  Requested  104s  cert-manager  Created new CertificateRequest resource \"example-tls-bw5t9\"\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u60a8\u5c06\u5728<code>Status</code>\u4e0b\u627e\u5230\u6709\u5173\u5f53\u524d\u8bc1\u4e66\u72b6\u6001\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u4ee5\u53ca\u5728<code>Events</code>\u4e0b\u5173\u4e8e\u53d1\u751f\u4e86\u4ec0\u4e48\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u4e24\u8005\u90fd\u5c06\u5e2e\u52a9\u60a8\u786e\u5b9a\u8bc1\u4e66\u7684\u5f53\u524d\u72b6\u6001\u3002 \u6700\u540e\u4e00\u4e2a\u72b6\u6001\u662f<code>Created new CertificateRequest resource</code>\uff0c\u503c\u5f97\u770b\u770b<code>CertificateRequest</code>\u5904\u4e8e\u54ea\u4e2a\u72b6\u6001\uff0c\u4ee5\u83b7\u5f97\u5173\u4e8e\u4e3a\u4ec0\u4e48\u6211\u4eec\u7684<code>Certificate</code>\u6ca1\u6709\u5f97\u5230\u9881\u53d1\u7684\u66f4\u591a\u4fe1\u606f\u3002</p>"},{"location":"troubleshooting/#2-certificaterequest","title":"2. \u68c0\u67e5 <code>CertificateRequest</code>","text":"<p><code>CertificateRequest</code>\u6e90\u8868\u793a\u8bc1\u4e66\u7ba1\u7406\u5668\u4e2d\u7684 CSR\uff0c\u5e76\u5c06\u6b64 CSR \u4f20\u9012\u7ed9\u9881\u53d1\u8005\u3002 \u60a8\u53ef\u4ee5\u5728<code>Certificate</code> \u4e8b\u4ef6\u65e5\u5fd7\u4e2d\u627e\u5230<code>CertificateRequest</code>\u7684\u540d\u79f0\uff0c\u6216\u8005\u4f7f\u7528<code>kubectl get certificaterequest</code></p> <p>\u4e3a\u4e86\u83b7\u5f97\u66f4\u591a\u4fe1\u606f\uff0c\u6211\u4eec\u518d\u6b21\u8fd0\u884c<code>kubectl describe</code>:</p> <pre><code>$ kubectl describe certificaterequest &lt;CertificateRequest name&gt;\nAPI Version:  cert-manager.io/v1\nKind:         CertificateRequest\nSpec:\n  Request: [...]\n  Issuer Ref:\n    Group:  cert-manager.io\n    Kind:   ClusterIssuer\n    Name:   letencrypt-production\nStatus:\n  Conditions:\n    Last Transition Time:  2020-05-15T21:45:36Z\n    Message:               Waiting on certificate issuance from order example-tls-fqtfg-1165244518: \"pending\"\n    Reason:                Pending\n    Status:                False\n    Type:                  Ready\nEvents:\n  Type    Reason        Age    From          Message\n  ----    ------        ----   ----          -------\n  Normal  OrderCreated  8m20s  cert-manager  Created Order resource example-tls-fqtfg-1165244518\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u770b\u5230\u6709\u5173\u53d1\u884c\u8005\u914d\u7f6e\u548c\u53d1\u884c\u8005\u54cd\u5e94\u7684\u4efb\u4f55\u95ee\u9898\u3002</p>"},{"location":"troubleshooting/#3","title":"3. \u68c0\u67e5\u53d1\u884c\u8005\u72b6\u6001","text":"<p>\u5982\u679c\u5728\u4e0a\u9762\u7684\u6b65\u9aa4\u4e2d\uff0c\u4f60\u770b\u5230\u4e00\u4e2a\u53d1\u884c\u8005\u6ca1\u6709\u51c6\u5907\u597d\u9519\u8bef\uff0c\u4f60\u53ef\u4ee5\u5bf9(\u96c6\u7fa4)\u53d1\u884c\u8005\u6e90\u6267\u884c\u76f8\u540c\u7684\u6b65\u9aa4:</p> <pre><code>$ kubectl describe issuer &lt;Issuer name&gt;\n$ kubectl describe clusterissuer &lt;ClusterIssuer name&gt;\n</code></pre> <p>\u8fd9\u5c06\u5141\u8bb8\u60a8\u83b7\u5f97\u6709\u5173\u60a8\u7684\u53d1\u884c\u8005\u7684\u5e10\u6237\u6216\u7f51\u7edc\u95ee\u9898\u7684\u4efb\u4f55\u9519\u8bef\u6d88\u606f\u3002 ACME \u9881\u53d1\u8005\u7684\u6545\u969c\u8bca\u65ad\u8be6\u89c1\u9881\u53d1 ACME \u8bc1\u4e66\u7684\u6545\u969c\u8bca\u65ad\u3002</p>"},{"location":"troubleshooting/#4-acme","title":"4. ACME \u6545\u969c\u6392\u9664","text":"<p>ACME(\u4f8b\u5982\uff0cLet's Encrypt)\u53d1\u884c\u8005\u5728\u8bc1\u4e66\u7ba1\u7406\u5668\u4e2d\u6709 2 \u4e2a\u989d\u5916\u7684\u6e90:<code>Orders</code> \u548c <code>Challenges</code>\u3002 \u5728\u9881\u53d1 ACME \u8bc1\u4e66\u7684\u7591\u96be\u89e3\u7b54\u4e2d\u63cf\u8ff0\u4e86\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002</p>"},{"location":"troubleshooting/acme/","title":"ACME / Let's Encrypt \u8bc1\u4e66\u95ee\u9898\u8bca\u65ad","text":"<p>\u4e86\u89e3\u5982\u4f55\u5728\u8bc1\u4e66\u7ba1\u7406\u5668\u65e0\u6cd5\u66f4\u65b0 ACME / Let's Encrypt \u8bc1\u4e66\u65f6\u8bca\u65ad\u95ee\u9898\u3002</p>"},{"location":"troubleshooting/acme/#_1","title":"\u6982\u8ff0","text":"<p>\u5f53\u8bf7\u6c42 ACME \u8bc1\u4e66\u65f6\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u521b\u5efa<code>Order</code> \u548c <code>Challenges</code>\u6765\u5b8c\u6210\u8bf7\u6c42\u3002\u56e0\u6b64\uff0c\u5982\u679c\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7684\u8d44\u6e90\u8fdb\u884c\u8c03\u67e5\u548c\u8c03\u8bd5\u3002 \u60a8\u53ef\u4ee5\u5728\u6982\u5ff5\u9875\u4e2d\u9605\u8bfb\u6709\u5173\u8fd9\u4e9b\u8d44\u6e90\u7684\u66f4\u591a\u4fe1\u606f\u3002</p> <p>\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u60a8\u53ef\u80fd\u5e94\u8be5\u770b\u4e00\u4e0b\u6211\u4eec\u7684\u901a\u7528\u6545\u969c\u6392\u9664\u6307\u5357</p>"},{"location":"troubleshooting/acme/#1","title":"1. \u6545\u969c\u8bca\u65ad(\u96c6\u7fa4)\u9881\u53d1\u8005","text":"<p>\u9996\u5148\uff0c\u68c0\u67e5\u60a8\u6b63\u5728\u4f7f\u7528\u7684(\u96c6\u7fa4)\u9881\u53d1\u8005\u662f\u5426\u5904\u4e8e\u5c31\u7eea\u72b6\u6001:</p> <pre><code>$ kubectl get issuer\n$ kubectl get clusterissuer\nNAME               READY   AGE\nletsencrypt        True    38m\nletsencrypt-http   False    32m\n</code></pre> <p>\u5982\u679c\u4f60\u770b\u5230<code>False</code>\uff0c\u4f7f\u7528<code>kubectl describe</code>\u68c0\u67e5\u72b6\u6001\u3002\u4f8b\u5982:</p> <pre><code>$ kubectl describe issuer letsencrypt-http\n$ kubectl describe clusterissuer letsencrypt-http\nName:         letsencrypt\nAPI Version:  cert-manager.io/v1\nKind:         Issuer\nSpec:\n  Acme:\n    Email:            cert-manager@example.com\n    Private Key Secret Ref:\n      Name:  letsencrypt\n    Server:  https://acme-staging-v02.api.letsencrypt.org/directory\nStatus:\n  Acme:\n  Conditions:\n    Message:               Failed to update ACME account:400 urn:ietf:params:acme:error:invalidEmail: Unable to update account :: invalid contact domain. Contact emails @example.com are forbidden\n    Reason:                ErrUpdateACMEAccount\n    Status:                False\n    Type:                  Ready\nEvents:\n  Type     Reason                Age                  From          Message\n  ----     ------                ----                 ----          -------\n  Warning  ErrUpdateACMEAccount  101s (x3 over 106s)  cert-manager  Failed to update ACME account:400 urn:ietf:params:acme:error:invalidEmail: Unable to update account :: invalid contact domain. Contact emails @example.com are forbidden\n</code></pre>"},{"location":"troubleshooting/acme/#_2","title":"\u5e38\u89c1\u7684\u9519\u8bef","text":"<p>Failed to update ACME account:400 urn:ietf:params:acme:error:invalidEmail</p> <p>\u60a8\u5728<code>Issuer</code>\u914d\u7f6e\u4e2d\u6307\u5b9a\u7684\u7535\u5b50\u90ae\u4ef6\u65e0\u6548\u3002</p> <p>Error initializing issuer: Failed to register ACME account: secrets 'acme-key' already exists</p> <p>\u53ef\u80fd\u6709\u6765\u81ea\u524d\u4e00\u4e2a<code>Issuer</code>\u7684\u5269\u4f59\u5e10\u6237\u4e0d\u518d\u6709\u6548\uff0c\u60a8\u5e94\u8be5\u5220\u9664<code>secret</code>\uff0c\u4ee5\u4fbf\u91cd\u65b0\u521b\u5efa\u5b83\u3002</p> <p>Error accepting challenge: 400 urn:ietf:params:acme:error:malformed: Unable to update challenge :: authorization must be pending</p> <p>\u8fd9\u8868\u660e\u5f53\u8bc1\u4e66\u7ba1\u7406\u5668\u5411ACME\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\u4ee5\u63a5\u53d7\u8d28\u8be2\u65f6\uff0c\u6388\u6743\u5e76\u6ca1\u6709\u5904\u4e8e'pending' \u72b6\u6001\u3002 \u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u57df\u9a8c\u8bc1\u5df2\u7ecf\u5931\u8d25\uff0c\u6388\u6743\u88ab\u6807\u8bb0\u4e3a'invalid'\u3002 \u5728<code>Order</code> \u6216 <code>Challenge</code> \u7684\u72b6\u6001\u4e0a\u68c0\u67e5\u6388\u6743URL\uff0c\u4ee5\u67e5\u770b\u6388\u6743\u7684\u72b6\u6001\u548c\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\u3002</p>"},{"location":"troubleshooting/acme/#2-orders","title":"2. \u6545\u969c\u8bca\u65ad Orders","text":"<p>\u5f53\u6211\u4eec\u5728<code>CertificateRequest</code>\u8d44\u6e90\u4e0a\u8fd0\u884c\u63cf\u8ff0\u65f6\uff0c\u6211\u4eec\u770b\u5230\u4e00\u4e2a<code>Order</code>\u5df2\u7ecf\u88ab\u521b\u5efa:</p> <pre><code>$ kubectl describe certificaterequest example-com-2745722290\n...\nEvents:\n  Type    Reason        Age   From          Message\n  ----    ------        ----  ----          -------\n  Normal  OrderCreated  5s    cert-manager  Created Order resource default/example-com-2745722290-439160286\n</code></pre> <p>\u8ba2\u5355\u662f\u5411 ACME \u5b9e\u4f8b\u53d1\u51fa\u8bc1\u4e66\u7684\u8bf7\u6c42\u3002 \u901a\u8fc7\u5728\u7279\u5b9a\u7684\u987a\u5e8f\u4e0a\u8fd0\u884c<code>kubectl describe order</code>\uff0c\u53ef\u4ee5\u6536\u96c6\u5230\u8fdb\u7a0b\u4e2d\u5931\u8d25\u7684\u4fe1\u606f:</p> <pre><code>$ kubectl describe order example-com-2745722290-439160286\n...\nReason:\nState:         pending\nURL:           https://acme-v02.api.letsencrypt.org/acme/order/41123272/265506123\nEvents:\n  Type    Reason   Age   From          Message\n  ----    ------   ----  ----          -------\n  Normal  Created  1m    cert-manager  Created Challenge resource \"example-com-2745722290-439160286-0\" for domain \"test1.example.com\"\n  Normal  Created  1m    cert-manager  Created Challenge resource \"example-com-2745722290-439160286-1\" for domain \"test2.example.com\"\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8bc1\u4e66\u7ba1\u7406\u5668\u521b\u5efa\u4e86\u4e24\u4e2a Challenge \u8d44\u6e90\u6765\u9a8c\u8bc1\u6211\u4eec\u63a7\u5236\u7279\u5b9a\u7684\u57df\uff0c\u8fd9\u662f ACME \u83b7\u53d6\u5df2\u7b7e\u540d\u8bc1\u4e66\u7684\u8981\u6c42\u3002</p> <p>\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c<code>kubectl describe challenge example-com-2745722290-439160286-0</code>\u6765\u8fdb\u4e00\u6b65\u8c03\u8bd5\u8ba2\u5355\u7684\u8fdb\u5ea6\u3002</p> <p>\u4e00\u65e6\u8ba2\u5355\u6210\u529f\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u5982\u4e0b\u6240\u793a\u7684\u4e8b\u4ef6:</p> <pre><code>$ kubectl describe order example-com-2745722290-439160286\n...\nReason:\nState:         valid\nURL:           https://acme-v02.api.letsencrypt.org/acme/order/41123272/265506123\nEvents:\n  Type    Reason      Age   From          Message\n  ----    ------      ----  ----          -------\n  Normal  Created     72s   cert-manager  Created Challenge resource \"example-com-2745722290-439160286-0\" for domain \"test1.example.com\"\nNormal  Created     72s   cert-manager  Created Challenge resource \"example-com-2745722290-439160286-1\" for domain \"test2.example.com\"\nNormal  OrderValid  4s    cert-manager  Order completed successfully\n</code></pre> <p>\u60a8\u53ef\u4ee5\u4ece<code>Order</code>\u7684\u72b6\u6001\u4e2d\u770b\u5230\u6709\u5173ACME \u6388\u6743\u72b6\u6001\u7684\u4e00\u4e9b\u9644\u52a0\u4fe1\u606f\uff0c\u9700\u8981\u4f7f\u7528\u6388\u6743 URL \u4f5c\u4e3a\u6b64\u8ba2\u5355\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u9a8c\u8bc1:</p> <pre><code>$ kubectl get order &lt;order-name&gt; -ojsonpath='{.status.authorizations[x].url}'\n</code></pre> <p>\u5982\u679c\u8ba2\u5355\u6ca1\u6709\u6210\u529f\u5b8c\u6210\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728<code>Challenge</code>\u8d44\u6e90\u4e0a\u8fd0\u884c<code>kubectl describe</code>\u6765\u8c03\u8bd5\u8ba2\u5355\u7684\u6311\u6218\uff0c\u8be5\u8d44\u6e90\u5c06\u5728\u4ee5\u4e0b\u6b65\u9aa4\u4e2d\u63cf\u8ff0\u3002</p>"},{"location":"troubleshooting/acme/#3-challenges","title":"3. \u6545\u969c\u8bca\u65ad Challenges","text":"<p>\u4e3a\u4e86\u786e\u5b9a ACME \u8ba2\u5355\u6ca1\u6709\u5b8c\u6210\u7684\u539f\u56e0\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 cert-manager \u521b\u5efa\u7684<code>Challenge</code>\u8d44\u6e90\u8fdb\u884c\u8c03\u8bd5\u3002</p> <p>\u4e3a\u4e86\u786e\u5b9a\u54ea\u4e2a <code>Challenge</code>\u5931\u8d25\u4e86\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c<code>kubectl get challenges</code>:</p> <pre><code>$ kubectl get challenges\n...\nNAME                                 STATE     DOMAIN            REASON                                     AGE\nexample-com-2745722290-4391602865-0  pending   example.com       Waiting for dns-01 challenge propagation   22s\n</code></pre> <p>\u8fd9\u8868\u660e\u6311\u6218\u5df2\u7ecf\u4f7f\u7528 DNS01 \u6c42\u89e3\u5668\u6210\u529f\u63d0\u51fa\uff0c\u73b0\u5728 cert-manager \u6b63\u5728\u7b49\u5f85'self check'\u901a\u8fc7\u3002</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528<code>kubectl describe</code>\u6765\u83b7\u5f97\u66f4\u591a\u5173\u4e8e\u6311\u6218\u53ca\u5176\u751f\u547d\u5468\u671f\u7684\u4fe1\u606f:</p> <pre><code>$ kubectl describe challenge example-com-2745722290-4391602865-0\n...\nStatus:\n  Presented:   true\nProcessing:  true\nReason:      Waiting for dns-01 challenge propagation\n  State:       pending\nEvents:\n  Type    Reason     Age   From          Message\n  ----    ------     ----  ----          -------\n  Normal  Started    19s   cert-manager  Challenge scheduled for processing\n  Normal  Presented  16s   cert-manager  Presented challenge using dns-01 challenge mechanism\n</code></pre> <p>\u5173\u4e8e\u6bcf\u4e2a\u6311\u6218\u72b6\u6001\u7684\u8fdb\u5c55\u5c06\u88ab\u8bb0\u5f55\u4e3a\u4e8b\u4ef6\u6216\u5728\u6311\u6218\u7684<code>status</code>\u5757\u4e0a(\u5982\u4e0a\u56fe\u6240\u793a)\u3002</p> <p>\u5728 DNS01 \u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u53d1\u73b0\u4efb\u4f55\u9519\u8bef\u4ece\u4f60\u7684 DNS \u63d0\u4f9b\u5546\u5728\u8fd9\u91cc\u3002</p> <p>\u5728\u8bc1\u4e66\u7ba1\u7406\u5668\u5411 ACME \u63d0\u4f9b\u7a0b\u5e8f\u63d0\u51fa\u6311\u6218\u4e4b\u524d\uff0cHTTP01 \u548c DNS01 \u90fd\u8981\u5148\u8fdb\u884c\"self-check\"\u3002 \u8fd9\u6837\u505a\u4e0d\u662f\u4e3a\u4e86\u8ba9\u7531\u4e8e DNS \u6216\u8d1f\u8f7d\u5747\u8861\u5668\u4f20\u64ad\u800c\u5bfc\u81f4\u6311\u6218\u5931\u8d25\u800c\u4f7f ACME \u63d0\u4f9b\u7a0b\u5e8f\u8fc7\u8f7d\u3002 \u8fd9\u7684\u72b6\u6001\u53ef\u4ee5\u5728 <code>description</code> \u7684 <code>status</code> \u5757\u4e2d\u627e\u5230:</p> <pre><code>$ kubectl describe challenge\n[...]\nStatus:\n  Presented:   true\n  Processing:  true\n  Reason:      Waiting for http-01 challenge propagation: failed to perform self check GET request 'http://example.com/.well-known/acme-challenge/_fgdLz0i3TFiZW4LBjuhjgd5nTOkaMBhxYmTY': Get \"http://example.com/.well-known/acme-challenge/_fgdLz0i3TFiZW4LBjuhjgd5nTOkaMBhxYmTY: remote error: tls: handshake failure\n  State:       pending\n[...]\n</code></pre> <p>\u5728\u672c\u4f8b\u4e2d\uff0c\u7531\u4e8e\u7f51\u7edc\u95ee\u9898\uff0cHTTP01 \u68c0\u67e5\u5931\u8d25\u3002 \u5728\u8fd9\u91cc\uff0c\u60a8\u8fd8\u5c06\u770b\u5230\u6765\u81ea DNS \u63d0\u4f9b\u5546\u7684\u4efb\u4f55\u9519\u8bef\u3002</p> <p>\u60a8\u8fd8\u53ef\u4ee5\u4ece<code>Challenge</code>\u7684\u72b6\u6001\u4e2d\u770b\u5230\u5173\u4e8e\u6311\u6218\u5e94\u8be5\u4f7f\u7528\u6388\u6743 URL \u9a8c\u8bc1\u7684ACME \u6388\u6743\u72b6\u6001\u7684\u4e00\u4e9b\u9644\u52a0\u4fe1\u606f:</p> <pre><code>$ kubectl get challenge &lt;challenge-name&gt; -ojsonpath='{.spec.authorizationURL}'\n</code></pre>"},{"location":"troubleshooting/acme/#http01","title":"HTTP01 \u6545\u969c\u6392\u9664","text":"<p>\u9996\u5148\u68c0\u67e5\u60a8\u662f\u5426\u53ef\u4ee5\u4ece\u516c\u5171\u4e92\u8054\u7f51\u4e0a\u770b\u5230\u6311\u6218 URL\uff0c\u5982\u679c\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u8bf7\u68c0\u67e5\u60a8\u7684\u5165\u53e3\u548c\u9632\u706b\u5899\u914d\u7f6e\u4ee5\u53ca\u4e3a\u89e3\u51b3 ACME \u6311\u6218\u800c\u521b\u5efa\u7684\u670d\u52a1\u548c pod cert-manager\u3002 \u5982\u679c\u8fd9\u53ef\u4ee5\u5de5\u4f5c\uff0c\u68c0\u67e5\u60a8\u7684\u96c6\u7fa4\u662f\u5426\u4e5f\u53ef\u4ee5\u770b\u5230\u5b83\u3002\u4ece Pod \u5185\u90e8\u8fdb\u884c\u6d4b\u8bd5\u662f\u5f88\u91cd\u8981\u7684\u3002\u5982\u679c\u4f60\u5f97\u5230\u4e00\u4e2a\u8fde\u63a5\u9519\u8bef\uff0c\u5efa\u8bae\u68c0\u67e5\u96c6\u7fa4\u7684\u7f51\u7edc\u914d\u7f6e\u3002 \u5982\u679c\u4f60\u6536\u5230\u4e00\u4e2a<code>tls: handshake failure</code>\uff0c\u8bf7\u5c1d\u8bd5\u5728 Ingress \u6216 Certificate \u8d44\u6e90\u4e0a\u8bbe\u7f6e\u6ce8\u91ca<code>cert-manager.io/issue-temporary-certificate: \"true\"</code>\u3002\u8fd9\u5c06\u5728\u9881\u53d1\u5b9e\u9645\u8bc1\u4e66\u4e4b\u524d\u4e3a\u5165\u53e3\u63a7\u5236\u5668\u9881\u53d1\u4e00\u4e2a\u4e34\u65f6\u7684\u81ea\u7b7e\u540d\u8bc1\u4e66\u3002 \u5982\u679c\u60a8\u4ecd\u7136\u6709\u95ee\u9898\uff0c\u53ef\u80fd\u662f\u60a8\u7684\u5165\u53e3\u63a7\u5236\u5668\u5904\u7406\u76f8\u540c\u4e3b\u673a\u540d\u7684\u591a\u4e2a\u8d44\u6e90\u65f6\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u9700\u8981\u6ce8\u91ca<code>acme.cert-manager.io/http01-edit-in-place: \"true\"</code>\u3002</p> <p>\u4f8b\u5982\uff0c\u5f53\u4f7f\u7528 GKE \u548c\u8c37\u6b4c\u4e91\u8d1f\u8f7d\u5747\u8861\u5668\u65f6\uff0c\u5efa\u8bae\u8bbe\u7f6e:</p> <pre><code>cert-manager.io/issue-temporary-certificate: \"true\"\nacme.cert-manager.io/http01-edit-in-place: \"true\"\n</code></pre> <p>\u8fd9\u5c06\u5141\u8bb8\u8c37\u6b4c\u4e91\u8d1f\u8f7d\u5747\u8861\u5668\u4f7f\u7528\u4e34\u65f6\u8bc1\u4e66\u6b63\u786e\u4f20\u64ad HTTPS \u7aef\u70b9\uff0c<code>http01-edit-in-place</code>\u90e8\u5206\u5c06\u963b\u6b62 GKE \u4e3a\u6311\u6218\u7aef\u70b9\u5206\u914d\u7b2c\u4e8c\u4e2a IP \u5730\u5740\u3002</p>"},{"location":"troubleshooting/acme/#404","title":"404 \u72b6\u6001\u7801","text":"<p>\u5982\u679c\u60a8\u7684\u6311\u6218\u81ea\u68c0\u5931\u8d25\uff0c\u51fa\u73b0 404 not found \u9519\u8bef\u3002\u8bf7\u52a1\u5fc5\u68c0\u67e5\u4ee5\u4e0b\u5185\u5bb9:</p> <ul> <li>\u4f60\u53ef\u4ee5\u4ece\u516c\u5171\u4e92\u8054\u7f51\u4e0a\u8bbf\u95ee URL</li> <li>ACME \u6c42\u89e3\u5668 Pod \u5df2\u7ecf\u542f\u52a8\u5e76\u8fd0\u884c</li> <li>\u4f7f\u7528<code>kubectl describe ingress</code>\u6765\u68c0\u67e5 HTTP01 \u6c42\u89e3\u5668\u5165\u53e3\u7684\u72b6\u6001\u3002(\u9664\u975e\u60a8\u4f7f\u7528<code>acme.cert-manager.io/http01-edit-in-place</code>\uff0c\u7136\u540e\u68c0\u67e5\u4e0e\u60a8\u7684\u57df\u76f8\u540c\u7684\u5165\u53e3)</li> </ul>"},{"location":"troubleshooting/acme/#dns01","title":"DNS01 \u6545\u969c\u6392\u9664","text":"<p>\u5982\u679c\u60a8\u6ca1\u6709\u770b\u5230\u5173\u4e8e\u60a8\u7684 DNS \u63d0\u4f9b\u5546\u7684\u9519\u8bef\u4e8b\u4ef6\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5\u4ee5\u4e0b\u68c0\u67e5\u60a8\u662f\u5426\u53ef\u4ee5\u4ece\u516c\u5171\u4e92\u8054\u7f51\u6216\u60a8\u7684 DNS \u63d0\u4f9b\u5546\u7684\u754c\u9762\u4e2d\u770b\u5230<code>_acme_challenge.domain</code> TXT DNS \u8bb0\u5f55\u3002 cert-manager \u5c06\u901a\u8fc7\u67e5\u8be2\u96c6\u7fa4\u7684 DNS \u89e3\u51b3\u7a0b\u5e8f\u6765\u68c0\u67e5 DNS \u8bb0\u5f55\u662f\u5426\u5df2\u7ecf\u4f20\u64ad\u3002 \u5982\u679c\u4f60\u80fd\u4ece\u516c\u5171\u4e92\u8054\u7f51\u4e0a\u770b\u5230\u5b83\uff0c\u4f46\u4e0d\u80fd\u4ece\u96c6\u7fa4\u5185\u90e8\u770b\u5230\u5b83\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u6539\u53d8\u81ea\u6211\u68c0\u67e5\u7684 DNS \u670d\u52a1\u5668\uff0c\u56e0\u4e3a\u4e00\u4e9b\u4e91\u63d0\u4f9b\u5546\u4f1a\u5728\u5185\u90e8\u8986\u76d6 DNS\u3002</p>"},{"location":"troubleshooting/acme/#_3","title":"\u8bc1\u4e66\u7ba1\u7406\u5668\u4e3a\u60a8\u7684\u57df\u540d\u8bc6\u522b\u4e86\u9519\u8bef\u7684\u533a\u57df","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ccert-manager \u4f7f\u7528 SOA(\u6388\u6743\u5f00\u59cb)\u8bb0\u5f55\u6765\u786e\u5b9a\u5728\u60a8\u7684 DNS \u63d0\u4f9b\u5546\u4f7f\u7528\u54ea\u4e2a\u533a\u57df\u540d\u79f0\u3002 \u4e00\u4e9b DNS \u89e3\u6790\u5668\u5c06\u8fc7\u6ee4\u6b64\u4fe1\u606f\uff0c\u5982\u679c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b cert-manager \u65e0\u6cd5\u786e\u5b9a\u533a\u57df\uff0c\u5efa\u8bae\u4e3a DNS01 \u81ea\u68c0\u66f4\u6539 DNS \u670d\u52a1\u5668\u3002</p> <p>\u5982\u679c\u60a8\u4f7f\u7528<code>dnsmasq</code>\u4f5c\u4e3a\u60a8\u7684 DNS \u670d\u52a1\u5668\uff0c\u5982\u679c\u60a8\u4f7f\u7528<code>--filterwin2k</code>\u6807\u5fd7\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 \u5728OpenWRT \u4e2d\u6709\u4e00\u4e2a<code>filterwin2k</code>\u914d\u7f6e\u9009\u9879\u3002 \u5728LuCI \u4e2d\u6709\u4e00\u4e2a\"Filter useless\"\u9009\u9879\u3002 \u901a\u8fc7\u542f\u7528\u8fd9\u4e2a\u6807\u5fd7\uff0c<code>dnsmasq</code>\u5c06\u5220\u9664\u6240\u6709<code>SOA</code>\u8bb0\u5f55\u3002</p>"},{"location":"troubleshooting/acme/#2020-3-lets-encrypt-caa","title":"2020 \u5e74 3 \u6708 Let's Encrypt CAA \u590d\u67e5\u6f0f\u6d1e","text":"<p>\u57283 \u6708 4 \u65e5\u7684\u516c\u544aLet's Encrypt \u5c06\u64a4\u9500\u4e00\u4e9b\u8bc1\u4e66\uff0c\u56e0\u4e3a\u4ed6\u4eec\u9a8c\u8bc1 CAA \u8bb0\u5f55\u7684\u65b9\u5f0f\u5b58\u5728\u6f0f\u6d1e\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5de5\u5177\u6765\u5206\u6790\u60a8\u73b0\u6709\u7684\u8bc1\u4e66\u7ba1\u7406\u5668\u7ba1\u7406\u7684\u8bc1\u4e66\uff0c\u5e76\u5c06\u5176\u5e8f\u5217\u53f7\u4e0e\u5df2\u516c\u5e03\u7684\u5df2\u64a4\u9500\u8bc1\u4e66\u5217\u8868\u8fdb\u884c\u6bd4\u8f83\u3002 \u5efa\u8bae Let's Encrypt &amp; cert-manager \u7684\u6240\u6709\u7528\u6237\u4f7f\u7528\u6b64\u5de5\u5177\u8fdb\u884c\u68c0\u67e5\uff0c\u4ee5\u786e\u4fdd\u4ed6\u4eec\u5728\u96c6\u7fa4\u4e2d\u6ca1\u6709\u9047\u5230\u4efb\u4f55\u65e0\u6548\u7684\u8bc1\u4e66\u9519\u8bef\u3002 \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u68c0\u67e5\u5de5\u5177\u7684\u526f\u672c: https://github.com/jetstack/letsencrypt-caa-bug-checker\u3002</p>"},{"location":"troubleshooting/webhook/","title":"\u8bc1\u4e66\u7ba1\u7406\u5668 Webhook Pod \u7684\u6743\u5a01\u8c03\u8bd5\u6307\u5357","text":"<p>cert-manager webhook \u662f\u4e00\u4e2a pod\uff0c\u4f5c\u4e3a cert-manager \u5b89\u88c5\u7684\u4e00\u90e8\u5206\u8fd0\u884c\u3002 \u5f53\u4f7f\u7528<code>kubectl</code>\u5e94\u7528\u6e05\u5355\u65f6\uff0cKubernetes API \u670d\u52a1\u5668\u901a\u8fc7 TLS \u8c03\u7528 cert-manager webhook \u6765\u9a8c\u8bc1\u6e05\u5355\u3002 \u672c\u6307\u5357\u5e2e\u52a9\u60a8\u8c03\u8bd5 Kubernetes API \u670d\u52a1\u5668\u548c cert-manager webhook pod \u4e4b\u95f4\u7684\u901a\u4fe1\u95ee\u9898\u3002</p> <p>\u6b64\u9875\u4e2d\u5217\u51fa\u7684\u9519\u8bef\u6d88\u606f\u662f\u5728\u5b89\u88c5\u6216\u5347\u7ea7 cert-manager \u65f6\u9047\u5230\u7684\uff0c\u6216\u8005\u5728\u5c1d\u8bd5\u521b\u5efa\u8bc1\u4e66\u3001\u9881\u53d1\u8005\u6216\u4efb\u4f55\u5176\u4ed6 cert-manager \u81ea\u5b9a\u4e49\u8d44\u6e90\u65f6\u5728\u5b89\u88c5\u6216\u5347\u7ea7 cert-manager \u540e\u4e0d\u4e45\u9047\u5230\u7684\u3002</p> <p>\u5728\u4e0b\u56fe\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5728\u4f7f\u7528 cert-manager webhook \u8c03\u8bd5\u95ee\u9898\u65f6\u7684\u5e38\u89c1\u6a21\u5f0f:\u5f53\u521b\u5efa cert-manager \u81ea\u5b9a\u4e49\u8d44\u6e90\u65f6\uff0cAPI \u670d\u52a1\u5668\u901a\u8fc7 TLS \u8fde\u63a5\u5230 cert-manager webhook pod\u3002 \u7ea2\u8272\u53c9\u8868\u793a API \u670d\u52a1\u5668\u4e0e webhook \u901a\u4fe1\u5931\u8d25\u3002</p> <p></p> <p>\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\u5c06\u4ecb\u7ecd\u60a8\u53ef\u80fd\u9047\u5230\u7684\u9519\u8bef\u6d88\u606f\u3002</p>"},{"location":"troubleshooting/webhook/#error-connect-connection-refused","title":"Error: <code>connect: connection refused</code>","text":"<p>This issue was reported in 4 GitHub issues (#2736, #3133, #3445, #4425), was reported in 1 GitHub issue in an external project (<code>aws-load-balancer-controller#1563</code>), on Stack Overflow (<code>serverfault#1076563</code>), and was mentioned in 13 Slack messages that can be listed with the search <code>in:#cert-manager in:#cert-manager-dev \":443: connect: connection refused\"</code>. This error message can also be found in other projects that are building webhooks (<code>kubewarden-controller#110</code>).</p> <p>Shortly after installing or upgrading cert-manager, you may hit this error when creating a Certificate, Issuer, or any other cert-manager custom resource. For example, creating an Issuer resource with the following command:</p> <pre><code>kubectl apply -f- &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: example\nspec:\n  selfSigned: {}\nEOF\n</code></pre> <p>shows the following error message:</p> <pre><code>Error from server (InternalError): error when creating \"STDIN\":\n  Internal error occurred: failed calling webhook \"webhook.cert-manager.io\": failed to call webhook:\n    Post \"https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=10s\":\n      dial tcp 10.96.20.99:443: connect: connection refused\n</code></pre> <p>When installing or upgrading cert-manager 1.5.0 and above with Helm, a very similar error message may appear when running <code>helm install</code> or <code>helm upgrade</code>:</p> <pre><code>Error: INSTALLATION FAILED: Internal error occurred:\n  failed calling webhook \"webhook.cert-manager.io\": failed to call webhook:\n    Post \"https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=10s\":\n      dial tcp 10.96.20.99:443: connect: connection refused\n</code></pre> <p>The message \"connection refused\" happens when the API server tries to establish a TCP connection with the cert-manager-webhook. In TCP terms, the API server sent the <code>SYN</code> packet to start the TCP handshake, and received an <code>RST</code> packet in return.</p> <p>If we were to use <code>tcpdump</code> inside the control plane node where the API server is running, we would see a packet returned to the API server:</p> <pre><code>192.168.1.43 (apiserver)   -&gt; 10.96.20.99 (webhook pod)  TCP   59466 \u2192 443 [SYN]\n10.96.20.99  (webhook pod) -&gt; 192.168.1.43 (apiserver)   TCP   443 \u2192 59466 [RST, ACK]\n</code></pre> <p>The <code>RST</code> packet is sent by the Linux kernel when nothing is listening to the requested port. The <code>RST</code> packet can also be returned by one of the TCP hops, e.g., a firewall, as detailed in the Stack Overflow page What can be the reasons of connection refused errors?</p> <p>Note that firewalls usually don't return an <code>RST</code> packet; they usually drop the <code>SYN</code> packet entirely, and you end up with the error message <code>i/o timeout</code> or <code>context deadline exceeded</code>. If that is the case, continue your investigation with the section Error: <code>i/o timeout</code> (connectivity issue) and Error: <code>context deadline exceeded</code> respectively.</p> <p>Let's eliminate the possible causes from the closest to the source of the TCP connection (the API server) to its destination (the pod <code>cert-manager-webhook</code>).</p> <p>Let's imagine that the name <code>cert-manager-webhook.cert-manager.svc</code> was resolved to 10.43.183.232. This is a cluster IP. The control plane node, in which the API server process runs, uses its iptables to rewrite the IP destination using the pod IP. That might be the first problem: sometimes, no pod IP is associated with a given cluster IP because the kubelet doesn't fill in the Endpoint resource with pod IPs as long as the readiness probe doesn't work.</p> <p>Let us first check whether it is a problem with the Endpoint resource:</p> <pre><code>kubectl get endpoints -n cert-manager cert-manager-webhook\n</code></pre> <p>A valid output would look like this:</p> <pre><code>NAME                   ENDPOINTS           AGE\ncert-manager-webhook   10.244.0.2:10250    27d    \u2705\n</code></pre> <p>If you have this valid output and have the <code>connect: connection refused</code>, then the issue is deeper in the networking stack. We won't dig into this case, but you might want to use <code>tcpdump</code> and Wireshark to see whether traffic properly flows from the API server to the node's host namespace. The traffic from the host namespace to the pod's namespace already works fine since the kubelet was already able to reach the readiness endpoint.</p> <p>Common issues include firewall dropping traffic from the control plane to workers; for example, the API server on GKE is only allowed to talk to worker nodes (which is where the cert-manager webhook is running) over port <code>10250</code>. In EKS, your security groups might deny traffic from your control plane VPC towards your workers VPC over TCP <code>10250</code>.</p> <p>If you see <code>&lt;none&gt;</code>, it indicates that the cert-manager webhook is properly running but its readiness endpoint can't be reached:</p> <pre><code>NAME                   ENDPOINTS           AGE\ncert-manager-webhook   &lt;none&gt;              236d   \u274c\n</code></pre> <p>To fix <code>&lt;none&gt;</code>, you will have to check whether the cert-manager-webhook deployment is healthy. The endpoints stays at <code>&lt;none&gt;</code> while the cert-manager-webhook isn't marked as <code>healthy</code>.</p> <pre><code>kubectl get pod -n cert-manager -l app.kubernetes.io/name=webhook\n</code></pre> <p>You should see that the pod is <code>Running</code>, and that the number of containers that are ready is <code>0/1</code>:</p> <pre><code>NAME                            READY   STATUS    RESTARTS     AGE\ncert-manager-76578c9687-24kmr   0/1     Running   7 (8h ago)   28d  \u274c\n</code></pre> <p>We won't be detailing the case where you get <code>1/1</code> and <code>Running</code>, since it would indicate an inconsistent state in Kubernetes.</p> <p>Continuing with <code>0/1</code>, that means the readiness endpoint isn't answering. When that happens, no endpoint is created. The next step is to figure out why the readiness endpoint isn't answering. Let us see which port the kubelet is using when hitting the readiness endpoint:</p> <pre><code>kubectl -n cert-manager get deploy cert-manager-webhook -oyaml | grep -A5 readiness\n</code></pre> <p>In our example, the port that the kubelet will try to hit is 6080:</p> <pre><code>readinessProbe:\nfailureThreshold: 3\nhttpGet:\npath: /healthz\nport: 6080 # \u2728\nscheme: HTTP\n</code></pre> <p>Now, let us port-forward to that port and see if <code>/healthz</code> works. In a shell session, run:</p> <pre><code>kubectl -n cert-manager port-forward deploy/cert-manager-webhook 6080\n</code></pre> <p>In another shell session, run:</p> <pre><code>curl -sS --dump-header - 127.0.0.1:6080/healthz\n</code></pre> <p>The happy output is:</p> <pre><code>HTTP/1.1 200 OK \u2705\nDate: Tue, 07 Jun 2022 17:16:56 GMT\nContent-Length: 0\n</code></pre> <p>If the readiness endpoint doesn't work, you will see:</p> <pre><code>curl: (7) Failed to connect to 127.0.0.1 port 6080 after 0 ms: Connection refused \u274c\n</code></pre> <p>At this point, verify that the readiness endpoint is configured on that same port. Let us see the logs to check that our webhook is listening on 6080 for its readiness endpoint:</p> <pre><code>$ kubectl logs -n cert-manager -l app.kubernetes.io/name=webhook | head -10\nI0607 webhook.go:129] \"msg\"=\"using dynamic certificate generating using CA stored in Secret resource\"\nI0607 server.go:133] \"msg\"=\"listening for insecure healthz connections\"  \"address\"=\":6081\" \u274c\nI0607 server.go:197] \"msg\"=\"listening for secure connections\"  \"address\"=\":10250\"\nI0607 dynamic_source.go:267] \"msg\"=\"Updated serving TLS certificate\"\n...\n</code></pre> <p>In the above example, the issue was a misconfiguration of the readiness port. In the webhook deployment, the argument <code>--healthz-port=6081</code> was mismatched with the readiness configuration.</p> <p></p>"},{"location":"troubleshooting/webhook/#error-io-timeout-connectivity-issue","title":"Error: <code>i/o timeout</code> (connectivity issue)","text":"<p>This error message was reported 26 times on Slack. To list these messages, do a search with <code>in:#cert-manager in:#cert-manager-dev \"443: i/o timeout\"</code>. The error message was reported in 2 GitHub issues (#2811, #4073)</p> <pre><code>Error from server (InternalError): error when creating \"STDIN\": Internal error occurred:\n  failed calling webhook \"webhook.cert-manager.io\": failed to call webhook:\n    Post \"https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=10s\":\n      dial tcp 10.0.0.69:443: i/o timeout\n</code></pre> <p>When the API server tries to talk to the cert-manager webhook, the <code>SYN</code> packet is never answered, and the connection times out. If we were to run tcpdump inside the webhook's net namespace, we would see:</p> <pre><code>192.168.1.43 (apiserver) -&gt; 10.0.0.69 (webhook pod) TCP 44772 \u2192 443 [SYN]\n192.168.1.43 (apiserver) -&gt; 10.0.0.69 (webhook pod) TCP [TCP Retransmission] 44772 \u2192 443 [SYN]\n192.168.1.43 (apiserver) -&gt; 10.0.0.69 (webhook pod) TCP [TCP Retransmission] 44772 \u2192 443 [SYN]\n192.168.1.43 (apiserver) -&gt; 10.0.0.69 (webhook pod) TCP [TCP Retransmission] 44772 \u2192 443 [SYN]\n</code></pre> <p>This issue is caused by the <code>SYN</code> packet being dropped somewhere.</p> <p></p>"},{"location":"troubleshooting/webhook/#cause-1-gke-private-cluster","title":"Cause 1: GKE Private Cluster","text":"<p>The default Helm configuration should work with GKE private clusters, but changing <code>securePort</code> might break it.</p> <p>For context, unlike public GKE clusters where the control plane can freely talk to pods over any TCP port, the control plane in private GKE clusters can only talk to the pods in worker nodes over TCP port <code>10250</code> and <code>443</code>. These two open ports refer to the <code>containerPort</code> inside the pod, not the port called <code>port</code> in the Service resource.</p> <p>For it to work, the <code>containerPort</code> inside the Deployment must match either <code>10250</code> or <code>443</code>; <code>containerPort</code> is configured by the Helm value <code>webhook.securePort</code>. By default, <code>webhook.securePort</code> is set to <code>10250</code>.</p> <p>To see if something is off with the <code>containerPort</code>, let us start looking at the Service resource:</p> <pre><code>kubectl get svc -n cert-manager cert-manager-webhook -oyaml\n</code></pre> <p>Looking at the output, we see that the <code>targetPort</code> is set to <code>\"https\"</code>:</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\nname: cert-manager-webhook\nspec:\nports:\n- name: https\nport: 443 # \u274c This port is not the cause.\nprotocol: TCP\ntargetPort: \"https\" # \ud83c\udf1f This port might be the cause.\n</code></pre> <p>The reason the above <code>port: 443</code> can't be the cause is because kube-proxy, which also runs on the control plane node, translates the webhook's cluster IP to a pod IP, and also translates the above <code>port: 443</code> to the value in <code>containerPort</code>.</p> <p>To see how what is behind the target port <code>\"https\"</code>, we look at the Deployment resource:</p> <pre><code>kubectl get deploy -n cert-manager cert-manager-webhook -oyaml | grep -A3 ports:\n</code></pre> <p>The output shows that the <code>containerPort</code> is not set to <code>10250</code>, meaning that a new firewall rule will have to be added in Google Cloud.</p> <pre><code>ports:\n- containerPort: 12345 # \ud83c\udf1f This port matches neither 10250 nor 443.\nname: https\nprotocol: TCP\n</code></pre> <p>To recap, if the above <code>containerPort</code> is something other than <code>443</code> or <code>10250</code> and you prefer not changing <code>containerPort</code> to <code>10250</code>, you will have to add a new firewall rule. You can read the section Adding a firewall rule in a GKE private cluster in the Google documentation.</p> <p>For context, the reason we did not default <code>securePort</code> to <code>443</code> is because binding to <code>443</code> requires one additional Linux capability (<code>NET_BIND_SERVICE</code>); on the other side, <code>10250</code> doesn't require any additional capability.</p>"},{"location":"troubleshooting/webhook/#cause-2-eks-on-a-custom-cni","title":"Cause 2: EKS on a custom CNI","text":"<p>If you are on EKS and you are using a custom CNI such as Weave or Calico, the Kubernetes API server (which is in its own node) might not be able to reach the webhook pod. This happens because the control plane cannot be configured to run on a custom CNI on EKS, meaning that the CNIs cannot enable connectivity between the API server and the pods running in the worker nodes.</p> <p>Supposing that you are using Helm, the workaround is to add the following value in your <code>values.yaml</code> file:</p> <pre><code>webhook:\nhostNetwork: true\nsecurePort: 10260\n</code></pre> <p>Or if you are using Helm from the command-line, use the following flag:</p> <pre><code>--set webhook.hostNetwork=true --set webhook.securePort=10260\n</code></pre> <p>By setting <code>hostNetwork</code> to <code>true</code>, the webhook pod will be run in the host's network namespace. By running in the host's network namespace, the webhook pod becomes accessible over the node's IP, which means you will work around the fact that kube-apiserver can't reach any pod IPs nor cluster IPs.</p> <p>By setting <code>securePort</code> to <code>10260</code> instead of relying on the default value (which is <code>10250</code>), you will prevent a conflict between the webhook and the kubelet. The kubelet, which is an agent that runs on every Kubernetes worker node and runs directly on the host, uses the port <code>10250</code> to expose its internal API to kube-apiserver.</p> <p>To understand how <code>hostnetwork</code> and <code>securePort</code> interact, we have to look at how the TCP connection is established. When the kube-apiserver process tries to connect to the webhook pod, kube-proxy (which also runs on control plane nodes, even without a CNI) kicks in and translates the webhook's cluster IP to the webhook's host IP:</p> <pre><code>   https://cert-manager-webhook.cert-manager.svc:443/validate\n            |\n            |Step 1: resolve to the cluster IP\n            v\n   https://10.43.103.211:443/validate\n            |\n            |Step 2: send TCP packet\n            v\n   src: 172.28.0.1:43021\n   dst: 10.43.103.211:443\n            |\n            |Step 3: kube-proxy rewrite  (cluster IP to host IP)\n            v\n   src: 172.28.0.1:43021\n   dst: 172.28.0.2:10260\n            |\n            |                              control-plane node\n            |                           (host IP: 172.28.0.1)\n------------|--------------------------------------------------\n            |                           (host IP: 172.28.0.2)\n            v                                     worker node\n   +-------------------+\n   | webhook pod       |\n   | listens on        |\n   | 172.28.0.2:10260  |\n   +-------------------+\n</code></pre> <p>The reason <code>10250</code> is used as the default <code>securePort</code> is because it works around another limitation with GKE Private Clusters, as detailed in the above section GKE Private Cluster.</p>"},{"location":"troubleshooting/webhook/#cause-3-network-policies-calico","title":"Cause 3: Network Policies, Calico","text":"<p>Assuming that you are using the Helm chart and that you are using the default value of <code>webhook.securePort</code> (which is <code>10250</code>), and that you are using a network policy controller such as Calico, check that there exists a policy allowing traffic from the API server to the webhook pod over TCP port <code>10250</code>.</p>"},{"location":"troubleshooting/webhook/#cause-4-eks-and-security-groups","title":"Cause 4: EKS and Security Groups","text":"<p>Assuming that you are using the Helm chart and that you are using the default value of <code>webhook.securePort</code> (which is <code>10250</code>), you might want to check that your AWS Security Groups allow TCP traffic over <code>10250</code> from the control plane's VPC to the workers VPC.</p>"},{"location":"troubleshooting/webhook/#other-causes","title":"Other causes","text":"<p>If none of the above causes apply, you will need to figure out why the webhook is unreachable.</p> <p>To debug reachability issues (i.e., packets being dropped), we advise to use <code>tcpdump</code> along with Wireshark at every TCP hop. You can follow the article Debugging Kubernetes Networking: my <code>kube-dns</code> is not working! to learn how to use <code>tcpdump</code> with Wireshark to debug networking issues.</p>"},{"location":"troubleshooting/webhook/#error-x509-certificate-is-valid-for-xxxinternal-not-cert-manager-webhookcert-managersvc-eks-with-fargate-pods","title":"Error: <code>x509: certificate is valid for xxx.internal, not cert-manager-webhook.cert-manager.svc</code> (EKS with Fargate pods)","text":"<pre><code>Internal error occurred: failed calling webhook \"webhook.cert-manager.io\":\n  Post https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=30s:\n    x509: certificate is valid for ip-192-168-xxx-xxx.xxx.compute.internal,\n    not cert-manager-webhook.cert-manager.svc\n</code></pre> <p>This issue was first reported in #3237.</p> <p>This is probably because you are running on EKS with Fargate enabled. Fargate creates a microVM per pod, and the VM's kernel is used to run the container in its own namespace. The problem is that each microVM gets its own kubelet. As for any Kubernetes node, the VM's port <code>10250</code> is listened to by a kubelet process. And <code>10250</code> is also the port that the cert-manager webhook listens on.</p> <p>But that's not a problem: the kubelet process and the cert-manager webhook process are running in two separate network namespaces, and ports don't clash. That's the case both in traditional Kubernetes nodes, as well as inside a Fargate microVM.</p> <p>The problem arises when the API server tries hitting the Fargate pod: the microVM's host net namespace is configured to port-forward every possible port for maximum compatibility with traditional pods, as demonstrated in the Stack Overflow page EKS Fargate connect to local kubelet. But the port <code>10250</code> is already used by the microVM's kubelet, so anything hitting this port won't be port-forwarded and will hit the kubelet instead.</p> <p>To sum up, the cert-manager webhook looks healthy and is able to listen to port <code>10250</code> as per its logs, but the microVM's host does not port-forward <code>10250</code> to the webhook's net namespace. That's the reason you see a message about an unexpected domain showing up when doing the TLS handshake: although the cert-manager webhook is properly running, the kubelet is the one responding to the API server.</p> <p>This is a limitation of Fargate's microVMs: the IP of the pod and the IP of the node are the same. It gives you the same experience as traditional pods, but it poses networking challenges.</p> <p>To fix the issue, the trick is to change the port the cert-manager webhook is listening on. Using Helm, we can use the parameter <code>webhook.securePort</code>:</p> <pre><code>helm install \\\ncert-manager jetstack/cert-manager \\\n--namespace cert-manager \\\n--create-namespace \\\n--version v1.8.0 \\\n--set webhook.securePort=10260\n</code></pre>"},{"location":"troubleshooting/webhook/#error-service-cert-managercert-manager-webhook-not-found","title":"Error: <code>service \"cert-managercert-manager-webhook\" not found</code>","text":"<pre><code>Error from server (InternalError): error when creating \"test-resources.yaml\": Internal error occurred:\n  failed calling webhook \"webhook.cert-manager.io\": failed to call webhook:\n    Post \"https://cert-managercert-manager-webhook.cert-manager.svc:443/mutate?timeout=10s\":\n      service \"cert-managercert-manager-webhook\" not found\n</code></pre> <p>This error was reported in 2 GitHub issues (#3195, #4999).</p> <p>We do not know the cause of this error, please comment on one of the GitHub issues above if you happen to come across it.</p>"},{"location":"troubleshooting/webhook/#error-no-endpoints-available-for-service-cert-manager-webhook-ovhcloud","title":"Error: <code>no endpoints available for service \"cert-manager-webhook\"</code> (OVHCloud)","text":"<pre><code>Error: INSTALLATION FAILED: Internal error occurred:\n  failed calling webhook \"webhook.cert-manager.io\":\n    Post https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=30s:\n      no endpoints available for service \"cert-manager-webhook\"\n</code></pre> <p>This issue was first reported once in Slack (1).</p> <p>This error is rare and was only seen in OVHcloud managed Kubernetes clusters, where the etcd resource quota is quite low. etcd is the database where your Kubernetes resources (such as pods and deployments) are stored. OVHCloud limits the disk space used by your resources in etcd. When the limit is reached, the whole cluster starts behaving erratically and one symptom is that Endpoint resources aren't created by the kubelet.</p> <p>To verify that it is in fact a problem of quota, you should be able to see the following messages in your kube-apiserver logs:</p> <pre><code>rpc error: code = Unknown desc = ETCD storage quota exceeded\nrpc error: code = Unknown desc = quota computation: etcdserver: not capable\nrpc error: code = Unknown desc = The OVHcloud storage quota has been reached\n</code></pre> <p>The workaround is to remove some resources such as CertificateRequest resources to get under the limit, as explained in OVHCloud's ETCD Quotas error, troubleshooting page.</p>"},{"location":"troubleshooting/webhook/#error-x509-certificate-has-expired-or-is-not-yet-valid","title":"Error: <code>x509: certificate has expired or is not yet valid</code>","text":"<p>This error message was reported once in Slack (1).</p> <p>When using <code>kubectl apply</code>:</p> <pre><code>Internal error occurred: failed calling webhook \"webhook.cert-manager.io\":\n  Post https://kubernetes.default.svc:443/apis/webhook.cert-manager.io/v1beta1/mutations?timeout=30s:\n    x509: certificate has expired or is not yet valid\n</code></pre> <p>This error message was reported once in Slack (1).</p> <p>Please answer to the above Slack message since we are still unsure as to what may cause this issue; to get access to the Kubernetes Slack, visit https://slack.k8s.io/.</p>"},{"location":"troubleshooting/webhook/#error-nethttp-request-canceled-while-waiting-for-connection","title":"Error: <code>net/http: request canceled while waiting for connection</code>","text":"<pre><code>Error from server (InternalError): error when creating \"STDIN\":\n  Internal error occurred: failed calling webhook \"webhook.cert-manager.io\":\n    Post https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=30s:\n      net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)\n</code></pre> <p>This error message was reported once in Slack (1).</p> <p></p>"},{"location":"troubleshooting/webhook/#error-context-deadline-exceeded","title":"Error: <code>context deadline exceeded</code>","text":"<p>This error message was reported in GitHub issues (2319, 2706 5189, 5004), and once on Stack Overflow.</p> <p>This error appears with cert-manager 0.12 and above when trying to apply an Issuer or any other cert-manager custom resource after having installed or upgraded cert-manager:</p> <pre><code>Error from server (InternalError): error when creating \"STDIN\":\n  Internal error occurred: failed calling webhook \"webhook.cert-manager.io\":\n    Post https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=30s:\n      context deadline exceeded\n</code></pre> <p>\u2139\ufe0f In older releases of cert-manager (0.11 and below), the webhook relied on the APIService mechanism, and the message looked a bit different but the cause was the same:</p> <pre><code>Error from server (InternalError): error when creating \"STDIN\":\n  Internal error occurred: failed calling webhook \"webhook.certmanager.k8s.io\":\n    Post https://kubernetes.default.svc:443/apis/webhook.certmanager.k8s.io/v1beta1/mutations?timeout=30s:\n      context deadline exceeded\n</code></pre> <p>\u2139\ufe0f The message <code>context deadline exceeded</code> also appears when using <code>cmctl check api</code>. The cause is identical, you can continue reading this section to debug it.</p> <pre><code>Not ready: Internal error occurred: failed calling webhook \"webhook.cert-manager.io\": failed to call webhook:\n  Post \"https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=10s\":\n    context deadline exceeded\n</code></pre> <p>The trouble with the message <code>context deadline exceeded</code> is that it obfuscates the part of the HTTP connection that timed out. When this message appears, we can't tell which part of the HTTP interaction timed out. It might be the DNS resolution, the TCP handshake, the TLS handshake, sending the HTTP request or receiving the HTTP response.</p> <p>\u2139\ufe0f For context, the query parameter <code>?timeout=30s</code> that you can see in the above error messages is a timeout that the API server decides when calling the webhook. It is often set to 10 or 30 seconds.</p> <p>The following diagram shows what are the three errors that may be hidden behind the all-catching \"context deadline exceeded\" error message, represented by the outer box, that is usually thrown after 30 seconds:</p> <p></p> <pre><code>                                                   context deadline exceeded\n                                                                           |\n                                  30 seconds                               |\n                                   timeout                                 v\n +-------------------------------------------------------------------------+\n |                                                                         |\n |       i/o timeout                                                       |\n |            |        net/http: TLS handshake timeout                     |\n | 10 seconds |                     |                                      |\n |  timeout   v                     |                                      |\n |------------+      30 seconds     |           net/http: request canceled |\n |TCP         |       timeout       v           while awaiting headers     |\n |handshake   +---------------------+                         |            |\n |------------|      TLS            |                         |            |\n |            |      handshake      +------------+ 10 seconds |            |\n |            +---------------------|  sending   |  timeout   v            |\n |                                  |  request   +------------+            |\n |                                  +------------|receiving   |------+     |\n |                                               |resp. header| recv.|     |\n |                                               +------------+ resp.|     |\n |                                                            | body +-----+\n |                                                            +------|other|\n |                                                                   |logic|\n |                                                                   +-----+\n +-------------------------------------------------------------------------+\n &lt;----------&gt; &lt;----------------------------------------------&gt;\n connectivity                   webhook-side\n issue                          issue\n</code></pre> <p>In the rest of the section, we will be trying to trigger one of the three \"more specific\" errors:</p> <ul> <li><code>i/o timeout</code> is the TCP handshake timeout and comes from   <code>DialTimeout</code> in the Kubernetes   apiserver. The name resolution may be the cause, but usually, this message   appears after the API server sent the <code>SYN</code> packet and waited for 10 seconds   for the <code>SYN-ACK</code> packet to be received from the cert-manager webhook.</li> <li><code>net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</code> is the HTTP response timeout and comes from   here   and is configured to 30   seconds.   The Kubernetes API server already sent the HTTP request is is waiting for the   HTTP response headers (e.g., <code>HTTP/1.1 200 OK</code>).</li> <li><code>net/http: TLS handshake timeout</code> is when the TCP handshake is done, and the   Kubernetes API server sent the initial TLS handshake packet (<code>ClientHello</code>)   and waited for 10 seconds for the cert-manager webhook to answer with the   <code>ServerHello</code> packet.</li> </ul> <p>We can sort these three messages in two categories: either it is a connectivity issue (<code>SYN</code> is dropped), or it is a webhook issue (i.e., the TLS certificate is wrong, or the webhook is not returning any HTTP response):</p> Timeout message Category <code>i/o timeout</code> connectivity issue <code>net/http: TLS handshake timeout</code> webhook-side issue <code>net/http: request canceled while awaiting headers</code> webhook-side issue <p>The first step is to rule out a webhook-side issue. In your shell session, run the following:</p> <pre><code>kubectl -n cert-manager port-forward deploy/cert-manager-webhook 10250\n</code></pre> <p>In another shell session, check that you can reach the webhook:</p> <pre><code>curl -vsS --resolve cert-manager-webhook.cert-manager.svc:10250:127.0.0.1 \\\n--service-name cert-manager-webhook-ca \\\n--cacert &lt;(kubectl -n cert-manager get secret cert-manager-webhook-ca -ojsonpath='{.data.ca\\.crt}' | base64 -d) \\\nhttps://cert-manager-webhook.cert-manager.svc:10250/validate 2&gt;&amp;1 -d@- &lt;&lt;'EOF' | sed '/^* /d; /bytes data]$/d; s/&gt; //; s/&lt; //'\n{\"kind\":\"AdmissionReview\",\"apiVersion\":\"admission.k8s.io/v1\",\"request\":{\"requestKind\":{\"group\":\"cert-manager.io\",\"version\":\"v1\",\"kind\":\"Certificate\"},\"requestResource\":{\"group\":\"cert-manager.io\",\"version\":\"v1\",\"resource\":\"certificates\"},\"name\":\"foo\",\"namespace\":\"default\",\"operation\":\"CREATE\",\"object\":{\"apiVersion\":\"cert-manager.io/v1\",\"kind\":\"Certificate\",\"spec\":{\"dnsNames\":[\"foo\"],\"issuerRef\":{\"group\":\"cert-manager.io\",\"kind\":\"Issuer\",\"name\":\"letsencrypt\"},\"secretName\":\"foo\",\"usages\":[\"digital signature\"]}}}}\nEOF\n</code></pre> <p>The happy output looks like this:</p> <pre><code>POST /validate HTTP/1.1\nHost: cert-manager-webhook.cert-manager.svc:10250\nUser-Agent: curl/7.83.0\nAccept: */*\nContent-Length: 1299\nContent-Type: application/x-www-form-urlencoded\nHTTP/1.1 200 OK\nDate: Wed, 08 Jun 2022 14:52:21 GMT\nContent-Length: 2029\nContent-Type: text/plain; charset=utf-8\n\n...\n\"response\": {\n  \"uid\": \"\",\n  \"allowed\": true\n}\n</code></pre> <p>If the response shows <code>200 OK</code>, we can rule out a webhook-side issue. Since the initial error message was <code>context deadline exceeded</code> and not an apiserver-side issue such as <code>x509: certificate signed by unknown authority</code> or <code>x509: certificate has expired or is not yet valid</code>, we can conclude that the problem is a connectivity issue: the Kubernetes API server isn't able to establish a TCP connection to the cert-manager webhook. Please follow the instructions in the section Error: <code>i/o timeout</code> (connectivity issue) above to continue debugging.</p>"},{"location":"troubleshooting/webhook/#error-nethttp-tls-handshake-timeout","title":"Error: <code>net/http: TLS handshake timeout</code>","text":"<p>This error message was reported in 1 GitHub issue (#2602).</p> <pre><code>Error from server (InternalError): error when creating \"STDIN\":\n  Internal error occurred: failed calling webhook \"webhook.cert-manager.io\":\n    Post https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=30s:\n      net/http: TLS handshake timeout\n</code></pre> <p>Looking at the above diagram, this error message indicates that the Kubernetes API server successfully established a TCP connection to the pod IP associated with the cert-manager webhook. The TLS handshake timeout means that the cert-manager webhook process isn't the one ending the TCP connection: there is some HTTP proxy in between that is probably waiting for a plain HTTP request instead a <code>ClientHello</code> packet.</p> <p>We do not know the cause of this error. Please comment on the above GitHub issue if you notice this error.</p>"},{"location":"troubleshooting/webhook/#error-http-probe-failed-with-statuscode-500","title":"Error: <code>HTTP probe failed with statuscode: 500</code>","text":"<p>This error message was reported in 2 GitHub issue (#3185, #4557).</p> <p>The error message is visible as an event on the cert-manager webhook:</p> <pre><code>Warning  Unhealthy  &lt;invalid&gt; (x13 over 15s)  kubelet, node83\n  Readiness probe failed: HTTP probe failed with statuscode: 500\n</code></pre> <p>We do not know the cause of this error. Please comment on the above GitHub issue if you notice this error.</p>"},{"location":"troubleshooting/webhook/#error-service-unavailable","title":"Error: <code>Service Unavailable</code>","text":"<p>This error was reported in 1 GitHub issue (#4281)</p> <pre><code>Error from server (InternalError): error when creating \"STDIN\": Internal error occurred:\n  failed calling webhook \"webhook.cert-manager.io\":\n    Post \"https://my-cert-manager-webhook.default.svc:443/mutate?timeout=10s\":\n      Service Unavailable\n</code></pre> <p>The above message appears in Kubernetes clusters using the Weave CNI.</p> <p>We do not know the cause of this error. Please comment on the above GitHub issue if you notice this error.</p>"},{"location":"troubleshooting/webhook/#error-failed-calling-admission-webhook-the-server-is-currently-unable-to-handle-the-request","title":"Error: <code>failed calling admission webhook: the server is currently unable to handle the request</code>","text":"<p>This issue was reported in 4 GitHub issues (1369, 1425 3542, 4852)</p> <pre><code>Error from server (InternalError): error when creating \"test-resources.yaml\": Internal error occurred:\n  failed calling admission webhook \"issuers.admission.certmanager.k8s.io\":\n    the server is currently unable to handle the request\n</code></pre> <p>We do not know the cause of this error. Please comment in one of the above GitHub issues if you are able to reproduce this error.</p>"},{"location":"troubleshooting/webhook/#error-x509-certificate-signed-by-unknown-authority","title":"Error: <code>x509: certificate signed by unknown authority</code>","text":"<p>Reported in GitHub issues (2602)</p> <p>When installing or upgrading cert-manager and using a namespace that is not <code>cert-manager</code>:</p> <pre><code>Error: UPGRADE FAILED: release core-l7 failed, and has been rolled back due to atomic being set:\n  failed to create resource: conversion webhook for cert-manager.io/v1alpha3, Kind=ClusterIssuer failed:\n    Post https://cert-manager-webhook.core-l7.svc:443/convert?timeout=30s:\n      x509: certificate signed by unknown authority\n</code></pre> <p>A very similar error message may show when creating an Issuer or any other cert-manager custom resource:</p> <pre><code>Internal error occurred: failed calling webhook \"webhook.cert-manager.io\":\n  Post https://cert-manager-webhook.cert-manager.svc:443/mutate?timeout=30s:\n    x509: certificate signed by unknown authority`\n</code></pre> <p>With <code>cmctl install</code> and <code>cmctl check api</code>, you might see the following error message:</p> <pre><code>2022/06/06 15:36:30 Not ready: the cert-manager webhook CA bundle is not injected yet\n  (Internal error occurred: conversion webhook for cert-manager.io/v1alpha2, Kind=Certificate failed:\n    Post \"https://&lt;company_name&gt;-cert-manager-webhook.cert-manager.svc:443/convert?timeout=30s\":\n      x509: certificate signed by unknown authority)\n</code></pre> <p>If you are using cert-manager 0.14 and below with Helm, and that you are installing in a namespace different from <code>cert-manager</code>, the CRD manifest had the namespace name <code>cert-manager</code> hardcoded. You can see the hardcoded namespace in the following annotation:</p> <pre><code>kubectl get crd issuers.cert-manager.io -oyaml | grep inject\n</code></pre> <p>You will see the following:</p> <pre><code>cert-manager.io/inject-ca-from-secret: cert-manager/cert-manager-webhook-ca\n#                                      ^^^^^^^^^^^^\n#                                       hardcoded\n</code></pre> <p>Note 1: this bug in the cert-manager Helm chart was was fixed in cert-manager 0.15.</p> <p>Note 2: since cert-manager 1.6, this annotation is no longer used on the cert-manager CRDs since conversion is no longer needed.</p> <p>The solution, if you are still using cert-manager 0.14 or below, is to render the manifest using <code>helm template</code>, then edit the annotation to use the correct namespace, and then use <code>kubectl apply</code> to install cert-manager.</p> <p>If you are using cert-manager 1.6 and below, the issue might be due to the cainjector being stuck trying to inject the self-signed certificate that the cert-manager webhook created and stored in the Secret resource <code>cert-manager-webhook-ca</code> into the <code>spec.caBundle</code> field of the cert-manager CRDs. The first step is to check whether the cainjector is running with no problem:</p> <pre><code>$ kubectl -n cert-manager get pods -l app.kubernetes.io/name=cainjector\nNAME                                       READY   STATUS    RESTARTS       AGE\ncert-manager-cainjector-5c55bb7cb4-6z4cf   1/1     Running   11 (31h ago)   28d\n</code></pre> <p>Looking at the logs, you will be able to tell if the leader election worked. It can take up to one minute for the leader election work to complete.</p> <pre><code>I0608 start.go:126] \"starting\" version=\"v1.8.0\" revision=\"e466a521bc5455def8c224599c6edcd37e86410c\"\nI0608 leaderelection.go:248] attempting to acquire leader lease kube-system/cert-manager-cainjector-leader-election...\nI0608 leaderelection.go:258] successfully acquired lease kube-system/cert-manager-cainjector-leader-election\nI0608 controller.go:186] cert-manager/secret/customresourcedefinition/controller/controller-for-secret-customresourcedefinition \"msg\"=\"Starting Controller\"\nI0608 controller.go:186] cert-manager/certificate/customresourcedefinition/controller/controller-for-certificate-customresourcedefinition \"msg\"=\"Starting Controller\"\nI0608 controller.go:220] cert-manager/secret/customresourcedefinition/controller/controller-for-secret-customresourcedefinition \"msg\"=\"Starting workers\"  \"worker count\"=1\nI0608 controller.go:220] cert-manager/certificate/customresourcedefinition/controller/controller-for-certificate-customresourcedefinition \"msg\"=\"Starting workers\"  \"worker count\"=1\n</code></pre> <p>The happy output contains lines like this:</p> <pre><code>I0608 sources.go:184] cert-manager/secret/customresourcedefinition/generic-inject-reconciler\n  \"msg\"=\"Extracting CA from Secret resource\" \"resource_name\"=\"issuers.cert-manager.io\" \"secret\"=\"cert-manager/cert-manager-webhook-ca\"\nI0608 controller.go:178] cert-manager/secret/customresourcedefinition/generic-inject-reconciler\n  \"msg\"=\"updated object\" \"resource_name\"=\"issuers.cert-manager.io\"\n</code></pre> <p>Now, look for any message that indicates that the Secret resource that the cert-manager webhook created can't be loaded. The two error messages that might show up are:</p> <pre><code>E0608 sources.go:201] cert-manager/secret/customresourcedefinition/generic-inject-reconciler\n  \"msg\"=\"unable to fetch associated secret\" \"error\"=\"Secret \\\"cert-manager-webhook-caq\\\" not found\"\n</code></pre> <p>The following message indicates that the given CRD has been skipped because the annotation is missing. You can ignore these messages:</p> <pre><code>I0608 controller.go:156] cert-manager/secret/customresourcedefinition/generic-inject-reconciler\n  \"msg\"=\"failed to determine ca data source for injectable\" \"resource_name\"=\"challenges.acme.cert-manager.io\"\n</code></pre> <p>If nothing seems wrong with the cainjector logs, you will want to check that the <code>spec.caBundle</code> field in the validation, mutation, and conversion configurations are correct. The Kubernetes API server uses the contents of that field to trust the cert-manager webhook. The <code>caBundle</code> contains the self-signed CA created by the cert-manager webhook when it started.</p> <pre><code>$ kubectl get validatingwebhookconfigurations cert-manager-webhook -ojson | jq '.webhooks[].clientConfig'\n{\n  \"caBundle\": \"LS0tLS1...LS0tLS0K\",\n  \"service\": {\n    \"name\": \"cert-manager-webhook\",\n    \"namespace\": \"cert-manager\",\n    \"path\": \"/validate\",\n    \"port\": 443\n  }\n}\n</code></pre> <pre><code>$ kubectl get mutatingwebhookconfigurations cert-manager-webhook -ojson | jq '.webhooks[].clientConfig'\n{\n  \"caBundle\": \"LS0tLS1...RFLS0tLS0K\",\n  \"service\": {\n    \"name\": \"cert-manager-webhook\",\n    \"namespace\": \"cert-manager\",\n    \"path\": \"/validate\",\n    \"port\": 443\n  }\n}\n</code></pre> <p>Let us see the contents of the <code>caBundle</code>:</p> <pre><code>$ kubectl get mutatingwebhookconfigurations cert-manager-webhook -ojson \\\n| jq '.webhooks[].clientConfig.caBundle' -r | base64 -d \\\n| openssl x509 -noout -text -in -\n\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            ee:8f:4f:c8:55:7b:16:76:d8:6a:a2:e5:94:bc:7c:6b\n        Signature Algorithm: ecdsa-with-SHA384\n        Issuer: CN = cert-manager-webhook-ca\n        Validity\n            Not Before: May 10 16:13:37 2022 GMT\n            Not After : May 10 16:13:37 2023 GMT\n        Subject: CN = cert-manager-webhook-ca\n</code></pre> <p>Let us check that the contents of <code>caBundle</code> works for connecting to the webhook:</p> <pre><code>$ kubectl -n cert-manager get secret cert-manager-webhook-ca -ojsonpath='{.data.ca\\.crt}' \\\n| base64 -d | openssl x509 -noout -text -in -\n\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            ee:8f:4f:c8:55:7b:16:76:d8:6a:a2:e5:94:bc:7c:6b\n        Signature Algorithm: ecdsa-with-SHA384\n        Issuer: CN = cert-manager-webhook-ca\n        Validity\n            Not Before: May 10 16:13:37 2022 GMT\n            Not After : May 10 16:13:37 2023 GMT\n        Subject: CN = cert-manager-webhook-ca\n</code></pre> <p>Our final test is to try to connect to the webhook using this trust bundle. Let us port-forward to the webhook pod:</p> <pre><code>kubectl -n cert-manager port-forward deploy/cert-manager-webhook 10250\n</code></pre> <p>In another shell session, send a <code>/validate</code> HTTP request with the following command:</p> <pre><code>curl -vsS --resolve cert-manager-webhook.cert-manager.svc:10250:127.0.0.1 \\\n--service-name cert-manager-webhook-ca \\\n--cacert &lt;(kubectl get validatingwebhookconfigurations cert-manager-webhook -ojson | jq '.webhooks[].clientConfig.caBundle' -r | base64 -d) \\\nhttps://cert-manager-webhook.cert-manager.svc:10250/validate 2&gt;&amp;1 -d@- &lt;&lt;'EOF' | sed '/^* /d; /bytes data]$/d; s/&gt; //; s/&lt; //'\n{\"kind\":\"AdmissionReview\",\"apiVersion\":\"admission.k8s.io/v1\",\"request\":{\"requestKind\":{\"group\":\"cert-manager.io\",\"version\":\"v1\",\"kind\":\"Certificate\"},\"requestResource\":{\"group\":\"cert-manager.io\",\"version\":\"v1\",\"resource\":\"certificates\"},\"name\":\"foo\",\"namespace\":\"default\",\"operation\":\"CREATE\",\"object\":{\"apiVersion\":\"cert-manager.io/v1\",\"kind\":\"Certificate\",\"spec\":{\"dnsNames\":[\"foo\"],\"issuerRef\":{\"group\":\"cert-manager.io\",\"kind\":\"Issuer\",\"name\":\"letsencrypt\"},\"secretName\":\"foo\",\"usages\":[\"digital signature\"]}}}}\nEOF\n</code></pre> <p>You should see a successful HTTP request and response:</p> <pre><code>POST /validate HTTP/1.1\nHost: cert-manager-webhook.cert-manager.svc:10250\nUser-Agent: curl/7.83.0\nAccept: */*\nContent-Length: 1299\nContent-Type: application/x-www-form-urlencoded\nHTTP/1.1 200 OK\nDate: Wed, 08 Jun 2022 16:20:45 GMT\nContent-Length: 2029\nContent-Type: text/plain; charset=utf-8\n\n...\n</code></pre>"},{"location":"troubleshooting/webhook/#error-cluster-scoped-resource-mutatingwebhookconfigurations-is-managed-and-access-is-denied","title":"Error: <code>cluster scoped resource \"mutatingwebhookconfigurations/\" is managed and access is denied</code>","text":"<p>This message was reported in GitHub issue 3717.</p> <p>While installing cert-manager on GKE Autopilot, you will see the following message:</p> <pre><code>Error: rendered manifests contain a resource that already exists. Unable to continue with install:\n  could not get information about the resource:\n    mutatingwebhookconfigurations.admissionregistration.k8s.io \"cert-manager-webhook\" is forbidden:\n      User \"XXXX\" cannot get resource \"mutatingwebhookconfigurations\" in API group \"admissionregistration.k8s.io\" at the cluster scope:\n        GKEAutopilot authz: cluster scoped resource \"mutatingwebhookconfigurations/\" is managed and access is denied\n</code></pre> <p>This error message will appear when using Kubernetes 1.20 and below with GKE Autopilot. It is due to a restriction on mutating admission webhooks in GKE Autopilot.</p> <p>As of October 2021, the \"rapid\" Autopilot release channel has rolled out version 1.21 for Kubernetes masters. Installation via the Helm chart may end in an error message but cert-manager is reported to be working by some users. Feedback and PRs are welcome.</p>"},{"location":"troubleshooting/webhook/#error-the-namespace-kube-system-is-managed-and-the-requests-verb-create-is-denied","title":"Error: <code>the namespace \"kube-system\" is managed and the request's verb \"create\" is denied</code>","text":"<p>When installing cert-manager on GKE Autopilot with Helm, you will see the following error message:</p> <pre><code>Not ready: the cert-manager webhook CA bundle is not injected yet\n</code></pre> <p>After this failure, you should still see the three pods happily running:</p> <pre><code>$ kubectl get pods -n cert-manager\nNAME                                      READY   STATUS    RESTARTS   AGE\ncert-manager-76578c9687-24kmr             1/1     Running   0          47m\ncert-manager-cainjector-b7d47f746-4799n   1/1     Running   0          47m\ncert-manager-webhook-7f788c5b6-mspnt      1/1     Running   0          47m\n</code></pre> <p>But looking at either of the logs, you will see the following error message:</p> <pre><code>E0425 leaderelection.go:334] error initially creating leader election record:\n  leases.coordination.k8s.io is forbidden: User \"system:serviceaccount:cert-manager:cert-manager-webhook\"\n    cannot create resource \"leases\" in API group \"coordination.k8s.io\" in the namespace \"kube-system\":\n      GKEAutopilot authz: the namespace \"kube-system\" is managed and the request's verb \"create\" is denied\n</code></pre> <p>That is due to a limitation of GKE Autopilot. It is not possible to create resources in the <code>kube-system</code> namespace, and cert-manager uses the well-known <code>kube-system</code> to manage the leader election. To get around the limitation, you can tell Helm to use a different namespace for the leader election:</p> <pre><code>helm install cert-manager jetstack/cert-manager --version 1.8.0 \\\n--namespace cert-manager --create-namespace \\\n--set global.leaderElection.namespace=cert-manager\n</code></pre>"},{"location":"tutorials/","title":"\u624b\u518c","text":"<p>\u4e00\u6b65\u4e00\u6b65\u7684\u6559\u7a0b\u662f\u5f00\u59cb\u4f7f\u7528 cert-manager \u7684\u597d\u65b9\u6cd5\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u4f9b\u60a8\u5b66\u4e60\u7684\u6559\u7a0b\u3002\u770b\u770b\u5427!</p> <ul> <li>\u5907\u4efd\u4e0e\u6062\u590d\u6e90: \u5907\u4efd\u96c6\u7fa4\u4e2d\u7684 cert-manager \u6e90\uff0c\u7136\u540e\u6062\u590d\u5b83\u4eec\u3002</li> <li>Pomerium Ingress: \u4f7f\u7528\u8bc1\u4e66\u7ba1\u7406\u5668\u7684 Pomerium \u5165\u53e3\u63a7\u5236\u5668\u6559\u7a0b\u3002</li> <li>\u4f7f\u7528 NGINX-Ingress \u548c cert-manager \u4fdd\u62a4 ingress: \u6559\u7a0b\uff0c\u7528\u4e8e\u5c06 NGINX \u90e8\u7f72\u5230\u96c6\u7fa4\u4e2d\uff0c\u5e76\u4f7f\u7528 Let's Encrypt \u63d0\u4f9b\u7684\u8bc1\u4e66\u4fdd\u62a4\u4f20\u5165\u8fde\u63a5\u3002</li> <li>\u4f7f\u7528 DNS \u9a8c\u8bc1\u9881\u53d1 ACME \u8bc1\u4e66: \u5173\u4e8e\u5982\u4f55\u4f7f\u7528 DNS01 \u6311\u6218\u89e3\u51b3 DNS \u6240\u6709\u6743\u9a8c\u8bc1\u7684\u6559\u7a0b\u3002</li> <li>\u4f7f\u7528 HTTP \u9a8c\u8bc1\u9881\u53d1 ACME \u8bc1\u4e66: \u5173\u4e8e\u5982\u4f55\u4f7f\u7528 HTTP01 \u6311\u6218\u89e3\u51b3 DNS \u6240\u6709\u6743\u9a8c\u8bc1\u7684\u6559\u7a0b\u3002</li> <li>\u4ece kube-lego \u8fc1\u79fb\u8fc7\u6765: \u5173\u4e8e\u5982\u4f55\u4ece\u73b0\u5728\u5df2\u5f03\u7528\u7684 kube-lego \u9879\u76ee\u8fc1\u79fb\u7684\u6559\u7a0b\u3002</li> <li>\u4f7f\u7528 Venafi \u4fdd\u62a4 EKS \u96c6\u7fa4: \u4f7f\u7528 Venafi \u9881\u53d1\u7684\u8bc1\u4e66\u521b\u5efa EKS \u96c6\u7fa4\u548c\u4fdd\u62a4 NGINX \u90e8\u7f72\u7684\u6559\u7a0b\u3002</li> <li>\u4f7f\u7528 cert-manager \u4fdd\u62a4 Istio \u670d\u52a1\u7f51\u683c: \u4f7f\u7528\u8bc1\u4e66\u7ba1\u7406\u5668\u9881\u53d1\u8005\u4fdd\u62a4 Istio \u670d\u52a1\u7f51\u683c\u7684\u6559\u7a0b\u3002</li> <li>\u8de8\u547d\u540d\u7a7a\u95f4\u540c\u6b65\u79d8\u5bc6: \u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u6269\u5c55(\u5982:reflector, kubed \u548c Kubernetes -replicator)\u8de8\u547d\u540d\u7a7a\u95f4\u540c\u6b65 Kubernetes \u79d8\u5bc6\u6e90\u3002</li> <li>\u4f7f\u7528 ZeroSSL \u83b7\u53d6 SSL \u8bc1\u4e66: \u6559\u7a0b\u63cf\u8ff0 ZeroSSL \u4f5c\u4e3a\u5916\u90e8 ACME \u670d\u52a1\u5668\u7684\u7528\u6cd5\u3002</li> </ul>"},{"location":"tutorials/#_2","title":"\u5916\u90e8\u6559\u7a0b","text":"<ul> <li>\u4e00\u7bc7\u5173\u4e8e\u5728 EKS \u4e2d\u4f7f\u7528 cert-manager \u8fdb\u884c\u7aef\u5230\u7aef\u52a0\u5bc6\u7684\u5f88\u68d2\u7684 AWS \u535a\u5ba2\u6587\u7ae0\u3002\u53c2\u89c1\u5728 Amazon EKS \u4e0a\u8bbe\u7f6e\u7aef\u5230\u7aef TLS \u52a0\u5bc6</li> <li>GKE \u96c6\u7fa4\u4e0a\u5b8c\u6574\u7684\u8bc1\u4e66\u7ba1\u7406\u5668\u5b89\u88c5\u6f14\u793a\u3002\u53c2\u89c1\u5982\u4f55:Kubernetes \u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u7684\u81ea\u52a8 SSL \u8bc1\u4e66\u7ba1\u7406</li> <li>\u4f7f\u7528\u5de5\u4f5c\u8d1f\u8f7d\u6807\u8bc6\u5728 GKE \u96c6\u7fa4\u4e0a\u5b89\u88c5 cert-manager\u3002\u53c2\u89c1Kubernetes, ingress-nginx, cert-manager &amp; external-dns</li> <li>\u4e00\u4e2a\u7528\u4e8e\u521d\u5b66\u8005\u7684\u89c6\u9891\u6559\u7a0b\uff0c\u5c55\u793a\u4e86 cert-manager \u7684\u5b9e\u9645\u64cd\u4f5c\u3002\u53c2\u89c1\u4f7f\u7528 cert-manager \u4e3a Kubernetes \u63d0\u4f9b\u514d\u8d39 SSL</li> </ul>"},{"location":"tutorials/backup/","title":"\u5907\u4efd\u4e0e\u6062\u590d\u6e90","text":"<p>\u5982\u679c\u9700\u8981\u5378\u8f7d cert-manager\uff0c\u6216\u5c06\u5b89\u88c5\u8f6c\u79fb\u5230\u65b0\u7684\u96c6\u7fa4\uff0c\u53ef\u4ee5\u5907\u4efd\u6240\u6709 cert-manager \u7684\u914d\u7f6e\uff0c\u4ee5\u4fbf\u7a0d\u540e\u91cd\u65b0\u5b89\u88c5\u3002</p>"},{"location":"tutorials/backup/#cert-manager","title":"\u5907\u4efd cert-manager \u6e90\u914d\u7f6e","text":"<p>\u4ee5\u4e0b\u547d\u4ee4\u5c06\u5907\u4efd<code>cert-manager</code>\u6e90\u7684\u914d\u7f6e\u3002 \u5728\u5347\u7ea7<code>cert-manager</code>\u4e4b\u524d\uff0c\u8fd9\u6837\u505a\u53ef\u80fd\u5f88\u6709\u7528\u3002 \u7531\u4e8e\u6b64\u5907\u4efd\u4e0d\u5305\u62ec\u5305\u542b X.509 \u8bc1\u4e66\u7684<code>Secrets</code>\uff0c\u56e0\u6b64\u8fd8\u539f\u5230\u5c1a\u672a\u62e5\u6709\u8fd9\u4e9b<code>Secrets</code>\u5bf9\u8c61\u7684\u96c6\u7fa4\u5c06\u5bfc\u81f4\u91cd\u65b0\u9881\u53d1\u8bc1\u4e66\u3002</p>"},{"location":"tutorials/backup/#_2","title":"\u5907\u4efd","text":"<p>\u5907\u4efd\u6240\u6709 cert-manager \u914d\u7f6e\u6e90\uff0c\u6267\u884c:</p> <pre><code>kubectl get --all-namespaces -oyaml issuer,clusterissuer,cert &gt; backup.yaml\n</code></pre> <p>\u5982\u679c\u4f60\u8981\u5c06\u6570\u636e\u4f20\u8f93\u5230\u4e00\u4e2a\u65b0\u7684\u96c6\u7fa4\uff0c\u4f60\u53ef\u80fd\u8fd8\u9700\u8981\u590d\u5236\u5176\u4ed6\u7684<code>Secret</code>\u6e90\uff0c\u8fd9\u4e9b\u6e90\u662f\u7531\u4f60\u914d\u7f6e\u7684\u53d1\u884c\u8005\u5f15\u7528\u7684\uff0c\u4f8b\u5982:</p>"},{"location":"tutorials/backup/#ca-issuers","title":"CA Issuers","text":"<ul> <li>\u6839 CA <code>Secret</code>\u7531<code>issuer.spec.ca.secretName</code>\u5f15\u7528</li> </ul>"},{"location":"tutorials/backup/#vault-issuers","title":"Vault Issuers","text":"<ul> <li>The token authentication <code>Secret</code> referenced by <code>issuer.spec.vault.auth.tokenSecretRef</code></li> <li>The AppRole configuration <code>Secret</code> referenced by <code>issuer.spec.vault.auth.appRole.secretRef</code></li> </ul>"},{"location":"tutorials/backup/#acme-issuers","title":"ACME Issuers","text":"<ul> <li>The ACME account private key <code>Secret</code> referenced by <code>issuer.acme.privateKeySecretRef</code></li> <li>Any <code>Secret</code>s referenced by DNS providers configured under the <code>issuer.acme.dns01.providers</code> and <code>issuer.acme.solvers.dns01</code> fields.</li> </ul>"},{"location":"tutorials/backup/#_3","title":"\u6062\u590d","text":"<p>\u4e3a\u4e86\u6062\u590d\u4f60\u7684\u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5<code>kubectl apply</code>\u4e0a\u9762\u5728\u5b89\u88c5 cert-manager \u540e\u521b\u5efa\u7684\u6587\u4ef6\uff0c\u9664\u4e86<code>uid</code> \u548c <code>resourceVersion</code>\u5b57\u6bb5\u4e0d\u9700\u8981\u6062\u590d:</p> <pre><code>kubectl apply -f &lt;(awk '!/^ *(resourceVersion|uid): [^ ]+$/' backup.yaml)\n</code></pre>"},{"location":"tutorials/backup/#_4","title":"\u5168\u96c6\u7fa4\u5907\u4efd\u548c\u6062\u590d","text":"<p>\u672c\u8282\u6d89\u53ca\u5907\u4efd\u548c\u6062\u590d\u96c6\u7fa4\u4e2d\u7684\u201c\u6240\u6709\u201dKubernetes \u6e90(\u5305\u62ec\u4e00\u4e9b<code>cert-manager</code>\u6e90)\uff0c\u7528\u4e8e isaster \u6062\u590d\u3001\u96c6\u7fa4\u8fc1\u79fb\u7b49\u573a\u666f\u3002</p> <p>Note</p> <p>\u6211\u4eec\u5df2\u7ecf\u5728\u7b80\u5355\u7684Kubernetes\u6d4b\u8bd5\u96c6\u7fa4\u4e0a\u4f7f\u7528\u6709\u9650\u7684Kubernetes\u53d1\u884c\u7248\u6d4b\u8bd5\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\u3002 \u4e3a\u4e86\u907f\u514d\u6570\u636e\u4e22\u5931\uff0c\u5728\u751f\u4ea7\u4e2d\u4f9d\u8d56\u5907\u4efd\u548c\u6062\u590d\u7b56\u7565\u4e4b\u524d\uff0c\u8bf7\u5728\u60a8\u81ea\u5df1\u7684\u96c6\u7fa4\u4e0a\u6d4b\u8bd5\u5907\u4efd\u548c\u6062\u590d\u7b56\u7565\u3002 \u5982\u679c\u60a8\u9047\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u8bf7\u6253\u5f00GitHub issue\u6216PR\uff0c\u4ee5\u8bb0\u5f55\u4e0d\u540cKubernetes\u73af\u5883\u4e0b\u6b64\u8fc7\u7a0b\u7684\u53d8\u5316\u3002</p>"},{"location":"tutorials/backup/#_5","title":"\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u8bc1\u4e66\u8865\u53d1","text":""},{"location":"tutorials/backup/#_6","title":"\u6062\u590d\u987a\u5e8f","text":"<p>If <code>cert-manager</code> does not find a Kubernetes <code>Secret</code> with an X.509 certificate for a <code>Certificate</code>, reissuance will be triggered. To avoid unnecessary reissuance after a restore, ensure that <code>Secret</code>s are restored before <code>Certificate</code>s. Similarly, <code>Secret</code>s should be restored before <code>Ingress</code>es if you are using <code>ingress-shim</code>.</p>"},{"location":"tutorials/backup/#_7","title":"\u4ece\u5907\u4efd\u4e2d\u6392\u9664\u4e00\u4e9b\u8bc1\u4e66\u7ba1\u7406\u5668\u6e90","text":"<p><code>cert-manager</code> has a number of custom resources that are designed to represent a point-in-time operation. An example would be a <code>CertificateRequest</code> that represents a one-time request for an X.509 certificate. The status of these resources can depend on other ephemeral resources (such as a temporary <code>Secret</code> holding a private key) so <code>cert-manager</code> might not be able to correctly recreate the state of these resources at a later point.</p> <p>In most cases backup and restore tools will not restore the statuses of custom resources, so including such one-time resources in a backup can result in an unnecessary reissuance after a restore as without the status fields <code>cert-manager</code> will not be able to tell that, for example, an <code>Order</code> has already been fulfilled. To avoid unnecessary reissuance, we recommend that <code>Order</code>s and <code>Challenge</code>s are excluded from the backup. We also don't recommend backing up <code>CertificateRequest</code>s, see Backing up CertificateRequests</p>"},{"location":"tutorials/backup/#_8","title":"\u6062\u590d\u5165\u53e3\u8bc1\u4e66","text":"<p>A <code>Certificate</code> created for an <code>Ingress</code> via <code>ingress-shim</code> will have an owner reference pointing to the <code>Ingress</code> resource. <code>cert-manager</code> uses the owner reference to verify that the <code>Certificate</code> 'belongs' to that <code>Ingress</code> and will not attempt to create/correct it for an existing <code>Certificate</code>. After a full cluster recreation, a restored owner reference would probably be incorrect (<code>Ingress</code> UUID will have changed). The incorrect owner reference could lead to a situation where updates to the <code>Ingress</code> (i.e a new DNS name) are not applied to the <code>Certificate</code>.</p> <p>To avoid this issue, in most cases <code>Certificate</code>s created via <code>ingress-shim</code> can be excluded from the backup. Given that the restore happens in the correct order (<code>Secret</code> with the X.509 certificate restored before the <code>Ingress</code>) <code>cert-manager</code> will be able to create a new <code>Certificate</code> for the <code>Ingress</code> and determine that the existing <code>Secret</code> is for that <code>Certificate</code>.</p>"},{"location":"tutorials/backup/#velero","title":"Velero","text":"<p>We have briefly tested backup and restore with <code>velero</code> <code>v1.5.3</code> and <code>cert-manager</code> versions <code>v1.3.1</code> and <code>v1.3.0</code> as well as <code>velero</code> <code>v1.3.1</code> and <code>cert-manager</code> <code>v1.1.0</code>.</p> <p>A few potential edge cases:</p> <ul> <li> <p>Ensure that the backups include <code>cert-manager</code> CRDs.   For example, we have seen that if <code>--exclude-namespaces</code> flag is passed to <code>velero backup create</code>, CRDs for which there are no actual resources to be included in the backup might also not be included in backup unless <code>--include-cluster-resources=true</code> flag is also passed to the backup command.</p> </li> <li> <p>Velero does not restore statuses of custom resources, so you should probably exclude <code>Order</code>s, <code>Challenge</code>s and <code>CertificateRequest</code>s from the backup, see Excluding some cert-manager resources from backup.</p> </li> <li> <p>Velero's default restore order(<code>Secrets</code> before <code>Ingress</code>es, Custom Resources restored last), should ensure that there is no unnecessary certificate reissuance due to the order of restore operation, see Order of restore.</p> </li> <li> <p>When restoring the deployment of <code>cert-manager</code> itself, it may be necessary to restore <code>cert-manager</code>'s RBAC resources before the rest of the deployment.   This is because <code>cert-manager</code>'s controller needs to be able to create <code>Certificate</code>'s for the <code>cert-manager</code>'s webhook before the webhook can become ready.   In order to do this, the controller needs the right permissions.   Since Velero by default restores pods before RBAC resources, the restore might get stuck waiting for the webhook pod to become ready.</p> </li> <li> <p>Velero does not restore owner references, so it may be necessary to exclude <code>Certificate</code>s created for <code>Ingress</code>es from the backup even when not re-creating the <code>Ingress</code> itself. See Restoring Ingress Certificates.</p> </li> </ul>"},{"location":"tutorials/backup/#certificaterequests","title":"\u5907\u4efd CertificateRequests","text":"<p>We no longer recommend including <code>CertificateRequest</code> resources in a backup for most scenarios. <code>CertificateRequest</code>s are designed to represent a one-time request for an X.509 certificate. Once the request has been fulfilled, <code>CertificateRequest</code> can usually be safely deleted1. In most cases (such as when a <code>CertificateRequest</code> has been created for a <code>Certificate</code>) a new <code>CertificateRequest</code> will be created when needed (i.e at a time of a renewal of a <code>Certificate</code>). In <code>v1.3.0</code> , as part of our work towards policy implementation we introduced identity fields for <code>CertificateRequest</code> resources where, at a time of creation, <code>cert-mananager</code>'s webhook updates <code>CertificateRequest</code>'s spec with immutable identity fields, representing the identity of the creator of the <code>CertificateRequest</code>. This introduces some extra complexity for backing up and restoring <code>CertificateRequest</code>s as the identity of the restorer might differ from that of the original creator and in most cases a restored <code>CertificateRequest</code> would likely end up with incorrect state.</p> <ol> <li> <p>there is an edge case where certain changes to <code>Certificate</code> spec may not trigger re-issuance if there is no <code>CertificateRequest</code> for that <code>Certificate</code>. See documentation on when do certificates get re-issued.\u00a0\u21a9</p> </li> </ol>"},{"location":"tutorials/kubenetes-aliyun-https/","title":"\u963f\u91cc\u4e91 K8s \u96c6\u7fa4\u90e8\u7f72 cert-manager","text":""},{"location":"tutorials/kubenetes-aliyun-https/#_1","title":"\u57fa\u7840\u73af\u5883","text":"<ul> <li>Kubenetes \u7248\u672c: <code>v1.22.3</code></li> <li>cert-manager \u7248\u672c: <code>v1.8.1</code></li> <li>\u6ce8\u610f\u4e8b\u9879: Kubenetes \u7248\u672c\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e <code>v1.19.0</code></li> </ul>"},{"location":"tutorials/kubenetes-aliyun-https/#cert-manager","title":"\u5b89\u88c5 cert-manager","text":"<pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.1/cert-manager.yaml\n</code></pre> <p>\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u6210\u529f:</p> <pre><code>$ cmctl check api\nThe cert-manager API is ready\n# \u51fa\u73b0\u5982\u4e0a\u60c5\u51b5\u8868\u793a\u5b89\u88c5\u6210\u529f\n</code></pre>"},{"location":"tutorials/kubenetes-aliyun-https/#alidns-webhook","title":"\u5b89\u88c5 alidns-webhook","text":"<pre><code>$ helm repo add cert-manager-alidns-webhook https://devmachine-fr.github.io/cert-manager-alidns-webhook\n$ helm repo update\n$ helm install cert-manager-alidns-webhook/alidns-webhook\n</code></pre>"},{"location":"tutorials/kubenetes-aliyun-https/#_2","title":"\u914d\u7f6e\u963f\u91cc\u4e91\u8bbf\u95ee\u4ee4\u724c","text":"<p>\u914d\u7f6e\u7684 access-key \u5fc5\u987b\u62e5\u6709\u4fee\u6539\u57df\u540d DNS \u7684\u6743\u9650</p> <pre><code>$ cat &gt; secret.yaml &lt;&lt; EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: alidns-secret\n  namespace: saas # \u547d\u540d\u7a7a\u95f4\ndata:\n  access-token: YOUR_ACCESS_KEY # base64\n  secret-key: YOUR_SECRET_KEY # base64\ntype: Opaque\nEOF\n$ kubectl apply -f issuer.yaml\n</code></pre> <p>\u6216\u8005\u4f7f\u7528\u4e0b\u9762\u8fd9\u4e2a</p> <pre><code>kubectl create secret generic alidns-secrets --from-literal=\"access-token=YOUR_ACCESS_KEY\" --from-literal=\"secret-key=YOUR_SECRET_KEY\" --namespace=saas\n</code></pre>"},{"location":"tutorials/kubenetes-aliyun-https/#issuer","title":"\u914d\u7f6e issuer","text":"<p>\u5b98\u65b9\u6587\u6863\u8bf4\u8fd8\u652f\u6301 ClusterIssuer\uff0c\u4f46\u662f\u6211\u6ca1\u6210\u529f\uff0c\u6240\u4ee5\u7528\u4e86 issuer \u7684\u65b9\u5f0f\u3002</p> <p>\u521b\u5efa issuer</p> <pre><code>$ cat &gt; issuer.yaml &lt;&lt; EOF\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: letsencrypt\n  namespace: saas # \u4f5c\u7528\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u9ed8\u8ba4\u4e3a`default`\uff0c\u5fc5\u987b\u548c\u4e0a\u9762\u7684alidns-secrets\u5728\u540c\u4e00\u547d\u540d\u7a7a\u95f4\nspec:\n  acme:\n    email: lxh@cxh.cn # \u4f60\u7684\u90ae\u7bb1\n    privateKeySecretRef:\n      name: letsencrypt\n    server: https://acme-v02.api.letsencrypt.org/directory\n    solvers:\n    - dns01:\n        webhook:\n          config:\n            accessTokenSecretRef:\n              key: access-token\n              name: alidns-secrets\n            regionId: cn-beijing\n            secretKeySecretRef:\n              key: secret-key\n              name: alidns-secrets\n          groupName: example.com # \u9ed8\u8ba4\u5b89\u88c5\u7684\u503c\u5c31\u662f\u8fd9\u4e2a\uff0c\u7167\u7740\u6284\u5c31\u5b8c\u4e8b\u513f\n          solverName: alidns-solver\n      selector:\n        dnsNames:\n        - lxh.io # \u4f60\u7684\u57df\u540d\n        - '*.lxh.io'\nEOF\n$ kubectl apply -f issuer.yaml\n</code></pre>"},{"location":"tutorials/kubenetes-aliyun-https/#certificate","title":"\u914d\u7f6e certificate","text":"<pre><code>$ cat &gt; certificate.yaml &lt;&lt; EOF\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: saas-tls\n  namespace: saas # \u6307\u5b9a\u8bc1\u4e66\u751f\u6210\u5230\u54ea\u4e2a\u5de5\u4f5c\u7a7a\u95f4\uff0c\u5fc5\u987b\u548cissuer\u7684\u547d\u540d\u7a7a\u95f4\u4e00\u81f4\nspec:\n  secretName: saas-tls #\u751f\u6210\u540e\u8bc1\u4e66\u7684\u914d\u7f6e\u6587\u4ef6\u540d\u79f0\n  commonName: saas.xinli000.com # \u8bc1\u4e66\u7684\u57df\u540d\n  dnsNames:\n  - saas.xinli000.com\n  - \"*.saas.xinli000.com\"\n  issuerRef:\n    name: letsencrypt\n    kind: Issuer\nEOF\n$ kubectl apply -f certificate.yaml\n</code></pre>"},{"location":"tutorials/kubenetes-aliyun-https/#_3","title":"\u68c0\u67e5\u8bc1\u4e66\u7b7e\u53d1\u662f\u5426\u6210\u529f","text":"<p>\u8bc1\u4e66\u7b7e\u53d1\u6b63\u5e38\u60c5\u51b5\u4e0b\u4f1a\u5728\u4e94\u5206\u949f\u4e4b\u5185\u7b7e\u53d1\u5b8c\u6bd5\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u67e5\u770b\u662f\u5426\u6210\u529f</p> <pre><code>$ kubectl get certificate -A\nNAMESPACE      NAME                                    READY   SECRET                                  AGE\ncert-manager   alidns-webhook-1654650790-ca            True    alidns-webhook-1654650790-ca            7d23h\ncert-manager   alidns-webhook-1654650790-webhook-tls   True    alidns-webhook-1654650790-webhook-tls   7d23h\nsaas           saas-tls                                True    saas-tls                                7d22h\n# \u51fa\u73b0\u5982\u4e0a\u5185\u5bb9\u5373\u4e3a\u7b7e\u53d1\u6210\u529f\n</code></pre>"},{"location":"tutorials/syncing-secrets-across-namespaces/","title":"Syncing Secrets Across Namespaces","text":"<p>It may be required for multiple components across namespaces to consume the same <code>Secret</code> that has been created by a single <code>Certificate</code>. The recommended way to do this is to use extensions such as:   - reflector with support    for auto secret reflection   - kubed with its   secret syncing feature   - kubernetes-replicator secret replication</p>"},{"location":"tutorials/syncing-secrets-across-namespaces/#serving-a-wildcard-to-ingress-resources-in-different-namespaces-default-ssl-certificate","title":"Serving a wildcard to ingress resources in different namespaces (default SSL certificate)","text":"<p>Most ingress controllers, including ingress-nginx, Traefik, and Kong support specifying a single certificate to be used for ingress resources which request TLS but do not specify <code>tls.[].secretName</code>. This is often referred to as a \"default SSL certificate\". As long as this is correctly configured, ingress resources in any namespace will be able to use a single wildcard certificate. Wildcard certificates are not supported with HTTP01 validation and require DNS01.</p> <p>Sample ingress snippet:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\n#[...]\nspec:\n  rules:\n  - host: service.example.com\n  #[...]\n  tls:\n  - hosts:\n    - service.example.com\n    #secretName omitted to use default wildcard certificate\n</code></pre>"},{"location":"tutorials/syncing-secrets-across-namespaces/#syncing-arbitrary-secrets-across-namespaces-using-extensions","title":"Syncing arbitrary secrets across namespaces using extensions","text":"<p>In order for the target Secret to be synced, you can use the <code>secretTemplate</code> field for annotating the generated secret with the extension specific annotation (See CertificateSecretTemplate).</p>"},{"location":"tutorials/syncing-secrets-across-namespaces/#using-reflector","title":"Using <code>reflector</code>","text":"<p>The example below shows syncing a certificate's secret from the <code>cert-manager</code> namespace to multiple namespaces (i.e. <code>dev</code>, <code>staging</code>, <code>prod</code>).  Reflector will ensure that any namespace (existing or new) matching the allowed condition (with regex support) will get a copy of the certificate's secret and will keep it up to date.  You can also sync other secrets (different name) using <code>reflector</code> (consult the extension's README)</p> <pre><code>---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: source\nnamespace: cert-manager\nspec:\nsecretName: source-tls\ncommonName: source\nissuerRef:\nname: source-ca\nkind: Issuer\ngroup: cert-manager.io\nsecretTemplate:\nannotations:\nreflector.v1.k8s.emberstack.com/reflection-allowed: \"true\"\nreflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: \"dev,staging,prod\"  # Control destination namespaces\nreflector.v1.k8s.emberstack.com/reflection-auto-enabled: \"true\" # Auto create reflection for matching namespaces\nreflector.v1.k8s.emberstack.com/reflection-auto-namespaces: \"dev,staging,prod\" # Control auto-reflection namespaces\n</code></pre>"},{"location":"tutorials/syncing-secrets-across-namespaces/#using-kubed","title":"Using <code>kubed</code>","text":"<p>The example below shows syncing a certificate belonging to the <code>sandbox</code> Certificate from the <code>cert-manager</code> namespace, into the <code>sandbox</code> namespace.</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\nname: sandbox\nlabels:\ncert-manager-tls: sandbox # Define namespace label for kubed\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: sandbox\nnamespace: cert-manager\nspec:\nsecretName: sandbox-tls\ncommonName: sandbox\nissuerRef:\nname: sandbox-ca\nkind: Issuer\ngroup: cert-manager.io\nsecretTemplate:\nannotations:\nkubed.appscode.com/sync: \"cert-manager-tls=sandbox\" # Sync certificate to matching namespaces\n</code></pre>"},{"location":"tutorials/syncing-secrets-across-namespaces/#using-kubernetes-replicator","title":"Using <code>kubernetes-replicator</code>","text":"<p>Replicator supports both push- and pull-based replication. Push-based replication will \"push out\" the TLS secret into namespaces when new ones are created, or when the secret changes. Pull-based replication makes it possible to create an empty TLS secret in the destination namespace and select a \"source\" resource from which the data is replicated from. The following example shows the pull-based approach: <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: source\nnamespace: cert-manager\nspec:\nsecretName: source-tls\ncommonName: source\nissuerRef:\nname: source-ca\nkind: Issuer\nsecretTemplate:\nannotations:\nreplicator.v1.mittwald.de/replication-allowed: \"true\"  # permit replication\nreplicator.v1.mittwald.de/replication-allowed-namespaces: \"dev,test,prod-[0-9]*\"  # comma separated list of namespaces or regular expressions\n---\napiVersion: v1\nkind: Secret\nmetadata:\nname: tls-secret-replica\nnamespace: prod-1\nannotations:\nreplicator.v1.mittwald.de/replicate-from: cert-manager/source-tls\ntype: kubernetes.io/tls\n# Normally, we'd create an empty destination secret, but secrets of type\n# 'kubernetes.io/tls' are treated in a special way and need to have properties\n# data[\"tls.crt\"] and data[\"tls.key\"] to begin with, though they may be empty.\ndata:\ntls.key: \"\"\ntls.crt: \"\"\n</code></pre></p>"},{"location":"tutorials/acme/dns-validation/","title":"DNS \u9a8c\u8bc1","text":""},{"location":"tutorials/acme/dns-validation/#dns-acme","title":"\u4f7f\u7528 DNS \u9a8c\u8bc1\u9881\u53d1 ACME \u8bc1\u4e66","text":"<p>cert-manager \u53ef\u4ee5\u901a\u8fc7ACME\u534f\u8bae\u4ece CA \u83b7\u53d6\u8bc1\u4e66\u3002 ACME \u534f\u8bae\u652f\u6301\u5404\u79cd\u6311\u6218\u673a\u5236\uff0c\u8fd9\u4e9b\u673a\u5236\u7528\u4e8e\u8bc1\u660e\u57df\u7684\u6240\u6709\u6743\uff0c\u4ee5\u4fbf\u4e3a\u8be5\u57df\u9881\u53d1\u6709\u6548\u7684\u8bc1\u4e66\u3002</p> <p>DNS01 \u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u6311\u6218\u673a\u5236\u3002\u901a\u8fc7 DNS01 \u6311\u6218\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bc1\u660e\u60a8\u63a7\u5236\u5176 DNS \u8bb0\u5f55\u6765\u8bc1\u660e\u57df\u7684\u6240\u6709\u6743\u3002 \u8fd9\u662f\u901a\u8fc7\u521b\u5efa\u5177\u6709\u7279\u5b9a\u5185\u5bb9\u7684 TXT \u8bb0\u5f55\u6765\u5b8c\u6210\u7684\uff0c\u8be5\u8bb0\u5f55\u8bc1\u660e\u60a8\u5df2\u7ecf\u63a7\u5236\u4e86\u57df DNS \u8bb0\u5f55\u3002</p> <p>\u4ee5\u4e0b\u9881\u53d1\u8005\u5b9a\u4e49\u4e86\u542f\u7528 DNS \u9a8c\u8bc1\u6240\u9700\u7684\u4fe1\u606f\u3002 \u60a8\u53ef\u4ee5\u5728Issuer docs\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e Issuer \u6e90\u7684\u4fe1\u606f\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt-staging\nnamespace: default\nspec:\nacme:\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nemail: user@example.com\n# Name of a secret used to store the ACME account private key\nprivateKeySecretRef:\nname: letsencrypt-staging\n# ACME DNS-01 provider configurations\nsolvers:\n# An empty 'selector' means that this solver matches all domains\n- selector: {}\ndns01:\ncloudDNS:\n# The ID of the GCP project\n# reference: https://cert-manager.io/docs/tutorials/acme/dns-validation/\nproject: $PROJECT_ID\n# This is the secret used to access the service account\nserviceAccountSecretRef:\nname: clouddns-dns01-solver-svc-acct\nkey: key.json\n# We only use cloudflare to solve challenges for example.org.\n# Alternative options such as 'matchLabels' and 'dnsZones' can be specified\n# as part of a solver's selector too.\n- selector:\ndnsNames:\n- example.org\ndns01:\ncloudflare:\nemail: my-cloudflare-acc@example.com\n# !! Remember to create a k8s secret before\n# kubectl create secret generic cloudflare-api-key-secret\napiKeySecretRef:\nname: cloudflare-api-key-secret\nkey: api-key\n</code></pre> <p>\u6211\u4eec\u5df2\u7ecf\u4e3a Let\u2019s Encrypt \u7684\u9884\u6f14\u73af\u5883\u6307\u5b9a\u4e86 ACME \u670d\u52a1\u5668 URL\u3002 \u9884\u6f14\u73af\u5883\u4e0d\u4f1a\u9881\u53d1\u53d7\u4fe1\u4efb\u7684\u8bc1\u4e66\uff0c\u4f46\u7528\u4e8e\u786e\u4fdd\u5728\u8f6c\u79fb\u5230\u751f\u4ea7\u73af\u5883\u4e4b\u524d\u9a8c\u8bc1\u8fc7\u7a0b\u6b63\u5e38\u5de5\u4f5c\u3002 Encrypt \u7684\u751f\u4ea7\u73af\u5883\u65bd\u52a0\u4e86\u66f4\u4e25\u683c\u7684\u901f\u7387\u9650\u5236\uff0c\u56e0\u6b64\u4e3a\u4e86\u51cf\u5c11\u60a8\u89e6\u53ca\u8fd9\u4e9b\u9650\u5236\u7684\u673a\u4f1a\uff0c\u5f3a\u70c8\u5efa\u8bae\u4ece\u4f7f\u7528\u9884\u6f14\u73af\u5883\u5f00\u59cb\u3002 \u8981\u8fdb\u5165\u751f\u4ea7\u73af\u5883\uff0c\u53ea\u9700\u5c06 URL \u8bbe\u7f6e\u4e3a<code>https://acme-v02.api.letsencrypt.org/directory</code>\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Issuer\u3002</p> <p>ACME \u534f\u8bae\u7684\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u5ba2\u6237\u7aef\u5411 ACME \u670d\u52a1\u5668\u6ce8\u518c\u3002 \u6b64\u9636\u6bb5\u5305\u62ec\u751f\u6210\u4e00\u4e2a\u975e\u5bf9\u79f0\u5bc6\u94a5\u5bf9\uff0c\u7136\u540e\u5c06\u5176\u4e0e\u53d1\u884c\u8005\u4e2d\u6307\u5b9a\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u76f8\u5173\u8054\u3002 \u8bf7\u786e\u4fdd\u5c06\u6b64\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u66f4\u6539\u4e3a\u60a8\u62e5\u6709\u7684\u6709\u6548\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002 \u5b83\u901a\u5e38\u7528\u4e8e\u5728\u60a8\u7684\u8bc1\u4e66\u5373\u5c06\u66f4\u65b0\u65f6\u53d1\u9001\u5230\u671f\u901a\u77e5\u3002 \u751f\u6210\u7684\u79c1\u94a5\u5b58\u50a8\u5728\u540d\u4e3a\u201cletsencrypt-staging\u201d\u7684 Secret \u4e2d\u3002</p> <p><code>dns01</code>\u8282\u5305\u542b\u53ef\u7528\u4e8e\u89e3\u51b3 DNS \u6311\u6218\u7684 DNS01 \u63d0\u4f9b\u8005\u5217\u8868\u3002 \u6211\u4eec\u7684\u53d1\u884c\u8005\u5b9a\u4e49\u4e86\u4e24\u4e2a\u63d0\u4f9b\u8005\u3002 \u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5\u5728\u83b7\u53d6\u8bc1\u4e66\u65f6\u9009\u62e9\u4f7f\u7528\u54ea\u4e00\u4e2a\u3002</p> <p>\u6709\u5173 DNS \u63d0\u4f9b\u8005\u914d\u7f6e\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5305\u62ec\u53d7\u652f\u6301\u7684\u63d0\u4f9b\u8005\u5217\u8868\uff0c\u53ef\u4ee5\u5728DNS01 \u53c2\u8003\u6587\u6863\u4e2d\u627e\u5230\u3002</p> <p>\u4e00\u65e6\u6211\u4eec\u521b\u5efa\u4e86\u4e0a\u9762\u7684\u9881\u53d1\u8005\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u83b7\u53d6\u8bc1\u4e66\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-com\nnamespace: default\nspec:\nsecretName: example-com-tls\nissuerRef:\nname: letsencrypt-staging\ndnsNames:\n- \"*.example.com\"\n- example.com\n- example.org\n</code></pre> <p>Certificate \u6e90\u63cf\u8ff0\u4e86\u6211\u4eec\u6240\u9700\u7684\u8bc1\u4e66\u4ee5\u53ca\u53ef\u7528\u4e8e\u83b7\u53d6\u8be5\u8bc1\u4e66\u7684\u53ef\u80fd\u65b9\u6cd5\u3002 \u60a8\u53ef\u4ee5\u50cf\u5176\u4ed6\u57df\u4e00\u6837\u83b7\u53d6\u901a\u914d\u7b26\u57df\u7684\u8bc1\u4e66\u3002 \u786e\u4fdd\u5728 YAML \u6e90\u4e2d\u7528\u661f\u53f7\u5305\u88c5\u901a\u914d\u7b26\u57df\uff0c\u4ee5\u907f\u514d\u683c\u5f0f\u95ee\u9898\u3002 \u5982\u679c\u5728\u540c\u4e00\u4e2a\u8bc1\u4e66\u4e0a\u540c\u65f6\u6307\u5b9a<code>example.com</code> \u548c <code>*.example.com</code>\uff0c\u6267\u884c\u9a8c\u8bc1\u6240\u9700\u7684\u65f6\u95f4\u4f1a\u7a0d\u5fae\u957f\u4e00\u4e9b\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u57df\u90fd\u5fc5\u987b\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u8fdb\u884c\u9a8c\u8bc1\u3002 \u60a8\u53ef\u4ee5\u5728docs\u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8e Certificate \u6e90\u7684\u4fe1\u606f\u3002 \u5982\u679c\u6210\u529f\u83b7\u5f97\u8bc1\u4e66\uff0c\u751f\u6210\u7684\u5bc6\u94a5\u5bf9\u5c06\u5b58\u50a8\u5728\u540d\u4e3a<code>example-com-tls</code>\u7684\u79d8\u5bc6\u4e2d\uff0c\u4e0e\u8bc1\u4e66\u4f4d\u4e8e\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u3002</p> <p>\u8bc1\u4e66\u5c06\u6709\u4e00\u4e2a\u901a\u7528\u540d\u79f0<code>*.example.com</code>\uff0c\u4e3b\u9898\u66ff\u4ee3\u540d\u79f0(san)\u5c06\u662f<code>*.example.com</code>, <code>example.com</code> \u548c <code>example.org</code>\u3002</p> <p>\u5728\u6211\u4eec\u7684\u8bc1\u4e66\u4e2d\uff0c\u6211\u4eec\u5f15\u7528\u4e86\u4e0a\u9762\u7684<code>letsencrypt-staging</code>\u9881\u53d1\u8005\u3002 \u9881\u53d1\u8005\u5fc5\u987b\u4e0e\u8bc1\u4e66\u5728\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u3002 \u5982\u679c\u4f60\u60f3\u5f15\u7528\u4e00\u4e2a<code>ClusterIssuer</code>\uff0c\u5b83\u662f\u4e00\u4e2a\u96c6\u7fa4\u8303\u56f4\u7684 Issuer \u7248\u672c\uff0c\u4f60\u5fc5\u987b\u5728<code>issuerRef</code>\u8282\u4e2d\u6dfb\u52a0<code>kind: ClusterIssuer</code>\u3002</p> <p>\u6709\u5173<code>ClusterIssuers</code>\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfbissuer \u6982\u5ff5.</p> <p><code>acme</code>\u8282\u5b9a\u4e49\u4e86 ACME \u6311\u6218\u7684\u914d\u7f6e\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u7528\u4e8e\u9a8c\u8bc1\u57df\u6240\u6709\u6743\u7684 DNS \u6311\u6218\u7684\u914d\u7f6e\u3002 \u5bf9\u4e8e<code>dns01</code>\u8282\u4e2d\u63d0\u5230\u7684\u6bcf\u4e2a\u57df\uff0ccert-manager \u5c06\u4f7f\u7528\u6765\u81ea\u5f15\u7528\u7684\u9881\u53d1\u8005\u7684\u63d0\u4f9b\u8005\u51ed\u636e\u6765\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a<code>_acme-challenge</code>\u7684 TXT \u8bb0\u5f55\u3002 \u7136\u540e\uff0cACME \u670d\u52a1\u5668\u5c06\u5bf9\u8be5\u8bb0\u5f55\u8fdb\u884c\u9a8c\u8bc1\uff0c\u4ee5\u4fbf\u9881\u53d1\u8bc1\u4e66\u3002 \u4e00\u65e6\u9a8c\u8bc1\u4e86\u57df\u6240\u6709\u6743\uff0c\u4efb\u4f55\u53d7\u8bc1\u4e66\u7ba1\u7406\u5668\u5f71\u54cd\u7684\u8bb0\u5f55\u90fd\u5c06\u88ab\u6e05\u9664\u3002</p> <p>Note</p> <p>\u60a8\u6709\u8d23\u4efb\u786e\u4fdd\u6240\u9009\u62e9\u7684\u63d0\u4f9b\u8005\u5bf9\u60a8\u7684\u57df\u5177\u6709\u6743\u5a01\u6027\u3002</p> <p>\u5728\u521b\u5efa\u4e86\u4e0a\u9762\u7684\u8bc1\u4e66\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>kubectl describe</code>\u68c0\u67e5\u5b83\u662f\u5426\u5df2\u7ecf\u6210\u529f\u83b7\u5f97:</p> <pre><code>$ kubectl describe certificate example-com\nEvents:\n  Type    Reason          Age      From          Message\n  ----    ------          ----     ----          -------\n  Normal  CreateOrder     57m      cert-manager  Created new ACME order, attempting validation...\n  Normal  DomainVerified  55m      cert-manager  Domain \"*.example.com\" verified with \"dns-01\" validation\n  Normal  DomainVerified  55m      cert-manager  Domain \"example.com\" verified with \"dns-01\" validation\n  Normal  DomainVerified  55m      cert-manager  Domain \"example.org\" verified with \"dns-01\" validation\n  Normal  IssueCert       55m      cert-manager  Issuing certificate...\n  Normal  CertObtained    55m      cert-manager  Obtained certificate from ACME server\n  Normal  CertIssued      55m      cert-manager  Certificate issued successfully\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528<code>kubectl get secret example-com-tls -o yaml</code>\u68c0\u67e5\u53d1\u5e03\u662f\u5426\u6210\u529f\u3002 \u60a8\u5e94\u8be5\u770b\u5230\u4e00\u4e2a base64 \u7f16\u7801\u7684\u7b7e\u540d TLS \u5bc6\u94a5\u5bf9\u3002</p> <p>\u83b7\u5f97\u8bc1\u4e66\u540e\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u5b9a\u671f\u68c0\u67e5\u5176\u6709\u6548\u6027\uff0c\u5e76\u5728\u63a5\u8fd1\u5230\u671f\u65f6\u5c1d\u8bd5\u66f4\u65b0\u5b83\u3002 \u5f53\u8bc1\u4e66\u4e0a\u7684'Not After'\u5b57\u6bb5\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\u52a0 30 \u5929\u65f6\uff0ccert-manager \u8ba4\u4e3a\u8bc1\u4e66\u5373\u5c06\u5230\u671f\u3002</p>"},{"location":"tutorials/acme/http-validation/","title":"HTTP \u9a8c\u8bc1","text":""},{"location":"tutorials/acme/http-validation/#http-acme","title":"\u4f7f\u7528 HTTP \u9a8c\u8bc1\u9881\u53d1 ACME \u8bc1\u4e66","text":"<p>cert-manager \u53ef\u4ee5\u901a\u8fc7ACME\u534f\u8bae\u4ece CA \u83b7\u53d6\u8bc1\u4e66\u3002 ACME \u534f\u8bae\u652f\u6301\u5404\u79cd\u6311\u6218\u673a\u5236\uff0c\u8fd9\u4e9b\u673a\u5236\u7528\u4e8e\u8bc1\u660e\u57df\u7684\u6240\u6709\u6743\uff0c\u4ee5\u4fbf\u4e3a\u8be5\u57df\u9881\u53d1\u6709\u6548\u7684\u8bc1\u4e66\u3002</p> <p>\u5176\u4e2d\u4e00\u4e2a\u8fd9\u6837\u7684\u6311\u6218\u673a\u5236\u662f HTTP01 \u6311\u6218\u3002 \u4f7f\u7528 HTTP01 \u6311\u6218\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u786e\u4fdd\u57df\u4e2d\u5b58\u5728\u7279\u5b9a\u6587\u4ef6\u6765\u8bc1\u660e\u57df\u7684\u6240\u6709\u6743\u3002 \u5982\u679c\u60a8\u80fd\u591f\u5728\u7ed9\u5b9a\u8def\u5f84\u4e0b\u53d1\u5e03\u7ed9\u5b9a\u6587\u4ef6\uff0c\u5219\u5047\u5b9a\u60a8\u63a7\u5236\u4e86\u57df\u3002</p> <p>\u4e0b\u9762\u7684\u53d1\u5e03\u8005\u5b9a\u4e49\u4e86\u542f\u7528 HTTP \u9a8c\u8bc1\u6240\u9700\u7684\u4fe1\u606f\u3002 \u60a8\u53ef\u4ee5\u5728Issuer docs\u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e Issuer \u6e90\u7684\u4fe1\u606f\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt-staging\nnamespace: default\nspec:\nacme:\n# The ACME server URL\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\n# Email address used for ACME registration\nemail: user@example.com\n# Name of a secret used to store the ACME account private key\nprivateKeySecretRef:\nname: letsencrypt-staging\n# Enable the HTTP-01 challenge provider\nsolvers:\n# An empty 'selector' means that this solver matches all domains\n- selector: {}\nhttp01:\ningress:\nclass: nginx\n</code></pre> <p>\u6211\u4eec\u5df2\u7ecf\u4e3a Let\u2019s Encrypt \u7684\u9884\u6f14\u73af\u5883\u6307\u5b9a\u4e86 ACME \u670d\u52a1\u5668 URL\u3002 \u9884\u6f14\u73af\u5883\u4e0d\u4f1a\u9881\u53d1\u53d7\u4fe1\u4efb\u7684\u8bc1\u4e66\uff0c\u4f46\u7528\u4e8e\u786e\u4fdd\u5728\u8f6c\u79fb\u5230\u751f\u4ea7\u73af\u5883\u4e4b\u524d\u9a8c\u8bc1\u8fc7\u7a0b\u6b63\u5e38\u5de5\u4f5c\u3002 \u8ba9\u6211\u4eec\u52a0\u5bc6\u7684\u751f\u4ea7\u73af\u5883\u5f3a\u52a0\u66f4\u4e25\u683c\u7684\u901f\u7387\u9650\u5236\uff0c\u6240\u4ee5\u4e3a\u4e86\u51cf\u5c11\u60a8\u8fbe\u5230\u8fd9\u4e9b\u9650\u5236\u7684\u673a\u4f1a\uff0c\u5f3a\u70c8\u5efa\u8bae\u4ece\u4f7f\u7528\u9884\u6f14\u73af\u5883\u5f00\u59cb\u3002 \u8981\u8fdb\u5165\u751f\u4ea7\u73af\u5883\uff0c\u53ea\u9700\u5c06 URL \u8bbe\u7f6e\u4e3a<code>https://acme-v02.api.letsencrypt.org/directory</code>\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Issuer\u3002</p> <p>ACME \u534f\u8bae\u7684\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u5ba2\u6237\u7aef\u5411 ACME \u670d\u52a1\u5668\u6ce8\u518c\u3002 \u6b64\u9636\u6bb5\u5305\u62ec\u751f\u6210\u4e00\u4e2a\u975e\u5bf9\u79f0\u5bc6\u94a5\u5bf9\uff0c\u7136\u540e\u5c06\u5176\u4e0e\u53d1\u884c\u8005\u4e2d\u6307\u5b9a\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u76f8\u5173\u8054\u3002 \u8bf7\u786e\u4fdd\u5c06\u6b64\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u66f4\u6539\u4e3a\u60a8\u62e5\u6709\u7684\u6709\u6548\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002 \u5b83\u901a\u5e38\u7528\u4e8e\u5728\u60a8\u7684\u8bc1\u4e66\u5373\u5c06\u66f4\u65b0\u65f6\u53d1\u9001\u5230\u671f\u901a\u77e5\u3002 \u751f\u6210\u7684\u79c1\u94a5\u5b58\u50a8\u5728\u540d\u4e3a<code>letsencrypt-staging</code>\u7684 Secret \u4e2d\u3002</p> <p>\u6211\u4eec\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a\u6216\u591a\u4e2a\u89e3\u7b97\u5668\u6765\u5904\u7406 ACME \u6311\u6218\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u60f3\u8981\u4f7f\u7528 HTTP \u9a8c\u8bc1\uff0c\u6240\u4ee5\u6211\u4eec\u6307\u5b9a\u4e86\u4e00\u4e2a<code>http01</code>\u6c42\u89e3\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6620\u5c04\u4e0d\u540c\u7684\u57df\u6765\u4f7f\u7528\u4e0d\u540c\u7684 Solver \u914d\u7f6e\u3002</p> <p>\u4e00\u65e6\u6211\u4eec\u521b\u5efa\u4e86\u4e0a\u9762\u7684\u9881\u53d1\u8005\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u83b7\u53d6\u8bc1\u4e66\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-com\nnamespace: default\nspec:\nsecretName: example-com-tls\nissuerRef:\nname: letsencrypt-staging\ncommonName: example.com\ndnsNames:\n- www.example.com\n</code></pre> <p>Certificate \u6e90\u63cf\u8ff0\u4e86\u6211\u4eec\u6240\u9700\u7684\u8bc1\u4e66\u4ee5\u53ca\u53ef\u7528\u4e8e\u83b7\u53d6\u8be5\u8bc1\u4e66\u7684\u53ef\u80fd\u65b9\u6cd5\u3002 \u60a8\u53ef\u4ee5\u5728docs\u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8e Certificate \u6e90\u7684\u4fe1\u606f\u3002 \u5982\u679c\u6210\u529f\u83b7\u5f97\u8bc1\u4e66\uff0c\u751f\u6210\u7684\u5bc6\u94a5\u5bf9\u5c06\u5b58\u50a8\u5728\u540d\u4e3a<code>example-com-tls</code>\u7684\u79d8\u5bc6\u4e2d\uff0c\u4e0e\u8bc1\u4e66\u4f4d\u4e8e\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u3002</p> <p>\u8bc1\u4e66\u5c06\u6709\u4e00\u4e2a\u901a\u7528\u540d\u79f0<code>example.com</code>\uff0c\u4e3b\u9898\u66ff\u4ee3\u540d\u79f0(SANs) \u5c06\u662f<code>example.com</code>\u548c<code>www.example.com</code>\u3002 \u8bf7\u6ce8\u610f\uff0cTLS \u5ba2\u6237\u7aef\u53ea\u652f\u6301\u8fd9\u4e9b SANs\u3002</p> <p>\u5728\u6211\u4eec\u7684\u8bc1\u4e66\u4e2d\uff0c\u6211\u4eec\u5f15\u7528\u4e86\u4e0a\u9762\u7684<code>letsencrypt-staging</code>\u9881\u53d1\u8005\u3002 \u9881\u53d1\u8005\u5fc5\u987b\u4e0e\u8bc1\u4e66\u5728\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u3002 \u5982\u679c\u4f60\u60f3\u5f15\u7528\u4e00\u4e2a<code>ClusterIssuer</code>\uff0c\u5b83\u662f\u4e00\u4e2a\u96c6\u7fa4\u8303\u56f4\u7684 Issuer \u7248\u672c\uff0c\u4f60\u5fc5\u987b\u5728<code>issuerRef</code> \u8282\u4e2d\u6dfb\u52a0<code>kind: ClusterIssuer</code>\u3002</p> <p>\u6709\u5173<code>ClusterIssuers</code>\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb<code>ClusterIssuers</code> \u6587\u6863.</p> <p><code>acme</code>\u8282\u5b9a\u4e49\u4e86 ACME \u6311\u6218\u7684\u914d\u7f6e\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u7ecf\u5b9a\u4e49\u4e86\u7528\u4e8e\u9a8c\u8bc1\u57df\u6240\u6709\u6743\u7684 HTTP01 \u6311\u6218\u7684\u914d\u7f6e\u3002 \u4e3a\u4e86\u9a8c\u8bc1<code>http01</code>\u8282\u4e2d\u63d0\u5230\u7684\u6bcf\u4e2a\u57df\u7684\u6240\u6709\u6743\uff0ccert-manager \u5c06\u521b\u5efa\u4e00\u4e2a Pod\u3001Service \u548c Ingress\uff0c\u4ee5\u516c\u5f00\u4e00\u4e2a\u6ee1\u8db3 HTTP01 \u6311\u6218\u7684 HTTP \u7aef\u70b9\u3002</p> <p><code>http01</code> \u8282\u4e2d\u7684<code>ingress</code> \u548c <code>ingressClass</code>\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u63a7\u5236 cert-manager \u5982\u4f55\u4e0e ingress \u6e90\u4ea4\u4e92:</p> <ul> <li>\u5982\u679c\u6307\u5b9a\u4e86<code>ingress</code>\u5b57\u6bb5\uff0c\u5219\u5fc5\u987b\u5df2\u7ecf\u5b58\u5728\u4e0e Certificate \u5728\u540c\u4e00\u540d\u79f0\u7a7a\u95f4\u4e2d\u7684\u540c\u540d ingress \u6e90\uff0c\u5e76\u4e14\u53ea\u4f1a\u4fee\u6539\u5b83\u4ee5\u6dfb\u52a0\u9002\u5f53\u7684\u89c4\u5219\u6765\u89e3\u51b3\u6311\u6218\u3002   \u8be5\u5b57\u6bb5\u5bf9\u4e8e\u8c37\u6b4c Cloud Loadbalancer \u5165\u53e3\u63a7\u5236\u5668\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u4e3a\u6bcf\u4e2a\u5165\u53e3\u6e90\u5206\u914d\u5355\u4e2a\u516c\u5171 IP \u5730\u5740\u7684\u63a7\u5236\u5668\u975e\u5e38\u6709\u7528\u3002   \u5982\u679c\u6ca1\u6709\u4eba\u5de5\u5e72\u9884\uff0c\u521b\u5efa\u65b0\u7684\u5165\u53e3\u6e90\u5c06\u5bfc\u81f4\u4efb\u4f55\u6311\u6218\u5931\u8d25\u3002</li> <li>\u5982\u679c\u6307\u5b9a\u4e86<code>ingressClass</code>\u5b57\u6bb5\uff0c\u5219\u5c06\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u968f\u673a\u751f\u6210\u540d\u79f0\u7684\u65b0\u5165\u53e3\u6e90\u4ee5\u89e3\u51b3\u8be5\u6311\u6218\u3002   \u8fd9\u4e2a\u65b0\u6e90\u5c06\u6709\u4e00\u4e2a\u5e26\u6709<code>kubernetes.io/ingress.class</code>\u952e\u7684\u6ce8\u91ca\uff0c\u503c\u8bbe\u7f6e\u4e3a<code>ingressClass</code>\u5b57\u6bb5\u7684\u503c\u3002   \u8fd9\u9002\u7528\u4e8e NGINX \u5165\u53e3\u63a7\u5236\u5668\u3002</li> <li>\u5982\u679c\u4e24\u8005\u90fd\u6ca1\u6709\u6307\u5b9a\uff0c\u5219\u5c06\u4f7f\u7528\u968f\u673a\u751f\u6210\u7684\u540d\u79f0\u521b\u5efa\u65b0\u7684\u5165\u53e3\u6e90\uff0c\u4f46\u5b83\u4eec\u5c06\u6ca1\u6709\u5165\u53e3\u7c7b\u6ce8\u91ca\u96c6\u3002</li> <li>\u5982\u679c\u4e24\u8005\u90fd\u6307\u5b9a\u4e86\uff0c\u90a3\u4e48<code>ingress</code>\u5b57\u6bb5\u5c06\u4f18\u5148\u3002</li> </ul> <p>\u4e00\u65e6\u9a8c\u8bc1\u4e86\u57df\u6240\u6709\u6743\uff0c\u4efb\u4f55\u53d7\u8bc1\u4e66\u7ba1\u7406\u5668\u5f71\u54cd\u7684\u6e90\u90fd\u5c06\u88ab\u6e05\u9664\u6216\u5220\u9664\u3002</p> <p>Note</p> <p>\u5c06\u6bcf\u4e2a\u57df\u540d\u6307\u5411\u60a8\u7684\u5165\u53e3\u63a7\u5236\u5668\u7684\u6b63\u786eIP\u5730\u5740\u662f\u60a8\u7684\u8d23\u4efb\u3002</p> <p>\u5728\u521b\u5efa\u4e86\u4e0a\u9762\u7684\u8bc1\u4e66\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>kubectl describe</code>\u68c0\u67e5\u5b83\u662f\u5426\u5df2\u7ecf\u6210\u529f\u83b7\u5f97:</p> <pre><code>$ kubectl describe certificate example-com\nEvents:\n  Type    Reason          Age      From          Message\n  ----    ------          ----     ----          -------\n  Normal  CreateOrder     57m      cert-manager  Created new ACME order, attempting validation...\n  Normal  DomainVerified  55m      cert-manager  Domain \"example.com\" verified with \"http-01\" validation\n  Normal  DomainVerified  55m      cert-manager  Domain \"www.example.com\" verified with \"http-01\" validation\n  Normal  IssueCert       55m      cert-manager  Issuing certificate...\n  Normal  CertObtained    55m      cert-manager  Obtained certificate from ACME server\n  Normal  CertIssued      55m      cert-manager  Certificate issued successfully\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528<code>kubectl get secret example-com-tls -o yaml</code>\u68c0\u67e5\u53d1\u5e03\u662f\u5426\u6210\u529f\u3002 \u60a8\u5e94\u8be5\u770b\u5230\u4e00\u4e2a base64 \u7f16\u7801\u7684\u7b7e\u540d TLS \u5bc6\u94a5\u5bf9\u3002</p> <p>\u83b7\u5f97\u8bc1\u4e66\u540e\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u5b9a\u671f\u68c0\u67e5\u5176\u6709\u6548\u6027\uff0c\u5e76\u5728\u63a5\u8fd1\u5230\u671f\u65f6\u5c1d\u8bd5\u66f4\u65b0\u5b83\u3002 \u5f53\u8bc1\u4e66\u4e0a\u7684 'Not After' \u5b57\u6bb5\u5c0f\u4e8e\u5f53\u524d\u65f6\u95f4\u52a0 30 \u5929\u65f6\uff0ccert-manager \u8ba4\u4e3a\u8bc1\u4e66\u5373\u5c06\u5230\u671f\u3002</p>"},{"location":"tutorials/acme/migrating-from-kube-lego/","title":"\u4ece Kube-LEGO \u8fc1\u79fb\u8fc7\u6765","text":"<p>kube-lego\u662f\u4e00\u4e2a\u8f83\u65e7\u7684 Jetstack \u9879\u76ee\uff0c\u7528\u4e8e\u4ece Let\u2019s Encrypt(\u6216\u53e6\u4e00\u4e2a ACME \u670d\u52a1\u5668)\u83b7\u53d6 TLS \u8bc1\u4e66\u3002</p> <p>\u81ea\u4ece cert-managers \u53d1\u5e03\u4ee5\u6765\uff0ckube-lego \u9010\u6e10\u88ab\u5f03\u7528\uff0c\u8f6c\u800c\u652f\u6301\u8fd9\u4e2a\u9879\u76ee\u3002\u8fd9\u4e24\u8005\u4e4b\u95f4\u6709\u4e00\u4e9b\u5173\u952e\u7684\u533a\u522b:</p> Feature kube-lego cert-manager Configuration Annotations on Ingress resources CRDs CAs ACME ACME, signing key pair Kubernetes <code>v1.2</code> - <code>v1.8</code> <code>v1.7+</code> Debugging Look at logs Kubernetes Events API Multi-tenancy Not supported Supported Distinct issuance sources per Certificate Not supported Supported Ingress controller support (ACME) GCE, NGINX All <p>\u672c\u6307\u5357\u5c06\u4ecb\u7ecd\u5982\u4f55\u5b89\u5168\u5730\u5c06 kube-lego \u5b89\u88c5\u8fc1\u79fb\u5230 cert-manager\uff0c\u800c\u4e0d\u4e2d\u65ad\u670d\u52a1\u3002</p> <p>By the end of the guide, we should have:</p> <ol> <li> <p>Scaled down and removed kube-lego</p> </li> <li> <p>Installed cert-manager</p> </li> <li> <p>Migrated ACME private key to cert-manager</p> </li> <li> <p>Created an ACME <code>ClusterIssuer</code> using this private key, to issue certificates    throughout your cluster</p> </li> <li> <p>Configured cert-manager's <code>ingress-shim</code> to    automatically provision Certificate resources for all Ingress resources with    the <code>kubernetes.io/tls-acme: \"true\"</code> annotation, using the <code>ClusterIssuer</code> we    have created</p> </li> <li> <p>Verified that the cert-manager installation is working</p> </li> </ol>"},{"location":"tutorials/acme/migrating-from-kube-lego/#1-scale-down-kube-lego","title":"1. Scale down kube-lego","text":"<p>Before we begin deploying cert-manager, it is best we scale our kube-lego deployment down to 0 replicas. This will prevent the two controllers potentially 'fighting' each other. If you deployed kube-lego using the official deployment YAMLs, a command like so should do:</p> <pre><code>$ kubectl scale deployment kube-lego \\\n--namespace kube-lego \\\n--replicas=0\n</code></pre> <p>You can then verify your kube-lego pod is no longer running with:</p> <pre><code>$ kubectl get pods --namespace kube-lego\n</code></pre>"},{"location":"tutorials/acme/migrating-from-kube-lego/#2-deploy-cert-manager","title":"2. Deploy cert-manager","text":"<p>cert-manager should be deployed using Helm, according to our official installation guide. No special steps are required here. We will return to this deployment at the end of this guide and perform an upgrade of some of the CLI flags we deploy cert-manager with however.</p> <p>Please take extra care to ensure you have configured RBAC correctly when deploying Helm and cert-manager - there are some nuances described in our deploying document!</p>"},{"location":"tutorials/acme/migrating-from-kube-lego/#3-obtaining-your-acme-account-private-key","title":"3. Obtaining your ACME account private key","text":"<p>In order to continue issuing and renewing certificates on your behalf, we need to migrate the user account private key that kube-lego has created for you over to cert-manager.</p> <p>Your ACME user account identity is a private key, stored in a secret resource. By default, kube-lego will store this key in a secret named <code>kube-lego-account</code> in the same namespace as your kube-lego Deployment. You may have overridden this value when you deploy kube-lego, in which case the secret name to use will be the value of the <code>LEGO_SECRET_NAME</code> environment variable.</p> <p>You should download a copy of this secret resource and save it in your local directory:</p> <pre><code>$ kubectl get secret kube-lego-account -o yaml \\\n--namespace kube-lego \\\n--export &gt; kube-lego-account.yaml\n</code></pre> <p>Once saved, open up this file and change the <code>metadata.name</code> field to something more relevant to cert-manager. For the rest of this guide, we'll assume you chose <code>letsencrypt-private-key</code>.</p> <p>Once done, we need to create this new resource in the <code>cert-manager</code> namespace. By default, cert-manager stores supporting resources for <code>ClusterIssuers</code> in the namespace that it is running in, and we used <code>cert-manager</code> when deploying cert-manager above. You should change this if you have deployed cert-manager into a different namespace.</p> <pre><code>$ kubectl create -f kube-lego-account.yaml \\\n--namespace cert-manager\n</code></pre>"},{"location":"tutorials/acme/migrating-from-kube-lego/#4-creating-an-acme-clusterissuer-using-your-old-acme-account","title":"4. Creating an ACME <code>ClusterIssuer</code> using your old ACME account","text":"<p>We need to create a <code>ClusterIssuer</code> which will hold information about the ACME account previously registered via kube-lego. In order to do so, we need two more pieces of information from our old kube-lego deployment: the server URL of the ACME server, and the email address used to register the account.</p> <p>Both of these bits of information are stored within the kube-lego <code>ConfigMap</code>.</p> <p>To retrieve them, you should be able to <code>get</code> the <code>ConfigMap</code> using <code>kubectl</code>:</p> <pre><code>$ kubectl get configmap kube-lego -o yaml \\\n--namespace kube-lego \\\n--export\n</code></pre> <p>Your email address should be shown under the <code>.data.lego.email</code> field, and the ACME server URL under <code>.data.lego.url</code>.</p> <p>For the purposes of this guide, we will assume the email is <code>user@example.com</code> and the URL <code>https://acme-staging-v02.api.letsencrypt.org/directory</code>.</p> <p>Now that we have migrated our private key to the new Secret resource, as well as obtaining our ACME email address and URL, we can create a <code>ClusterIssuer</code> resource!</p> <p>Create a file named <code>cluster-issuer.yaml</code>:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n# Adjust the name here accordingly\nname: letsencrypt-staging\nspec:\nacme:\n# The ACME server URL\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\n# Email address used for ACME registration\nemail: user@example.com\n# Name of a secret used to store the ACME account private key from step 3\nprivateKeySecretRef:\nname: letsencrypt-private-key\n# Enable the HTTP-01 challenge provider\nsolvers:\n- http01:\ningress:\nclass: nginx\n</code></pre> <p>We then submit this file to our Kubernetes cluster:</p> <pre><code>$ kubectl create -f cluster-issuer.yaml\n</code></pre> <p>You should be able to verify the ACME account has been verified successfully:</p> <pre><code>$ kubectl describe clusterissuer letsencrypt-staging\n...\nStatus:\n  Acme:\n    Uri:  https://acme-staging-v02.api.letsencrypt.org/acme/acct/7571319\n  Conditions:\n    Last Transition Time:  2019-01-30T14:52:03Z\n    Message:               The ACME account was registered with the ACME server\n    Reason:                ACMEAccountRegistered\n    Status:                True\n    Type:                  Ready\n</code></pre>"},{"location":"tutorials/acme/migrating-from-kube-lego/#5-configuring-ingress-shim-to-use-our-new-clusterissuer-by-default","title":"5. Configuring ingress-shim to use our new <code>ClusterIssuer</code> by default","text":"<p>Now that our <code>ClusterIssuer</code> is ready to issue certificates, we have one last thing to do: we must reconfigure <code>ingress-shim</code> (deployed as part of cert-manager) to automatically create Certificate resources for all Ingress resources it finds with appropriate annotations.</p> <p>More information on the role of ingress-shim can be found in the docs, but for now we can just run a <code>helm upgrade</code> in order to add a few additional flags. Assuming you've named your <code>ClusterIssuer</code> <code>letsencrypt-staging</code> (as above), run:</p> <pre><code>$ helm upgrade cert-manager \\\njetstack/cert-manager \\\n--namespace cert-manager \\\n--set ingressShim.defaultIssuerName=letsencrypt-staging \\\n--set ingressShim.defaultIssuerKind=ClusterIssuer\n</code></pre> <p>You should see the cert-manager pod be re-created, and once started it should automatically create Certificate resources for all of your ingresses that previously had kube-lego enabled.</p>"},{"location":"tutorials/acme/migrating-from-kube-lego/#6-verify-each-ingress-now-has-a-corresponding-certificate","title":"6. Verify each ingress now has a corresponding Certificate","text":"<p>Before we finish, we should make sure there is now a Certificate resource for each ingress resource you previously enabled kube-lego on.</p> <p>You should be able to check this by running:</p> <pre><code>$ kubectl get certificates --all-namespaces\n</code></pre> <p>There should be an entry for each ingress in your cluster with the kube-lego annotation.</p> <p>We can also verify that cert-manager has 'adopted' the old TLS certificates by viewing the logs for cert-manager:</p> <pre><code>$ kubectl logs -n cert-manager -l app=cert-manager -c cert-manager\n...\nI1025 21:54:02.869269       1 sync.go:206] Certificate my-example-certificate scheduled for renewal in 292 hours\n</code></pre> <p>Here we can see cert-manager has verified the existing TLS certificate and scheduled it to be renewed in 292 hours time.</p>"},{"location":"tutorials/acme/nginx-ingress/","title":"\u62a4\u536b NGINX-ingress","text":"<p>\u672c\u6559\u7a0b\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 NGINX \u5b89\u88c5\u548c\u4fdd\u62a4\u96c6\u7fa4\u7684\u5165\u53e3\u3002</p>"},{"location":"tutorials/acme/nginx-ingress/#1-helm","title":"\u6b65\u9aa4 1 - \u5b89\u88c5 Helm","text":"<p>\u5982\u679c\u4f60\u5b89\u88c5\u4e86 helm\uff0c\u8df3\u8fc7\u8fd9\u4e00\u8282\u3002</p> <p>\u5b89\u88c5<code>cert-manager</code> \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528<code>Helm</code>\uff0c\u8fd9\u662f Kubernetes \u6e90\u7684\u6a21\u677f\u548c\u90e8\u7f72\u5de5\u5177\u3002</p> <p>\u9996\u5148\uff0c\u786e\u4fdd Helm \u5ba2\u6237\u7aef\u6309\u7167Helm \u5b89\u88c5\u8bf4\u660e\u8fdb\u884c\u5b89\u88c5.</p> <p>on MacOS</p> <pre><code>brew install kubernetes-helm\n</code></pre>"},{"location":"tutorials/acme/nginx-ingress/#2-nginx","title":"\u6b65\u9aa4 2 - \u90e8\u7f72 NGINX \u5165\u53e3\u63a7\u5236\u5668","text":"<p>\u4e00\u4e2a<code>kubernetes\u5165\u53e3\u63a7\u5236\u5668</code>\u88ab\u8bbe\u8ba1\u4e3a HTTP \u548c HTTPS \u6d41\u91cf\u7684\u63a5\u5165\u70b9\uff0c\u4ee5\u8bbf\u95ee\u96c6\u7fa4\u4e2d\u8fd0\u884c\u7684\u8f6f\u4ef6\u3002 <code>ingress-nginx-controller</code> \u901a\u8fc7\u63d0\u4f9b\u7531\u4e91\u63d0\u4f9b\u5546\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u652f\u6301\u7684 HTTP \u4ee3\u7406\u670d\u52a1\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002</p> <p>\u4f60\u53ef\u4ee5\u4ece\u5173\u4e8e<code>ingress-nginx</code>\u7684\u6587\u6863\u4e2d\u83b7\u5f97\u66f4\u591a\u5173\u4e8e<code>ingress-nginx</code>\u53ca\u5176\u5de5\u4f5c\u539f\u7406\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</p> <p>\u4e3a ingress-nginx \u6dfb\u52a0\u6700\u65b0\u7684 helm \u5b58\u50a8\u5e93</p> <pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n</code></pre> <p>\u7528\u6700\u65b0\u7684\u56fe\u8868\u66f4\u65b0 helm \u5e93:</p> <pre><code>$ helm repo update\nHang tight while we grab the latest from your chart repositories...\n...Skip local chart repository\n...Successfully got an update from the \"stable\" chart repository\n...Successfully got an update from the \"ingress-nginx\" chart repository\n...Successfully got an update from the \"coreos\" chart repository\nUpdate Complete. \u2388 Happy Helming!\u2388\n</code></pre> <p>\u4f7f\u7528<code>helm</code>\u5b89\u88c5 NGINX Ingress \u63a7\u5236\u5668:</p> <pre><code>$ helm install quickstart ingress-nginx/ingress-nginx\n\nNAME: quickstart\n... lots of output ...\n</code></pre> <p>\u4e91\u63d0\u4f9b\u5546\u63d0\u4f9b\u5e76\u94fe\u63a5\u4e00\u4e2a\u516c\u5171 IP \u5730\u5740\u53ef\u80fd\u9700\u8981\u4e00\u5230\u4e24\u5206\u949f\u3002 \u5f53\u5b83\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>kubectl</code> \u547d\u4ee4\u770b\u5230\u5916\u90e8 IP \u5730\u5740:</p> <pre><code>$ kubectl get svc\nNAME                                            TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE\nkubernetes                                      ClusterIP      10.0.0.1       &lt;none&gt;        443/TCP                      13m\nquickstart-ingress-nginx-controller             LoadBalancer   10.0.114.241   &lt;pending&gt;     80:31635/TCP,443:30062/TCP   8m16s\nquickstart-ingress-nginx-controller-admission   ClusterIP      10.0.188.24    &lt;none&gt;        443/TCP                      8m16s\n</code></pre> <p>\u8be5\u547d\u4ee4\u663e\u793a\u96c6\u7fa4\u4e2d\u7684\u6240\u6709\u670d\u52a1(\u5728<code>default</code>\u540d\u79f0\u7a7a\u95f4\u4e2d)\uff0c\u4ee5\u53ca\u5b83\u4eec\u62e5\u6709\u7684\u4efb\u4f55\u5916\u90e8 IP \u5730\u5740\u3002 \u5f53\u60a8\u7b2c\u4e00\u6b21\u521b\u5efa\u63a7\u5236\u5668\u65f6\uff0c\u60a8\u7684\u4e91\u63d0\u4f9b\u5546\u8fd8\u6ca1\u6709\u901a\u8fc7<code>LoadBalancer</code>\u5206\u914d IP \u5730\u5740\u3002 \u5728\u6b64\u4e4b\u524d\uff0c\u670d\u52a1\u7684\u5916\u90e8 IP \u5730\u5740\u5c06\u88ab\u5217\u4e3a<code>&lt;pending&gt;</code>\u3002</p> <p>\u60a8\u7684\u4e91\u63d0\u4f9b\u5546\u53ef\u4ee5\u9009\u62e9\u5728\u521b\u5efa\u5165\u53e3\u63a7\u5236\u5668\u4e4b\u524d\u4fdd\u7559\u4e00\u4e2a IP \u5730\u5740\uff0c\u5e76\u4f7f\u7528\u8be5 IP \u5730\u5740\uff0c\u800c\u4e0d\u662f\u4ece\u6c60\u4e2d\u5206\u914d IP \u5730\u5740\u3002 \u8bf7\u9605\u8bfb\u60a8\u7684\u4e91\u63d0\u4f9b\u5546\u7684\u6587\u6863\uff0c\u4e86\u89e3\u5982\u4f55\u5b89\u6392\u8fd9\u4e00\u70b9\u3002</p>"},{"location":"tutorials/acme/nginx-ingress/#3-dns","title":"\u6b65\u9aa4 3 - \u5206\u914d DNS \u540d\u79f0","text":"<p>\u5206\u914d\u7ed9\u5165\u53e3\u63a7\u5236\u5668\u7684\u5916\u90e8 IP \u662f\u6240\u6709\u4f20\u5165\u6d41\u91cf\u90fd\u5e94\u8be5\u8def\u7531\u5230\u7684 IP\u3002 \u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u8bf7\u5c06\u5176\u6dfb\u52a0\u5230\u60a8\u63a7\u5236\u7684 DNS \u533a\u57df\uff0c\u4f8b\u5982<code>www.example.com</code>\u3002</p> <p>\u8fd9\u4e2a\u5feb\u901f\u5165\u95e8\u5047\u8bbe\u60a8\u77e5\u9053\u5982\u4f55\u5c06 DNS \u6761\u76ee\u5206\u914d\u7ed9 IP \u5730\u5740\uff0c\u5e76\u4e14\u4f1a\u8fd9\u6837\u505a\u3002</p>"},{"location":"tutorials/acme/nginx-ingress/#4-","title":"\u6b65\u9aa4 4 - \u90e8\u7f72\u793a\u4f8b\u670d\u52a1","text":"<p>\u60a8\u7684\u670d\u52a1\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u56fe\u8868\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6e05\u5355\u90e8\u7f72\u5b83\u3002 \u672c\u5feb\u901f\u5165\u95e8\u4f7f\u7528\u6e05\u5355\u521b\u5efa\u548c\u516c\u5f00\u793a\u4f8b\u670d\u52a1\u3002 \u793a\u4f8b\u670d\u52a1\u4f7f\u7528<code>kuard</code>\uff0c\u4e00\u4e2a\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\u3002</p> <p>\u5feb\u901f\u542f\u52a8\u793a\u4f8b\u4e3a\u793a\u4f8b\u4f7f\u7528\u4e86\u4e09\u4e2a\u6e05\u5355\u3002 \u524d\u4e24\u4e2a\u662f\u4e00\u4e2a\u793a\u4f8b\u90e8\u7f72\u548c\u4e00\u4e2a\u5173\u8054\u7684\u670d\u52a1:</p> ./example/deployment.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: kuard\nspec:\nselector:\nmatchLabels:\napp: kuard\nreplicas: 1\ntemplate:\nmetadata:\nlabels:\napp: kuard\nspec:\ncontainers:\n- image: gcr.io/kuar-demo/kuard-amd64:1\nimagePullPolicy: Always\nname: kuard\nports:\n- containerPort: 8080\n</code></pre> ./example/service.yaml<pre><code>apiVersion: v1\nkind: Service\nmetadata:\nname: kuard\nspec:\nports:\n- port: 80\ntargetPort: 8080\nprotocol: TCP\nselector:\napp: kuard\n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u672c\u5730\u521b\u5efa\u3001\u4e0b\u8f7d\u548c\u5f15\u7528\u8fd9\u4e9b\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u4ece\u672c\u6587\u6863\u7684 GitHub \u6e90\u5b58\u50a8\u5e93\u5f15\u7528\u5b83\u4eec\u3002 \u8981\u76f4\u63a5\u4ece GitHub \u5b89\u88c5\u6559\u7a0b\u6587\u4ef6\u4e2d\u7684\u793a\u4f8b\u670d\u52a1\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c:</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/deployment.yaml\n# expected output: deployment.extensions \"kuard\" created\nkubectl apply -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/service.yaml\n# expected output: service \"kuard\" created\n</code></pre> <p>Kubernetes \u4f7f\u7528Ingress \u6e90\u5728\u96c6\u7fa4\u5916\u90e8\u516c\u5f00\u8fd9\u4e2a\u793a\u4f8b\u670d\u52a1\u3002 \u60a8\u9700\u8981\u4e0b\u8f7d\u5e76\u4fee\u6539\u793a\u4f8b\u6e05\u5355\uff0c\u4ee5\u53cd\u6620\u60a8\u62e5\u6709\u6216\u63a7\u5236\u7684\u57df\uff0c\u4ee5\u5b8c\u6210\u6b64\u793a\u4f8b\u3002</p> <p>\u4f60\u53ef\u4ee5\u4ece\u4e00\u4e2a\u793a\u4f8b\u5165\u53e3\u5f00\u59cb:</p> ./example/ingress.yaml<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: kuard\nannotations:\nkubernetes.io/ingress.class: \"nginx\"    #cert-manager.io/issuer: \"letsencrypt-staging\"\nspec:\ntls:\n- hosts:\n- example.example.com\nsecretName: quickstart-example-tls\nrules:\n- host: example.example.com\nhttp:\npaths:\n- path: /\npathType: Prefix\nbackend:\nservice:\nname: kuard\nport:\nnumber: 80\n</code></pre> <p>\u60a8\u53ef\u4ee5\u4ece GitHub \u4e0b\u8f7d\u6e05\u5355\u793a\u4f8b\uff0c\u7f16\u8f91\u5b83\uff0c\u5e76\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5c06\u6e05\u5355\u63d0\u4ea4\u5230 Kubernetes\u3002 \u5728\u7f16\u8f91\u5668\u4e2d\u7f16\u8f91\u6587\u4ef6\uff0c\u4fdd\u5b58\u540e:</p> <pre><code>kubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/ingress.yaml\n# expected output: ingress.extensions \"kuard\" created\n</code></pre> <p>Note</p> <p>\u6211\u4eec\u4e0a\u9762\u5c55\u793a\u7684ingress\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a<code>host</code>\u5b9a\u4e49\u3002 \u5f53\u8bf7\u6c42\u7684\u4e3b\u673a\u540d\u4e0e\u5165\u53e3\u4e2d\u7684\u5b9a\u4e49\u5339\u914d\u65f6\uff0c<code>ingress-nginx-controller</code>\u5c06\u8def\u7531\u6d41\u91cf\u3002 \u60a8\u53ef\u4ee5\u5728\u89c4\u5219\u4e2d\u90e8\u7f72\u4e00\u4e2a\u6ca1\u6709\u201c\u4e3b\u673a\u201d\u5b9a\u4e49\u7684\u5165\u53e3\uff0c\u4f46\u8be5\u6a21\u5f0f\u4e0d\u9002\u7528\u4e8eTLS\u8bc1\u4e66\uff0c\u56e0\u4e3aTLS\u8bc1\u4e66\u9700\u8981\u5b8c\u5168\u9650\u5b9a\u7684\u57df\u540d\u3002</p> <p>\u4e00\u65e6\u5b83\u88ab\u90e8\u7f72\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4<code>kubectl get ingress</code>\u6765\u67e5\u770b\u5165\u53e3\u7684\u72b6\u6001:</p> <pre><code>NAME      HOSTS     ADDRESS   PORTS     AGE\nkuard     *                   80, 443   17s\n</code></pre> <p>\u5b8c\u5168\u521b\u5efa\u5165\u53e3\u53ef\u80fd\u9700\u8981\u51e0\u5206\u949f\u65f6\u95f4\uff0c\u5177\u4f53\u65f6\u95f4\u53d6\u51b3\u4e8e\u60a8\u7684\u670d\u52a1\u63d0\u4f9b\u5546\u3002 \u5f53\u5b83\u88ab\u521b\u5efa\u5e76\u94fe\u63a5\u5230\u4f4d\u65f6\uff0c\u5165\u53e3\u4e5f\u4f1a\u663e\u793a\u4e00\u4e2a\u5730\u5740:</p> <pre><code>NAME      HOSTS     ADDRESS         PORTS     AGE\nkuard     *         203.0.113.2   80        9m\n</code></pre> <p>Note</p> <p>ingress\u4e0a\u7684IP\u5730\u5740\u53ef\u80fd\u4e0e<code>ingress-nginx-controller</code>\u62e5\u6709\u7684IP\u5730\u5740\u4e0d\u5339\u914d\u3002 \u8fd9\u5f88\u597d\uff0c\u8fd9\u662f\u6258\u7ba1Kubernetes\u96c6\u7fa4\u7684\u670d\u52a1\u63d0\u4f9b\u8005\u7684\u4e00\u4e2a\u602a\u7656/\u5b9e\u73b0\u7ec6\u8282\u3002 \u7531\u4e8e\u6211\u4eec\u4f7f\u7528<code>ingress-nginx-controller</code>\u800c\u4e0d\u662f\u4efb\u4f55\u4e91\u63d0\u4f9b\u5546\u7279\u5b9a\u7684\u5165\u53e3\u540e\u7aef\uff0c \u4f7f\u7528\u4e3a<code>quickstart-ingress-nginx-controller</code> <code>LoadBalancer</code>\u6e90\u5b9a\u4e49\u548c\u5206\u914d\u7684IP\u5730\u5740\u4f5c\u4e3a\u60a8\u670d\u52a1\u7684\u4e3b\u8981\u63a5\u5165\u70b9\u3002</p> <p>\u786e\u4fdd\u60a8\u53ef\u4ee5\u901a\u8fc7\u4e0a\u9762\u6dfb\u52a0\u7684\u57df\u540d\u8bbf\u95ee\u8be5\u670d\u52a1\uff0c\u4f8b\u5982 <code>http://www.example.com</code>\u3002 \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8f93\u5165\u60a8\u5728 DNS \u4e2d\u8bbe\u7f6e\u7684\u540d\u79f0\uff0c\u6211\u4eec\u521a\u521a\u4e3a\u5176\u6dfb\u52a0\u4e86\u5165\u53e3\u3002</p> <p>\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u50cf <code>curl</code> \u8fd9\u6837\u7684\u547d\u4ee4\u884c\u5de5\u5177\u6765\u68c0\u67e5\u5165\u53e3\u3002</p> <pre><code>$ curl -kivL -H 'Host: www.example.com' 'http://203.0.113.2'\n</code></pre> <p>\u8fd9\u4e2a curl \u547d\u4ee4\u7684\u9009\u9879\u5c06\u5728\u4efb\u4f55\u91cd\u5b9a\u5411\u4e4b\u540e\u63d0\u4f9b\u8be6\u7ec6\u8f93\u51fa\uff0c\u5728\u8f93\u51fa\u4e2d\u663e\u793a TLS \u62a5\u5934\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5728\u4e0d\u5b89\u5168\u7684\u8bc1\u4e66\u4e0a\u51fa\u73b0\u9519\u8bef\u3002 \u4f7f\u7528<code>ingress-nginx-controller</code>\uff0c\u8be5\u670d\u52a1\u5c06\u4f7f\u7528 TLS \u8bc1\u4e66\uff0c\u4f46\u5b83\u5c06\u4f7f\u7528<code>ingress-nginx-controller</code>\u63d0\u4f9b\u7684\u81ea\u7b7e\u540d\u8bc1\u4e66\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u6d4f\u89c8\u5668\u5c06\u663e\u793a\u4e00\u4e2a\u8b66\u544a\uff0c\u8fd9\u662f\u4e00\u4e2a\u65e0\u6548\u7684\u8bc1\u4e66\u3002\u8fd9\u662f\u9884\u671f\u7684\uff0c\u4e5f\u662f\u6b63\u5e38\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u4f7f\u7528\u8bc1\u4e66\u7ba1\u7406\u5668\u4e3a\u6211\u4eec\u7684\u7ad9\u70b9\u83b7\u53d6\u5b8c\u5168\u53d7\u4fe1\u4efb\u7684\u8bc1\u4e66\u3002</p> <p>Warning</p> <p>\u786e\u4fdd\u4f60\u7684\u5165\u53e3\u662f\u53ef\u7528\u7684\uff0c\u5e76\u5728\u4e92\u8054\u7f51\u4e0a\u6b63\u786e\u54cd\u5e94\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002 \u8fd9\u4e2a\u5feb\u901f\u5165\u95e8\u793a\u4f8b\u4f7f\u7528Let\u2019s Encrypt\u6765\u63d0\u4f9b\u8bc1\u4e66\uff0c\u5b83\u671f\u671b\u5e76\u9a8c\u8bc1\u670d\u52a1\u53ef\u7528\uff0c \u5e76\u4e14\u5728\u9881\u53d1\u8bc1\u4e66\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u8be5\u9a8c\u8bc1\u4f5c\u4e3a\u5bf9\u57df\u7684\u8bf7\u6c42\u5c5e\u4e8e\u5bf9\u57df\u6709\u8db3\u591f\u63a7\u5236\u7684\u4eba\u7684\u8bc1\u660e\u3002</p>"},{"location":"tutorials/acme/nginx-ingress/#5-cert-manager","title":"\u6b65\u9aa4 5 - \u90e8\u7f72 cert-manager","text":"<p>\u6211\u4eec\u9700\u8981\u5b89\u88c5 cert-manager \u6765\u5b8c\u6210 Kubernetes \u7684\u5de5\u4f5c\uff0c\u4ee5\u8bf7\u6c42\u8bc1\u4e66\u5e76\u54cd\u5e94\u9a8c\u8bc1\u5b83\u7684\u6311\u6218\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Helm \u6216\u666e\u901a\u7684 Kubernetes \u6e05\u5355\u6765\u5b89\u88c5 cert-manager\u3002</p> <p>\u56e0\u4e3a\u6211\u4eec\u4e4b\u524d\u5b89\u88c5\u4e86 Helm\uff0c\u6211\u4eec\u4f1a\u5047\u8bbe\u4f60\u60f3\u8981\u4f7f\u7528 Helm;\u6309\u7167 Helm guide\u3002 \u5176\u4ed6\u65b9\u6cd5\u8bf7\u53c2\u8003 cert-manager \u7684\u5b89\u88c5\u6587\u6863\u3002</p> <p>cert-manager \u4e3b\u8981\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u81ea\u5b9a\u4e49 Kubernetes \u6e90(\u79f0\u4e3a<code>CRDs</code>)\u6765\u914d\u7f6e\u548c\u63a7\u5236\u5b83\u7684\u64cd\u4f5c\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5b58\u50a8\u72b6\u6001\u3002 \u8fd9\u4e9b\u6e90\u662f\u9881\u53d1\u8005\u548c\u8bc1\u4e66\u3002</p>"},{"location":"tutorials/acme/nginx-ingress/#issuers","title":"Issuers(\u9881\u53d1\u8005)","text":"<p>\u9881\u53d1\u8005\u5b9a\u4e49\u4e86\u8bc1\u4e66\u7ba1\u7406\u5668 \u5982\u4f55 \u8bf7\u6c42 TLS \u8bc1\u4e66\u3002 \u9881\u53d1\u8005\u5728 Kubernetes \u4e2d\u662f\u7279\u5b9a\u4e8e\u5355\u4e2a\u540d\u79f0\u7a7a\u95f4\u7684\uff0c\u4f46\u4e5f\u6709\u4e00\u4e2a<code>ClusterIssuer</code> \uff0c\u5b83\u610f\u5473\u7740\u662f\u4e00\u4e2a\u96c6\u7fa4\u8303\u56f4\u7684\u7248\u672c\u3002</p> <p>\u6ce8\u610f\u786e\u4fdd\u60a8\u7684\u9881\u53d1\u8005\u4e0e\u8981\u521b\u5efa\u7684\u8bc1\u4e66\u5728\u76f8\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u521b\u5efa\u3002 \u60a8\u53ef\u80fd\u9700\u8981\u5728<code>kubectl create</code>\u547d\u4ee4\u4e2d\u6dfb\u52a0<code>-n my-namespace</code> \u3002</p> <p>\u4f60\u7684\u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u7528<code>ClusterIssuers</code>\u66ff\u6362\u4f60\u7684<code>issuer</code>;<code>ClusterIssuers</code>\u6e90\u9002\u7528\u4e8e\u96c6\u7fa4\u4e2d\u7684\u6240\u6709 Ingress \u6e90\u3002 \u5982\u679c\u4f7f\u7528<code>ClusterIssuers</code>\uff0c\u8bf7\u8bb0\u4f4f\u5c06 Ingress \u6ce8\u91ca<code>cert-manager.io/issuer</code> \u66f4\u65b0\u4e3a <code>cert-manager.io/cluster-issuer</code>\u3002</p> <p>\u5982\u679c\u60a8\u53d1\u73b0\u9881\u53d1\u8005\u6709\u95ee\u9898\uff0c\u8bf7\u9075\u5faa\u6545\u969c\u6392\u9664\u9881\u53d1 ACME \u8bc1\u4e66\u6307\u5357\u3002</p> <p>\u5173\u4e8e<code>Issuers</code> \u548c <code>ClusterIssuers</code>\u4e4b\u95f4\u7684\u533a\u522b\u7684\u66f4\u591a\u4fe1\u606f - \u5305\u62ec\u60a8\u53ef\u4ee5\u5728\u9881\u53d1\u8005\u6982\u5ff5\u4e0a\u627e\u5230\u5b83\u4eec\u3002</p>"},{"location":"tutorials/acme/nginx-ingress/#certificate","title":"Certificate(\u8bc1\u4e66)","text":"<p>\u8bc1\u4e66\u6e90\u5141\u8bb8\u60a8\u6307\u5b9a\u8981\u8bf7\u6c42\u7684\u8bc1\u4e66\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u5b83\u4eec\u5f15\u7528\u9881\u53d1\u8005\u6765\u5b9a\u4e49\u5b83\u4eec\u5c06*\u5982\u4f55*\u53d1\u884c\u3002</p> <p>\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u8bc1\u4e66\u6982\u5ff5.</p>"},{"location":"tutorials/acme/nginx-ingress/#6-lets-encrypt-issuer","title":"\u6b65\u9aa4 6 - \u914d\u7f6e\u4e00\u4e2a Let's Encrypt Issuer","text":"<p>\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4e3a Let\u2019s Encrypt \u8bbe\u7f6e\u4e24\u4e2a\u9881\u53d1\u8005:staging \u548c production\u3002</p> <p>Let's Encrypt \u4ea7\u54c1\u53d1\u884c\u65b9\u6709\u975e\u5e38\u4e25\u683c\u7684\u901f\u7387\u9650\u5236\u3002 \u5f53\u4f60\u5728\u5c1d\u8bd5\u548c\u5b66\u4e60\u65f6\uff0c\u5f88\u5bb9\u6613\u5c31\u4f1a\u89e6\u53ca\u8fd9\u4e9b\u6781\u9650\u3002 \u7531\u4e8e\u5b58\u5728\u8fd9\u79cd\u98ce\u9669\uff0c\u6211\u4eec\u5c06\u4ece Let's Encrypt staging \u53d1\u884c\u65b9\u5f00\u59cb\uff0c\u4e00\u65e6\u6211\u4eec\u5bf9\u5b83\u7684\u5de5\u4f5c\u611f\u5230\u6ee1\u610f\uff0c\u6211\u4eec\u5c06\u5207\u6362\u5230 production \u53d1\u884c\u65b9\u3002</p> <p>\u6ce8\u610f\uff0c\u60a8\u5c06\u770b\u5230\u6765\u81ea\u9884\u6f14\u9881\u53d1\u8005\u7684\u5173\u4e8e\u4e0d\u53d7\u4fe1\u4efb\u8bc1\u4e66\u7684\u8b66\u544a\uff0c\u4f46\u8fd9\u662f\u5b8c\u5168\u9884\u671f\u7684\u3002</p> <p>\u5728\u672c\u5730\u521b\u5efa\u8fd9\u4e2a\u5b9a\u4e49\uff0c\u5e76\u5c06\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u66f4\u65b0\u4e3a\u60a8\u81ea\u5df1\u7684\u3002 \u6b64\u7535\u5b50\u90ae\u4ef6\u662f Let's Encrypt \u8981\u6c42\u7684\uff0c\u7528\u4e8e\u901a\u77e5\u60a8\u8bc1\u4e66\u8fc7\u671f\u548c\u66f4\u65b0\u3002</p> ./example/staging-issuer.yaml<pre><code>   apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\n# The ACME server URL\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\n# Email address used for ACME registration\nemail: user@example.com\n# Name of a secret used to store the ACME account private key\nprivateKeySecretRef:\nname: letsencrypt-staging\n# Enable the HTTP-01 challenge provider\nsolvers:\n- http01:\ningress:\nclass:  nginx\n</code></pre> <p>\u7f16\u8f91\u5b8c\u6210\u540e\uff0c\u5e94\u7528\u81ea\u5b9a\u4e49\u6e90:</p> <pre><code>kubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/staging-issuer.yaml\n# expected output: issuer.cert-manager.io \"letsencrypt-staging\" created\n</code></pre> <p>\u8fd8\u8981\u521b\u5efa\u4e00\u4e2a\u751f\u4ea7\u9881\u53d1\u8005\u5e76\u90e8\u7f72\u5b83\u3002 \u4e0e\u9884\u6f14\u53d1\u5e03\u8005\u4e00\u6837\uff0c\u60a8\u9700\u8981\u66f4\u65b0\u6b64\u793a\u4f8b\u5e76\u6dfb\u52a0\u60a8\u81ea\u5df1\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002</p> ./example/production-issuer.yaml<pre><code>   apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt-prod\nspec:\nacme:\n# The ACME server URL\nserver: https://acme-v02.api.letsencrypt.org/directory\n# Email address used for ACME registration\nemail: user@example.com\n# Name of a secret used to store the ACME account private key\nprivateKeySecretRef:\nname: letsencrypt-prod\n# Enable the HTTP-01 challenge provider\nsolvers:\n- http01:\ningress:\nclass: nginx\n</code></pre> <pre><code>kubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/production-issuer.yaml\n# expected output: issuer.cert-manager.io \"letsencrypt-prod\" created\n</code></pre> <p>\u8fd9\u4e24\u4e2a\u9881\u53d1\u8005\u90fd\u88ab\u914d\u7f6e\u4e3a\u4f7f\u7528<code>HTTP01</code>\u6311\u6218\u63d0\u4f9b\u7a0b\u5e8f\u3002</p> <p>\u521b\u5efa\u9881\u53d1\u8005\u540e\u68c0\u67e5\u5b83\u7684\u72b6\u6001:</p> <pre><code>$ kubectl describe issuer letsencrypt-staging\nName:         letsencrypt-staging\nNamespace:    default\nLabels:       &lt;none&gt;\nAnnotations:  kubectl.kubernetes.io/last-applied-configuration={\"apiVersion\":\"cert-manager.io/v1\",\"kind\":\"Issuer\",\"metadata\":{\"annotations\":{},\"name\":\"letsencrypt-staging\",\"namespace\":\"default\"},(...)}\nAPI Version:  cert-manager.io/v1\nKind:         Issuer\nMetadata:\n  Cluster Name:\n  Creation Timestamp:  2018-11-17T18:03:54Z\n  Generation:          0\nResource Version:    9092\nSelf Link:           /apis/cert-manager.io/v1/namespaces/default/issuers/letsencrypt-staging\n  UID:                 25b7ae77-ea93-11e8-82f8-42010a8a00b5\nSpec:\n  Acme:\n    Email:  email@example.com\n    Private Key Secret Ref:\n      Key:\n      Name:  letsencrypt-staging\n    Server:  https://acme-staging-v02.api.letsencrypt.org/directory\n    Solvers:\n      Http 01:\n        Ingress:\n          Class:  nginx\nStatus:\n  Acme:\n    Uri:  https://acme-staging-v02.api.letsencrypt.org/acme/acct/7374163\n  Conditions:\n    Last Transition Time:  2018-11-17T18:04:00Z\n    Message:               The ACME account was registered with the ACME server\n    Reason:                ACMEAccountRegistered\n    Status:                True\n    Type:                  Ready\nEvents:                    &lt;none&gt;\n</code></pre> <p>\u60a8\u5e94\u8be5\u770b\u5230\u9881\u53d1\u8005\u5217\u51fa\u4e86\u4e00\u4e2a\u6ce8\u518c\u5e10\u6237\u3002</p>"},{"location":"tutorials/acme/nginx-ingress/#7-tls","title":"\u6b65\u9aa4 7 - \u90e8\u7f72 TLS \u5165\u53e3\u6e90","text":"<p>\u6240\u6709\u5fc5\u8981\u7684\u914d\u7f6e\u5c31\u7eea\u4e4b\u540e\uff0c\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u5f00\u59cb\u8bf7\u6c42 TLS \u8bc1\u4e66\u4e86\u3002 \u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u6cd5:\u5728\u5165\u53e3\u4e0a\u4f7f\u7528<code>ingress-shim</code>\u6ce8\u91ca\u6216\u76f4\u63a5\u521b\u5efa\u8bc1\u4e66\u6e90\u3002</p> <p>\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5411\u5165\u53e3\u6dfb\u52a0\u6ce8\u91ca\uff0c\u5e76\u5229\u7528 ingress-shim \u8ba9\u5b83\u4ee3\u8868\u6211\u4eec\u521b\u5efa\u8bc1\u4e66\u6e90\u3002 \u521b\u5efa\u8bc1\u4e66\u540e\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u66f4\u65b0\u6216\u521b\u5efa\u5165\u53e3\u6e90\uff0c\u5e76\u4f7f\u7528\u8be5\u6e90\u9a8c\u8bc1\u57df\u3002 \u9a8c\u8bc1\u548c\u9881\u53d1\u540e\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u521b\u5efa\u6216\u66f4\u65b0\u8bc1\u4e66\u4e2d\u5b9a\u4e49\u7684\u79d8\u5bc6\u3002</p> <p>Note</p> <p>\u5728\u5165\u53e3\u4e2d\u4f7f\u7528\u7684\u79d8\u5bc6\u5e94\u8be5\u4e0e\u8bc1\u4e66\u4e2d\u5b9a\u4e49\u7684\u79d8\u5bc6\u76f8\u5339\u914d\u3002 \u6ca1\u6709\u4efb\u4f55\u663e\u5f0f\u7684\u68c0\u67e5\uff0c\u6240\u4ee5\u8f93\u5165\u9519\u8bef\u5c06\u5bfc\u81f4<code>ingress-nginx-controller</code>\u56de\u843d\u5230\u5b83\u7684\u81ea\u7b7e\u540d\u8bc1\u4e66\u3002 \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728ingress(\u548cingress-shim)\u4e0a\u4f7f\u7528\u6ce8\u91ca\uff0c\u5b83\u4eec\u5c06\u4e3a\u60a8\u521b\u5efa\u6b63\u786e\u7684\u79d8\u5bc6\u3002</p> <p>\u7f16\u8f91\u5165\u53e3\uff0c\u6dfb\u52a0\u5728\u524d\u9762\u4f8b\u5b50\u4e2d\u88ab\u6ce8\u91ca\u6389\u7684\u6ce8\u91ca:</p> ./example/ingress-tls.yaml<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: kuard\nannotations:\nkubernetes.io/ingress.class: \"nginx\"    cert-manager.io/issuer: \"letsencrypt-staging\"\nspec:\ntls:\n- hosts:\n- example.example.com\nsecretName: quickstart-example-tls\nrules:\n- host: example.example.com\nhttp:\npaths:\n- path: /\npathType: Prefix\nbackend:\nservice:\nname: kuard\nport:\nnumber: 80\n</code></pre> <p>\u5e94\u7528\u5b83:</p> <pre><code>kubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/ingress-tls.yaml\n# expected output: ingress.extensions \"kuard\" configured\n</code></pre> <p>\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u8bfb\u53d6\u8fd9\u4e9b\u6ce8\u91ca\u5e76\u4f7f\u7528\u5b83\u4eec\u521b\u5efa\u4e00\u4e2a\u8bc1\u4e66\uff0c\u60a8\u53ef\u4ee5\u8bf7\u6c42\u5e76\u67e5\u770b:</p> <pre><code>$ kubectl get certificate\nNAME                     READY   SECRET                   AGE\nquickstart-example-tls   True    quickstart-example-tls   16m\n</code></pre> <p>\u8bc1\u4e66\u7ba1\u7406\u5668\u53cd\u6620\u8bc1\u4e66\u5bf9\u8c61\u4e2d\u6bcf\u4e2a\u8bf7\u6c42\u7684\u8fdb\u7a0b\u72b6\u6001\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528<code>kubectl describe</code>\u547d\u4ee4\u67e5\u770b\u8be5\u4fe1\u606f:</p> <pre><code>$ kubectl describe certificate quickstart-example-tls\nName:         quickstart-example-tls\nNamespace:    default\nLabels:       &lt;none&gt;\nAnnotations:  &lt;none&gt;\nAPI Version:  cert-manager.io/v1\nKind:         Certificate\nMetadata:\n  Cluster Name:\n  Creation Timestamp:  2018-11-17T17:58:37Z\n  Generation:          0\nOwner References:\n    API Version:           networking.k8s.io/v1\n    Block Owner Deletion:  true\nController:            true\nKind:                  Ingress\n    Name:                  kuard\n    UID:                   a3e9f935-ea87-11e8-82f8-42010a8a00b5\n  Resource Version:        9295\nSelf Link:               /apis/cert-manager.io/v1/namespaces/default/certificates/quickstart-example-tls\n  UID:                     68d43400-ea92-11e8-82f8-42010a8a00b5\nSpec:\n  Dns Names:\n    www.example.com\n  Issuer Ref:\n    Kind:       Issuer\n    Name:       letsencrypt-staging\n  Secret Name:  quickstart-example-tls\nStatus:\n  Acme:\n    Order:\n      URL:  https://acme-staging-v02.api.letsencrypt.org/acme/order/7374163/13665676\n  Conditions:\n    Last Transition Time:  2018-11-17T18:05:57Z\n    Message:               Certificate issued successfully\n    Reason:                CertIssued\n    Status:                True\n    Type:                  Ready\nEvents:\n  Type     Reason          Age                From          Message\n  ----     ------          ----               ----          -------\n  Normal   CreateOrder     9m                 cert-manager  Created new ACME order, attempting validation...\n  Normal   DomainVerified  8m                 cert-manager  Domain \"www.example.com\" verified with \"http-01\" validation\n  Normal   IssueCert       8m                 cert-manager  Issuing certificate...\n  Normal   CertObtained    7m                 cert-manager  Obtained certificate from ACME server\n  Normal   CertIssued      7m                 cert-manager  Certificate issued Successfully\n</code></pre> <p>\u4e0e\u6b64\u6e90\u76f8\u5173\u5e76\u5217\u5728<code>describe</code>\u7ed3\u679c\u5e95\u90e8\u7684\u4e8b\u4ef6\u663e\u793a\u4e86\u8bf7\u6c42\u7684\u72b6\u6001\u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u8bc1\u4e66\u5728\u51e0\u5206\u949f\u5185\u88ab\u9a8c\u8bc1\u5e76\u9881\u53d1\u3002</p> <p>\u5b8c\u6210\u540e\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u6839\u636e\u5165\u53e3\u6e90\u4e2d\u4f7f\u7528\u7684\u79d8\u5bc6\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u8bc1\u4e66\u8be6\u7ec6\u4fe1\u606f\u7684\u79d8\u5bc6\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 describe \u547d\u4ee4\u6765\u67e5\u770b\u4e00\u4e9b\u7ec6\u8282:</p> <pre><code>$ kubectl describe secret quickstart-example-tls\nName:         quickstart-example-tls\nNamespace:    default\nLabels:       cert-manager.io/certificate-name=quickstart-example-tls\nAnnotations:  cert-manager.io/alt-names=www.example.com\n              cert-manager.io/common-name=www.example.com\n              cert-manager.io/issuer-kind=Issuer\n              cert-manager.io/issuer-name=letsencrypt-staging\n\nType:  kubernetes.io/tls\n\nData\n====\ntls.crt:  3566 bytes\ntls.key:  1675 bytes\n</code></pre> <p>\u73b0\u5728\u6211\u4eec\u6709\u4fe1\u5fc3\u6240\u6709\u7684\u914d\u7f6e\u90fd\u662f\u6b63\u786e\u7684\uff0c\u4f60\u53ef\u4ee5\u66f4\u65b0\u5165\u53e3\u4e2d\u7684\u6ce8\u91ca\u6765\u6307\u5b9a\u751f\u4ea7\u9881\u53d1\u8005:</p> ./example/ingress-tls-final.yaml<pre><code>apiVersion: networking.k8s.io/v1 kind: Ingress\nmetadata:\nname: kuard\nannotations:\nkubernetes.io/ingress.class: \"nginx\"    cert-manager.io/issuer: \"letsencrypt-prod\"\nspec:\ntls:\n- hosts:\n- example.example.com\nsecretName: quickstart-example-tls\nrules:\n- host: example.example.com\nhttp:\npaths:\n- path: /\npathType: Prefix\nbackend:\nservice:\nname: kuard\nport:\nnumber: 80\n</code></pre> <pre><code>$ kubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/ingress-tls-final.yaml\ningress.extensions \"kuard\" configured\n</code></pre> <p>\u60a8\u8fd8\u9700\u8981\u5220\u9664\u73b0\u6709\u7684\u79d8\u5bc6\uff0c\u8bc1\u4e66\u7ba1\u7406\u5668\u6b63\u5728\u76d1\u89c6\u8be5\u79d8\u5bc6\uff0c\u5e76\u5c06\u4f7f\u5b83\u4f7f\u7528\u66f4\u65b0\u540e\u7684\u9881\u53d1\u8005\u91cd\u65b0\u5904\u7406\u8bf7\u6c42\u3002</p> <pre><code>$ kubectl delete secret quickstart-example-tls\nsecret \"quickstart-example-tls\" deleted\n</code></pre> <p>\u8fd9\u5c06\u542f\u52a8\u83b7\u53d6\u65b0\u8bc1\u4e66\u7684\u8fc7\u7a0b\uff0c\u4f7f\u7528 describe \u53ef\u4ee5\u67e5\u770b\u72b6\u6001\u3002 \u5728\u66f4\u65b0\u4e86\u751f\u4ea7\u8bc1\u4e66\u4e4b\u540e\uff0c\u60a8\u5e94\u8be5\u770b\u5230\u793a\u4f8b KUARD \u5728\u60a8\u7684\u57df\u4e2d\u8fd0\u884c\uff0c\u5176\u4e2d\u5305\u542b\u5df2\u7b7e\u540d\u7684 TLS \u8bc1\u4e66\u3002</p> <pre><code>$ kubectl describe certificate quickstart-example-tls\nName:         quickstart-example-tls\nNamespace:    default\nLabels:       &lt;none&gt;\nAnnotations:  &lt;none&gt;\nAPI Version:  cert-manager.io/v1\nKind:         Certificate\nMetadata:\n  Cluster Name:\n  Creation Timestamp:  2018-11-17T18:36:48Z\n  Generation:          0\nOwner References:\n    API Version:           networking.k8s.io/v1\n    Block Owner Deletion:  true\nController:            true\nKind:                  Ingress\n    Name:                  kuard\n    UID:                   a3e9f935-ea87-11e8-82f8-42010a8a00b5\n  Resource Version:        283686\nSelf Link:               /apis/cert-manager.io/v1/namespaces/default/certificates/quickstart-example-tls\n  UID:                     bdd93b32-ea97-11e8-82f8-42010a8a00b5\nSpec:\n  Dns Names:\n    www.example.com\n  Issuer Ref:\n    Kind:       Issuer\n    Name:       letsencrypt-prod\n  Secret Name:  quickstart-example-tls\nStatus:\n  Conditions:\n    Last Transition Time:  2019-01-09T13:52:05Z\n    Message:               Certificate does not exist\n    Reason:                NotFound\n    Status:                False\n    Type:                  Ready\nEvents:\n  Type    Reason        Age   From          Message\n  ----    ------        ----  ----          -------\n  Normal  Generated     18s   cert-manager  Generated new private key\n  Normal  OrderCreated  18s   cert-manager  Created Order resource \"quickstart-example-tls-889745041\"\n</code></pre> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u8bc1\u4e66\u7ba1\u7406\u5668\u4e3a\u60a8\u7684\u8bc1\u4e66\u521b\u5efa\u7684\u8ba2\u5355\u6e90\u4e0a\u8fd0\u884c<code>kubectl describe</code>\u6765\u67e5\u770b ACME \u8ba2\u5355\u7684\u5f53\u524d\u72b6\u6001:</p> <pre><code>$ kubectl describe order quickstart-example-tls-889745041\n...\nEvents:\n  Type    Reason      Age   From          Message\n  ----    ------      ----  ----          -------\n  Normal  Created     90s   cert-manager  Created Challenge resource \"quickstart-example-tls-889745041-0\" for domain \"www.example.com\"\n</code></pre> <p>\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 cert-manager \u521b\u5efa\u4e86 1 \u4e2a'Challenge'\u6e90\u6765\u5b8c\u6210\u8ba2\u5355\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u81ea\u52a8\u521b\u5efa\u7684\u6311\u6218\u6e90\u4e0a\u8fd0\u884c<code>kubectl describe</code> \u6765\u6df1\u5165\u4e86\u89e3\u5f53\u524d ACME \u6311\u6218\u7684\u72b6\u6001:</p> <pre><code>$ kubectl describe challenge quickstart-example-tls-889745041-0\n...\nStatus:\n  Presented:   true\nProcessing:  true\nReason:      Waiting for http-01 challenge propagation\n  State:       pending\nEvents:\n  Type    Reason     Age   From          Message\n  ----    ------     ----  ----          -------\n  Normal  Started    15s   cert-manager  Challenge scheduled for processing\n  Normal  Presented  14s   cert-manager  Presented challenge using http-01 challenge mechanism\n</code></pre> <p>\u4ece\u4e0a\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6311\u6218\u5df2\u7ecf'presented'\uff0ccert-manager \u6b63\u5728\u7b49\u5f85\u6311\u6218\u8bb0\u5f55\u4f20\u64ad\u5230\u5165\u53e3\u63a7\u5236\u5668\u3002 \u4f60\u5e94\u8be5\u7559\u610f\u6311\u6218\u6e90\u4e0a\u7684\u65b0\u4e8b\u4ef6\uff0c\u56e0\u4e3a'success'\u4e8b\u4ef6\u5e94\u8be5\u5728\u4e00\u5206\u949f\u5de6\u53f3\u6253\u5370\u51fa\u6765(\u53d6\u51b3\u4e8e\u4f60\u7684\u5165\u53e3\u63a7\u5236\u5668\u66f4\u65b0\u89c4\u5219\u7684\u901f\u5ea6):</p> <pre><code>$ kubectl describe challenge quickstart-example-tls-889745041-0\n...\nStatus:\n  Presented:   false\nProcessing:  false\nReason:      Successfully authorized domain\n  State:       valid\nEvents:\n  Type    Reason          Age   From          Message\n  ----    ------          ----  ----          -------\n  Normal  Started         71s   cert-manager  Challenge scheduled for processing\n  Normal  Presented       70s   cert-manager  Presented challenge using http-01 challenge mechanism\n  Normal  DomainVerified  2s    cert-manager  Domain \"www.example.com\" verified with \"http-01\" validation\n</code></pre> <p>Note</p> <p>\u5982\u679c\u60a8\u7684\u6311\u6218\u6ca1\u6709\u53d8\u5f97'valid'\uff0c\u5e76\u4e14\u4ecd\u7136\u5904\u4e8e'pending'\u72b6\u6001(\u6216\u8fdb\u5165'failed' \u72b6\u6001)\uff0c\u5219\u5f88\u53ef\u80fd\u5b58\u5728\u67d0\u79cd\u914d\u7f6e\u9519\u8bef\u3002 \u9605\u8bfb\u6311\u6218\u6e90\u53c2\u8003\u6587\u6863\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8c03\u8bd5\u5931\u8d25\u6311\u6218\u7684\u4fe1\u606f\u3002</p> <p>\u4e00\u65e6\u6311\u6218\u5b8c\u6210\uff0c\u76f8\u5e94\u7684\u6311\u6218\u6e90\u5c06\u88ab\u5220\u9664\uff0c'Order'\u5c06\u88ab\u66f4\u65b0\u4ee5\u53cd\u6620 Order \u7684\u65b0\u72b6\u6001:</p> <pre><code>$ kubectl describe order quickstart-example-tls-889745041\n...\nEvents:\n  Type    Reason      Age   From          Message\n  ----    ------      ----  ----          -------\n  Normal  Created     90s   cert-manager  Created Challenge resource \"quickstart-example-tls-889745041-0\" for domain \"www.example.com\"\nNormal  OrderValid  16s   cert-manager  Order completed successfully\n</code></pre> <p>\u6700\u540e\uff0c<code>Certificate</code>\u6e90\u5c06\u88ab\u66f4\u65b0\u4ee5\u53cd\u6620\u9881\u53d1\u8fc7\u7a0b\u7684\u72b6\u6001\u3002 \u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u4f60\u5e94\u8be5\u80fd\u591f<code>describe</code>\u8bc1\u4e66\uff0c\u5e76\u770b\u5230\u5982\u4e0b\u5185\u5bb9:</p> <pre><code>$ kubectl describe certificate quickstart-example-tls\nStatus:\n  Conditions:\n    Last Transition Time:  2019-01-09T13:57:52Z\n    Message:               Certificate is up to date and has not expired\n    Reason:                Ready\n    Status:                True\n    Type:                  Ready\n  Not After:               2019-04-09T12:57:50Z\nEvents:\n  Type    Reason         Age                  From          Message\n  ----    ------         ----                 ----          -------\n  Normal  Generated      11m                  cert-manager  Generated new private key\n  Normal  OrderCreated   11m                  cert-manager  Created Order resource \"quickstart-example-tls-889745041\"\nNormal  OrderComplete  10m                  cert-manager  Order \"quickstart-example-tls-889745041\" completed successfully\n</code></pre>"},{"location":"tutorials/acme/pomerium-ingress/","title":"Pomerium Ingress","text":"<p>This tutorial covers installing the Pomerium Ingress Controller and securing it with cert-manager. Pomerium is an identity-aware proxy that can also provide a custom ingress controller for your Kubernetes services.</p>"},{"location":"tutorials/acme/pomerium-ingress/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Install Kubectl and set the context to the cluster you'll be working with.</p> </li> <li> <p>Pomerium connects to an identity provider (IdP) to authenticate users. See one of their guides to learn how to set up your IdP of choice to provide oauth2 validation.</p> </li> <li> <p>This tutorial assumes you have a domain space reserved for this cluster (such as <code>*.example.com</code>). You will need access to DNS for this domain to assign A and CNAME records as needed.</p> </li> </ol>"},{"location":"tutorials/acme/pomerium-ingress/#install-the-pomerium-ingress-controller","title":"Install The Pomerium Ingress Controller","text":"<ol> <li> <p>Install Pomerium to your cluster:</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/pomerium/ingress-controller/main/deployment.yaml\n</code></pre> <p>Define a Secret with your IdP configuration. See Pomerium's Identity Providers pages for more information specific to your IdP:</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: idp\nnamespace: pomerium\ntype: Opaque\nstringData:\nclient_id: ${IDP_PROVIDED_CLIENT_ID}\nclient_secret: ${IDP_PROVIDED_CLIENT_SECRET}\n</code></pre> <p>Add the secret to the cluster with <code>kubectl apply -f</code>.</p> </li> <li> <p>Define the global settings for Pomerium:</p> <pre><code>apiVersion: ingress.pomerium.io/v1\nkind: Pomerium\nmetadata:\nname: global\nnamespace: pomerium\nspec:\nsecrets: pomerium/bootstrap\nauthenticate:\nurl: https://authenticate.example.com\nidentityProvider:\nprovider: ${YOUR_IdP}\nsecret: pomerium/idp\n#  certificates:\n#      - pomerium/pomerium-proxy-tls\n</code></pre> <p>Replace <code>${YOUR_IdP}</code> with your identity provider. Apply with <code>kubectl -f</code>.</p> <p>Note that the last two lines are commented out. They reference a TLS certificate we will create further in the process.</p> </li> </ol>"},{"location":"tutorials/acme/pomerium-ingress/#install-cert-manager","title":"Install cert-manager","text":"<p>Install cert-manager using any of the methods documented in the Installation section of the cert-manager docs. The simplest method is to download and apply the provided manifest:</p> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.yaml\n</code></pre>"},{"location":"tutorials/acme/pomerium-ingress/#configure-lets-encrypt-issuer","title":"Configure Let's Encrypt Issuer","text":"<p>For communication between the Ingresses and the internet, we'll want to use certificates signed by a trusted certificate authority like Let's Encrypt. This example creates two Let's Encrypt issuers, one for staging and one for production.</p> <p>The Let's Encrypt production issuer has strict rate limits. Before your configuration is finalized you may have to recreate services several times, hitting those limits. It's easy to confuse rate limiting with errors in configuration or operation while building your stack.</p> <p>Because of this, we will start with the Let's Encrypt staging issuer. Once your configuration is all but finalized, we will switch to a production issuer. Both of these issuers are configured to use the <code>HTTP01</code> challenge provider.</p> <ol> <li> <p>The following YAML defines a staging certificate issuer. You must update the email address to your own. The <code>email</code> field is required by Let's Encrypt and used to notify you of certificate expiration and updates.</p> <p>```yaml file=./example/pomerium-staging-issuer.yaml <pre><code>You can download and edit the example and apply it with `kubectl apply -f`, or edit, and apply the custom resource in one command:\n\n```bash\nkubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/pomerium-staging-issuer.yaml\n</code></pre></p> </li> <li> <p>Create a production issuer and deploy it. As with the staging issuer, update this example with your own email address:</p> <p>```yaml file=./example/pomerium-production-issuer.yaml <pre><code>```bash\nkubectl create --edit -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/pomerium-production-issuer.yaml\n</code></pre></p> </li> <li> <p>You can confirm on the status of the issuers after you create them:</p> <pre><code>kubectl describe issuer -n pomerium letsencrypt-staging\nkubectl describe issuer -n pomerium letsencrypt-prod\n</code></pre> <p>You should see the issuer listed with a registered account.</p> </li> <li> <p>Define a certificate for the Pomerium Proxy service. This should be the only certificate you need to manually define:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: pomerium-proxy-tls\nnamespace: pomerium\nspec:\ndnsNames:\n- 'authenticate.example.com'\nissuerRef:\nkind: Issuer\nname: letsencrypt-staging\nsecretName: pomerium-proxy-tls\n</code></pre> <p>Adjust the <code>dnsNames</code> value to match your domain space. The subdomain (<code>authenticate</code> in our example) must match the domain used for the callback URL in your IdP configuration. Add the certificate with <code>kubectl -f</code>.</p> </li> <li> <p>Uncomment the last two lines of the Pomerium global configuration that reference your newly created certificate, and re-apply to the cluster.</p> </li> </ol> <p>Pomerium should now be installed and running in your cluster. You can verify by going to <code>https://authenticate.example.com</code> in your browser. Use <code>kubectl describe pomerium</code> to review the status of the Pomerium deployment and see recent events.</p>"},{"location":"tutorials/acme/pomerium-ingress/#define-a-test-service","title":"Define a Test Service","text":"<p>To test our new Ingress Controller, we will add the kuard app to our cluster and define an Ingress for it.</p> <ol> <li> <p>Define the kuard deployment and associated service:</p> <p>```yaml file=./example/deployment.yaml <pre><code>```yaml file=./example/service.yaml\n</code></pre></p> <p>You can download and reference these files locally, or you can reference them from the GitHub source repository for this documentation.</p> <p>To install the example service from the tutorial files straight from GitHub:</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/deployment.yaml\nkubectl apply -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/acme/example/service.yaml\n</code></pre> </li> <li> <p>Create a new Ingress manifest (<code>example-ingress.yaml</code>) for our test service:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: kuard\nannotations:\ncert-manager.io/issuer: letsencrypt-staging\ningress.pomerium.io/policy: '[{\"allow\":{\"and\":[{\"domain\":{\"is\":\"example.com\"}}]}}]'\nspec:\ningressClassName: pomerium\nrules:\n- host: kuard.example.com\nhttp:\npaths:\n- path: /\npathType: Prefix\nbackend:\nservice:\nname: kuard\nport:\nnumber: 80\ntls:\n- hosts:\n- kuard.example.com\nsecretName: kuard.example.com-tls\n</code></pre> <p>Again, change the references to <code>example.com</code> to match your domain space.</p> </li> <li> <p>Apply the Ingress manifest to the cluster:</p> </li> </ol> <pre><code>kubectl apply -f example-ingress.yaml\n</code></pre> <p>The Pomerium Ingress Controller will use cert-manager to automatically provision a certificate from the <code>letsencrypt-staging</code> issuer for the route to <code>kuard.example.com</code>.</p> <p>Once you've configured all your application services correctly in the cluster, adjust the issuer for your Ingresses (including the Authenticate service) to use <code>letsencrypt-prod</code>.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/","title":"Deploy cert-manager on Google Kubernetes Engine (GKE) and create SSL certificates for Ingress using Let's Encrypt","text":"<p>Last Verified: 15 July 2022</p> <p>In this tutorial you will learn how to deploy and configure cert-manager on Google Kubernetes Engine (GKE). You will learn how to configure cert-manager to get a signed SSL certificate from Let's Encrypt, using an HTTP-01 challenge. Finally you will learn how the certificate can be used to serve an HTTPS website with a public domain name.</p> <p>Google Cloud: A suite of cloud computing services by Google. Kubernetes: Runs on your servers. Automates the deployment, scaling, and management of containerized applications. cert-manager: Runs in Kubernetes. Obtains TLS / SSL certificates and ensures the certificates are valid and up-to-date. Let\u2019s Encrypt: An Internet service. Allows you to generate free short-lived SSL certificates.</p> <p>First you will create a Kubernetes (GKE) cluster and deploy a sample web server. You will then create a public IP address and a public domain name for your website. You'll set up Ingress and Google Cloud load balancers so that Internet clients can connect to the web server using HTTP. Finally you will use cert-manager to get an SSL certificate from Let's Encrypt and configure the load balancer to use that certificate. By the end of this tutorial you will be able to connect to your website from the Internet using an <code>https://</code> URL.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#prerequisites","title":"Prerequisites","text":"<p>\ud83d\udcbb Google Cloud account</p> <p>You will need a Google Cloud account. Registration requires a credit card or bank account details. Visit the Get started with Google Cloud page and follow the instructions.</p> <p>\ud83d\udcb5 If you have never used Google Cloud before, you may be eligible for the Google Cloud Free Program, which gives you a 90 day trial period that includes $300 in free Cloud Billing credits to explore and evaluate Google Cloud.</p> <p>\ud83d\udcbb Domain Name</p> <p>You will need a domain name and the ability to create DNS records in that domain. We will be getting a $12 domain name from Google Domains. Google Domains is one of the many possible \"domain name registrars\". NameCheap and GoDaddy are two other well-known registrars.</p> <p>\ud83d\udcb5 If you prefer not purchasing a domain name, it is also possible to adapt this tutorial to use the IP address to serve your website and for the SSL certificate.</p> <p>\ud83d\udcbb Software</p> <p>You will also need to install the following software on your laptop:</p> <ol> <li>gcloud: A set of tools to create and manage Google Cloud resources.</li> <li>kubectl: The Kubernetes command-line tool which allows you to configure Kubernetes clusters.</li> <li>curl: A command-line tool for connecting to a web server using HTTP and HTTPS.</li> </ol> <p>\u2139\ufe0f Try running <code>gcloud components install kubectl</code> to quickly install <code>kubectl</code>.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#0-configure-gcloud-with-a-google-cloud-project","title":"0. Configure <code>gcloud</code> with a Google Cloud project","text":"<p>If you don't have a Google Cloud account, the command below will create one for you:</p> <pre><code>gcloud init\n</code></pre> <p>You will need to answer \"yes\" to the following question:</p> <pre><code>Do you want to configure a default Compute Region and Zone? (Y/n)?  Y\n</code></pre> <p>After running the command, you will shown the project name, default region, and default zone.</p> <p>Example output:</p> <pre><code>* Commands that require authentication will use firstname.lastname@example.com by default\n* Commands will reference project `your-project` by default\n* Compute Engine commands will use region `europe-west1` by default\n* Compute Engine commands will use zone `europe-west1-b` by default\n</code></pre> <p>In this tutorial, we will refer to the name of the project that was selected while running <code>gcloud init</code> with the variable <code>PROJECT</code>. Where ever you see <code>$PROJECT</code> in a command, you need to either (1) replace the variable manually before you execute the command, or (2) export the variable in your shell session. This applies to all environment variables that you will encounter in the commands listed in this tutorial.</p> <p>We will go with option (2), so we need to export the environment variables before continuing using the information that was printed by <code>gcloud init</code>:</p> <pre><code>export PROJECT=your-project  # Your Google Cloud project ID.\nexport REGION=europe-west1   # Your Google Cloud region.\n</code></pre>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#1-create-a-kubernetes-cluster","title":"1. Create a Kubernetes Cluster","text":"<p>To get started, let's create a Kubernetes cluster in Google Cloud. You will need to pick a name for your cluster. Here, we will go with \"test-cluster-1\". Let us save it in an environment variable:</p> <pre><code>export CLUSTER=test-cluster-1\n</code></pre> <p>Now, create the cluster using the following command:</p> <pre><code>gcloud container clusters create $CLUSTER --preemptible --num-nodes=1\n</code></pre> <p>Set up the Google Kubernetes Engine auth plugin for kubectl:</p> <pre><code>gcloud components install gke-gcloud-auth-plugin\nexport USE_GKE_GCLOUD_AUTH_PLUGIN=True\ngcloud container clusters get-credentials $CLUSTER\n</code></pre> <p>Now check that you can connect to the cluster:</p> <pre><code>kubectl get nodes -o wide\n</code></pre> <p>\u23f2 It will take 4-5 minutes to create the cluster.</p> <p>\ud83d\udcb5 To minimize your cloud bill, this command creates a 1-node cluster using a preemptible virtual machine which is cheaper than a normal virtual machine.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#2-deploy-a-sample-web-server","title":"2. Deploy a sample web server","text":"<p>We will deploy a very simple web server which responds to HTTP requests with \"hello world!\".</p> <pre><code>kubectl create deployment web --image=gcr.io/google-samples/hello-app:1.0\n</code></pre> <p>We also need to create a Kubernetes Service, so that connections can be routed to the web server Pods:</p> <pre><code>kubectl expose deployment web --port=8080\n</code></pre> <p>\u2139\ufe0f These kubectl imperative commands are used for readability and brevity. Feel free to use YAML manifests and <code>kubectl apply -f</code> instead.</p> <p>\u2139\ufe0f The Service created by <code>kubectl expose</code> will be of type <code>ClusterIP</code> (the default) and this is only reachable by components within the cluster. Later we will create an Ingress which is how we make the service available to clients outside the cluster.</p> <p>\ud83d\udd30 Read more about Using a Service to Expose Your App.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#3-create-a-static-external-ip-address","title":"3. Create a static external IP address","text":"<p>This tutorial is about creating a public facing HTTPS website with a Let's Encrypt SSL certificate using the HTTP01 challenge mechanism, so we need a public IP address so that both Let's Encrypt and other Internet clients can connect to your website.</p> <p>It is easy to create a public IP address in Google Cloud and later we will associate it with your website domain name and with a Google Cloud load balancer, which will accept HTTP(S) connections from Internet clients and proxy the requests to the web servers running in your cluster.</p> <p>Create a global static IP address as follows:</p> <pre><code>gcloud compute addresses create web-ip --global\n</code></pre> <p>You should see the new IP address listed:</p> <pre><code>gcloud compute addresses list\n</code></pre> <p>\u26a0\ufe0f You MUST create a <code>global</code> IP address because that is a prerequisite of the External HTTP(S) Load Balancer which we will be using in this tutorial.</p> <p>\ud83d\udcb5 Global static IP addresses are only available in the Premium network service tier and are more expensive than ephemeral and standard public IP addresses.</p> <p>\ud83d\udd30 Read more about Network service tiers in Google Cloud.</p> <p>\ud83d\udd30 Read more about Reserving a static external IP address in Google Cloud.</p> <p>Finally, we will save the IP address into an environment variable for later use. Display the IP address with the following command:</p> <pre><code>gcloud compute addresses describe web-ip --format='value(address)' --global\n</code></pre> <p>Then, copy the output and save it into an environment variable:</p> <pre><code>export IP_ADDRESS=198.51.100.1  # Replace with your IP address\n</code></pre>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#4-create-a-domain-name-for-your-website","title":"4. Create a domain name for your website","text":"<p>You will need a domain name for your website and Let's Encrypt checks your domain before it signs your SSL certificate, so the domain name needs to be reachable from the Internet.</p> <p>We will purchase a cheap domain name using a credit card. Go to https://domains.google.com, and type something in the search box. For the example, we searched for <code>hello-app.com</code> because the example container that we will be deploying is called <code>hello-app</code>. Most importantly, we make sure to sort the domain names by price:</p> <p></p> <p>We don't pick <code>hello-app.com</code> because it costs $2,800; instead, we go with the one at the top: <code>heyapp.net</code>. It looks good! We then click the cart button. On the next screen, you will want to disable the auto-renewal, since we don't want to pay for this domain every year:</p> <p></p> <p>Now that you know your domain name, save it in an environment variable:</p> <pre><code>export DOMAIN_NAME=heyapp.net\n</code></pre> <p>Next, you will need to create a new <code>A</code> record pointing at the IP address that we created above. Head back to https://domains.google.com/registrar, open your domain (here, <code>heyapp.net</code>) and click \"DNS\" on the left menu. You will see \"Custom records\". You want to add a new record of type <code>A</code> and put the IP address from the previous step into \"data\". You must leave \"Host name\" empty because we are configuring the top-level domain name:</p> <p></p> <p>\ud83d\udd30 Learn more about What is a DNS A record? from the Cloudflare DNS tutorial.</p> <p>\u2139\ufe0f It is not strictly necessary to create a domain name for your website. You can connect to it using the IP address and later you can create an SSL certificate for the IP address instead of a domain name. If for some reason you can't create a domain name, then feel free to skip this section and adapt the instructions below to use an IP address instead.</p> <p>\u2139\ufe0f Every Google Cloud address has an automatically generated reverse DNS name like <code>51.159.120.34.bc.googleusercontent.com</code>, but the parent domain <code>googleusercontent.com</code> has a CAA record which prevents Let's Encrypt from signing certificates for the sub-domains. See Certificate Authority Authorization (CAA) in the Let's Encrypt documentation.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#5-create-an-ingress","title":"5. Create an Ingress","text":"<p>You won't be able to reach your website yet. Your web server is running inside your Kubernetes cluster but there is no route or proxy through which Internet clients can connect to it, yet! Now we will create a Kubernetes Ingress object and in Google Cloud this will trigger the creation of a various services which together allow Internet clients to reach your web server running inside your Kubernetes cluster.</p> <p>Initially we are going to create an HTTP (not an HTTPS) Ingress so that we can test the basic connectivity before adding the SSL layer.</p> <p>Copy the following YAML into a file called <code>ingress.yaml</code> and apply it:</p> <pre><code># ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: web-ingress\nannotations:\n# This tells Google Cloud to create an External Load Balancer to realize this Ingress\nkubernetes.io/ingress.class: gce\n# This enables HTTP connections from Internet clients\nkubernetes.io/ingress.allow-http: \"true\"\n# This tells Google Cloud to associate the External Load Balancer with the static IP which we created earlier\nkubernetes.io/ingress.global-static-ip-name: web-ip\nspec:\ndefaultBackend:\nservice:\nname: web\nport:\nnumber: 8080\n</code></pre> <pre><code>kubectl apply -f ingress.yaml\n</code></pre> <p>This will trigger the creation of a Google HTTP(S) loadbalancer associated with the IP address that you created earlier. You can watch the progress and the resources that are being created:</p> <pre><code>kubectl describe ingress web-ingress\n</code></pre> <p>Within 4-5 minutes all the load balancer components should be ready and you should be able to connect to the DNS name and see the response from the hello-world web server that we deployed earlier:</p> <pre><code>curl http://$DOMAIN_NAME\n</code></pre> <p>Example output:</p> <pre><code>Hello, world!\nVersion: 1.0.0\nHostname: web-79d88c97d6-t8hj2\n</code></pre> <p>At this point we have a Google load balancer which is forwarding HTTP traffic to the hello-world web server running in a Pod in our cluster.</p> <p>\u23f2 It may take 4-5 minutes for the load balancer components to be created and configured and for Internet clients to be routed to your web server. Refer to the Troubleshooting section if it takes longer.</p> <p>\ud83d\udd30 Read about how to Use a static IP addresses for HTTP(S) load balancers via Ingress annotation.</p> <p>\ud83d\udd30 Read a Summary of external Ingress annotations for GKE.</p> <p>\ud83d\udd30 Read about Troubleshooting Ingress with External HTTP(S) Load Balancing on GKE.</p> <p>\u2139\ufe0f There are two Ingress classes available for GKE Ingress. The <code>gce</code> class deploys an external load balancer and the <code>gce-internal</code> class deploys an internal load balancer. Ingress resources without a class specified default to <code>gce</code>.</p> <p>\u26a0\ufe0f Contrary to the Kubernetes Ingress documentation, you MUST use the <code>kubernetes.io/ingress.class</code> annotation rather than the <code>Ingress.Spec.IngressClassName</code> field. See ingress-gce #1301 and ingress-gce #1337.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#6-install-cert-manager","title":"6. Install cert-manager","text":"<p>So finally we are ready to start creating an SSL certificate for our website. The first thing you need to do is install cert-manager, and we'll install it the easy using <code>kubectl</code> as follows:</p> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.2/cert-manager.yaml\n</code></pre> <p>This will create three Deployments, and a bunch of Services and Pods in a new namespace called <code>cert-manager</code>. It also installs various cluster scoped supporting resources such as RBAC roles and Custom Resource Definitions.</p> <p>You can view some of the resources that have been installed as follows:</p> <pre><code>kubectl -n cert-manager get all\n</code></pre> <p>And you can explore the Custom Resource Definitions (cert-manager's API) using <code>kubectl explain</code>, as follows:</p> <pre><code>kubectl explain Certificate\nkubectl explain CertificateRequest\nkubectl explain Issuer\n</code></pre> <p>\ud83d\udd30 Read about other ways to install cert-manager.</p> <p>\ud83d\udd30 Read more about Certificates and Issuers.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#7-create-an-issuer-for-lets-encrypt-staging","title":"7. Create an Issuer for Let's Encrypt Staging","text":"<p>An Issuer is a custom resource which tells cert-manager how to sign a Certificate. In this case the Issuer will be configured to connect to the Let's Encrypt staging server, which allows us to test everything without using up our Let's Encrypt certificate quota for the domain name.</p> <p>\u2139\ufe0f Let's Encrypt uses the Automatic Certificate Management Environment (ACME) protocol which is why the configuration below is under a key called <code>acme</code>.</p> <p>Save the following content to a file called <code>issuer-lets-encrypt-staging.yaml</code>, change the <code>email</code> field to use your email address and apply it:</p> <pre><code># issuer-lets-encrypt-staging.yaml\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt-staging\nspec:\nacme:\nserver: https://acme-staging-v02.api.letsencrypt.org/directory\nemail: &lt;email-address&gt; # \u2757 Replace this with your email address\nprivateKeySecretRef:\nname: letsencrypt-staging\nsolvers:\n- http01:\ningress:\nname: web-ingress\n</code></pre> <pre><code>kubectl apply -f issuer-lets-encrypt-staging.yaml\n</code></pre> <p>\u2139\ufe0f The email address is only used by Let's Encrypt to remind you to renew the certificate after 30 days before expiry. You will only receive this email if something goes wrong when renewing the certificate with cert-manager.</p> <p>You can check the status of the Issuer:</p> <pre><code>kubectl describe issuers.cert-manager.io letsencrypt-staging\n</code></pre> <p>Example output</p> <pre><code>Status:\n  Acme:\n    Last Registered Email:  firstname.lastname@example.com\n    Uri:                    https://acme-staging-v02.api.letsencrypt.org/acme/acct/60706744\n  Conditions:\n    Last Transition Time:  2022-07-13T16:13:25Z\n    Message:               The ACME account was registered with the ACME server\n    Observed Generation:   1\n    Reason:                ACMEAccountRegistered\n    Status:                True\n    Type:                  Ready\n</code></pre> <p>\u2139\ufe0f The Let's Encrypt production issuer has very strict rate limits. When you're experimenting and learning, it can be very easy to hit those limits. Because of that risk, we'll start with the Let's Encrypt staging issuer, and once we're happy that it's working we'll switch to the production issuer.</p> <p>\u26a0\ufe0f In the next step you will see a warning about untrusted certificates because we start with the staging issuer, but that's totally expected.</p> <p>\ud83d\udd30 Read more about configuring the ACME Issuer.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#8-re-configure-the-ingress-for-ssl","title":"8. Re-configure the Ingress for SSL","text":"<p>Earlier we created an Ingress and saw that we could connect to our web server using HTTP. Now we will reconfigure that Ingress for HTTPS.</p> <p>First a quick hack, to work around a problem with the Google Cloud ingress controller. Create an empty Secret for your SSL certificate before reconfiguring the Ingress and apply it:</p> <pre><code># secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\nname: web-ssl\ntype: kubernetes.io/tls\nstringData:\ntls.key: \"\"\ntls.crt: \"\"\n</code></pre> <pre><code>kubectl apply -f secret.yaml\n</code></pre> <p>\u2139\ufe0f This is a work around for a chicken-and-egg problem, where the ingress-gce controller won't update its forwarding rules unless it can first find the Secret that will eventually contain the SSL certificate. But Let's Encrypt won't sign the SSL certificate until it can get the special <code>.../.well-known/acme-challenge/...</code> URL which cert-manager adds to the Ingress and which must then be translated into Google Cloud forwarding rules, by the ingress-gce controller.</p> <p>\ud83d\udd30 Read more about Kubernetes Secrets and how to use them.</p> <p>Now make the following changes to the Ingress and apply them:</p> <pre><code>--- a/ingress.yaml\n+++ b/ingress.yaml\n@@ -7,7 +7,12 @@ metadata:\n    kubernetes.io/ingress.class: gce\n     kubernetes.io/ingress.allow-http: \"true\"\n     kubernetes.io/ingress.global-static-ip-name: web-ip\n+    cert-manager.io/issuer: letsencrypt-staging\nspec:\n+  tls:\n+    - secretName: web-ssl\n+      hosts:\n+        - $DOMAIN_NAME\n  defaultBackend:\n     service:\n       name: web\n</code></pre> <pre><code>kubectl apply -f ingress.yaml\n</code></pre> <p>This triggers a complex set of operations which may take many minutes to eventually complete. Some of these steps take 2-3 minutes and some will initially fail. They should all eventually succeed because cert-manager and ingress-gce (the Google Cloud ingress controller) will periodically re-reconcile.</p> <p>Eventually, When all the pieces are in place, you should be able to use curl to check the HTTPS connection to your website:</p> <pre><code>curl -v --insecure https://$DOMAIN_NAME\n</code></pre> <p>You should see that the HTTPS connection is established but that the SSL certificate is not trusted; that's why you use the <code>--insecure</code> flag at this stage</p> <p>Example output: <pre><code>* Server certificate:\n*  subject: CN=www.example.com\n*  start date: Jul 14 08:52:29 2022 GMT\n*  expire date: Oct 12 08:52:28 2022 GMT\n*  issuer: C=US; O=(STAGING) Let's Encrypt; CN=(STAGING) Artificial Apricot R3\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\n</code></pre></p> <p>\u23f2 You will have to wait 5-10 minutes for the SSL certificate to be signed and then loaded by the Google Cloud load balancer. Refer to the Troubleshooting section if it takes longer.</p> <p>\u2139\ufe0f Adding the annotation <code>cert-manager.io/issuer: letsencrypt-staging</code> marks the Ingress for the attention of the cert-manager <code>ingress-shim</code> and causes it to create a new Certificate with a reference to the Issuer that we created earlier.</p> <p>\ud83d\udd30 Read Securing Ingress Resources to learn more.</p> <p>\ud83d\udd30 Read about how to Specify certificates for your Ingress in GKE.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#9-create-a-production-ready-ssl-certificate","title":"9. Create a production ready SSL certificate","text":"<p>Now that everything is working with the Let's Encrypt staging server, we can switch to the production server and get a trusted SSL certificate.</p> <p>Create a Let's Encrypt production Issuer and apply it:</p> <pre><code># issuer-lets-encrypt-production.yaml\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: letsencrypt-production\nspec:\nacme:\nserver: https://acme-v02.api.letsencrypt.org/directory\nemail: &lt;email-address&gt; # \u2757 Replace this with your email address\nprivateKeySecretRef:\nname: letsencrypt-production\nsolvers:\n- http01:\ningress:\nname: web-ingress\n</code></pre> <pre><code>kubectl apply -f issuer-lets-encrypt-production.yaml\n</code></pre> <p>Then update the Ingress annotation to use the production Issuer:</p> <pre><code>kubectl annotate ingress web-ingress cert-manager.io/issuer=letsencrypt-production --overwrite\n</code></pre> <p>This will trigger cert-manager to get a new SSL certificate signed by the Let's Encrypt production CA and store it to the <code>web-ssl</code> Secret. Within about 10 minutes, this new certificate will be synced to the Google Cloud load balancer and you will be able to connect to the website using secure HTTPS:</p> <pre><code>curl -v https://$DOMAIN_NAME\n</code></pre> <p>Example output: <pre><code>...\n* Server certificate:\n*  subject: CN=www.example.com\n*  start date: Jul 14 09:44:29 2022 GMT\n*  expire date: Oct 12 09:44:28 2022 GMT\n*  subjectAltName: host \"www.example.com\" matched cert's \"www.example.com\"\n*  issuer: C=US; O=Let's Encrypt; CN=R3\n*  SSL certificate verify ok.\n...\nHello, world!\nVersion: 1.0.0\nHostname: web-79d88c97d6-t8hj2\n</code></pre></p> <p>It should also be possible to visit <code>https://$DOMAIN_NAME</code> in your web browser, without any errors or warnings.</p> <p>That concludes the tutorial. You now understand how cert-manager integrates with Kubernetes Ingress and cloud Ingress controllers. You have learned how to use cert-manager to get free Let's Encrypt SSL certificates. And you have seen how the certificates can be used by a cloud based load balancer to terminate SSL connections from Internet clients and forward HTTPS requests to a web server running in your Kubernetes cluster.</p> <p>\ud83d\udcb5 Read the Clean up section to learn how to delete all the resources that you created in this tutorial and reduce your cloud bill.</p> <p>\ud83d\udd30 Read the Troubleshooting section if you encounter difficulties with the steps described in this tutorial.</p>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#clean-up","title":"Clean up","text":"<p>After completing the tutorial you can clean up by deleting the cluster and the domain name and the static IP as follows:</p> <pre><code># Delete the cluster and all the Google Cloud resources related to the Ingress that it contains\ngcloud container clusters delete $CLUSTER\n# Delete the domain name\ngcloud dns record-sets delete $DOMAIN_NAME --zone $ZONE --type A\n\n# Delete the static IP address\ngcloud compute addresses delete web-ip --global\n</code></pre>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#troubleshooting","title":"Troubleshooting","text":"<p>When you create or update the Ingress object in this tutorial it triggers a complex set of operations which may take many minutes to eventually complete. Some of these steps take 2-3 minutes and some will initially fail but then subsequently succeed when either cert-manager or the Google ingress controller re-reconciles. In short, you should allow 5-10 minutes after you create or change the Ingress and you should expect to see some errors and warnings when you run <code>kubectl describe ingress web-ingress</code>.</p> <p>Here's a brief summary of the operations performed by cert-manager and ingress-gce (the Google Cloud Ingress controller):</p> <ul> <li>cert-manager connects to Let's Encrypt and sends an SSL certificate signing request.</li> <li>Let's Encrypt responds with a \"challenge\", which is a unique token that cert-manager must make available at a well-known location on the target web site. This proves that you are an administrator of that web site and domain name.</li> <li>cert-manager deploys a Pod containing a temporary web server that serves the Let's Encrypt challenge token.</li> <li>cert-manager reconfigures the Ingress, adding a <code>rule</code> to route requests for from Let's Encrypt to that temporary web server.</li> <li>Google Cloud ingress controller reconfigures the external HTTP load balancer with that new rule.</li> <li>Let's Encrypt now connects and receives the expected challenge token and the signs the SSL certificate and returns it to cert-manager.</li> <li>cert-manager stores the signed SSL certificate in the Kubernetes Secret called <code>web-ssl</code>.</li> <li>Google Cloud ingress controller uploads the signed certificate and associated private key to a Google Cloud certificate.</li> <li>Google Cloud ingress controller reconfigures the external load balancer to serve the uploaded SSL certificate.</li> </ul>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#check-ingress-and-associated-events","title":"Check Ingress and associated events","text":"<p>Use <code>kubectl describe</code> to view the Ingress configuration and all the associated Events. Check that the IP address is correct and that the TLS and Host entries match the domain name that you chose for your website. Notice that <code>ingress-gce</code> creates an Event for each of the Google Cloud components that it manages. And notice that it adds annotations with references to the ID of each of those components. cert-manager also creates Events when it reconciles the Ingress object, including details of the Certificate object that it creates for the Ingress.</p> <pre><code>$ kubectl describe ingress web-ingress\nName:             web-ingress\nLabels:           &lt;none&gt;\nNamespace:        default\nAddress:          34.120.159.51\nIngress Class:    &lt;none&gt;\nDefault backend:  web:8080 (10.52.0.13:8080)\nTLS:\n  web-ssl terminates www.example.com\nRules:\n  Host        Path  Backends\n  ----        ----  --------\n  *           *     web:8080 (10.52.0.13:8080)\nAnnotations:  cert-manager.io/issuer: letsencrypt-staging\n              ingress.kubernetes.io/backends: {\"k8s1-01784147-default-web-8080-1647ccd2\":\"HEALTHY\"}\n              ingress.kubernetes.io/forwarding-rule: k8s2-fr-1lt9dzcy-default-web-ingress-yteotwe4\n              ingress.kubernetes.io/https-forwarding-rule: k8s2-fs-1lt9dzcy-default-web-ingress-yteotwe4\n              ingress.kubernetes.io/https-target-proxy: k8s2-ts-1lt9dzcy-default-web-ingress-yteotwe4\n              ingress.kubernetes.io/ssl-cert: k8s2-cr-1lt9dzcy-4gjeakdb9n7k6ls7-a257650b5fefd174\n              ingress.kubernetes.io/target-proxy: k8s2-tp-1lt9dzcy-default-web-ingress-yteotwe4\n              ingress.kubernetes.io/url-map: k8s2-um-1lt9dzcy-default-web-ingress-yteotwe4\n              kubernetes.io/ingress.allow-http: true\n              kubernetes.io/ingress.class: gce\n              kubernetes.io/ingress.global-static-ip-name: web-ip\nEvents:\n  Type     Reason             Age                 From                       Message\n  ----     ------             ----                ----                       -------\n  Normal   CreateCertificate  28m                 cert-manager-ingress-shim  Successfully created Certificate \"web-ssl\"\n  Normal   Sync               28m                 loadbalancer-controller    UrlMap \"k8s2-um-1lt9dzcy-default-web-ingress-yteotwe4\" updated\n  Warning  Sync               24m (x16 over 28m)  loadbalancer-controller    Error syncing to GCP: error running load balancer syncing routine: loadbalancer 1lt9dzcy-default-web-ingress-yteotwe4 does not exist: googleapi: Error 404: The resource 'projects/your-project/global/sslCertificates/k8s2-cr-1lt9dzcy-4gjeakdb9n7k6ls7-e3b0c44298fc1c14' was not found, notFound\n  Normal   Sync               34s (x16 over 65m)  loadbalancer-controller    Scheduled for sync\n</code></pre>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#use-cmctl-to-show-the-state-of-a-certificate-and-its-associated-resources","title":"Use cmctl to show the state of a Certificate and its associated resources","text":"<p>\u2139\ufe0f Install <code>cmctl</code> if you have not already done so.</p> <p>When you create a Certificate, cert-manager will create a collection of temporary resources which each contain information about the status of certificate signing process. You can read more about these in the Certificate Lifecycle section. Use the <code>cmctl status</code> command to view details of all these resources and all the associated Events and error messages.</p> <p>You may see some temporary errors, like:</p> <pre><code>$ cmctl status certificate web-ssl\nName: web-ssl\nNamespace: default\nCreated at: 2022-07-14T17:30:06+01:00\nConditions:\n  Ready: False, Reason: MissingData, Message: Issuing certificate as Secret does not contain a private key\n  Issuing: True, Reason: MissingData, Message: Issuing certificate as Secret does not contain a private key\nDNS Names:\n- www.example.com\nEvents:\n  Type    Reason     Age    From                                       Message\n  ----    ------     ----   ----                                       -------\n  Normal  Issuing    4m37s  cert-manager-certificates-trigger          Issuing certificate as Secret does not contain a private key\n  Normal  Generated  4m37s  cert-manager-certificates-key-manager      Stored new private key in temporary Secret resource \"web-ssl-8gsqc\"\n  Normal  Requested  4m37s  cert-manager-certificates-request-manager  Created new CertificateRequest resource \"web-ssl-dblrj\"\nIssuer:\n  Name: letsencrypt-staging\n  Kind: Issuer\n  Conditions:\n    Ready: True, Reason: ACMEAccountRegistered, Message: The ACME account was registered with the ACME server\n  Events:  &lt;none&gt;\nerror: 'tls.crt' of Secret \"web-ssl\" is not set\nNot Before: &lt;none&gt;\nNot After: &lt;none&gt;\nRenewal Time: &lt;none&gt;\nCertificateRequest:\n  Name: web-ssl-dblrj\n  Namespace: default\n  Conditions:\n    Approved: True, Reason: cert-manager.io, Message: Certificate request has been approved by cert-manager.io\n  Ready: False, Reason: Pending, Message: Waiting on certificate issuance from order default/web-ssl-dblrj-327645514: \"pending\"\n  Events:\n    Type    Reason           Age    From                                          Message\n    ----    ------           ----   ----                                          -------\n    Normal  cert-manager.io  4m37s  cert-manager-certificaterequests-approver     Certificate request has been approved by cert-manager.io\n    Normal  OrderCreated     4m37s  cert-manager-certificaterequests-issuer-acme  Created Order resource default/web-ssl-dblrj-327645514\n    Normal  OrderPending     4m37s  cert-manager-certificaterequests-issuer-acme  Waiting on certificate issuance from order default/web-ssl-dblrj-327645514: \"\"\nOrder:\n  Name: web-ssl-dblrj-327645514\n  State: pending, Reason:\n  Authorizations:\n    URL: https://acme-staging-v02.api.letsencrypt.org/acme/authz-v3/3008789144, Identifier: www.example.com, Initial State: pending, Wildcard: false\nChallenges:\n- Name: web-ssl-dblrj-327645514-2671694319, Type: HTTP-01, Token: TKspp86xMjQzTvMVXWkezEA2sE2GSWjnld5Lt4X13ro, Key: TKspp86xMjQzTvMVXWkezEA2sE2GSWjnld5Lt4X13ro.f4bppCOm-jXasFGMKjpBE5aQlhiQBeTPIs0Lx822xao, State: pending, Reason: Waiting for HTTP-01 challenge propagation: did not get expected response when querying endpoint, expected \"TKspp86xMjQzTvMVXWkezEA2sE2GSWjnld5Lt4X13ro.f4bppCOm-jXasFGMKjpBE5aQlhiQBeTPIs0Lx822xao\" but got: Hello, world!\nVersion: 1... (truncated), Processing: true, Presented: true\n</code></pre> <p>This is because cert-manager is performing a preflight check to see if the temporary challenge web server is reachable at the expected URL. Initially it will not be reachable, because cert-manager takes some time to deploy the temporary web server and the Ingress controller takes time to set up the new HTTP routing rules. Eventually you will see that the Certificate is Ready and signed:</p> <pre><code>$ cmctl status certificate web-ssl\nName: web-ssl\nNamespace: default\nCreated at: 2022-07-14T17:30:06+01:00\nConditions:\n  Ready: True, Reason: Ready, Message: Certificate is up to date and has not expired\nDNS Names:\n- www.example.com\nEvents:\n  Type    Reason     Age   From                                       Message\n  ----    ------     ----  ----                                       -------\n  Normal  Issuing    31m   cert-manager-certificates-trigger          Issuing certificate as Secret does not contain a private key\n  Normal  Generated  31m   cert-manager-certificates-key-manager      Stored new private key in temporary Secret resource \"web-ssl-8gsqc\"\n  Normal  Requested  31m   cert-manager-certificates-request-manager  Created new CertificateRequest resource \"web-ssl-dblrj\"\n  Normal  Issuing    26m   cert-manager-certificates-issuing          The certificate has been successfully issued\nIssuer:\n  Name: letsencrypt-staging\n  Kind: Issuer\n  Conditions:\n    Ready: True, Reason: ACMEAccountRegistered, Message: The ACME account was registered with the ACME server\n  Events:  &lt;none&gt;\nSecret:\n  Name: web-ssl\n  Issuer Country: US\n  Issuer Organisation: (STAGING) Let's Encrypt\n  Issuer Common Name: (STAGING) Artificial Apricot R3\n  Key Usage: Digital Signature, Key Encipherment\n  Extended Key Usages: Server Authentication, Client Authentication\n  Public Key Algorithm: RSA\n  Signature Algorithm: SHA256-RSA\n  Subject Key ID: a51e3621f5c1138947810f27dce425b33c88cb16\n  Authority Key ID: de727a48df31c3a650df9f8523df57374b5d2e65\n  Serial Number: fa8bb0b603ca2cdbfdfb2872d05ee52cda10\n  Events:  &lt;none&gt;\nNot Before: 2022-07-14T16:34:52+01:00\nNot After: 2022-10-12T16:34:51+01:00\nRenewal Time: 2022-09-12T16:34:51+01:00\n</code></pre>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#check-that-the-ssl-certificate-has-been-copied-to-google-cloud","title":"Check that the SSL certificate has been copied to Google Cloud","text":"<p>After cert-manager receives the signed Certificate it stores in the <code>web-ssl</code> Secret, and this in turn triggers the Google Cloud ingress controller to copy that SSL certificate to Google Cloud. You can see the certificate using the <code>gcloud</code> command, as follows:</p> <pre><code>$ gcloud compute ssl-certificates list\nNAME                                                TYPE          CREATION_TIMESTAMP             EXPIRE_TIME                    MANAGED_STATUS\nk8s2-cr-1lt9dzcy-4gjeakdb9n7k6ls7-a257650b5fefd174  SELF_MANAGED  2022-07-14T09:37:06.920-07:00  2022-10-12T08:34:51.000-07:00\n</code></pre> <p>And you can view its contents and check its attributes as follows:</p> <pre><code>$ gcloud compute ssl-certificates describe k8s2-cr-1lt9dzcy-4gjeakdb9n7k6ls7-a257650b5fefd174 --format='value(certificate)' \\\n| openssl x509 -in - -noout -text\n...\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            04:9f:47:f1:cb:25:37:9b:86:a3:ef:bf:2e:77:3b:45:fc:1a\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C = US, O = Let's Encrypt, CN = R3\n        Validity\n            Not Before: Jul 14 17:11:15 2022 GMT\n            Not After : Oct 12 17:11:14 2022 GMT\n        Subject: CN = www.example.com\n</code></pre>"},{"location":"tutorials/getting-started-with-cert-manager-on-google-kubernetes-engine-using-lets-encrypt-for-ingress-ssl/#check-the-google-cloud-forwarding-rules","title":"Check the Google Cloud forwarding-rules","text":"<p>After you add the TLS stanza to the Ingress object, you should eventually see a forwarding-rule for the SSL connection:</p> <pre><code>$ gcloud compute forwarding-rules describe k8s2-fs-1lt9dzcy-default-web-ingress-yteotwe4 --global\nIPAddress: 34.120.159.51\nIPProtocol: TCP\ncreationTimestamp: '2022-07-14T09:37:12.362-07:00'\ndescription: '{\"kubernetes.io/ingress-name\": \"default/web-ingress\"}'\nfingerprint: oBTg7dRaIqI=\nid: '2303318464959215831'\nkind: compute#forwardingRule\nlabelFingerprint: 42WmSpB8rSM=\nloadBalancingScheme: EXTERNAL\nname: k8s2-fs-1lt9dzcy-default-web-ingress-yteotwe4\nnetworkTier: PREMIUM\nportRange: 443-443\nselfLink: https://www.googleapis.com/compute/v1/projects/your-project/global/forwardingRules/k8s2-fs-1lt9dzcy-default-web-ingress-yteotwe4\ntarget: https://www.googleapis.com/compute/v1/projects/your-project/global/targetHttpsProxies/k8s2-ts-1lt9dzcy-default-web-ingress-yteotwe4\n</code></pre>"},{"location":"tutorials/istio-csr/istio-csr/","title":"Securing the istio Service Mesh using cert-manager","text":"<p>This guide will run through installing and using istio-csr from scratch. We'll use kind to create a new cluster locally in Docker, but this guide should work on any cluster as long as the relevant Istio Platform Setup has been performed.</p> <p>Note that if you're following the Platform Setup guide for OpenShift, do not run the <code>istioctl install</code> command listed in that guide; we'll run our own command later.</p>"},{"location":"tutorials/istio-csr/istio-csr/#initial-setup","title":"Initial Setup","text":"<p>You'll need the following tools installed on your machine:</p> <ul> <li>istioctl</li> <li>kind and docker (if you're using kind)</li> <li>helm</li> <li>kubectl</li> <li>jq</li> </ul> <p>In addition, Istio must not already be installed in your cluster. Installing istio-csr after Istio is not supported.</p>"},{"location":"tutorials/istio-csr/istio-csr/#creating-the-cluster-and-installing-cert-manager","title":"Creating the Cluster and Installing cert-manager","text":"<p>Kind will automatically set up kubectl to point to the newly created cluster.</p> <p>We install cert-manager using helm here, but if you've got a preferred method you can install in any way.</p> <pre><code>kind create cluster --image=docker.io/kindest/node:v1.22.4\n# Helm setup\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\n# install cert-manager CRDs\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.0/cert-manager.crds.yaml\n# install cert-manager; this might take a little time\nhelm install cert-manager jetstack/cert-manager \\\n    --namespace cert-manager \\\n    --create-namespace \\\n    --version v1.8.0\n# We need this namespace to exist since our cert will be placed there\nkubectl create namespace istio-system\n</code></pre>"},{"location":"tutorials/istio-csr/istio-csr/#create-a-cert-manager-issuer-and-issuing-certificate","title":"Create a cert-manager Issuer and Issuing Certificate","text":"<p>An Issuer tells cert-manager how to issue certificates; we'll create a self-signed root CA in our cluster because it's really simple to configure.</p> <p>The approach of using a locally generated root certificate would work in a production deployment too, but there are also several other issuers in cert-manager which could be used. Note that the ACME issuer will not work, since it can't add the required fields to issued certificates.</p> <p>There are also some comments on the example-issuer providing a little more detail. Note also that this guide only uses <code>Issuer</code>s and not <code>ClusterIssuer</code>s - using a <code>ClusterIssuer</code> isn't a drop-in replacement, and in any case we recommend that production deployments use Issuers for easier access controls and scoping.</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/istio-csr/example/example-issuer.yaml\n</code></pre>"},{"location":"tutorials/istio-csr/istio-csr/#export-the-root-ca-to-a-local-file","title":"Export the Root CA to a Local File","text":"<p>While it's possible to configure Istio such that it can automatically \"discover\" the root CA, this can be dangerous in some specific scenarios involving other security holes, enabling signer hijacking attacks.</p> <p>As such, we'll export our Root CA and configure Istio later using that static cert.</p> <pre><code># Export our cert from the secret it's stored in, and base64 decode to get the PEM data.\nkubectl get -n istio-system secret istio-ca -ogo-template='{{index .data \"tls.crt\"}}' | base64 -d &gt; ca.pem\n# Out of interest, we can check out what our CA looks like\nopenssl x509 -in ca.pem -noout -text\n# Add our CA to a secret\nkubectl create secret generic -n cert-manager istio-root-ca --from-file=ca.pem=ca.pem\n</code></pre>"},{"location":"tutorials/istio-csr/istio-csr/#installing-istio-csr","title":"Installing istio-csr","text":"<p>istio-csr is best installed via Helm, and it should be simple and quick to install. There are a bunch of other configuration options for the helm chart, which you can check out here.</p> <pre><code>helm repo add jetstack https://charts.jetstack.io\nhelm repo update\n# We set a few helm template values so we can point at our static root CA\nhelm install -n cert-manager cert-manager-istio-csr jetstack/cert-manager-istio-csr \\\n    --set \"app.tls.rootCAFile=/var/run/secrets/istio-csr/ca.pem\" \\\n    --set \"volumeMounts[0].name=root-ca\" \\\n    --set \"volumeMounts[0].mountPath=/var/run/secrets/istio-csr\" \\\n    --set \"volumes[0].name=root-ca\" \\\n    --set \"volumes[0].secret.secretName=istio-root-ca\"\n# Check to see that the istio-csr pod is running and ready\nkubectl get pods -n cert-manager\nNAME                                       READY   STATUS    RESTARTS   AGE\ncert-manager-aaaaaaaaaa-11111              1/1     Running   0          9m46s\ncert-manager-cainjector-aaaaaaaaaa-22222   1/1     Running   0          9m46s\ncert-manager-istio-csr-bbbbbbbbbb-00000    1/1     Running   0          63s\ncert-manager-webhook-aaaaaaaaa-33333       1/1     Running   0          9m46s\n</code></pre>"},{"location":"tutorials/istio-csr/istio-csr/#installing-istio","title":"Installing Istio","text":"<p>If you're not running on kind, you may need to do some additional setup tasks before installing Istio.</p> <p>We use the <code>istioctl</code> CLI to install Istio, configured using a custom IstioOperator manifest.</p> <p>The custom manifest does the following:</p> <ul> <li>Disables the CA server in istiod,</li> <li>Ensures that Istio workloads request certificates from istio-csr,</li> <li>Ensures that the istiod certificates and keys are mounted from the Certificate created when installing istio-csr.</li> </ul> <p>First we download our demo manifest and then we apply it.</p> <pre><code>curl -sSL https://raw.githubusercontent.com/cert-manager/website/master/content/docs/tutorials/istio-csr/example/istio-config-getting-started.yaml &gt; istio-install-config.yaml\n</code></pre> <p>You may wish to inspect and tweak <code>istio-install-config.yaml</code> if you know what you're doing, but this manifest should work for example purposes as-is.</p> <p>If you set a custom <code>app.tls.trustDomain</code> when installing istio-csr via helm earlier, you'll need to ensure that value is repeated in <code>istio-install-config.yaml</code>.</p> <p>This final command will install Istio; the exact command you need might vary on different platforms, and will certainly vary on OpenShift.</p> <pre><code># This takes a little time to complete\nistioctl install -f istio-install-config.yaml\n# If you're on OpenShift, you need a different profile:\n# istioctl install --set profile=openshift -f istio-install-config.yaml\n</code></pre> <p>You will be prompted for input to confirm your choice of Istio profile:</p> <pre><code>This will install the Istio 1.14.1 demo profile with [\"Istio core\" \"Istiod\" \"Ingress gateways\" \"Egress gateways\"] components into the cluster. Proceed? (y/N)\n</code></pre> <p>Confirm your selection by entering <code>y</code> into the console to proceed with installation.</p>"},{"location":"tutorials/istio-csr/istio-csr/#validating-install","title":"Validating Install","text":"<p>The following steps are option but can be followed to validate everything is hooked correctly:</p> <ol> <li>Deploy a sample application &amp; watch for <code>certificaterequests.cert-manager.io</code> resources</li> <li>Verify <code>cert-manager</code> logs for new <code>certificaterequests</code> and responses</li> <li>Verify the CA Endpoint being used in a <code>istio-proxy</code> sidecar container</li> <li>Using <code>istioctl</code> to fetch the certificate info for the <code>istio-proxy</code> container</li> </ol> <p>To see this all in action, lets deploy a very simple sample application from the Istio samples.</p> <p>First set some environment variables whose values could be changed if needed:</p> <pre><code># Set namespace for sample application\nexport NAMESPACE=default\n# Set env var for the value of the app label in manifests\nexport APP=httpbin\n# Grab the installed version of istio\nexport ISTIO_VERSION=$(istioctl version -o json | jq -r '.meshVersion[0].Info.version')\n</code></pre> <p>We use the <code>default</code> namespace for simplicity, so let's label the namespace for Istio injection:</p> <pre><code>kubectl label namespace $NAMESPACE istio-injection=enabled --overwrite\n</code></pre> <p>In a separate terminal you should now follow the logs for <code>cert-manager</code>:</p> <pre><code>kubectl logs -n cert-manager $(kubectl get pods -n cert-manager -o jsonpath='{.items..metadata.name}' --selector app=cert-manager) --since 2m -f\n</code></pre> <p>In another separate terminal, lets watch the <code>istio-system</code> namespace for <code>certificaterequests</code>:</p> <pre><code>kubectl get certificaterequests.cert-manager.io -n istio-system -w\n</code></pre> <p>Now deploy the sample application <code>httpbin</code> in the labeled namespace. Note the use of a variable to match the manifest version to your installed Istio version:</p> <pre><code>kubectl apply -n $NAMESPACE -f https://raw.githubusercontent.com/istio/istio/$ISTIO_VERSION/samples/httpbin/httpbin.yaml\n</code></pre> <p>You should see something similar to the output here for <code>certificaterequests</code>:</p> <pre><code>NAME             APPROVED   DENIED   READY   ISSUER       REQUESTOR                                         AGE\nistio-ca-74bnl   True                True    selfsigned   system:serviceaccount:cert-manager:cert-manager   2d2h\nistiod-w9zh6     True                True    istio-ca     system:serviceaccount:cert-manager:cert-manager   27m\nistio-csr-8ddcs                               istio-ca     system:serviceaccount:cert-manager:cert-manager-istio-csr   0s\nistio-csr-8ddcs   True                        istio-ca     system:serviceaccount:cert-manager:cert-manager-istio-csr   0s\nistio-csr-8ddcs   True                True    istio-ca     system:serviceaccount:cert-manager:cert-manager-istio-csr   0s\nistio-csr-8ddcs   True                True    istio-ca     system:serviceaccount:cert-manager:cert-manager-istio-csr   0s\n</code></pre> <p>The key request being <code>istio-csr-8ddcs</code> in our example output. You should then check your <code>cert-manager</code> log output for two log lines with this request being \"Approved\" and \"Ready\":</p> <pre><code>I0113 16:51:59.186482       1 conditions.go:261] Setting lastTransitionTime for CertificateRequest \"istio-csr-8ddcs\" condition \"Approved\" to 2022-01-13 16:51:59.186455713 +0000 UTC m=+3507.098466775\nI0113 16:51:59.258876       1 conditions.go:261] Setting lastTransitionTime for CertificateRequest \"istio-csr-8ddcs\" condition \"Ready\" to 2022-01-13 16:51:59.258837897 +0000 UTC m=+3507.170859959\n</code></pre> <p>You should now see the application is running with both the application container and the sidecar:</p> <pre><code>~ kubectl get pods -n $NAMESPACE\nNAME                       READY   STATUS    RESTARTS   AGE\nhttpbin-74fb669cc6-559cg   2/2     Running   0           4m\n</code></pre> <p>To validate that the <code>istio-proxy</code> sidecar container has requested the certificate from the correct service, check the container logs:</p> <pre><code>kubectl logs $(kubectl get pod -n $NAMESPACE -o jsonpath=\"{.items...metadata.name}\" --selector app=$APP) -c istio-proxy\n</code></pre> <p>You should see some early logs similar to this example:</p> <p>Istio v1.12 and earlier versions:</p> <pre><code>2022-01-13T16:51:58.495493Z info    CA Endpoint cert-manager-istio-csr.cert-manager.svc:443, provider Citadel\n2022-01-13T16:51:58.495817Z info    Using CA cert-manager-istio-csr.cert-manager.svc:443 cert with certs: var/run/secrets/istio/root-cert.pem\n2022-01-13T16:51:58.495941Z info    citadelclient   Citadel client using custom root cert: cert-manager-istio-csr.cert-manager.svc:443\n</code></pre> <p>Istio v1.13+</p> <pre><code>2022-01-13T16:51:58.495493Z info    CA Endpoint cert-manager-istio-csr.cert-manager.svc:443, provider Citadel\n2022-01-13T16:51:58.495817Z info    Using CA cert-manager-istio-csr.cert-manager.svc:443 cert with certs: var/run/secrets/istio/root-cert.pem\n2022-01-13T16:51:58.495941Z info    citadelclient   Citadel client using custom root cert: var/run/secrets/istio/root-cert.pem\n</code></pre> <p>Finally we can inspect the certificate being used in memory by Envoy. This one liner should return you the certificate being used:</p> <pre><code>istioctl proxy-config secret $(kubectl get pods -n $NAMESPACE -o jsonpath='{.items..metadata.name}' --selector app=$APP) -o json | jq -r '.dynamicActiveSecrets[0].secret.tlsCertificate.certificateChain.inlineBytes' | base64 --decode | openssl x509 -text -noout\n</code></pre> <p>In particular look for the following sections:</p> <pre><code>    Signature Algorithm: ecdsa-with-SHA256\n        Issuer: O=cert-manager, O=cluster.local, CN=istio-ca\n        Validity\n            Not Before: Jan 13 16:51:59 2022 GMT\n            Not After : Jan 13 17:51:59 2022 GMT\n...\n            X509v3 Subject Alternative Name:\n                URI:spiffe://cluster.local/ns/default/sa/httpbin\n</code></pre> <p>You should see the relevant Trust Domain inside the Issuer. In the default case, it should be: <code>cluster.local</code> as above. Note that the SPIFFE URI may be different if you used a different namespace or application.</p>"},{"location":"tutorials/istio-csr/istio-csr/#clean-up","title":"Clean up","text":"<p>Assuming your running inside kind, you can simply remove the cluster:</p> <pre><code>kind delete cluster\n</code></pre>"},{"location":"tutorials/venafi/venafi/","title":"Securing Ingresses with Venafi","text":"<p>This guide walks you through how to secure a Kubernetes <code>Ingress</code> resource using the Venafi Issuer type.</p> <p>Whilst stepping through, you will learn how to:</p> <ul> <li>Create an EKS cluster using <code>eksctl</code></li> <li>Install cert-manager into the EKS cluster</li> <li>Deploy <code>nginx-ingress</code> to   expose applications running in the cluster</li> <li>Configure a Venafi Cloud issuer</li> <li>Configure cert-manager to secure your application traffic</li> </ul> <p>While this guide focuses on EKS as a Kubernetes provisioner and Venafi as a Certificate issuer, the steps here should be generally re-usable for other Issuer types.</p>"},{"location":"tutorials/venafi/venafi/#prerequisites","title":"Prerequisites","text":"<ul> <li>An AWS account</li> <li><code>kubectl</code> installed</li> <li>Access to a publicly registered DNS zone</li> <li>A Venafi Cloud account and API credentials</li> </ul>"},{"location":"tutorials/venafi/venafi/#create-an-eks-cluster","title":"Create an EKS cluster","text":"<p>If you already have a running EKS cluster you can skip this step and move onto deploying cert-manager.</p> <p><code>eksctl</code> is a tool that makes it easier to deploy and manage an EKS cluster.</p> <p>Installation instructions for various platforms can be found in the <code>eksctl</code> installation instructions.</p> <p>Once installed, you can create a basic cluster by running:</p> <pre><code>$ eksctl create cluster\n</code></pre> <p>This process may take up to 20 minutes to complete.  Complete instructions on using <code>eksctl</code> can be found in the <code>eksctl</code> usage section.</p> <p>Once your cluster has been created, you should verify that your cluster is running correctly by running the following command:</p> <pre><code>$ kubectl get pods --all-namespaces\nNAME                      READY   STATUS    RESTARTS   AGE\naws-node-8xpkp            1/1     Running   0          115s\naws-node-tflxs            1/1     Running   0          118s\ncoredns-694d9447b-66vlp   1/1     Running   0          23s\ncoredns-694d9447b-w5bg8   1/1     Running   0          23s\nkube-proxy-4dvpj          1/1     Running   0          115s\nkube-proxy-tpvht          1/1     Running   0          118s\n</code></pre> <p>You should see output similar to the above, with all pods in a Running state.</p>"},{"location":"tutorials/venafi/venafi/#installing-cert-manager","title":"Installing cert-manager","text":"<p>There are no special requirements to note when installing cert-manager on EKS, so the regular running on Kubernetes guides can be used to install cert-manager.</p> <p>Please walk through the installation guide and return to this step once you have validated cert-manager is deployed correctly.</p>"},{"location":"tutorials/venafi/venafi/#installing-ingress-nginx","title":"Installing <code>ingress-nginx</code>","text":"<p>A Kubernetes ingress controller is designed to be the access point for HTTP and HTTPS traffic to the software running within your cluster. The <code>ingress-nginx</code> controller does this by providing an HTTP proxy service supported by your cloud provider's load balancer (in this case, a Network Load Balancer (NLB).</p> <p>You can get more details about <code>ingress-nginx</code> and how it works from the documentation for <code>ingress-nginx</code>.</p> <p>To deploy <code>ingress-nginx</code> using an ELB to expose the service, run the following:</p> <p>Deploy the AWS specific prerequisite manifest <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.4.0/deploy/static/provider/aws/deploy.yaml\n</code></pre></p> <p>Deploy the 'generic' <code>ingress-nginx</code> manifest <pre><code>$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml\n</code></pre></p> <p>You may have to wait up to 5 minutes for all the required components in your cluster and AWS account to become ready.</p> <p>You can run the following command to determine the address that Amazon has assigned to your NLB:</p> <pre><code>$ kubectl get service -n ingress-nginx\nNAME            TYPE           CLUSTER-IP      EXTERNAL-IP                                                                     PORT(S)                      AGE\ningress-nginx   LoadBalancer   10.100.52.175   a8c2870a5a8a311e9a9a10a2e7af57d7-6c2ec8ede48726ab.elb.eu-west-1.amazonaws.com   80:31649/TCP,443:30567/TCP   4m10s\n</code></pre> <p>The EXTERNAL-IP field may say <code>&lt;pending&gt;</code> for a while. This indicates the NLB is still being created. Retry the command until an EXTERNAL-IP has been provisioned.</p> <p>Once the EXTERNAL-IP is available, you should run the following command to verify that traffic is being correctly routed to <code>ingress-nginx</code>:</p> <pre><code>$ curl http://a8c2870a5a8a311e9a9a10a2e7af57d7-6c2ec8ede48726ab.elb.eu-west-1.amazonaws.com/\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;\n&lt;hr&gt;&lt;center&gt;openresty/1.15.8.1&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Whilst the above message would normally indicate an error (the page not being found), in this instance it indicates that traffic is being correctly routed to the <code>ingress-nginx</code> service.</p> <p>Note: Although the AWS Application Load Balancer (ALB) is a modern load balancer offered by AWS that can can be provisioned from within EKS, at the time of writing, the <code>alb-ingress-controller</code> is only capable of serving sites using certificates stored in AWS Certificate Manager (ACM). Version 1.15 of Kubernetes should address multiple bug fixes for this controller and allow for TLS termination support.</p>"},{"location":"tutorials/venafi/venafi/#configure-your-dns-records","title":"Configure your DNS records","text":"<p>Now that our NLB has been provisioned, we should point our application's DNS records at the NLBs address.</p> <p>Go into your DNS provider's console and set a CNAME record pointing to your NLB.</p> <p>For the purposes of demonstration, we will assume in this guide you have created the following DNS entry:</p> <pre><code>example.com CNAME a8c2870a5a8a311e9a9a10a2e7af57d7-6c2ec8ede48726ab.elb.eu-west-1.amazonaws.com\n</code></pre> <p>As you progress through the rest of this tutorial, please replace <code>example.com</code> with your own registered domain.</p>"},{"location":"tutorials/venafi/venafi/#deploying-a-demo-application","title":"Deploying a demo application","text":"<p>For the purposes of this demo, we provide an example deployment which is a simple \"hello world\" website.</p> <p>First, create a new namespace that will contain your application:</p> <pre><code>$ kubectl create namespace demo\nnamespace/demo created\n</code></pre> <p>Save the following YAML into a file named <code>demo-deployment.yaml</code>:</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\nname: hello-kubernetes\nnamespace: demo\nspec:\ntype: ClusterIP\nports:\n- port: 80\ntargetPort: 8080\nselector:\napp: hello-kubernetes\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: hello-kubernetes\nnamespace: demo\nspec:\nreplicas: 2\nselector:\nmatchLabels:\napp: hello-kubernetes\ntemplate:\nmetadata:\nlabels:\napp: hello-kubernetes\nspec:\ncontainers:\n- name: hello-kubernetes\nimage: paulbouwer/hello-kubernetes:1.5\nresources:\nrequests:\ncpu: 100m\nmemory: 100Mi\nports:\n- containerPort: 8080\n</code></pre> <p>Then run:</p> <pre><code>kubectl apply -n demo -f demo-deployment.yaml\n</code></pre> <p>Note that the Service resource we deploy is of type <code>ClusterIP</code> and not <code>LoadBalancer</code>, as we will expose and secure traffic for this service using <code>ingress-nginx</code> that we deployed earlier.</p> <p>You should be able to see two Pods and one Service in the <code>demo</code> namespace:</p> <pre><code>kubectl get po,svc -n demo\nNAME                                READY   STATUS    RESTARTS   AGE\nhello-kubernetes-66d45d6dff-m2lnr   1/1     Running   0          7s\nhello-kubernetes-66d45d6dff-qt2kb   1/1     Running   0          7s\n\nNAME                       TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE\nservice/hello-kubernetes   ClusterIP   10.100.164.58   &lt;none&gt;        80/TCP    7s\n</code></pre> <p>Note that we have not yet exposed this application to be accessible over the internet. We will expose the demo application to the internet in later steps.</p>"},{"location":"tutorials/venafi/venafi/#creating-a-venafi-issuer-resource","title":"Creating a Venafi Issuer resource","text":"<p>cert-manager supports both Venafi TPP and Venafi Cloud.</p> <p>Please only follow one of the below sections according to where you want to retrieve your Certificates from.</p>"},{"location":"tutorials/venafi/venafi/#venafi-tpp","title":"Venafi TPP","text":"<p>Assuming you already have a Venafi TPP server set up properly, you can create a Venafi Issuer resource that can be used to issue certificates.</p> <p>To do this, you need to make sure you have your TPP username and password.</p> <p>In order for cert-manager to be able to authenticate with your Venafi TPP server and set up an Issuer resource, you'll need to create a Kubernetes Secret containing your username and password:</p> <pre><code>$ kubectl create secret generic \\\nvenafi-tpp-secret \\\n--namespace=demo \\\n--from-literal=username='YOUR_TPP_USERNAME_HERE' \\\n--from-literal=password='YOUR_TPP_PASSWORD_HERE'\n</code></pre> <p>We must then create a Venafi Issuer resource, which represents a certificate authority within Kubernetes.</p> <p>Save the following YAML into a file named <code>venafi-issuer.yaml</code>:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: venafi-issuer\nnamespace: demo\nspec:\nvenafi:\nzone: \"Default\" # Set this to the Venafi policy zone you want to use\ntpp:\nurl: https://venafi-tpp.example.com/vedsdk # Change this to the URL of your TPP instance\ncaBundle: &lt;base64 encoded string of caBundle PEM file, or empty to use system root CAs&gt;\ncredentialsRef:\nname: venafi-tpp-secret\n</code></pre> <p>Then run:</p> <pre><code>$ kubectl apply -n demo -f venafi-issuer.yaml\n</code></pre> <p>When you run the following command, you should see that the Status stanza of the output shows that the Issuer is Ready (i.e. has successfully validated itself with the Venafi TPP server).</p> <pre><code>$ kubectl describe issuer -n demo venafi-issuer\n\nStatus:\n   Conditions:\n     Last Transition Time:  2019-07-17T15:46:00Z\n     Message:               Venafi issuer started\n     Reason:                Venafi issuer started\n     Status:                True\n     Type:                  Ready\n Events:\n   Type    Reason  Age   From          Message\n   ----    ------  ----  ----          -------\n   Normal  Ready   14s   cert-manager  Verified issuer with Venafi server\n</code></pre>"},{"location":"tutorials/venafi/venafi/#venafi-cloud","title":"Venafi Cloud","text":"<p>You can sign up for a Venafi Cloud account by visiting the enrollment page.</p> <p>Once registered, you should fetch your API key by clicking your name in the top right of the control panel interface.</p> <p>In order for cert-manager to be able to authenticate with your Venafi Cloud account and set up an Issuer resource, you'll need to create a Kubernetes Secret containing your API key:</p> <pre><code>$ kubectl create secret generic \\\nvenafi-cloud-secret \\\n--namespace=demo \\\n--from-literal=apikey=&lt;API_KEY&gt;\n</code></pre> <p>We must then create a Venafi Issuer resource, which represents a certificate authority within Kubernetes.</p> <p>Save the following YAML into a file named <code>venafi-issuer.yaml</code>:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\nname: venafi-issuer\nnamespace: demo\nspec:\nvenafi:\nzone: \"Default\" # Set this to the Venafi policy zone you want to use\ncloud:\napiTokenSecretRef:\nname: venafi-cloud-secret\nkey: apikey\n</code></pre> <p>Then run:</p> <pre><code>$ kubectl apply -n demo -f venafi-issuer.yaml\n</code></pre> <p>When you run the following command, you should see that the Status stanza of the output shows that the Issuer is Ready (i.e. has successfully validated itself with the Venafi Cloud service).</p> <pre><code>$ kubectl describe issuer -n demo venafi-issuer\n...\nStatus:\n  Conditions:\n    Last Transition Time:  2019-07-17T15:46:00Z\n    Message:               Venafi issuer started\n    Reason:                Venafi issuer started\n    Status:                True\n    Type:                  Ready\nEvents:\n  Type    Reason  Age   From          Message\n  ----    ------  ----  ----          -------\n  Normal  Ready   14s   cert-manager  Verified issuer with Venafi server\n</code></pre>"},{"location":"tutorials/venafi/venafi/#request-a-certificate","title":"Request a Certificate","text":"<p>Now that the Issuer is configured and we have confirmed it has been set up correctly, we can begin requesting certificates which can be used by Kubernetes applications.</p> <p>Full information on how to specify and request Certificate resources can be found in the Issuing certificates guide.</p> <p>For now, we will create a basic X.509 Certificate that is valid for our domain, <code>example.com</code>:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-com-tls\nnamespace: demo\nspec:\nsecretName: example-com-tls\ndnsNames:\n- example.com\ncommonName: example.com\nissuerRef:\nname: venafi-issuer\n</code></pre> <p>Save this YAML into a file named <code>example-com-tls.yaml</code> and run:</p> <pre><code>$ kubectl apply -n demo -f example-com-tls.yaml\n</code></pre> <p>As long as you've ensured that the zone of your Venafi Cloud account (in our example, we use the \"Default\" zone) has been configured with a CA or contains a custom certificate, cert-manager can now take steps to populate the <code>example-com-tls</code> Secret with a certificate. It does this by identifying itself with Venafi Cloud using the API key, then requesting a certificate to match the specifications of the Certificate resource that we've created.</p> <p>You can run <code>kubectl describe</code> to check the progress of your Certificate:</p> <pre><code>$ kubectl describe certificate -n demo example-com-tls\n...\nStatus:\n  Conditions:\n    Last Transition Time:  2019-07-17T17:43:01Z\n    Message:               Certificate is up to date and has not expired\n    Reason:                Ready\n    Status:                True\n    Type:                  Ready\n  Not After:               2019-10-15T12:00:00Z\nEvents:\n  Type    Reason       Age   From          Message\n  ----    ------       ----  ----          -------\n  Normal  Issuing      33s   cert-manager  Requesting new certificate...\n  Normal  GenerateKey  33s   cert-manager  Generated new private key\n  Normal  Validate     33s   cert-manager  Validated certificate request against Venafi zone policy\n  Normal  Requesting   33s   cert-manager  Requesting certificate from Venafi server...\n  Normal  Retrieve     15s   cert-manager  Retrieved certificate from Venafi server\n  Normal  CertIssued   15s   cert-manager  Certificate issued successfully\n</code></pre> <p>Once the Certificate has been issued, you should see events similar to above.</p> <p>You should then be able to see the certificate has been successfully stored in the Secret resource:</p> <pre><code>$ kubectl get secret -n demo example-com-tls\nNAME              TYPE                DATA   AGE\nexample-com-tls   kubernetes.io/tls   3      2m47s\n\n$ kubectl get secret example-com-tls -o 'go-template={{index .data \"tls.crt\"}}' | \\\nbase64 --decode | \\\nopenssl x509 -noout -text\nCertificate:\n    Data:\n        Version: 3 (0x2)\nSerial Number:\n            0d:ce:bf:89:04:d4:41:83:f4:4c:32:66:64:fb:60:14\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C=US, O=DigiCert Inc, CN=DigiCert Test SHA2 Intermediate CA-1\n        Validity\n            Not Before: Jul 17 00:00:00 2019 GMT\n            Not After : Oct 15 12:00:00 2019 GMT\n        Subject: C=US, ST=California, L=Palo Alto, O=Venafi Cloud, OU=SerialNumber, CN=example.com\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\nModulus:\n                    00:ad:2e:66:02:20:c9:b1:6a:00:63:70:4e:22:3c:\n                    45:63:6e:e7:fd:4c:94:7d:75:50:22:a2:01:72:99:\n                    9c:23:04:90:51:85:4d:47:32:e4:8b:ee:b1:ea:09:\n                    1a:de:97:5d:31:05:a2:73:73:4f:06:a3:b2:59:ee:\n                    bc:30:f7:26:85:3d:b3:56:e4:c2:97:34:b6:ac:6d:\n                    65:7e:a2:4e:b4:ce:f2:0a:0a:4c:d7:32:d7:5a:18:\n                    e8:69:c6:34:28:26:36:ef:c5:bc:ae:ba:ca:d2:46:\n                    3f:d4:61:39:66:8f:19:cc:d6:d6:10:77:af:51:93:\n                    1b:4d:f8:d1:10:19:ab:ac:b3:7b:0b:98:58:29:e6:\n                    a9:ac:9f:7a:dc:63:0d:51:f5:bd:9f:f3:03:2e:b3:\n                    2d:2f:00:87:f4:e1:cd:5a:32:c6:d8:fb:49:c4:e7:\n                    da:3f:0f:8f:bb:66:94:28:5d:99:fe:7c:f0:17:1b:\n                    fd:3e:ed:dd:36:bf:8e:62:60:0c:85:7f:76:74:4b:\n                    37:d9:c2:e8:74:49:04:bf:f1:83:81:cc:4f:9b:f3:\n                    40:97:d4:dc:b6:d3:2d:dc:73:18:93:48:a5:8f:6c:\n                    57:7f:ec:62:c0:bc:c2:b0:e9:0a:51:2d:c4:b6:87:\n                    68:96:87:f8:9a:86:3c:6a:f1:01:ca:57:c4:07:e7:\n                    b0:51\n                Exponent: 65537 (0x10001)\nX509v3 extensions:\n            X509v3 Authority Key Identifier:\n                keyid:D6:4D:F9:39:60:6C:73:C3:22:F5:AD:30:0C:2F:A0:D5:CA:75:4A:2A\n\nX509v3 Subject Key Identifier:\n                A3:B3:47:2C:41:5E:9C:B2:27:97:57:14:A4:2E:BA:8C:93:E7:01:65\n            X509v3 Subject Alternative Name:\n                DNS:example.com\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication, TLS Web Client Authentication\n            X509v3 CRL Distribution Points:\n\nFull Name:\n                  URI:http://crl3.digicert.com/DigiCertTestSHA2IntermediateCA1.crl\n\nFull Name:\n                  URI:http://crl4.digicert.com/DigiCertTestSHA2IntermediateCA1.crl\n\nX509v3 Certificate Policies:\n                Policy: 2.16.840.1.114412.1.1\n                  CPS: https://www.digicert.com/CPS\n\nAuthority Information Access:\n                OCSP - URI:http://ocsp.digicert.com\n                CA Issuers - URI:http://cacerts.test.digicert.com/DigiCertTestSHA2IntermediateCA1.crt\n\nX509v3 Basic Constraints: critical\n                CA:FALSE\n    Signature Algorithm: sha256WithRSAEncryption\n         ae:d4:9c:8a:66:19:9e:7d:12:b7:05:c2:b6:33:b3:9c:a5:40:\n         47:ab:34:8d:1b:0f:51:96:de:e9:46:5a:e4:16:10:43:56:bf:\n         fa:f8:64:f4:cb:53:39:5b:45:ca:7f:15:d9:59:25:21:23:c4:\n         4d:dc:a7:f7:83:21:d2:3f:a8:0a:26:f4:ef:fa:1b:2b:7d:97:\n         7e:28:f3:ca:cd:b2:c4:92:f3:92:27:7f:e0:f1:ac:d6:db:4c:\n         10:8a:f8:6f:09:bb:b3:4f:19:06:aa:bb:74:1c:e0:51:42:f6:\n         8c:7d:77:f7:80:a4:03:ab:a9:ae:ae:2b:89:17:af:2f:eb:f7:\n         3d:61:7c:dd:e1:5d:d2:5a:c5:6a:f6:c8:92:4c:0a:b5:75:d1:\n         dd:39:f2:a7:a2:10:8c:6d:bf:ca:08:ad:b9:a9:df:e3:59:8f:\n         64:16:3c:7e:8a:6e:27:fc:49:d7:06:f0:bd:94:15:f2:fd:0f:\n         94:8a:b8:73:67:73:53:22:df:9d:36:e9:34:f9:2a:68:00:59:\n         78:6d:2d:8f:a0:0f:13:af:bd:b3:aa:8c:37:c4:22:cf:23:fb:\n         56:bc:4e:55:ae:3a:0a:e6:3e:b1:1a:22:71:7b:08:b8:00:41:\n         14:26:f6:9b:9b:72:3f:eb:dc:dd:1b:db:a8:20:fd:54:75:ae:\n         25:7f:80:e6\n</code></pre> <p>In the next step, we'll configure your application to actually use this new Certificate resource.</p>"},{"location":"tutorials/venafi/venafi/#exposing-and-securing-your-application","title":"Exposing and securing your application","text":"<p>Now that we have issued a Certificate, we can expose our application using a Kubernetes Ingress resource.</p> <p>Create a file named <code>application-ingress.yaml</code> and save the following in it, replacing <code>example.com</code> with your own domain name:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: frontend-ingress\nnamespace: demo\nannotations:\nkubernetes.io/ingress.class: \"nginx\"\nspec:\ntls:\n- hosts:\n- example.com\nsecretName: example-com-tls\nrules:\n- host: example.com\nhttp:\npaths:\n- path: /\npathType: Exact\nbackend:\nservice:\nname: kuard\nport:\nnumber: 80\n</code></pre> <p>You can then apply this resource with:</p> <pre><code>$ kubectl apply -n demo -f application-ingress.yaml\n</code></pre> <p>Once this has been created, you should be able to visit your application at the configured URL, here <code>example.com</code>!</p> <p>Navigate to the address in your web browser and you should see the certificate obtained via Venafi being used to secure application traffic.</p>"},{"location":"tutorials/zerossl/zerossl/","title":"The ZeroSSL","text":"<p>This guide walks you through how to secure a Kubernetes Ingress resource using the ZeroSSL Issuer type.</p> <p>The ZeroSSL just like Let's Encrypt and its competitors allows to create free 90 days certificates. All is need is to create account at https://zerossl.com/. After that go to developer section and generate <code>EAB Credentials for ACME Clients</code>. You will need it later.</p> <p><code>Please note!</code> \\ EAB credentials are not stored in your account, please make sure to note them somewhere. Each click on \"Generate\" will create a new set of credentials. Even if you create multiple credentials, all of them will remain functional.</p> <p><code>Please note!</code> \\ EAB credentials are one-use only. Create additional pair for different environments.</p>"},{"location":"tutorials/zerossl/zerossl/#prerequisites","title":"Prerequisites","text":"<ul> <li>An AWS account</li> <li>kubectl installed</li> <li>Access to a publicly registered DNS zone</li> <li>Kubernetes cluster, you can use AWS EKS</li> <li>ingress-nginx deployed and working inside cluster</li> </ul>"},{"location":"tutorials/zerossl/zerossl/#tutorial-scenario","title":"Tutorial scenario:","text":""},{"location":"tutorials/zerossl/zerossl/#installing-cert-manager","title":"Installing cert-manager","text":"<p>Make sure you use cert-manager <code>1.8.2+</code>/<code>1.7.3+</code>. See link for more details.</p> <p>Please walk through the installation guide and return to this step once you have validated cert-manager is deployed correctly. Follow steps under running on Kubernetes to install in k8s.</p> <p>In order to automatically switch to the ZeroSSL we recommend setting default shim by adding the following configuration to values file.</p> <pre><code>ingressShim:\ndefaultIssuerName: \"zerossl-production\"\ndefaultIssuerKind: \"ClusterIssuer\"\ninstallCRDs: true\n</code></pre> <p>Install it using helm: <pre><code>helm upgrade  --install --namespace cert-manager  --version v1.8.2 cert-manager jetstack/cert-manager -f values.yaml \n</code></pre></p>"},{"location":"tutorials/zerossl/zerossl/#configure-your-dns-records","title":"Configure your DNS records","text":"<p>The best way to manage DNS using AWS is by using Route53. Create AWS account with permissions to modify Route53 rules.</p>"},{"location":"tutorials/zerossl/zerossl/#eab-secret","title":"EAB secret","text":"<p>Once you will get your credentials first step is to create seed with secrets. They are responsible for authenticating with your ZeroSSL account. </p> <pre><code>$ kubectl create secret generic \\\nzero-ssl-eabsecret \\\n--namespace=cert-manager \\\n--from-literal=secret='YOUR_ZEROSSL_EAB_SECRET'\n</code></pre>"},{"location":"tutorials/zerossl/zerossl/#another-way-of-creating-secret","title":"Another way of creating secret.","text":"<p>Encode it in base64 first. <pre><code>echo -n \"YOUR_ZEROSSL_EAB_SECRET\" | base64 -w 0\n</code></pre></p> <p><pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: zero-ssl-eabsecret\ndata:\nsecret: YOUR_ENCODED_ZEROSSL_EAB_SECRET\n</code></pre> <pre><code>kubectl apply -f zero-ssl-eabsecret.yaml -n cert-manager\n</code></pre></p>"},{"location":"tutorials/zerossl/zerossl/#cluster-issuer","title":"Cluster issuer","text":"<p>Then we must create the <code>ZeroSSL</code> <code>ClusterIssuer</code>, let's call it <code>zerossl-production</code>. In our case we are using AWS. See pre-conditions to provision all required elements.</p> <pre><code>apiVersion: cert-manager.io/v1alpha2\nkind: ClusterIssuer\nmetadata:\nname: zerossl-production\nspec:\nacme:\n# ZeroSSL ACME server\nserver: https://acme.zerossl.com/v2/DV90\nemail: dummy-email@yopmail.com\n# name of a secret used to store the ACME account private key\nprivateKeySecretRef:\nname: zerossl-prod\n# for each cert-manager new EAB credencials are required\nexternalAccountBinding:\nkeyID: ZEROSSL_KEY_ID\nkeySecretRef:\nname: zero-ssl-eabsecret\nkey: secret\nkeyAlgorithm: HS256\n# ACME DNS-01 provider configurations to verify domain\nsolvers:\n- selector: {}\ndns01:\nroute53:\nregion: us-west-2\n# optional if ambient credentials are available; see ambient credentials documentation\n# see Route53 for &gt;0 issue \"letsencrypt.org\" and change to &gt;0 issue \"sectigo.com\"\naccessKeyID: ACCESS_KEY_ID\nsecretAccessKeySecretRef:\nname: route53-credentials-secret\nkey: secret-access-key\n</code></pre>"},{"location":"tutorials/zerossl/zerossl/#then-run","title":"Then run:","text":"<pre><code>$ kubectl apply -n cert-manager -f zerossl-production.yaml\n</code></pre> <pre><code>$ kubectl describe Clusterissuer  zerossl-prod\n\nStatus:\n  Acme:\n    Last Registered Email:  dummy-email@yopmail.com\n    Uri:                    https://acme.zerossl.com/v2/DV90/account/tXXX_NwSv15rlS_XXXX\n  Conditions:\n    Last Transition Time:  2021-09-09T17:03:26Z\n    Message:               The ACME account was registered with the ACME server\n    Reason:                ACMEAccountRegistered\n    Status:                True\n    Type:                  Ready\n</code></pre>"},{"location":"tutorials/zerossl/zerossl/#please-note","title":"Please note!","text":"<p>If this step failed and the ACME account is not registered please check if secrets in <code>zero-ssl-eabsecret</code> are correct.</p>"},{"location":"tutorials/zerossl/zerossl/#request-a-ingress-certificate","title":"Request a ingress certificate","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nname: test-ingress\nnamespace: default\nspec:\nrules:\n- host: test.example.com\ntls:\n- secretName: secret-tls\n</code></pre> <p>Apply test-ingress:</p> <pre><code>kubectl apply -f ingress.yaml\n</code></pre> <p>You are set! Check your ingress. <pre><code>kubectl describe ingress test-ingress -n default\n# check if tls is terminated using secret-tls\nopenssl s_client -showcerts -connect test.example.com:443\n# verify server certificate and its chain\n</code></pre></p>"},{"location":"usage/","title":"\u7b7e\u53d1\u8bc1\u4e66","text":"<p>\u4e00\u65e6\u914d\u7f6e\u4e86<code>Issuer</code>\uff0c\u5c31\u53ef\u4ee5\u9881\u53d1\u7b2c\u4e00\u4e2a\u8bc1\u4e66\u4e86!</p> <p>\u901a\u8fc7\u8bc1\u4e66\u7ba1\u7406\u5668\u8bf7\u6c42\u8bc1\u4e66\u6709\u51e0\u79cd\u7528\u4f8b\u548c\u65b9\u6cd5:</p> <ul> <li>\u8bc1\u4e66\u7684\u6e90: \u8bf7\u6c42\u5df2\u7b7e\u540d\u8bc1\u4e66\u7684\u6700\u7b80\u5355\u548c\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u3002</li> <li>\u4fdd\u62a4\u5165\u53e3\u6e90: \u7528\u4e8e\u4fdd\u62a4\u96c6\u7fa4\u4e2d\u7684\u5165\u53e3\u6e90\u7684\u65b9\u6cd5\u3002</li> <li>\u4fdd\u62a4 OpenFaaS \u529f\u80fd: \u4f7f\u7528 cert-manager \u4fdd\u62a4\u60a8\u7684 OpenFaaS \u670d\u52a1\u3002</li> <li>\u4e0e\u82b1\u56ed\u7684\u878d\u5408: Garden \u662f\u4e00\u4e2a\u5f00\u53d1 Kubernetes \u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\u5de5\u5177\uff0c\u5b83\u5bf9\u96c6\u6210\u8bc1\u4e66\u7ba1\u7406\u5668\u63d0\u4f9b\u4e00\u6d41\u7684\u652f\u6301\u3002</li> <li>\u786e\u4fdd Knative: \u4f7f\u7528\u53d7\u4fe1\u4efb\u7684 HTTPS \u8bc1\u4e66\u4fdd\u62a4\u60a8\u7684 Knative \u670d\u52a1\u3002</li> <li>\u5728\u6709 CSI \u7684 Pods \u4e0a\u542f\u7528 mTLS: \u4f7f\u7528\u8bc1\u4e66\u7ba1\u7406\u5668 CSI \u9a71\u52a8\u7a0b\u5e8f\u63d0\u4f9b\u5171\u4eab pod \u751f\u547d\u5468\u671f\u7684\u552f\u4e00\u5bc6\u94a5\u548c\u8bc1\u4e66\u3002</li> <li>\u4fdd\u62a4 Istio \u7f51\u5173: \u4f7f\u7528 cert-manager \u5728 Kubernetes \u4e2d\u4fdd\u62a4\u60a8\u7684 Istio \u7f51\u5173\u3002</li> <li>\u4fdd\u62a4 Istio \u670d\u52a1\u7f51\u683c: \u4f7f\u7528 cert-manager Istio\u96c6\u6210\uff0c\u901a\u8fc7 cert-manager \u7ba1\u7406\u7684\u8bc1\u4e66\u4fdd\u62a4\u6bcf\u4e2a pod \u7684 mTLS PKI\u3002</li> <li>\u8bc1\u4e66\u7ba1\u7406\u5668\u8bc1\u4e66\u7684\u7b56\u7565: \u901a\u8fc7\u81ea\u5b9a\u4e49\u6e90\u5b9a\u4e49\u7b56\u7565\u7ba1\u7406\u54ea\u4e9b\u8bc1\u4e66\u7ba1\u7406\u5668\u8bc1\u4e66\u53ef\u4ee5\u7b7e\u540d\u6216\u62d2\u7edd\u3002</li> </ul>"},{"location":"usage/approver-policy/","title":"Policy for cert-manager certificates","text":"<p>cert-manager CertificateRequests\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528approval API\u62d2\u7edd\u88ab\u7b7e\u540d\u3002 approver-policy\u662f\u4e00\u4e2a\u8bc1\u4e66\u7ba1\u7406\u5668\u9879\u76ee\uff0c\u5141\u8bb8\u60a8\u7f16\u5199\u7b56\u7565\u6765\u81ea\u52a8\u7ba1\u7406\u6b64\u5ba1\u6279\u673a\u5236\u3002</p> <p>\u6709\u5173\u5982\u4f55\u5b89\u88c5\u548c\u4f7f\u7528 approver-policy \u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfb\u9879\u76ee\u9875\u9762\u3002</p>"},{"location":"usage/certificate/","title":"\u8bc1\u4e66\u6e90","text":"<p>\u5728\u8bc1\u4e66\u7ba1\u7406\u5668\u4e2d\uff0c<code>Certificate</code>\u6e90\u8868\u793a\u8bc1\u4e66\u8bf7\u6c42\u7684\u53ef\u8bfb\u5b9a\u4e49\uff0c\u8be5\u8bc1\u4e66\u8bf7\u6c42\u5c06\u7531\u9881\u53d1\u8005\u6267\u884c\uff0c\u5e76\u4fdd\u6301\u6700\u65b0\u3002 \u8fd9\u662f\u4e0e\u8bc1\u4e66\u7ba1\u7406\u5668\u4ea4\u4e92\u4ee5\u8bf7\u6c42\u5df2\u7b7e\u540d\u8bc1\u4e66\u7684\u5e38\u7528\u65b9\u5f0f\u3002</p> <p>\u4e3a\u4e86\u9881\u53d1\u4efb\u4f55\u8bc1\u4e66\uff0c\u60a8\u9700\u8981\u9996\u5148\u914d\u7f6e\u4e00\u4e2a<code>Issuer</code> \u6216 <code>ClusterIssuer</code> \u6e90\u3002</p>"},{"location":"usage/certificate/#_2","title":"\u521b\u5efa\u8bc1\u4e66\u6e90","text":"<p><code>Certificate</code> \u6e90\u6307\u5b9a\u7528\u4e8e\u751f\u6210\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\u7684\u5b57\u6bb5\uff0c\u7136\u540e\u7531\u60a8\u5f15\u7528\u7684\u9881\u53d1\u8005\u7c7b\u578b\u5b8c\u6210\u3002 <code>Certificate</code> \u901a\u8fc7\u6307\u5b9a<code>certificatespecissuerRef</code>\u5b57\u6bb5\u6307\u5b9a\u4ed6\u4eec\u60f3\u4ece\u54ea\u4e2a\u9881\u53d1\u8005\u83b7\u5f97\u8bc1\u4e66\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a<code>Certificate</code>\u6e90\uff0c\u7528\u4e8e<code>example.com</code> \u548c <code>www.example.com</code>DNS \u540d\u79f0\uff0c<code>spiffe://cluster.local/ns/sandbox/sa/example</code> URI \u4e3b\u9898\u66ff\u4ee3\u540d\u79f0\uff0c\u6709\u6548\u671f\u4e3a 90 \u5929\uff0c\u5e76\u5728\u5230\u671f\u524d 15 \u5929\u66f4\u65b0\u3002 \u5b83\u5305\u542b\u4e86\u4e00\u4e2a<code>Certificate</code>\u6e90\u53ef\u80fd\u62e5\u6709\u7684\u6240\u6709\u9009\u9879\u7684\u8be6\u5c3d\u5217\u8868\uff0c\u4f46\u53ea\u6709\u4e00\u4e2a\u5b57\u6bb5\u7684\u5b50\u96c6\u662f\u5fc5\u9700\u7684\u3002</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-com\nnamespace: sandbox\nspec:\n# \u603b\u662f\u9700\u8981\u4f7f\u7528\u79d8\u5bc6\u540d\u79f0\u3002\nsecretName: example-com-tls\n# secretTemplate\u662f\u53ef\u9009\u53c2\u6570\u3002\n# \u5982\u679c\u8bbe\u7f6e\u4e86\uff0c\u8fd9\u4e9b\u6ce8\u91ca\u548c\u6807\u7b7e\u5c06\u88ab\u590d\u5236\u5230\u540d\u4e3aexample-com-tls\u7684Secret\u3002\n# \u5982\u679c\u8bc1\u4e66\u7684secretTemplate\u53d1\u751f\u53d8\u5316\uff0c\u8fd9\u4e9b\u6807\u7b7e\u548c\u6ce8\u91ca\u5c06\u91cd\u65b0\u534f\u8c03\u3002\n# secretTemplate\u4e5f\u662f\u5f3a\u5236\u7684\uff0c\u56e0\u6b64\u7b2c\u4e09\u65b9\u5bf9Secret\u7684\u76f8\u5173\u6807\u7b7e\u548c\u6ce8\u91ca\u66f4\u6539\u5c06\u88abcert-manager\u8986\u76d6\u4ee5\u5339\u914dsecretTemplate\u3002\nsecretTemplate:\nannotations:\nmy-secret-annotation-1: \"foo\"\nmy-secret-annotation-2: \"bar\"\nlabels:\nmy-secret-label: foo\nduration: 2160h # 90d\nrenewBefore: 360h # 15d\nsubject:\norganizations:\n- jetstack\n# \u81ea2000\u5e74\u4ee5\u6765\uff0c\u901a\u7528\u540d\u79f0\u5b57\u6bb5\u7684\u4f7f\u7528\u5df2\u88ab\u5f03\u7528\uff0c\u4e0d\u9f13\u52b1\u4f7f\u7528\u3002\ncommonName: example.com\nisCA: false\nprivateKey:\nalgorithm: RSA\nencoding: PKCS1\nsize: 2048\nusages:\n- server auth\n- client auth\n# \u81f3\u5c11\u9700\u8981DNS\u540d\u79f0\u3001URI\u6216IP\u5730\u5740\u4e2d\u7684\u4e00\u4e2a\u3002\ndnsNames:\n- example.com\n- www.example.com\nuris:\n- spiffe://cluster.local/ns/sandbox/sa/example\nipAddresses:\n- 192.168.0.5\n# \u59cb\u7ec8\u9700\u8981\u53d1\u884c\u8005\u5f15\u7528\u3002\nissuerRef:\nname: ca-issuer\n# \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539\u8fd9\u91cc\u7684\u7c7b\u578b\u6765\u5f15\u7528 ClusterIssuers\u3002\n# \u9ed8\u8ba4\u503c\u662fIssuer(\u5373\u672c\u5730\u547d\u540d\u7a7a\u95f4\u7684Issuer)\u3002\nkind: Issuer\n# \u8fd9\u662f\u53ef\u9009\u7684\uff0c\u56e0\u4e3acert-manager\u5c06\u9ed8\u8ba4\u4e3a\u6b64\u503c\uff0c\u4f46\u5982\u679c\u60a8\u4f7f\u7528\u5916\u90e8\u9881\u53d1\u8005\uff0c\u8bf7\u5c06\u6b64\u66f4\u6539\u4e3a\u8be5\u9881\u53d1\u8005\u7ec4\u3002\ngroup: cert-manager.io\n</code></pre> <p>The signed certificate will be stored in a <code>Secret</code> resource named <code>example-com-tls</code> in the same namespace as the <code>Certificate</code> once the issuer has successfully issued the requested certificate.</p> <p>If <code>secretTemplate</code> is present, annotations and labels set in this property will be copied over to <code>example-com-tls</code> secret. Both properties are optional.</p> <p>The <code>Certificate</code> will be issued using the issuer named <code>ca-issuer</code> in the <code>sandbox</code> namespace (the same namespace as the <code>Certificate</code> resource).</p> <p>Note: If you want to create an <code>Issuer</code> that can be referenced by <code>Certificate</code> resources in all namespaces, you should create a <code>ClusterIssuer</code> resource and set the <code>certificate.spec.issuerRef.kind</code> field to <code>ClusterIssuer</code>.</p> <p>Note: The <code>renewBefore</code> and <code>duration</code> fields must be specified using a Go <code>time.Duration</code> string format, which does not allow the <code>d</code> (days) suffix. You must specify these values using <code>s</code>, <code>m</code>, and <code>h</code> suffixes instead. Failing to do so without installing the <code>webhook component</code> can prevent cert-manager from functioning correctly <code>#1269</code>.</p> <p>Note: Take care when setting the <code>renewBefore</code> field to be very close to the <code>duration</code> as this can lead to a renewal loop, where the <code>Certificate</code> is always in the renewal period. Some <code>Issuers</code> set the <code>notBefore</code> field on their issued X.509 certificates before the issue time to fix clock-skew issues, leading to the working duration of a certificate to be less than the full duration of the certificate. For example, Let's Encrypt sets it to be one hour before issue time, so the actual working duration of the certificate is 89 days, 23 hours (the full duration remains 90 days).</p> <p>A full list of the fields supported on the Certificate resource can be found in the API reference documentation.</p>"},{"location":"usage/certificate/#key-usages","title":"X.509 key usages and extended key usages","text":"<p>cert-manager supports requesting certificates that have a number of custom key usages and extended key usages. Although cert-manager will attempt to honor this request, some issuers will remove, add defaults, or otherwise completely ignore the request. The <code>CA</code> and <code>SelfSigned</code> <code>Issuer</code> will always return certificates matching the usages you have requested.</p> <p>Unless any number of usages has been set, cert-manager will set the default requested usages of <code>digital signature</code>, <code>key encipherment</code>, and <code>server auth</code>. cert-manager will not attempt to request a new certificate if the current certificate does not match the current key usage set.</p> <p>An exhaustive list of supported key usages can be found in the API reference documentation.</p>"},{"location":"usage/certificate/#temporary-certificates-whilst-issuing","title":"Temporary Certificates while Issuing","text":"<p>On old GKE versions (<code>1.10.7-gke.1</code> and below), when requesting certificates using the ingress-shim alongside the <code>ingress-gce</code> ingress controller, <code>ingress-gce</code> required a temporary certificate must be present while waiting for the issuance of a signed certificate. Note that this issue was solved in <code>1.10.7-gke.2</code>.</p> <pre><code># Required for GKE 1.10.7-gke.1 and below.\ncert-manager.io/issue-temporary-certificate\": \"true\"\n</code></pre> <p>That made sure that a temporary self-signed certificate was present in the <code>Secret</code>. The self-signed certificate was replaced with the signed certificate later on.</p>"},{"location":"usage/certificate/#rotation-private-key","title":"Rotation of the private key","text":"<p>By default, the private key won't be rotated automatically. Using the setting <code>rotationPolicy: Always</code>, the private key Secret associated with a Certificate object can be configured to be rotated as soon as an action triggers the reissuance of the Certificate object (see Actions that will trigger a rotation of the private key below).</p> <p>With <code>rotationPolicy: Always</code>, cert-manager waits until the Certificate object is correctly signed before overwriting the <code>tls.key</code> file in the Secret.</p> <p>With this setting, you can expect no downtime if your application can detect changes to the mounted <code>tls.crt</code> and <code>tls.key</code> and reload them gracefully or automatically restart.</p> <p>If your application only loads the private key and signed certificate once at start up, the new certificate won't immediately be served by your application, and you will want to either manually restart your pod with <code>kubectl rollout restart</code>, or automate the action by running wave. Wave is a Secret controller that makes sure deployments get restarted whenever a mounted Secret changes.</p> <p>Alert</p> <p>Re-use of private keys</p> <p>Some issuers, like the built-in Venafi issuer, may disallow re-using private keys. If this is the case, you must explicitly configure the <code>rotationPolicy: Always</code> setting for each of your Certificate objects accordingly.</p> <p>In the following example, the certificate has been set with <code>rotationPolicy: Always</code>:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nspec:\nsecretName: my-cert-tls\nprivateKey:\nrotationPolicy: Always # \ud83d\udd30 Here.\n</code></pre>"},{"location":"usage/certificate/#actions-triggering-private-key-rotation","title":"Actions that will trigger a rotation of the private key","text":"<p>Setting the <code>rotationPolicy: Always</code> won't rotate the private key immediately. In order to rotate the private key, the certificate objects must be reissued. A certificate object is reissued under the following circumstances:</p> <ul> <li>when the X.509 certificate is nearing expiry, which is when the Certificate's   <code>status.renewalTime</code> is reached;</li> <li>when a change is made to one of the following fields on the Certificate's   spec: <code>commonName</code>, <code>dnsNames</code>, <code>ipAddresses</code>, <code>uris</code>, <code>emailAddresses</code>,   <code>subject</code>, <code>isCA</code>, <code>usages</code>, <code>duration</code> or <code>issuerRef</code>;</li> <li>when a reissuance is manually triggered with the following:   <pre><code>cmctl renew cert-1\n</code></pre>   Note that the above command requires cmctl.</li> </ul> <p>!!! \"warning\"</p> <pre><code>**\u274c** Deleting the Secret resource associated with a Certificate resource is\n**not a recommended solution** for manually rotating the private key. The\nrecommended way to manually rotate the private key is to trigger the reissuance\nof the Certificate resource with the following command (requires\n[`cmctl`](../reference/cmctl.md#renew)):\n\n```sh\ncmctl renew cert-1\n```\n</code></pre>"},{"location":"usage/certificate/#rotationpolicy","title":"<code>rotationPolicy</code> \u8bbe\u7f6e","text":"<p>The possible values for <code>rotationPolicy</code> are:</p> Value Description <code>Never</code> (default) cert-manager reuses the existing private key on each issuance <code>Always</code> (recommended) cert-manager regenerates a new private key on each issuance <p>With <code>rotationPolicy: Never</code>, a private key is only generated if one does not already exist in the target Secret resource (using the <code>tls.key</code> key). All further issuances will re-use this private key. This is the default in order to maintain compatibility with previous releases.</p> <p>With <code>rotationPolicy: Always</code>, a new private key will be generated each time an action triggers the reissuance of the certificate object (see Actions that will trigger a rotation of the private key above). Note that if the private key secret already exists when creating the certificate object, the existing private key will not be used, since the rotation mechanism also includes the initial issuance.</p> <p>Info</p> <p>\ud83d\udc49 We recommend that you configure <code>rotationPolicy: Always</code> on your Certificate resources. Rotating both the certificate and the private key simultaneously prevents the risk of issuing a certificate with an exposed private key. Another benefit to renewing the private key regularly is to let you be confident that the private key rotation can be done in case of emergency. More generally, it is a good practice to be rotating the keys as often as possible, reducing the risk associated with compromised keys.</p>"},{"location":"usage/certificate/#_3","title":"\u6e05\u9664\u8bc1\u4e66\u5220\u9664\u65f6\u7684\u79d8\u5bc6","text":"<p>By default, cert-manager does not delete the <code>Secret</code> resource containing the signed certificate when the corresponding <code>Certificate</code> resource is deleted. This means that deleting a <code>Certificate</code> won't take down any services that are currently relying on that certificate, but the certificate will no longer be renewed. The <code>Secret</code> needs to be manually deleted if it is no longer needed.</p> <p>If you would prefer the <code>Secret</code> to be deleted automatically when the <code>Certificate</code> is deleted, you need to configure your installation to pass the <code>--enable-certificate-owner-ref</code> flag to the controller.</p>"},{"location":"usage/certificate/#_4","title":"\u66f4\u65b0","text":"<p>cert-manager will automatically renew <code>Certificate</code>s. It will calculate when to renew a <code>Certificate</code> based on the issued X.509 certificate's duration and a 'renewBefore' value which specifies how long before expiry a certificate should be renewed.</p> <p><code>spec.duration</code> and <code>spec.renewBefore</code> fields on a <code>Certificate</code> can be used to specify an X.509 certificate's duration and a 'renewBefore' value. Default value for <code>spec.duration</code> is 90 days. Some issuers might be configured to only issue certificates with a set duration, so the actual duration may be different. Minimum value for <code>spec.duration</code> is 1 hour and minimum value for <code>spec.renewBefore</code> is 5 minutes. It is also required that <code>spec.duration</code> &gt; <code>spec.renewBefore</code>.</p> <p>Once an X.509 certificate has been issued, cert-manager will calculate the renewal time for the <code>Certificate</code>. By default this will be \u2154 through the X.509 certificate's duration. If <code>spec.renewBefore</code> has been set, it will be <code>spec.renewBefore</code> amount of time before expiry. cert-manager will set <code>Certificate</code>'s <code>status.RenewalTime</code> to the time when the renewal will be attempted.</p>"},{"location":"usage/certificate/#_5","title":"\u5176\u4ed6\u8bc1\u4e66\u8f93\u51fa\u683c\u5f0f","text":"<p>Warning</p> <p>\u26d4\ufe0f The additional certificate output formats feature is currently in an experimental alpha state, and is subject to breaking changes or complete removal in future releases. This feature is only enabled by adding it to the <code>--feature-gates</code> flag on the cert-manager controller and webhook components:</p> <pre><code>--feature-gates=AdditionalCertificateOutputFormats=true\n</code></pre> <p><code>additionalOutputFormats</code> is a field on the Certificate <code>spec</code> that allows specifying additional supplementary formats of issued certificates and their private key. There are currently two supported additional output formats: <code>CombinedPEM</code> and <code>DER</code>. Both output formats can be specified on the same Certificate.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nspec:\n...\nsecretName: my-cert-tls\nadditionalOutputFormats:\n- type: CombinedPEM\n- type: DER\n# Results in:\napiVersion: v1\nkind: Secret\nmetadata:\nname: my-cert-tls\ntype: kubernetes.io/tls\ndata:\nca.crt: &lt;PEM CA certificate&gt;\ntls.key: &lt;PEM private key&gt;\ntls.crt: &lt;PEM signed certificate chain&gt;\ntls-combined.pem: &lt;PEM private key + \"\\n\" + PEM signed certificate chain&gt;\nkey.der: &lt;DER binary format of private key&gt;\n</code></pre>"},{"location":"usage/certificate/#combinedpem","title":"<code>CombinedPEM</code>","text":"<p>The <code>CombinedPEM</code> type will create a new key entry in the resulting Certificate's Secret <code>tls-combined.pem</code>. This entry will contain the PEM encoded private key, followed by at least one new line character, followed by the PEM encoded signed certificate chain-</p> <pre><code>&lt;private key&gt; + \"\\n\" + &lt;signed certificate chain&gt;\n</code></pre> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-cert-tls\ntype: kubernetes.io/tls\ndata:\ntls-combined.pem: &lt;PEM private key + \"\\n\" + PEM signed certificate chain&gt;\n...\n</code></pre>"},{"location":"usage/certificate/#der","title":"<code>DER</code>","text":"<p>The <code>DER</code> type will create a new key entry in the resulting Certificate's Secret <code>key.der</code>. This entry will contain the DER binary format of the private key.</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-cert-tls\ntype: kubernetes.io/tls\ndata:\nkey.der: &lt;DER binary format of private key&gt;\n...\n</code></pre>"},{"location":"usage/csi/","title":"CSI \u9a71\u52a8","text":""},{"location":"usage/csi/#cert-manager-csi-pods-mtls","title":"\u4f7f\u7528 cert-manager CSI \u9a71\u52a8\u7a0b\u5e8f\u542f\u7528 Pods \u7684 mTLS","text":"<p>\u4e00\u4e2a\u5bb9\u5668\u5b58\u50a8\u63a5\u53e3(CSI)\u9a71\u52a8\u7a0b\u5e8f\u5df2\u7ecf\u521b\u5efa\uff0c\u4ee5\u4fbf\u901a\u8fc7\u4f7f\u7528 cert-manager \u5728\u96c6\u7fa4\u4e2d\u8fd0\u884c Pods \u7684 mTLS\u3002 \u4f7f\u7528\u6b64\u9a71\u52a8\u7a0b\u5e8f\u5c06\u786e\u4fdd\u79c1\u94a5\u548c\u76f8\u5e94\u7684\u5df2\u7b7e\u540d\u8bc1\u4e66\u5bf9\u4e8e\u6bcf\u4e2a Pod \u90fd\u662f\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u5c06\u5b58\u50a8\u5728 Pod \u8ba1\u5212\u5230\u7684\u8282\u70b9\u7684\u78c1\u76d8\u4e0a\u3002 \u8bc1\u4e66\u5bc6\u94a5\u5bf9\u7684\u751f\u547d\u5468\u671f\u4e0e Pod \u7684\u751f\u547d\u5468\u671f\u76f8\u5339\u914d\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u5c06\u5728 Pod \u521b\u5efa\u65f6\u521b\u5efa\uff0c\u5e76\u5728\u7ec8\u6b62\u65f6\u9500\u6bc1\u3002 \u8be5\u9a71\u52a8\u7a0b\u5e8f\u8fd8\u52a8\u6001\u5730\u5904\u7406\u6d3b\u52a8\u8bc1\u4e66\u7684\u66f4\u65b0\u3002</p> <p>A CSI driver is a storage plugin that is deployed into your Kubernetes cluster that can honor volume requests specified on Pods, just like those enabled by default such as the <code>Secret</code>, <code>ConfigMap</code>, or <code>hostPath</code> volume drivers. In the case of the cert-manager CSI driver, it makes use of the ephemeral volume type, made beta as of <code>v1.16</code> and as such will only work from the Kubernetes version <code>v1.16</code>. An ephemeral volumes means that the volume is created and destroyed as the Pod is created and terminated, as well as specifying the volume attributes, without the need of a <code>PersistentVolume</code>. This gives the feature of not only having unique certificates and keys per Pod, where the private key never leaves the hosts node, but that the desired certificate for that Pod template can be defined in line with the deployment spec.</p> <p>Warning: Use of the CSI driver is mostly intended for supporting a PKI of your cluster and facilitating mTLS, and as such, a private Certificate Authority issuer should be used - CA, Vault, and perhaps Venafi, or other external issuers. It is not recommended to use public Certificate Authorities, for example Let's Encrypt, which hold strict rate limits on the number of certificates that can be issued for a single domain. Like Pods, these certificate key pairs are designed to be non-immutable and can be created and destroyed at any time during normal operation.</p>"},{"location":"usage/csi/#how-does-it-work","title":"How Does it Work?","text":"<p>The CSI specification is a protocol and standard for building storage drivers for container orchestration platforms with the intention that a single driver may be ported across multiple platforms and outlines a consistent specification to how drivers should behave from an infrastructure perspective. Since cert-manager is designed to only be run with a Kubernetes cluster, so too does the cert-manager CSI driver.</p> <p>The driver should be deployed as a DaemonSet which means a single instance of the driver may be run on each node. The driver will not work when running multiple instances on a single node. The set of nodes that the driver runs on can be restricted using the <code>nodeSelector</code> in its Pod template.</p> <p>When a Pod is scheduled to a node with a cert-manager CSI volume specified, the <code>Kubelet</code> running on that node will send a <code>NodePublishVolume</code> call to the driver on that node, containing that Pods information as well as the attributes detailed from the in-line volume attributes. From this, the driver will generate a private key as well as a certificate request based upon that key using information built from the volume attributes. The driver will create a <code>CertificateRequest</code> resource in the same namespace in the Pod that, if valid, cert-manager will return a signed certificate.</p> <p>The resulting signed certificate and generated key will be written to that node's file system to be mounted to the Pods file system. Since the driver needs access to the nodes file system it must be made privileged. Once mounted, the Pod will begin execution with the unique private key and certificate available in its file system, as defined by its mount path.</p> <p>By default, the driver will keep track of certificates created in order to monitor when they should be marked for renewal. When this happens, the driver will request for a new signed certificate, and when successful, will simply overwrite the existing certificate in path.</p> <p>When the Pod is marked for termination, the <code>NodeUnpublishVolume</code> call is made to the node's driver which in turn destroys the certificate and key from the nodes file system.</p> <p>The CSI driver is able to recover its full state in the event the its Pod being terminated.</p>"},{"location":"usage/gateway/","title":"\u4fdd\u62a4 gateway.networking.k8s.io \u7f51\u5173\u6e90","text":"<p>\u529f\u80fd\u72b6\u6001: cert-manager 1.5 [alpha]</p> <p>Info</p> <p>\ud83d\udccc \u672c\u9875\u9762\u4e3b\u8981\u4ecb\u7ecd\u901a\u8fc7\u6807\u6ce8Kubernetes\u7f51\u5173\u6e90\u6765\u81ea\u52a8\u521b\u5efa\u8bc1\u4e66\u6e90\u3002 \u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u4f7f\u7528Kubernetes\u7f51\u5173API\u4f7f\u7528ACME\u53d1\u5e03\u8005\u548cHTTP-01\u6311\u6218\uff0c\u8bf7\u53c2\u9605ACME HTTP-01.</p> <p>Info</p> <p>\ud83d\udea7 cert-manager 1.8+\u4f7f\u7528v1alpha2 Kubernetes\u7f51\u5173API\u8fdb\u884c\u6d4b\u8bd5\u3002 \u7531\u4e8e\u6e90\u8f6c\u6362\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4e0ev1beta1\u4e00\u8d77\u5de5\u4f5c\uff0c\u4f46\u8fd8\u6ca1\u6709\u4f7f\u7528\u5b83\u8fdb\u884c\u6d4b\u8bd5\u3002</p> <p>cert-manager \u53ef\u4ee5\u4e3a Gateway \u6e90\u751f\u6210 TLS \u8bc1\u4e66\u3002\u8fd9\u662f\u901a\u8fc7\u5411\u7f51\u5173\u6dfb\u52a0\u6ce8\u91ca\u6765\u914d\u7f6e\u7684\uff0c\u7c7b\u4f3c\u4e8e\u4fdd\u62a4\u5165\u53e3\u6e90\u7684\u8fc7\u7a0b\u3002</p> <p>Gateway \u6e90\u662fGateway API\u7684\u4e00\u90e8\u5206\uff0cGateway API \u662f\u4e00\u7ec4\u53ef\u4ee5\u5b89\u88c5\u5728 Kubernetes \u96c6\u7fa4\u4e0a\u7684 CRDs\uff0c\u5b83\u63d0\u4f9b\u4e86\u5bf9 Ingress API \u7684\u5404\u79cd\u6539\u8fdb\u3002</p> <p>The Gateway resource holds the TLS configuration, as illustrated in the following diagram (source: https://gateway-api.sigs.k8s.io):</p> <p></p> <p>Info</p> <p>\ud83d\udccc This feature requires the installation of the Gateway API bundle and passing a feature flag to the cert-manager controller.</p> <p>To install v1.5.1 Gateway API bundle (Gateway CRDs and webhook), run the following command:</p> <pre><code>kubectl apply -f \"https://github.com/kubernetes-sigs/gateway-api/releases/download/v0.5.1/standard-install.yaml\"\n</code></pre> <p>To enable the feature in cert-manager, turn on the <code>GatewayAPI</code> feature gate:</p> <ul> <li>If you are using Helm:</li> </ul> <pre><code>helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager \\\n--set \"extraArgs={--feature-gates=ExperimentalGatewayAPISupport=true}\"\n</code></pre> <ul> <li>If you are using the raw cert-manager manifests, add the following flag to the   cert-manager controller Deployment:</li> </ul> <pre><code>args:\n- --feature-gates=ExperimentalGatewayAPISupport=true\n</code></pre> <p>The Gateway API CRDs should either be installed before cert-manager starts or the cert-manager Deployment should be restarted after installing the Gateway API CRDs. This is important because some of the cert-manager components only perform the Gateway API check on startup. You can restart cert-manager with the following command:</p> <pre><code>kubectl rollout restart deployment cert-manager -n cert-manager\n</code></pre> <p>The annotations <code>cert-manager.io/issuer</code> or <code>cert-manager.io/cluster-issuer</code> tell cert-manager to create a Certificate for a Gateway. For example, the following Gateway will trigger the creation of a Certificate with the name <code>example-com-tls</code>:</p> <pre><code>apiVersion: gateway.networking.k8s.io/v1alpha2\nkind: Gateway\nmetadata:\nname: example\nannotations:\ncert-manager.io/issuer: foo\nspec:\ngatewayClassName: foo\nlisteners:\n- name: http\nhostname: example.com\nport: 443\nprotocol: HTTPS\nallowedRoutes:\nnamespaces:\nfrom: All\ntls:\nmode: Terminate\ncertificateRefs:\n- name: example-com-tls\n</code></pre> <p>A few moments later, cert-manager will create a Certificate. The Certificate is named after the Secret name <code>example-com-tls</code>. The <code>dnsNames</code> field is set with the <code>hostname</code> field from the Gateway spec.</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-com-tls\nspec:\nissuerRef:\nname: my-issuer\nkind: Issuer\ngroup: cert-manager.io\ndnsNames:\n- example.com # \u2705 Copied from the `hostname` field.\nsecretName: example-com-tls\n</code></pre> <p>Info</p> <p>\ud83d\udea7 this mechanism can only be used to create Secrets in the same namespace as the <code>Gateway</code>, see <code>cert-manager#5610</code></p>"},{"location":"usage/gateway/#use-cases","title":"Use cases","text":""},{"location":"usage/gateway/#generate-tls-certs-for-selected-tls-blocks","title":"Generate TLS certs for selected TLS blocks","text":"<p>cert-manager skips any listener block that cannot be used for generating a Certificate. For a listener block to be used for creating a Certificate, it must meet the following requirements:</p> Field Requirement <code>tls.hostname</code> Must not be empty. <code>tls.mode</code> Must be set to <code>Terminate</code>. <code>Passthrough</code> is not supported. <code>tls.certificateRef.name</code> Cannot be left empty. <code>tls.certificateRef.kind</code> If specified, must be set to <code>Secret</code>. <code>tls.certificateRef.group</code> If specified, must be set to <code>core</code>. <code>tls.certificateRef.namespace</code> If specified, must be the same as the <code>Gateway</code>. <p>In the following example, the first four listener blocks will not be used to generate Certificate resources:</p> <pre><code>apiVersion: gateway.networking.k8s.io/v1alpha2\nkind: Gateway\nmetadata:\nname: my-gateway\nnamespace: default\nannotations:\ncert-manager.io/issuer: my-issuer\nspec:\nlisteners:\n# \u274c  Missing \"tls\" block, the following listener is skipped.\n- hostname: example.com\n# \u274c  Missing \"hostname\", the following listener is skipped.\n- tls:\ncertificateRefs:\n- name: example-com-tls\nkind: Secret\"\ngroup: core\n# \u274c  \"mode: Passthrough\" is not supported, the following listener is skipped.\n- hostname: example.com\ntls:\nmode: Passthrough\ncertificateRefs:\n- name: example-com-tls\nkind: Secret\ngroup: core\n# \u274c  Cross-namespace secret references are not supported, the following listener is skipped.\n- hostname: foo.example.com\nport: 443\nprotocol: HTTPS\nallowedRoutes:\nnamespaces:\nfrom: All\ntls:\nmode: Terminate\ncertificateRefs:\n- name: example-com-tls\nkind: Secret\ngroup: core\nnamespace: other-namespace\n# \u2705  The following listener is valid.\n- hostname: foo.example.com # \u2705 Required.\nport: 443\nprotocol: HTTPS\nallowedRoutes:\nnamespaces:\nfrom: All\ntls:\nmode: Terminate # \u2705 Required. \"Terminate\" is the only supported mode.\ncertificateRefs:\n- name: example-com-tls # \u2705 Required.\nkind: Secret # \u2705 Required. \"Secret\" is the only valid value.\ngroup: core # \u2705 Required. \"core\" is the only valid value.\n</code></pre> <p>cert-manager has skipped over the first four listener blocks and has created a single Certificate named <code>example-com-tls</code> for the last listener block:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-com-tls\nspec:\nissuerRef:\nname: my-issuer\nkind: Issuer\ngroup: cert-manager.io\ndnsNames:\n- foo.example.com\nsecretName: example-com-tls\n</code></pre>"},{"location":"usage/gateway/#two-listeners-with-the-same-secret-name","title":"Two listeners with the same Secret name","text":"<p>The same Secret name can be re-used in multiple TLS blocks, regardless of the hostname. Let us imagine that you have these two listeners:</p> <pre><code>apiVersion: gateway.networking.k8s.io/v1alpha2\nkind: Gateway\nmetadata:\nname: example\nannotations:\ncert-manager.io/issuer: my-issuer\nspec:\ngatewayClassName: foo\nlisteners:\n# Listener 1.\n- hostname: example.com\nport: 443\nprotocol: HTTPS\nroutes:\nkind: HTTPRoute\nparentRefs:\n- name: example\nkind: Gateway\ntls:\nmode: Terminate\ncertificateRefs:\n- name: example-com-tls\nkind: Secret\ngroup: core\n# Listener 2: Same Secret name as Listener 1, with a different hostname.\n- hostname: *.example.com\nport: 443\nprotocol: HTTPS\nroutes:\nkind: HTTPRoute\nparentRefs:\n- name: example\nkind: Gateway\ntls:\nmode: Terminate\ncertificateRefs:\n- name: example-com-tls\nkind: Secret\ngroup: core\n# Listener 3: also same Secret name, except the hostname is also the same.\n- hostname: *.example.com\nport: 8443\nprotocol: HTTPS\nroutes:\nkind: HTTPRoute\nparentRefs:\n- name: example\nkind: Gateway\ntls:\nmode: Terminate\ncertificateRefs:\n- name: example-com-tls\nkind: Secret\ngroup: core\n# Listener 4: different Secret name.\n- hostname: site.org\nport: 443\nprotocol: HTTPS\nroutes:\nkind: HTTPRoute\nparentRefs:\n- name: example\nkind: Gateway\ntls:\nmode: Terminate\ncertificateRefs:\n- name: site-org-tls\nkind: Secret\ngroup: core\n</code></pre> <p>cert-manager will create two Certificates since two Secret names are used: <code>example-com-tls</code> and <code>site-org-tls</code>. Note the Certificate's <code>dnsNames</code> contains a single occurrence of <code>*.example.com</code> for both listener 2 and 3 (the <code>hostname</code> values are de-duplicated).</p> <p>The two Certificates look like this:</p> <pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: example-com-tls\nspec:\nissuerRef:\nname: my-issuer\nkind: Issuer\ngroup: cert-manager.io\ndnsNames:\n- example.com # From listener 1.\n- *.example.com # From listener 2 and 3.\nsecretName: example-com-tls\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: site-org-tls\nspec:\nissuerRef:\nname: my-issuer\nkind: Issuer\ngroup: cert-manager.io\ndnsNames:\n- site.org # From listener 4.\nsecretName: site-org-tls\n</code></pre>"},{"location":"usage/gateway/#supported-annotations","title":"Supported Annotations","text":"<p>If you are migrating to Gateway resources from Ingress resources, be aware that there are some differences between the annotations for Ingress resources versus the annotations for Gateway resources.</p> <p>The Gateway resource supports the following annotations for generating Certificate resources:</p> <ul> <li> <p><code>cert-manager.io/issuer</code>: the name of an Issuer to acquire the certificate   required for this Gateway. The Issuer must be in the same namespace as the   Gateway resource.</p> </li> <li> <p><code>cert-manager.io/cluster-issuer</code>: the name of a ClusterIssuer to acquire the   Certificate required for this Gateway. It does not matter which namespace your   Gateway resides, as <code>ClusterIssuers</code> are non-namespaced resources.</p> </li> <li> <p><code>cert-manager.io/issuer-kind</code>: the kind of the external issuer resource, for   example <code>AWSPCACIssuer</code>. This is only necessary for out-of-tree issuers.</p> </li> <li> <p><code>cert-manager.io/issuer-group</code>: the API group of the external issuer   controller, for example <code>awspca.cert-manager.io</code>. This is only necessary for   out-of-tree issuers.</p> </li> <li> <p><code>cert-manager.io/common-name</code>: (optional) this annotation allows you to   configure <code>spec.commonName</code> for the Certificate to be generated.</p> </li> <li> <p><code>cert-manager.io/duration</code>: (optional) this annotation allows you to   configure <code>spec.duration</code> field for the Certificate to be generated.</p> </li> <li> <p><code>cert-manager.io/renew-before</code>: (optional) this annotation allows you to   configure <code>spec.renewBefore</code> field for the Certificate to be generated.</p> </li> <li> <p><code>cert-manager.io/usages</code>: (optional) this annotation allows you to configure   <code>spec.usages</code> field for the Certificate to be generated. Pass a string with   comma-separated values i.e \"key agreement,digital signature, server auth\"</p> </li> <li> <p><code>cert-manager.io/revision-history-limit</code>: (optional) this annotation allows you to   configure <code>spec.revisionHistoryLimit</code> field to limit the number of CertificateRequests to be kept for a Certificate.   Minimum value is 1. If unset all CertificateRequests will be kept.</p> </li> <li> <p><code>cert-manager.io/private-key-algorithm</code>: (optional) this annotation allows you to   configure <code>spec.privateKey.algorithm</code> field to set the algorithm for private key generation for a Certificate.   Valid values are <code>RSA</code>, <code>ECDSA</code> and <code>Ed25519</code>. If unset an algorithm <code>RSA</code> will be used.</p> </li> <li> <p><code>cert-manager.io/private-key-encoding</code>: (optional) this annotation allows you to   configure <code>spec.privateKey.encoding</code> field to set the encoding for private key generation for a Certificate.   Valid values are <code>PKCS1</code> and <code>PKCS8</code>. If unset an algorithm <code>PKCS1</code> will be used.</p> </li> <li> <p><code>cert-manager.io/private-key-size</code>: (optional) this annotation allows you to   configure <code>spec.privateKey.size</code> field to set the size of the private key for a Certificate.   If algorithm is set to <code>RSA</code>, valid values are <code>2048</code>, <code>4096</code> or <code>8192</code>, and will default to <code>2048</code> if not specified.   If algorithm is set to <code>ECDSA</code>, valid values are <code>256</code>, <code>384</code> or <code>521</code>, and will default to <code>256</code> if not specified.   If algorithm is set to <code>Ed25519</code>, size is ignored.</p> </li> <li> <p><code>cert-manager.io/private-key-rotation-policy</code>: (optional) this annotation allows you to   configure <code>spec.privateKey.rotationPolicy</code> field to set the rotation policy of the private key for a Certificate.   Valid values are <code>Never</code> and <code>Always</code>. If unset a rotation policy <code>Never</code> will be used.</p> </li> </ul>"},{"location":"usage/ingress/","title":"\u4fdd\u62a4\u5165\u53e3\u6e90","text":"<p>\u8bc1\u4e66\u7ba1\u7406\u5668\u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u4f8b\u662f\u8bf7\u6c42 TLS \u7b7e\u540d\u8bc1\u4e66\u6765\u4fdd\u62a4\u60a8\u7684\u5165\u53e3\u6e90\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u6dfb\u52a0\u6ce8\u91ca\u5230\u60a8\u7684<code>Ingress</code>\u6e90\u548c\u8bc1\u4e66\u7ba1\u7406\u5668\u5c06\u4fc3\u8fdb\u4e3a\u60a8\u521b\u5efa<code>Certificate</code>\u6e90\u6765\u5b8c\u6210\u3002 cert-manager \u7684\u4e00\u4e2a\u5c0f\u5b50\u7ec4\u4ef6 ingress-shim \u8d1f\u8d23\u8fd9\u4e00\u70b9\u3002</p>"},{"location":"usage/ingress/#_2","title":"\u5de5\u4f5c\u539f\u7406","text":"<p>\u5b50\u7ec4\u4ef6 ingress-shim \u76d1\u89c6\u6574\u4e2a\u96c6\u7fa4\u4e2d\u7684<code>Ingress</code>\u6e90\u3002 \u5982\u679c\u5b83\u89c2\u5bdf\u5230\u4e00\u4e2a\u5e26\u6709\u53d7\u652f\u6301\u7684\u6ce8\u91ca\u90e8\u5206\u4e2d\u63cf\u8ff0\u7684\u6ce8\u91ca\u7684<code>Ingress</code>\uff0c\u5b83\u5c06\u786e\u4fdd\u5728<code>Ingress</code>\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u5b58\u5728\u4e00\u4e2a<code>Certificate</code>\u6e90\uff0c\u5176\u540d\u79f0\u5728<code>tls.secretName</code>\u5b57\u6bb5\u4e2d\u63d0\u4f9b\uff0c\u5e76\u6309\u7167<code>Ingress</code>\u4e2d\u63cf\u8ff0\u7684\u914d\u7f6e\u3002 \u4f8b\u5982:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\nannotations:\n# add an annotation indicating the issuer to use.\ncert-manager.io/cluster-issuer: nameOfClusterIssuer\nname: myIngress\nnamespace: myIngress\nspec:\nrules:\n- host: example.com\nhttp:\npaths:\n- pathType: Prefix\npath: /\nbackend:\nservice:\nname: myservice\nport:\nnumber: 80\ntls: # &lt; placing a host in the TLS config will determine what ends up in the cert's subjectAltNames\n- hosts:\n- example.com\nsecretName: myingress-cert # &lt; cert-manager will store the created certificate in this secret.\n</code></pre>"},{"location":"usage/ingress/#_3","title":"\u652f\u6301\u6ce8\u91ca","text":"<p>\u60a8\u53ef\u4ee5\u5728 Ingress \u6e90\u4e0a\u6307\u5b9a\u4ee5\u4e0b\u6ce8\u91ca\uff0c\u4ee5\u89e6\u53d1\u81ea\u52a8\u521b\u5efa Certificate \u6e90:</p> <ul> <li> <p><code>cert-manager.io/issuer</code>: Issuer \u7684\u540d\u79f0\uff0c\u4ee5\u83b7\u5f97\u6b64\u8fdb\u5165\u6240\u9700\u7684\u8bc1\u4e66\u3002Issuer \u5fc5\u987b \u4e0e Ingress \u6e90\u5728\u76f8\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u3002</p> </li> <li> <p><code>cert-manager.io/cluster-issuer</code>: ClusterIssuer \u7684\u540d\u79f0\uff0c\u4ee5\u83b7\u53d6\u6b64 Ingress \u6240\u9700\u7684\u8bc1\u4e66\u3002\u60a8\u7684 Ingress \u9a7b\u7559\u5728\u54ea\u4e2a\u540d\u79f0\u7a7a\u95f4\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u4e3a ClusterIssuers \u662f\u975e\u540d\u79f0\u7a7a\u95f4\u6e90\u3002</p> </li> <li> <p><code>cert-manager.io/issuer-kind</code>: \u5916\u90e8\u53d1\u884c\u8005\u6e90\u7684\u7c7b\u578b\uff0c\u4f8b\u5982<code>AWSPCAIssuer</code>\u3002\u8fd9\u53ea\u5bf9\u6811\u5916\u53d1\u884c\u8005\u6709\u5fc5\u8981\u3002</p> </li> <li> <p><code>cert-manager.io/issuer-group</code>: the API group of the external issuer   controller, for example <code>awspca.cert-manager.io</code>. This is only necessary for   out-of-tree issuers.</p> </li> <li> <p><code>kubernetes.io/tls-acme: \"true\"</code>: this annotation requires additional   configuration of the ingress-shim see below.   Namely, a default Issuer must be specified as arguments to the ingress-shim   container.</p> </li> <li> <p><code>acme.cert-manager.io/http01-ingress-class</code>: this annotation allows you to   configure the ingress class that will be used to solve challenges for this   ingress. Customizing this is useful when you are trying to secure internal   services, and need to solve challenges using a different ingress class to that   of the ingress. If not specified and the <code>acme-http01-edit-in-place</code> annotation   is not set, this defaults to the ingress class defined in the Issuer resource.</p> </li> <li> <p><code>acme.cert-manager.io/http01-edit-in-place: \"true\"</code>: this controls whether the   ingress is modified 'in-place', or a new one is created specifically for the   HTTP01 challenge. If present, and set to \"true\", the existing ingress will be   modified. Any other value, or the absence of the annotation assumes \"false\".   This annotation will also add the annotation   <code>\"cert-manager.io/issue-temporary-certificate\": \"true\"</code> onto created   certificates which will cause a temporary   certificate to be set   on the resulting Secret until the final signed certificate has been returned.   This is useful for keeping compatibility with the <code>ingress-gce</code> component.</p> </li> <li> <p><code>cert-manager.io/common-name</code>: (optional) this annotation allows you to   configure <code>spec.commonName</code> for the Certificate to be generated.</p> </li> <li> <p><code>cert-manager.io/duration</code>: (optional) this annotation allows you to   configure <code>spec.duration</code> field for the Certificate to be generated.</p> </li> <li> <p><code>cert-manager.io/renew-before</code>: (optional) this annotation allows you to   configure <code>spec.renewBefore</code> field for the Certificate to be generated.</p> </li> <li> <p><code>cert-manager.io/usages</code>: (optional) this annotation allows you to configure   <code>spec.usages</code> field for the Certificate to be generated. Pass a string with   comma-separated values i.e \"key agreement,digital signature, server auth\"</p> </li> <li> <p><code>cert-manager.io/revision-history-limit</code>: (optional) this annotation allows you to   configure <code>spec.revisionHistoryLimit</code> field to limit the number of CertificateRequests to be kept for a Certificate.   Minimum value is 1. If unset all CertificateRequests will be kept.</p> </li> <li> <p><code>cert-manager.io/private-key-algorithm</code>: (optional) this annotation allows you to   configure <code>spec.privateKey.algorithm</code> field to set the algorithm for private key generation for a Certificate.   Valid values are <code>RSA</code>, <code>ECDSA</code> and <code>Ed25519</code>. If unset an algorithm <code>RSA</code> will be used.</p> </li> <li> <p><code>cert-manager.io/private-key-encoding</code>: (optional) this annotation allows you to   configure <code>spec.privateKey.encoding</code> field to set the encoding for private key generation for a Certificate.   Valid values are <code>PKCS1</code> and <code>PKCS8</code>. If unset an algorithm <code>PKCS1</code> will be used.</p> </li> <li> <p><code>cert-manager.io/private-key-size</code>: (optional) this annotation allows you to   configure <code>spec.privateKey.size</code> field to set the size of the private key for a Certificate.   If algorithm is set to <code>RSA</code>, valid values are <code>2048</code>, <code>4096</code> or <code>8192</code>, and will default to <code>2048</code> if not specified.   If algorithm is set to <code>ECDSA</code>, valid values are <code>256</code>, <code>384</code> or <code>521</code>, and will default to <code>256</code> if not specified.   If algorithm is set to <code>Ed25519</code>, size is ignored.</p> </li> <li> <p><code>cert-manager.io/private-key-rotation-policy</code>: (optional) this annotation allows you to   configure <code>spec.privateKey.rotationPolicy</code> field to set the rotation policy of the private key for a Certificate.   Valid values are <code>Never</code> and <code>Always</code>. If unset a rotation policy <code>Never</code> will be used.</p> </li> </ul>"},{"location":"usage/ingress/#_4","title":"\u53ef\u9009\u914d\u7f6e","text":"<p>ingress-shim \u5b50\u7ec4\u4ef6\u4f5c\u4e3a\u5b89\u88c5\u7684\u4e00\u90e8\u5206\u81ea\u52a8\u90e8\u7f72\u3002</p> <p>If you would like to use the old kube-lego <code>kubernetes.io/tls-acme: \"true\"</code> annotation for fully automated TLS, you will need to configure a default <code>Issuer</code> when deploying cert-manager. This can be done by adding the following <code>--set</code> when deploying using Helm:</p> <pre><code>   --set ingressShim.defaultIssuerName=letsencrypt-prod \\\n--set ingressShim.defaultIssuerKind=ClusterIssuer \\\n--set ingressShim.defaultIssuerGroup=cert-manager.io\n</code></pre> <p>Or by adding the following arguments to the cert-manager deployment <code>podTemplate</code> container arguments.</p> <pre><code>  - --default-issuer-name=letsencrypt-prod\n  - --default-issuer-kind=ClusterIssuer\n  - --default-issuer-group=cert-manager.io\n</code></pre> <p>In the above example, cert-manager will create <code>Certificate</code> resources that reference the <code>ClusterIssuer</code> <code>letsencrypt-prod</code> for all Ingresses that have a <code>kubernetes.io/tls-acme: \"true\"</code> annotation.</p> <p>Issuers configured via annotations have a preference over the default issuer. If a default issuer is configured via CLI flags and a <code>cert-manager.io/cluster-issuer</code> or <code>cert-manager.io/issuer</code> annotation also has been added to an Ingress, the created <code>Certificate</code> will refer to the issuer configured via annotation.</p> <p>For more information on deploying cert-manager, read the installation guide.</p>"},{"location":"usage/ingress/#_5","title":"\u6545\u969c\u6392\u9664","text":"<p>If you do not see a <code>Certificate</code> resource being created after applying the ingress-shim annotations check that at least <code>cert-manager.io/issuer</code> or <code>cert-manager.io/cluster-issuer</code> is set. If you want to use <code>kubernetes.io/tls-acme: \"true\"</code> make sure to have checked all steps above and you might want to look for errors in the cert-manager pod logs if not resolved.</p>"},{"location":"usage/istio/","title":"\u4fdd\u62a4 Istio \u670d\u52a1\u7f51\u683c","text":"<p>cert-manager \u53ef\u4ee5\u4f7f\u7528\u9879\u76eeistio-csr\u4e0eIstio\u96c6\u6210\u3002 istio-csr \u5c06\u90e8\u7f72\u4e00\u4e2a\u4ee3\u7406\uff0c\u8d1f\u8d23\u63a5\u6536 Istio \u7f51\u683c\u6240\u6709\u6210\u5458\u7684\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff0c\u5e76\u901a\u8fc7\u8bc1\u4e66\u7ba1\u7406\u5668\u5bf9\u5176\u8fdb\u884c\u7b7e\u540d\u3002</p> <p>istio-csr\u5c06\u901a\u8fc7\u60a8\u9009\u62e9\u7684\u8bc1\u4e66\u7ba1\u7406\u5668\u9881\u53d1\u8005\u7b7e\u7f72\u6240\u6709\u63a7\u5236\u5e73\u9762\u548c\u5de5\u4f5c\u8d1f\u8f7d\u8bc1\u4e66\u3002</p> <p>\u8bf7\u6309\u7167\u9879\u76ee\u9875\u9762\u4e0a\u7684\u8bf4\u660e\u5b89\u88c5\u548c\u4f7f\u7528 istio-csr.</p>"},{"location":"usage/kube-csr/","title":"Kubernetes CertificateSigningRequests","text":"<p>Kubernetes has an in-built CertificateSigningRequest resource. This resource is similar to the cert-manager CertificateRequest in that it is used to request an X.509 signed certificate from a referenced Certificate Authority (CA).</p> <p>Using this resource may be useful for users who are using an application that supports this resource, but not the cert-manager CertificateRequest resource, and they still wish for certificates to be signed through cert-manager.</p> <p>CertificateSigningRequests reference a <code>SignerName</code> or signer as the entity it wishes to sign its request from. For cert-manager, a signer can be mapped to either an Issuer or ClusterIssuer.</p>"},{"location":"usage/kube-csr/#feature-state","title":"Feature State","text":"<p>This feature is currently in an experimental state, and its behavior is subject to change in further releases.</p>   \u26d4\ufe0f This feature is only enabled by adding it to the `--feature-gates` flag on the cert-manager controller:  <pre><code>--feature-gates=ExperimentalCertificateSigningRequestControllers=true\n</code></pre>  Which can be added using Helm:  <pre><code>$ helm install \\\ncert-manager jetstack/cert-manager \\\n--namespace cert-manager \\\n--create-namespace \\\n--set featureGates=\"ExperimentalCertificateSigningRequestControllers=true\" \\\n# --set installCRDs=true\n</code></pre>  &gt; Note: cert-manager supports signing CertificateSigningRequests &gt; using all [internal Issuers](../configuration/README.md).  &gt; Note: cert-manager _does not_ automatically approve CertificateSigningRequests &gt; that reference a cert-manager [Issuer](../configuration/README.md). Please refer to &gt; the [Kubernetes documentation](https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/#request-signing-process) &gt; for the request process of CertificateSigningRequests."},{"location":"usage/kube-csr/#signer-name","title":"Signer Name","text":"<p>CertificateSigningRequests contain a <code>spec.signerName</code> field to reference a CA to sign the request. cert-manager Issuers or ClusterIssuers are referenced in the following form:</p> <pre><code>&lt;resource type&gt;.cert-manager.io/&lt;signer namespace (if namespaced)&gt;.&lt;signer name&gt;\n</code></pre> <p>For example, a namespaced Issuer in the namespace <code>sandbox</code> with the name <code>my-issuer</code> would be referenced via:</p> <pre><code>signerName: issuers.cert-manager.io/sandbox.my-issuer\n</code></pre> <p>A ClusterIssuer with the name <code>my-cluster-issuer</code> would be referenced via:</p> <pre><code>signerName: clusterissuers.cert-manager.io/my-cluster-issuer\n</code></pre>"},{"location":"usage/kube-csr/#referencing-namespaced-issuers","title":"Referencing Namespaced Issuers","text":"<p>Unlike CertificateRequests, CertificateSigningRequests are cluster scoped resources. To prevent users from requesting certificates from a namespaced Issuer in a namespace that they otherwise would not have access to, cert-manager performs a SubjectAccessReview. This review ensures that the requesting user has the permission to <code>reference</code> the <code>signers</code> resource in the given namespace. The name should be either the name of the Issuer, or <code>\"*\"</code> to reference all Issuers in that namespace.</p> <p>An example Role to give permissions to reference Issuers in the <code>sandbox</code> namespace would look like the following:</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\nname: cert-manager-referencer:my-issuer\nnamespace: sandbox\nrules:\n- apiGroups: [\"cert-manager.io\"]\nresources: [\"signers\"]\nverbs: [\"reference\"]\nresourceNames:\n- \"my-issuer\" # To give permission to _only_ reference Issuers with the name 'my-issuer'\n- \"*\" # To give permission to reference Issuers with any name in this namespace\n</code></pre>"},{"location":"usage/kube-csr/#annotations","title":"Annotations","text":"<p>To keep feature parity with CertificateRequests, annotations are used to store values that do not exist as <code>spec</code> or <code>status</code> fields on the CertificateSigningRequest resource. These fields are either set by the requester or by the signer as labelled below.</p> <p>Requester annotations:</p> <ul> <li> <p><code>experimental.cert-manager.io/request-duration</code>: Set by the requester. Accepts   a Go time duration string   specifying the requested certificate duration. Defaults to 90 days. Some   signers such as Venafi or ACME typically do not allow requesting a   duration.</p> </li> <li> <p><code>experimental.cert-manager.io/request-is-ca</code>: Set by the requester. If set to   <code>\"true\"</code>, will request for a CA certificate.</p> </li> <li> <p><code>experimental.cert-manager.io/private-key-secret-name</code>: Set by the   requester. Required only for the SelfSigned signer. Used to reference a   Secret which contains the PEM encoded private key of the requester's X.509   certificate signing request at key <code>tls.key</code>. Used to sign the requester's   request.</p> </li> <li> <p><code>venafi.experimental.cert-manager.io/custom-fields</code>: Set by the   requester. Optional for only the Venafi signer. Used for adding custom   fields to the Venafi request. This will only work with Venafi TPP <code>v19.3</code>   and higher. The value is a JSON array with objects containing the name and   value keys, for example:   <pre><code>venafi.experimental.cert-manager.io/custom-fields: |-\n  [\n    {\"name\": \"field-name\", \"value\": \"field value\"},\n    {\"name\": \"field-name-2\", \"value\": \"field value 2\"}\n  ]\n</code></pre></p> </li> </ul> <p>Signer annotations:</p> <ul> <li><code>venafi.experimental.cert-manager.io/pickup-id</code>: Set by the signer. Only   used for the Venafi signer. Used to record the Venafi Pickup ID of a   certificate signing request that has been submitted to the Venafi API for   collection during issuance.</li> </ul>"},{"location":"usage/kube-csr/#usage","title":"Usage","text":"<p>CertificateSigningRequests can be manually created using cmctl. This command takes a manifest file containing a Certificate resource as input. This generates a private key and creates a CertificateSigningRequest. CertificateSigningRequests are not approved by default, so you will likely need to approve it manually:</p> <pre><code>$ kubectl certificate approve &lt;name&gt;\n</code></pre>"},{"location":"usage/prometheus-metrics/","title":"Prometheus \u6307\u6807","text":"<p>\u4e3a\u4e86\u5e2e\u52a9\u64cd\u4f5c\u548c\u6d1e\u5bdf cert-manager \u6d3b\u52a8\uff0ccert-manager \u4ee5Prometheus\u683c\u5f0f\u4ece\u63a7\u5236\u5668\u7ec4\u4ef6\u516c\u5f00\u5ea6\u91cf\u6807\u51c6\u3002 \u8fd9\u4e9b\u53ef\u4ee5\u5728\u63a7\u5236\u5668\u7ec4\u4ef6\u914d\u7f6e\u7684 HTTP \u7aef\u53e3\u7684\u6807\u51c6<code>/metrics</code>\u8def\u5f84\u4e0b\u4f7f\u7528\u3002</p>"},{"location":"usage/prometheus-metrics/#_1","title":"\u522e\u6307\u6807","text":"<p>\u5982\u4f55\u83b7\u53d6\u5ea6\u91cf\u6807\u51c6\u53d6\u51b3\u4e8e\u60a8\u5982\u4f55\u64cd\u4f5c Prometheus \u670d\u52a1\u5668\u3002 \u8fd9\u4e9b\u4f8b\u5b50\u5047\u8bbePrometheus Operator\u88ab\u7528\u6765\u8fd0\u884c Prometheus\uff0c\u5e76\u914d\u7f6e Pod \u6216\u670d\u52a1\u76d1\u89c6\u5668 CRDs\u3002</p>"},{"location":"usage/prometheus-metrics/#helm","title":"Helm","text":"<p>If you're deploying cert-manager with helm, a <code>ServiceMonitor</code> resource can be configured. This configuration should enable metric scraping, and the configuration can be further tweaked as described in the Helm configuration documentation.</p> <pre><code>prometheus:\nenabled: true\nservicemonitor:\nenabled: true\n</code></pre>"},{"location":"usage/prometheus-metrics/#manifests","title":"\u5e38\u89c4 Manifests","text":"<p>If you're not using helm to deploy cert-manager and instead using the provided regular YAML manifests, this example <code>PodMonitor</code> and deployment patch should be all you need to start ingesting cert-manager metrics.</p> <ol> <li>Apply the following patch to your cert-manager deployment</li> </ol> <pre><code>spec:\ntemplate:\nspec:\ncontainers:\n- name: cert-manager-controller\nports:\n- containerPort: 9402\nname: http\nprotocol: TCP\n</code></pre> <ol> <li>Create the following <code>PodMonitor</code></li> </ol> <pre><code>apiVersion: monitoring.coreos.com/v1\nkind: PodMonitor\nmetadata:\nname: cert-manager\nnamespace: cert-manager\nlabels:\napp: cert-manager\napp.kubernetes.io/name: cert-manager\napp.kubernetes.io/instance: cert-manager\napp.kubernetes.io/component: \"controller\"\nspec:\njobLabel: app.kubernetes.io/name\nselector:\nmatchLabels:\napp: cert-manager\napp.kubernetes.io/name: cert-manager\napp.kubernetes.io/instance: cert-manager\napp.kubernetes.io/component: \"controller\"\npodMetricsEndpoints:\n- port: http\nhonorLabels: true\n</code></pre>"},{"location":"usage/prometheus-metrics/#mixin","title":"\u76d1\u63a7 Mixin","text":"<p>Monitoring mixins are a way to bundle common alerts, rules, and dashboards for an application in a configurable and extensible way, using the Jsonnet data templating language. A cert-manager monitoring mixin can be found here https://gitlab.com/uneeq-oss/cert-manager-mixin. Documentation on usage can be found with the <code>cert-manager-mixin</code> project.</p>"}]}